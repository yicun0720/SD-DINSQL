[
  {
    "id": 0,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM singer",
        "SELECT COUNT(Singer_ID) FROM singer",
        "SELECT COUNT(DISTINCT Singer_ID) FROM singer",
        "SELECT COUNT(1) FROM singer",
        "SELECT COUNT(DISTINCT Name) FROM singer",
        "SELECT COUNT(*) AS TotalSingers FROM singer",
        "SELECT COUNT(Singer_ID) AS NumberOfSingers FROM singer",
        "SELECT COUNT(DISTINCT Singer_ID) AS UniqueSingers FROM singer",
        "SELECT COUNT(*) FROM (SELECT DISTINCT Singer_ID FROM singer) AS UniqueSingerCount",
        "SELECT COUNT(DISTINCT Name) AS CountOfUniqueNames FROM singer"
      ]
    ]
  },
  {
    "id": 1,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM singer",
        "SELECT COUNT(Singer_ID) FROM singer",
        "SELECT COUNT(*) AS TotalSingers FROM singer",
        "SELECT COUNT(Singer_ID) AS TotalSingers FROM singer",
        "SELECT COUNT(1) FROM singer",
        "SELECT COUNT(DISTINCT Singer_ID) FROM singer",
        "SELECT COUNT(DISTINCT Name) FROM singer",
        "SELECT COUNT(*) FROM singer GROUP BY Singer_ID",
        "SELECT COUNT(*) FROM singer WHERE Singer_ID IS NOT NULL",
        "SELECT COUNT(*) FROM singer WHERE Name IS NOT NULL"
      ]
    ]
  },
  {
    "id": 2,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT Name, Country, Age FROM singer ORDER BY Age DESC, Singer_ID ASC",
        "SELECT Name, Country, Age FROM singer ORDER BY Age DESC, Singer_ID",
        "SELECT Name, Country, Age FROM singer ORDER BY Age DESC, Singer_ID ASCENDING",
        "SELECT Name, Country, Age FROM singer ORDER BY Age DESCENDING, Singer_ID ASCENDING",
        "SELECT Name, Country, Age FROM singer ORDER BY Age DESCENDING, Singer_ID ASC",
        "SELECT Name, Country, Age FROM singer ORDER BY Age DESCENDING, Singer_ID",
        "SELECT Name, Country, Age FROM singer ORDER BY Age DESC, Singer_ID ASCENDING",
        "SELECT Name, Country, Age FROM singer ORDER BY Age DESC, Singer_ID ASC",
        "SELECT Name, Country, Age FROM singer ORDER BY Age DESC, Singer_ID",
        "SELECT Name, Country, Age FROM singer ORDER BY Age DESC, Singer_ID ASC"
      ]
    ]
  },
  {
    "id": 3,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT Name, Country, Age FROM singer ORDER BY Age DESC, Singer_ID ASC",
        "SELECT Name, Country, Age FROM singer ORDER BY Age DESC, Singer_ID",
        "SELECT s.Name, s.Country, s.Age FROM singer s ORDER BY s.Age DESC, s.Singer_ID ASC",
        "SELECT Name, Country, Age FROM singer ORDER BY Age DESCENDING, Singer_ID ASCENDING",
        "SELECT Name, Country, Age FROM singer ORDER BY Age DESC, Singer_ID ASCENDING",
        "SELECT Name AS SingerName, Country AS SingerCountry, Age AS SingerAge FROM singer ORDER BY Age DESC, Singer_ID ASC",
        "SELECT Name, Country, Age FROM singer ORDER BY Age DESC, Singer_ID ASCENDING",
        "SELECT Name, Country, Age FROM singer ORDER BY Age DESC, Singer_ID",
        "SELECT Name, Country, Age FROM singer ORDER BY Age DESC, Singer_ID ASC",
        "SELECT Name, Country, Age FROM singer ORDER BY Age DESC, Singer_ID ASC"
      ]
    ]
  },
  {
    "id": 4,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France'",
        "SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'",
        "SELECT AVG(singer.Age) AS Average, MIN(singer.Age) AS Minimum, MAX(singer.Age) AS Maximum FROM singer WHERE singer.Country = 'France'",
        "SELECT average(Age), minimum(Age), maximum(Age) FROM singer WHERE Country = 'France'",
        "SELECT AVG(Age) average_age, MIN(Age) min_age, MAX(Age) max_age FROM singer WHERE Country = 'France'",
        "SELECT AVG(Age) AS AverageAge, MIN(Age) AS MinAge, MAX(Age) AS MaxAge FROM singer WHERE Country = 'France' GROUP BY Country",
        "SELECT Country, AVG(Age) AS Avg_Age, MIN(Age) AS Min_Age, MAX(Age) AS Max_Age FROM singer WHERE Country = 'France' GROUP BY Country",
        "SELECT Country, AVG(Age), MIN(Age), MAX(Age) FROM singer GROUP BY Country HAVING Country = 'France'",
        "SELECT 'France' AS Country, AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France'",
        "SELECT AVG(Age) AS AvgAge, MIN(Age) AS MinAge, MAX(Age) AS MaxAge FROM singer WHERE Country = 'France' GROUP BY Country"
      ]
    ]
  },
  {
    "id": 5,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'French'",
        "SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'French'",
        "SELECT AVG(singer.Age) AS Average, MIN(singer.Age) AS Minimum, MAX(singer.Age) AS Maximum FROM singer WHERE singer.Country = 'French'",
        "SELECT AVG(Age) average_age, MIN(Age) minimum_age, MAX(Age) maximum_age FROM singer WHERE Country = 'French'",
        "SELECT Country, AVG(Age) AS Avg_Age, MIN(Age) AS Min_Age, MAX(Age) AS Max_Age FROM singer WHERE Country = 'French' GROUP BY Country",
        "SELECT Country, AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'French' GROUP BY Country",
        "SELECT 'French' AS Country, AVG(Age) AS Average_Age, MIN(Age) AS Min_Age, MAX(Age) AS Max_Age FROM singer WHERE Country = 'French'",
        "SELECT AVG(Age) AS Average, MIN(Age) AS Minimum, MAX(Age) AS Maximum FROM singer WHERE Country = 'French' GROUP BY Country",
        "SELECT Country, AVG(Age) average_age, MIN(Age) minimum_age, MAX(Age) maximum_age FROM singer WHERE Country = 'French' GROUP BY Country",
        "SELECT AVG(Age) AS Average_Age, MIN(Age) AS Min_Age, MAX(Age) AS Max_Age FROM singer WHERE Country = 'French' GROUP BY Country"
      ]
    ]
  },
  {
    "id": 6,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)",
        "SELECT s.Name, s.Song_release_year FROM singer s WHERE s.Age = (SELECT MIN(Age) FROM singer)",
        "SELECT Name, Song_release_year FROM singer ORDER BY Age ASC LIMIT 1",
        "SELECT Name, Song_release_year FROM singer WHERE Age IN (SELECT MIN(Age) FROM singer)",
        "SELECT s.Name, s.Song_release_year FROM singer s ORDER BY s.Age ASC FETCH FIRST ROW ONLY",
        "SELECT Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer GROUP BY Age)",
        "SELECT TOP 1 Name, Song_release_year FROM singer ORDER BY Age",
        "SELECT Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer) LIMIT 1",
        "SELECT s.Name, s.Song_release_year FROM singer s WHERE s.Age = (SELECT MIN(Age) FROM singer s)",
        "SELECT Name, Song_release_year FROM (SELECT Name, Song_release_year, Age, RANK() OVER (ORDER BY Age ASC) AS rank FROM singer) WHERE rank = 1"
      ]
    ]
  },
  {
    "id": 7,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT Song_Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)",
        "SELECT s.Song_Name, s.Song_release_year FROM singer s WHERE s.Age = (SELECT MIN(Age) FROM singer)",
        "SELECT Song_Name, Song_release_year FROM singer WHERE Age IN (SELECT MIN(Age) FROM singer)",
        "SELECT s.Song_Name, s.Song_release_year FROM singer s JOIN (SELECT MIN(Age) AS MinAge FROM singer) m ON s.Age = m.MinAge",
        "SELECT Song_Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer s)",
        "SELECT s.Song_Name, s.Song_release_year FROM singer s WHERE s.Age = (SELECT MIN(Age) FROM singer s2)",
        "SELECT Song_Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer GROUP BY Age)",
        "SELECT s.Song_Name, s.Song_release_year FROM singer s WHERE s.Age = (SELECT MIN(Age) FROM singer GROUP BY Age)",
        "SELECT Song_Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer s WHERE s.Age IS NOT NULL)",
        "SELECT s.Song_Name, s.Song_release_year FROM singer s WHERE s.Age = (SELECT MIN(Age) FROM singer s WHERE s.Age IS NOT NULL)"
      ]
    ]
  },
  {
    "id": 8,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT DISTINCT Country FROM singer WHERE Age > 20",
        "SELECT UNIQUE Country FROM singer WHERE Age > 20",
        "SELECT Country FROM singer WHERE Age > 20 GROUP BY Country",
        "SELECT Country FROM singer GROUP BY Country HAVING MIN(Age) > 20",
        "SELECT DISTINCT Country FROM singer WHERE Age > 20 ORDER BY Country",
        "SELECT DISTINCT s.Country FROM singer s WHERE s.Age > 20",
        "SELECT DISTINCT Country FROM singer s WHERE s.Age > 20",
        "SELECT DISTINCT Country FROM (SELECT Country, Age FROM singer WHERE Age > 20) AS subquery",
        "SELECT DISTINCT Country FROM singer WHERE Age > 20 AND Country IS NOT NULL",
        "SELECT DISTINCT Country FROM singer WHERE Age > 20 AND Country <> ''"
      ]
    ]
  },
  {
    "id": 9,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT DISTINCT Country FROM singer WHERE Age > 20",
        "SELECT Country FROM singer WHERE Age > 20 GROUP BY Country",
        "SELECT DISTINCT Country FROM singer WHERE Age > 20 ORDER BY Country",
        "SELECT Country FROM singer GROUP BY Country HAVING MIN(Age) > 20",
        "SELECT DISTINCT Country FROM singer WHERE Age > 20 ORDER BY Country ASC",
        "SELECT Country FROM singer WHERE Age > 20 DISTINCT",
        "SELECT DISTINCT Country FROM singer WHERE Age > 20 ORDER BY Country DESC",
        "SELECT Country FROM singer WHERE Age > 20 GROUP BY Country ORDER BY Country",
        "SELECT DISTINCT Country FROM singer WHERE Age > 20 ORDER BY Country ASC LIMIT 100",
        "SELECT DISTINCT Country FROM singer WHERE Age > 20 ORDER BY Country DESC LIMIT 100"
      ]
    ]
  },
  {
    "id": 10,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT Country, COUNT(Singer_ID) AS NumberOfSingers FROM singer GROUP BY Country",
        "SELECT Country, COUNT(*) AS NumberOfSingers FROM singer GROUP BY Country",
        "SELECT Country, COUNT(Singer_ID) FROM singer GROUP BY Country",
        "SELECT s.Country, COUNT(s.Singer_ID) AS NumberOfSingers FROM singer s GROUP BY s.Country",
        "SELECT Country, COUNT(Singer_ID) AS NumberOfSingers FROM singer GROUP BY Country ORDER BY Country",
        "SELECT Country, COUNT(Singer_ID) AS NumberOfSingers FROM singer GROUP BY Country ORDER BY COUNT(Singer_ID) DESC",
        "SELECT s.Country, COUNT(*) FROM singer s GROUP BY s.Country",
        "SELECT Country, COUNT(Singer_ID) AS NumberOfSingers FROM singer GROUP BY Country HAVING COUNT(Singer_ID) > 0",
        "SELECT Country, COUNT(DISTINCT Singer_ID) AS NumberOfSingers FROM singer GROUP BY Country",
        "SELECT Country, COUNT(Singer_ID) AS NumberOfSingers FROM singer WHERE Country IS NOT NULL GROUP BY Country"
      ]
    ]
  },
  {
    "id": 11,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT Country, COUNT(*) AS NumberOfSingers FROM singer GROUP BY Country",
        "SELECT Country, COUNT(Singer_ID) AS SingerCount FROM singer GROUP BY Country",
        "SELECT Country, COUNT(*) FROM singer GROUP BY Country",
        "SELECT Country, COUNT(Singer_ID) FROM singer GROUP BY Country",
        "SELECT Country, COUNT(DISTINCT Singer_ID) AS TotalSingers FROM singer GROUP BY Country",
        "SELECT Country, COUNT(DISTINCT Name) AS TotalSingers FROM singer GROUP BY Country",
        "SELECT Country, COUNT(*) AS Total FROM singer GROUP BY Country ORDER BY Country",
        "SELECT Country, COUNT(Singer_ID) AS Total FROM singer GROUP BY Country ORDER BY Total DESC",
        "SELECT Country, COUNT(*) AS CountOfSingers FROM singer GROUP BY Country ORDER BY CountOfSingers DESC",
        "SELECT Country, COUNT(DISTINCT Singer_ID) FROM singer GROUP BY Country ORDER BY Country ASC"
      ]
    ]
  },
  {
    "id": 12,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT DISTINCT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)",
        "SELECT DISTINCT s.Song_Name FROM singer s WHERE s.Age > (SELECT AVG(Age) FROM singer)",
        "SELECT Song_Name FROM singer GROUP BY Song_Name HAVING Age > AVG(Age) OVER ()",
        "SELECT DISTINCT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer s)",
        "SELECT DISTINCT s.Song_Name FROM singer s WHERE s.Age > (SELECT AVG(s2.Age) FROM singer s2)",
        "SELECT Song_Name FROM (SELECT Song_Name, Age FROM singer) AS sub WHERE Age > (SELECT AVG(Age) FROM singer)",
        "SELECT DISTINCT Song_Name FROM singer s1 WHERE s1.Age > (SELECT AVG(s2.Age) FROM singer s2 WHERE s1.Singer_ID = s2.Singer_ID)",
        "SELECT DISTINCT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer WHERE Singer_ID = singer.Singer_ID)",
        "SELECT DISTINCT Song_Name FROM singer s WHERE s.Age > (SELECT AVG(Age) FROM singer WHERE Singer_ID = s.Singer_ID)",
        "SELECT DISTINCT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer GROUP BY Singer_ID)"
      ]
    ]
  },
  {
    "id": 13,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT DISTINCT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)",
        "SELECT DISTINCT s.Song_Name FROM singer s WHERE s.Age > (SELECT AVG(Age) FROM singer)",
        "SELECT Song_Name FROM singer GROUP BY Song_Name HAVING Age > AVG(Age)",
        "SELECT DISTINCT s.Song_Name FROM singer s WHERE s.Age > (SELECT AVG(s2.Age) FROM singer s2)",
        "SELECT DISTINCT Song_Name FROM singer WHERE Age > (SELECT AVG(s.Age) FROM singer s)",
        "SELECT DISTINCT Song_Name FROM singer s1 WHERE s1.Age > (SELECT AVG(s2.Age) FROM singer s2)",
        "SELECT Song_Name FROM (SELECT DISTINCT Song_Name, Age FROM singer) AS UniqueSongs WHERE Age > (SELECT AVG(Age) FROM singer)",
        "SELECT DISTINCT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer s WHERE s.Singer_ID = singer.Singer_ID)",
        "SELECT DISTINCT Song_Name FROM singer s WHERE s.Age > (SELECT AVG(Age) FROM singer WHERE Singer_ID = s.Singer_ID)",
        "SELECT DISTINCT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer WHERE Singer_ID = singer.Singer_ID)"
      ]
    ]
  },
  {
    "id": 14,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000",
        "SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity >= 5000 AND stadium.Capacity <= 10000",
        "SELECT s.Location, s.Name FROM stadium s WHERE s.Capacity >= 5000 AND s.Capacity <= 10000",
        "SELECT Location, Name FROM stadium WHERE Capacity >= 5000 AND Capacity <= 10000",
        "SELECT Name, Location FROM stadium WHERE Capacity > 4999 AND Capacity < 10001",
        "SELECT Location AS StadiumLocation, Name AS StadiumName FROM stadium WHERE Capacity BETWEEN 5000 AND 10000",
        "SELECT Location, Name FROM stadium WHERE Capacity > 4999 AND Capacity < 10001",
        "SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000",
        "SELECT s.Location, s.Name FROM stadium AS s WHERE s.Capacity BETWEEN 5000 AND 10000",
        "SELECT Location, Name FROM stadium WHERE Capacity > 4999 AND Capacity < 10001 ORDER BY Name"
      ]
    ]
  },
  {
    "id": 15,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000",
        "SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity >= 5000 AND stadium.Capacity <= 10000",
        "SELECT s.Location, s.Name FROM stadium s WHERE s.Capacity >= 5000 AND s.Capacity <= 10000",
        "SELECT Location, Name FROM stadium WHERE Capacity >= 5000 AND Capacity <= 10000",
        "SELECT Name, Location FROM stadium WHERE Capacity > 4999 AND Capacity < 10001",
        "SELECT Location AS StationLocation, Name AS StationName FROM stadium WHERE Capacity BETWEEN 5000 AND 10000",
        "SELECT Location, Name FROM stadium WHERE Capacity > 4999 AND Capacity < 10001",
        "SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000",
        "SELECT s.Location, s.Name FROM stadium AS s WHERE s.Capacity BETWEEN 5000 AND 10000",
        "SELECT Location, Name FROM stadium WHERE Capacity > 4999 AND Capacity < 10001 ORDER BY Capacity"
      ]
    ]
  },
  {
    "id": 16,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT MAX(Capacity) AS MaximumCapacity, AVG(Capacity) AS AverageCapacity FROM stadium",
        "SELECT MAX(Capacity), AVG(Capacity) FROM stadium",
        "SELECT MAX(stadium.Capacity) AS MaxCapacity, AVG(stadium.Capacity) AS AvgCapacity FROM stadium",
        "SELECT MAX(stadium.Capacity) AS 'Maximum Capacity', AVG(stadium.Capacity) AS 'Average Capacity' FROM stadium",
        "SELECT MAX(Capacity) AS 'Max Capacity', AVG(Capacity) AS 'Mean Capacity' FROM stadium",
        "SELECT MAX(stadium.Capacity) AS Maximum, AVG(stadium.Capacity) AS Average FROM stadium",
        "SELECT MAX(Capacity) AS Max_Cap, AVG(Capacity) AS Avg_Cap FROM stadium",
        "SELECT MAX(stadium.Capacity) AS 'Max Capacity', AVG(stadium.Capacity) AS 'Average Capacity' FROM stadium",
        "SELECT MAX(Capacity) AS 'Maximum Capacity', AVG(Capacity) AS 'Mean Average Capacity' FROM stadium",
        "SELECT MAX(stadium.Capacity) AS 'Max Capacity', AVG(stadium.Capacity) AS 'Mean Avg Capacity' FROM stadium"
      ]
    ]
  },
  {
    "id": 17,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT MAX(Capacity) AS MaximumCapacity, AVG(Average) AS MeanAverageCapacity FROM stadium",
        "SELECT MAX(stadium.Capacity) AS MaxCapacity, AVG(stadium.Average) AS AvgCapacity FROM stadium",
        "SELECT MAX(Capacity), AVG(Average) FROM stadium",
        "SELECT MAX(stadium.Capacity), AVG(stadium.Average) FROM stadium",
        "SELECT MAX(Capacity) AS 'Maximum Capacity', AVG(Average) AS 'Average Capacity' FROM stadium",
        "SELECT MAX(stadium.Capacity) AS 'Max Capacity', AVG(stadium.Average) AS 'Mean Average' FROM stadium",
        "SELECT MAX(Capacity) Maximum_Capacity, AVG(Average) Average_Capacity FROM stadium",
        "SELECT MAX(stadium.Capacity) Max_Capacity, AVG(stadium.Average) Avg_Capacity FROM stadium",
        "SELECT MAX(Capacity) AS MaxCapacity, AVG(Average) AS AverageCapacity FROM stadium",
        "SELECT MAX(stadium.Capacity) AS MaximumCapacity, AVG(stadium.Average) AS MeanAverageCapacity FROM stadium"
      ]
    ]
  },
  {
    "id": 18,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT Name, Capacity FROM stadium WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Average DESC, Stadium_ID ASC LIMIT 1)",
        "SELECT s.Name, s.Capacity FROM stadium s WHERE s.Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Average DESC, Stadium_ID ASC LIMIT 1)",
        "SELECT Name, Capacity FROM stadium WHERE Stadium_ID IN (SELECT Stadium_ID FROM stadium ORDER BY Average DESC, Stadium_ID ASC LIMIT 1)",
        "SELECT Name, Capacity FROM stadium ORDER BY Average DESC, Stadium_ID ASC LIMIT 1",
        "SELECT top 1 Name, Capacity FROM stadium ORDER BY Average DESC, Stadium_ID",
        "SELECT Name, Capacity FROM stadium WHERE Stadium_ID = (SELECT TOP 1 Stadium_ID FROM stadium ORDER BY Average DESC, Stadium_ID ASC)",
        "SELECT Name, Capacity FROM stadium s JOIN (SELECT Stadium_ID FROM stadium ORDER BY Average DESC, Stadium_ID ASC LIMIT 1) t ON s.Stadium_ID = t.Stadium_ID",
        "SELECT Name, Capacity FROM (SELECT Name, Capacity, ROW_NUMBER() OVER (ORDER BY Average DESC, Stadium_ID ASC) as rn FROM stadium) WHERE rn = 1",
        "SELECT Name, Capacity FROM stadium WHERE Stadium_ID = (SELECT MIN(Stadium_ID) FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium))",
        "SELECT Name, Capacity FROM stadium WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Average DESC, Stadium_ID ASC FETCH FIRST 1 ROWS ONLY)"
      ]
    ]
  },
  {
    "id": 19,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)",
        "SELECT s.Name, s.Capacity FROM stadium s ORDER BY s.Average DESC LIMIT 1",
        "SELECT Name, Capacity FROM stadium WHERE Average IN (SELECT MAX(Average) FROM stadium)",
        "SELECT top 1 Name, Capacity FROM stadium ORDER BY Average DESC",
        "SELECT Name, Capacity FROM stadium s WHERE s.Average = (SELECT MAX(Average) FROM stadium s)",
        "SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium LIMIT 1)",
        "SELECT Name, Capacity FROM (SELECT Name, Capacity, RANK() OVER (ORDER BY Average DESC) as rank FROM stadium) WHERE rank = 1",
        "SELECT Name, Capacity FROM stadium WHERE Average >= ALL (SELECT Average FROM stadium)",
        "SELECT Name, Capacity FROM stadium ORDER BY Average DESC FETCH FIRST 1 ROWS ONLY",
        "SELECT Name, Capacity FROM stadium s WHERE s.Average >= ALL (SELECT Average FROM stadium)"
      ]
    ]
  },
  {
    "id": 20,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM concert WHERE Year IN (2014, 2015)",
        "SELECT COUNT(concert_ID) FROM concert WHERE Year = 2014 OR Year = 2015",
        "SELECT COUNT(*) AS TotalConcerts FROM concert WHERE Year BETWEEN 2014 AND 2015",
        "SELECT COUNT(*) FROM concert WHERE Year >= 2014 AND Year <= 2015",
        "SELECT COUNT(DISTINCT concert_ID) FROM concert WHERE Year IN (2014, 2015)",
        "SELECT COUNT(*) FROM concert WHERE Year = 2014 UNION ALL SELECT COUNT(*) FROM concert WHERE Year = 2015",
        "SELECT SUM(CASE WHEN Year = 2014 OR Year = 2015 THEN 1 ELSE 0 END) FROM concert",
        "SELECT COUNT(*) FROM concert WHERE Year = '2014' OR Year = '2015'",
        "SELECT COUNT(*) FROM concert WHERE Year IN ('2014', '2015')",
        "SELECT COUNT(*) FROM concert WHERE Year = 2014 UNION SELECT COUNT(*) FROM concert WHERE Year = 2015"
      ]
    ]
  },
  {
    "id": 21,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM concert WHERE Year IN (2014, 2015)",
        "SELECT COUNT(concert_ID) FROM concert WHERE Year = 2014 OR Year = 2015",
        "SELECT COUNT(*) AS TotalConcerts FROM concert WHERE Year BETWEEN 2014 AND 2015",
        "SELECT COUNT(*) FROM concert WHERE Year >= 2014 AND Year <= 2015",
        "SELECT COUNT(DISTINCT concert_ID) FROM concert WHERE Year IN (2014, 2015)",
        "SELECT COUNT(*) FROM concert WHERE Year = 2014 UNION ALL SELECT COUNT(*) FROM concert WHERE Year = 2015",
        "SELECT SUM(CASE WHEN Year = 2014 THEN 1 WHEN Year = 2015 THEN 1 ELSE 0 END) FROM concert",
        "SELECT COUNT(*) FROM concert WHERE Year = '2014' OR Year = '2015'",
        "SELECT COUNT(*) FROM concert WHERE Year IN ('2014', '2015')",
        "SELECT COUNT(*) FROM concert WHERE Year = 2014 UNION SELECT COUNT(*) FROM concert WHERE Year = 2015"
      ]
    ]
  },
  {
    "id": 22,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT s.Name, COUNT(c.concert_ID) AS NumberOfConcerts FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Name",
        "SELECT Name, COUNT(concert_ID) FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY Name",
        "SELECT stadium.Name, COUNT(*) AS ConcertCount FROM stadium INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name",
        "SELECT Name, COUNT(concert_ID) AS TotalConcerts FROM stadium, concert WHERE stadium.Stadium_ID = concert.Stadium_ID GROUP BY Name",
        "SELECT s.Name AS StadiumName, COUNT(c.concert_ID) AS Concerts FROM stadium s, concert c WHERE s.Stadium_ID = c.Stadium_ID GROUP BY s.Name",
        "SELECT Name, COUNT(concert_ID) FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY Name",
        "SELECT s.Name, COUNT(c.concert_ID) FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Name",
        "SELECT Name, COUNT(*) FROM stadium INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY Name",
        "SELECT s.Name AS Stadium, COUNT(c.concert_ID) AS NumOfConcerts FROM stadium s INNER JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Name",
        "SELECT Name, COUNT(concert_ID) AS ConcertCount FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Name"
      ]
    ]
  },
  {
    "id": 23,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT s.Stadium_ID, COUNT(c.concert_ID) AS NumberOfConcerts FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Stadium_ID",
        "SELECT Stadium_ID, COUNT(concert_ID) FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY Stadium_ID",
        "SELECT s.Stadium_ID, COUNT(*) AS ConcertCount FROM stadium s INNER JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Stadium_ID",
        "SELECT s.Stadium_ID, COUNT(c.concert_ID) FROM stadium s, concert c WHERE s.Stadium_ID = c.Stadium_ID GROUP BY s.Stadium_ID",
        "SELECT s.Stadium_ID AS ID, COUNT(c.concert_ID) AS TotalConcerts FROM stadium s LEFT OUTER JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Stadium_ID",
        "SELECT s.Stadium_ID, COUNT(c.concert_ID) AS Concerts FROM stadium AS s JOIN concert AS c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Stadium_ID",
        "SELECT s.Stadium_ID, COUNT(c.concert_ID) AS 'Number of Concerts' FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Stadium_ID",
        "SELECT s.Stadium_ID, COUNT(c.concert_ID) FROM stadium AS s LEFT JOIN concert AS c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Stadium_ID",
        "SELECT s.Stadium_ID, COUNT(c.concert_ID) AS Concert_Count FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Stadium_ID",
        "SELECT s.Stadium_ID, COUNT(c.concert_ID) AS Total_Concerts FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Stadium_ID"
      ]
    ]
  },
  {
    "id": 24,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT T1.Name, T1.Capacity FROM stadium AS T1 JOIN (SELECT Stadium_ID, COUNT(*) AS num_concerts FROM concert WHERE Year >= 2014 GROUP BY Stadium_ID) AS T2 ON T1.Stadium_ID = T2.Stadium_ID ORDER BY T2.num_concerts DESC LIMIT 1",
        "SELECT Name, Capacity FROM stadium WHERE Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year >= 2014 GROUP BY Stadium_ID ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT s.Name, s.Capacity FROM stadium s WHERE s.Stadium_ID = (SELECT c.Stadium_ID FROM concert c WHERE c.Year >= 2014 GROUP BY c.Stadium_ID ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT Name, Capacity FROM stadium WHERE Stadium_ID = (SELECT Stadium_ID FROM concert WHERE Year >= 2014 GROUP BY Stadium_ID HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM concert WHERE Year >= 2014 GROUP BY Stadium_ID) tmp))",
        "SELECT s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year >= 2014 GROUP BY s.Stadium_ID, s.Name, s.Capacity ORDER BY COUNT(c.concert_ID) DESC LIMIT 1",
        "SELECT Name, Capacity FROM stadium WHERE Stadium_ID = (SELECT TOP 1 Stadium_ID FROM concert WHERE Year >= 2014 GROUP BY Stadium_ID ORDER BY COUNT(*) DESC)",
        "SELECT s.Name, s.Capacity FROM stadium s INNER JOIN (SELECT Stadium_ID FROM concert WHERE Year >= 2014 GROUP BY Stadium_ID ORDER BY COUNT(*) DESC LIMIT 1) c ON s.Stadium_ID = c.Stadium_ID",
        "SELECT Name, Capacity FROM stadium WHERE Stadium_ID = (SELECT Stadium_ID FROM concert WHERE Year >= 2014 GROUP BY Stadium_ID ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY)",
        "SELECT s.Name, s.Capacity FROM stadium s, (SELECT Stadium_ID, COUNT(*) AS Concert_Count FROM concert WHERE Year >= 2014 GROUP BY Stadium_ID) AS c WHERE s.Stadium_ID = c.Stadium_ID ORDER BY c.Concert_Count DESC LIMIT 1",
        "SELECT Name, Capacity FROM stadium WHERE Stadium_ID = (SELECT Stadium_ID FROM (SELECT Stadium_ID, COUNT(*) AS Concerts FROM concert WHERE Year >= 2014 GROUP BY Stadium_ID) AS SubQuery ORDER BY Concerts DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 25,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT S.Name, S.Capacity FROM stadium S JOIN (SELECT Stadium_ID, COUNT(*) AS Concert_Count FROM concert WHERE Year > 2013 GROUP BY Stadium_ID) C ON S.Stadium_ID = C.Stadium_ID ORDER BY C.Concert_Count DESC LIMIT 1",
        "SELECT Name, Capacity FROM stadium WHERE Stadium_ID = (SELECT Stadium_ID FROM concert WHERE Year > 2013 GROUP BY Stadium_ID ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT stadium.Name, stadium.Capacity FROM stadium INNER JOIN (SELECT Stadium_ID FROM concert WHERE Year > 2013 GROUP BY Stadium_ID ORDER BY COUNT(*) DESC LIMIT 1) AS Most_Concerts ON stadium.Stadium_ID = Most_Concerts.Stadium_ID",
        "SELECT Name, Capacity FROM stadium WHERE Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year > 2013 GROUP BY Stadium_ID HAVING COUNT(*) = (SELECT MAX(concert_count) FROM (SELECT COUNT(*) AS concert_count FROM concert WHERE Year > 2013 GROUP BY Stadium_ID) AS Counts))",
        "SELECT Name, Capacity FROM stadium WHERE Stadium_ID = (SELECT Stadium_ID FROM concert WHERE Year > 2013 GROUP BY Stadium_ID HAVING COUNT(*) = MAX((SELECT COUNT(*) FROM concert WHERE Year > 2013 GROUP BY Stadium_ID)))",
        "SELECT TOP 1 S.Name, S.Capacity FROM stadium S JOIN concert C ON S.Stadium_ID = C.Stadium_ID WHERE C.Year > 2013 GROUP BY S.Stadium_ID, S.Name, S.Capacity ORDER BY COUNT(*) DESC",
        "SELECT Name, Capacity FROM stadium WHERE Stadium_ID = (SELECT TOP 1 Stadium_ID FROM concert WHERE Year > 2013 GROUP BY Stadium_ID ORDER BY COUNT(*) DESC)",
        "SELECT S.Name, S.Capacity FROM stadium S, (SELECT Stadium_ID, COUNT(*) AS Total_Concerts FROM concert WHERE Year > 2013 GROUP BY Stadium_ID) AS C WHERE S.Stadium_ID = C.Stadium_ID ORDER BY C.Total_Concerts DESC LIMIT 1",
        "SELECT Name, Capacity FROM stadium WHERE Stadium_ID = (SELECT Stadium_ID FROM concert WHERE Year > 2013 GROUP BY Stadium_ID ORDER BY COUNT(Stadium_ID) DESC LIMIT 1)",
        "SELECT S.Name, S.Capacity FROM stadium S JOIN (SELECT Stadium_ID, COUNT(Stadium_ID) AS Concerts FROM concert WHERE Year > 2013 GROUP BY Stadium_ID) AS C ON S.Stadium_ID = C.Stadium_ID ORDER BY C.Concerts DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 26,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT Year, COUNT(*) AS num_concerts FROM concert GROUP BY Year ORDER BY num_concerts DESC LIMIT 1",
        "SELECT Year FROM concert GROUP BY Year HAVING COUNT(*) = (SELECT MAX(c) FROM (SELECT COUNT(*) AS c FROM concert GROUP BY Year) AS counts)",
        "SELECT TOP 1 Year, COUNT(*) AS TotalConcerts FROM concert GROUP BY Year ORDER BY TotalConcerts DESC",
        "SELECT Year FROM (SELECT Year, COUNT(*) AS concert_count FROM concert GROUP BY Year ORDER BY concert_count DESC) AS subquery LIMIT 1",
        "SELECT Year, COUNT(concert_ID) AS NumberOfConcerts FROM concert GROUP BY Year ORDER BY NumberOfConcerts DESC FETCH FIRST ROW ONLY",
        "SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT Year, MAX(concert_count) FROM (SELECT Year, COUNT(*) AS concert_count FROM concert GROUP BY Year) AS YearlyConcerts",
        "SELECT Year FROM concert GROUP BY Year HAVING COUNT(concert_ID) = (SELECT MAX(Count) FROM (SELECT COUNT(concert_ID) AS Count FROM concert GROUP BY Year) AS MaxConcerts)",
        "SELECT Year, COUNT(*) FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(concert_ID) DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 27,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT Year, COUNT(*) AS TotalConcerts FROM concert GROUP BY Year HAVING TotalConcerts = (SELECT MAX(TotalConcerts) FROM (SELECT COUNT(*) AS TotalConcerts FROM concert GROUP BY Year) sub)",
        "SELECT Year FROM (SELECT Year, COUNT(*) AS ConcertCount FROM concert GROUP BY Year) AS YearlyConcerts WHERE ConcertCount = (SELECT MAX(ConcertCount) FROM (SELECT COUNT(*) AS ConcertCount FROM concert GROUP BY Year) sub)",
        "SELECT Year FROM concert GROUP BY Year HAVING COUNT(concert_ID) = (SELECT MAX(ConcertCount) FROM (SELECT COUNT(concert_ID) AS ConcertCount FROM concert GROUP BY Year) subquery)",
        "SELECT TOP 1 Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC",
        "SELECT Year FROM concert GROUP BY Year HAVING COUNT(*) = (SELECT MAX(ConcertCount) FROM (SELECT COUNT(*) AS ConcertCount FROM concert GROUP BY Year) sub)",
        "SELECT Year, COUNT(*) AS NumberOfConcerts FROM concert GROUP BY Year ORDER BY NumberOfConcerts DESC LIMIT 1",
        "SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(concert_ID) DESC FETCH FIRST 1 ROWS ONLY",
        "SELECT Year, COUNT(*) FROM concert GROUP BY Year ORDER BY COUNT(*) DESC FETCH FIRST ROW WITH TIES",
        "SELECT Year FROM concert GROUP BY Year HAVING COUNT(concert_ID) = (SELECT MAX(ConcertCount) FROM (SELECT COUNT(concert_ID) AS ConcertCount FROM concert GROUP BY Year) sub)"
      ]
    ]
  },
  {
    "id": 28,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)",
        "SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Stadium_ID IS NULL",
        "SELECT Name FROM stadium WHERE NOT EXISTS (SELECT 1 FROM concert WHERE Stadium_ID = stadium.Stadium_ID)",
        "SELECT stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN (SELECT concert.Stadium_ID FROM concert)",
        "SELECT Name FROM stadium s WHERE s.Stadium_ID NOT IN (SELECT c.Stadium_ID FROM concert c)",
        "SELECT s.Name FROM stadium s WHERE NOT EXISTS (SELECT NULL FROM concert c WHERE c.Stadium_ID = s.Stadium_ID)",
        "SELECT Name FROM stadium EXCEPT SELECT Name FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID",
        "SELECT Name FROM stadium s WHERE s.Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert)",
        "SELECT DISTINCT s.Name FROM stadium s LEFT OUTER JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Stadium_ID IS NULL",
        "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert WHERE Stadium_ID IS NOT NULL)"
      ]
    ]
  },
  {
    "id": 29,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)",
        "SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Stadium_ID IS NULL",
        "SELECT Name FROM stadium WHERE NOT EXISTS (SELECT 1 FROM concert WHERE Stadium_ID = stadium.Stadium_ID)",
        "SELECT Name FROM stadium s WHERE s.Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert)",
        "SELECT s.Name FROM stadium s WHERE NOT EXISTS (SELECT NULL FROM concert c WHERE c.Stadium_ID = s.Stadium_ID)",
        "SELECT Name FROM stadium EXCEPT SELECT Name FROM stadium, concert WHERE stadium.Stadium_ID = concert.Stadium_ID",
        "SELECT stadium.Name FROM stadium LEFT OUTER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Stadium_ID IS NULL",
        "SELECT Name FROM stadium s WHERE s.Stadium_ID NOT IN (SELECT c.Stadium_ID FROM concert c)",
        "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert WHERE Stadium_ID IS NOT NULL)",
        "SELECT s.Name FROM stadium s WHERE s.Stadium_ID NOT IN (SELECT c.Stadium_ID FROM concert c WHERE c.Stadium_ID IS NOT NULL)"
      ]
    ]
  },
  {
    "id": 30,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT Country FROM singer WHERE Country IN (SELECT Country FROM singer WHERE Age > 40) AND Country IN (SELECT Country FROM singer WHERE Age < 30)",
        "SELECT DISTINCT s1.Country FROM singer s1 JOIN singer s2 ON s1.Country = s2.Country WHERE s1.Age > 40 AND s2.Age < 30",
        "SELECT s.Country FROM singer s WHERE EXISTS (SELECT 1 FROM singer WHERE Age > 40 AND Country = s.Country) AND EXISTS (SELECT 1 FROM singer WHERE Age < 30 AND Country = s.Country)",
        "SELECT Country FROM (SELECT Country FROM singer WHERE Age > 40 INTERSECT SELECT Country FROM singer WHERE Age < 30) AS subquery",
        "WITH Older AS (SELECT Country FROM singer WHERE Age > 40), Younger AS (SELECT Country FROM singer WHERE Age < 30) SELECT Older.Country FROM Older JOIN Younger ON Older.Country = Younger.Country",
        "SELECT Country FROM singer WHERE Age > 40 INTERSECT SELECT Country FROM singer WHERE Age < 30",
        "SELECT DISTINCT Country FROM singer WHERE Age > 40 AND Country IN (SELECT Country FROM singer WHERE Age < 30)",
        "SELECT Country FROM singer GROUP BY Country HAVING MAX(Age) > 40 AND MIN(Age) < 30",
        "SELECT DISTINCT s.Country FROM singer s WHERE s.Age > 40 AND s.Country IN (SELECT Country FROM singer WHERE Age < 30)",
        "SELECT DISTINCT Country FROM singer a WHERE EXISTS (SELECT NULL FROM singer b WHERE b.Country = a.Country AND b.Age > 40) AND EXISTS (SELECT NULL FROM singer c WHERE c.Country = a.Country AND c.Age < 30)"
      ]
    ]
  },
  {
    "id": 31,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014)",
        "SELECT s.Name FROM stadium s WHERE s.Stadium_ID NOT IN (SELECT c.Stadium_ID FROM concert c WHERE c.Year = 2014)",
        "SELECT Name FROM stadium WHERE NOT EXISTS (SELECT 1 FROM concert WHERE Stadium_ID = stadium.Stadium_ID AND Year = 2014)",
        "SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID AND c.Year = 2014 WHERE c.Stadium_ID IS NULL",
        "SELECT Name FROM stadium EXCEPT SELECT Name FROM stadium, concert WHERE stadium.Stadium_ID = concert.Stadium_ID AND concert.Year = 2014",
        "SELECT Name FROM stadium s WHERE s.Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014)",
        "SELECT DISTINCT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014)",
        "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert WHERE Year = 2014)",
        "SELECT s.Name FROM stadium s WHERE NOT EXISTS (SELECT NULL FROM concert c WHERE c.Stadium_ID = s.Stadium_ID AND c.Year = 2014)",
        "SELECT Name FROM stadium s WHERE s.Stadium_ID NOT IN (SELECT c.Stadium_ID FROM concert c WHERE c.Year = 2014)"
      ]
    ]
  },
  {
    "id": 32,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014)",
        "SELECT s.Name FROM stadium s WHERE s.Stadium_ID NOT IN (SELECT c.Stadium_ID FROM concert c WHERE c.Year = 2014)",
        "SELECT Name FROM stadium WHERE NOT EXISTS (SELECT 1 FROM concert WHERE Stadium_ID = stadium.Stadium_ID AND Year = 2014)",
        "SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID AND c.Year = 2014 WHERE c.Stadium_ID IS NULL",
        "SELECT Name FROM stadium EXCEPT SELECT Name FROM stadium, concert WHERE stadium.Stadium_ID = concert.Stadium_ID AND concert.Year = 2014",
        "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert WHERE Year = 2014)",
        "SELECT Name FROM stadium s WHERE NOT EXISTS (SELECT NULL FROM concert c WHERE c.Stadium_ID = s.Stadium_ID AND c.Year = 2014)",
        "SELECT s.Name FROM stadium s WHERE s.Stadium_ID NOT IN (SELECT DISTINCT c.Stadium_ID FROM concert c WHERE c.Year = 2014)",
        "SELECT Name FROM stadium s WHERE s.Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014 GROUP BY Stadium_ID)",
        "SELECT s.Name FROM stadium s LEFT OUTER JOIN concert c ON s.Stadium_ID = c.Stadium_ID AND c.Year = 2014 WHERE c.Stadium_ID IS NULL"
      ]
    ]
  },
  {
    "id": 33,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT c.concert_Name, c.Theme, COUNT(s.Singer_ID) AS NumberOfSingers FROM concert c JOIN singer_in_concert s ON c.concert_ID = s.concert_ID GROUP BY c.concert_ID, c.concert_Name, c.Theme",
        "SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS SingerCount FROM concert INNER JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID, concert.concert_Name, concert.Theme",
        "SELECT concert_Name, Theme, (SELECT COUNT(*) FROM singer_in_concert WHERE singer_in_concert.concert_ID = concert.concert_ID) AS NumberOfSingers FROM concert",
        "SELECT c.concert_Name, c.Theme, (SELECT COUNT(*) FROM singer_in_concert WHERE concert_ID = c.concert_ID) AS NumberOfSingers FROM concert c",
        "SELECT c.concert_Name, c.Theme, COUNT(s.Singer_ID) FROM concert c LEFT JOIN singer_in_concert s ON c.concert_ID = s.concert_ID GROUP BY c.concert_ID",
        "SELECT concert_Name, Theme, COUNT(Singer_ID) FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID, concert_Name, Theme",
        "SELECT c.concert_Name, c.Theme, COUNT(s.Singer_ID) AS TotalSingers FROM concert c, singer_in_concert s WHERE c.concert_ID = s.concert_ID GROUP BY c.concert_ID, c.concert_Name, c.Theme",
        "SELECT c.concert_Name, c.Theme, COUNT(s.Singer_ID) AS SingerCount FROM concert c LEFT JOIN singer_in_concert s ON c.concert_ID = s.concert_ID GROUP BY c.concert_ID, c.concert_Name, c.Theme",
        "SELECT c.concert_Name, c.Theme, COUNT(s.Singer_ID) AS NumberOfSingers FROM concert c LEFT OUTER JOIN singer_in_concert s ON c.concert_ID = s.concert_ID GROUP BY c.concert_ID, c.concert_Name, c.Theme",
        "SELECT c.concert_Name, c.Theme, COUNT(DISTINCT s.Singer_ID) AS NumberOfSingers FROM concert c JOIN singer_in_concert s ON c.concert_ID = s.concert_ID GROUP BY c.concert_ID, c.concert_Name, c.Theme"
      ]
    ]
  },
  {
    "id": 34,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT c.concert_Name, c.Theme, COUNT(s.Singer_ID) AS NumberOfSingers FROM concert c JOIN singer_in_concert s ON c.concert_ID = s.concert_ID GROUP BY c.concert_ID, c.concert_Name, c.Theme",
        "SELECT concert_Name, Theme, COUNT(Singer_ID) AS SingerCount FROM concert INNER JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID, concert_Name, Theme",
        "SELECT c.concert_Name AS Name, c.Theme AS Theme, COUNT(s.Singer_ID) AS TotalSingers FROM concert c, singer_in_concert s WHERE c.concert_ID = s.concert_ID GROUP BY c.concert_ID, c.concert_Name, c.Theme",
        "SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) FROM concert LEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID, concert.concert_Name, concert.Theme",
        "SELECT c.concert_Name, c.Theme, COUNT(DISTINCT s.Singer_ID) AS NumberOfSingers FROM concert c LEFT JOIN singer_in_concert s ON c.concert_ID = s.concert_ID GROUP BY c.concert_ID, c.concert_Name, c.Theme",
        "SELECT concert_Name, Theme, COUNT(*) AS NumberOfSingers FROM concert JOIN singer_in_concert USING (concert_ID) GROUP BY concert_ID, concert_Name, Theme",
        "SELECT c.concert_Name, c.Theme, COUNT(s.Singer_ID) AS SingerCount FROM concert AS c JOIN singer_in_concert AS s ON c.concert_ID = s.concert_ID GROUP BY c.concert_ID, c.concert_Name, c.Theme ORDER BY c.concert_Name",
        "SELECT concert_Name, Theme, COUNT(singer_in_concert.Singer_ID) AS NumberOfSingers FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID, concert_Name, Theme ORDER BY Theme",
        "SELECT c.concert_Name, c.Theme, COUNT(s.Singer_ID) AS TotalSingers FROM concert c INNER JOIN singer_in_concert s ON c.concert_ID = s.concert_ID GROUP BY c.concert_ID, c.concert_Name, c.Theme HAVING COUNT(s.Singer_ID) > 0",
        "SELECT concert_Name, Theme, COUNT(singer_in_concert.Singer_ID) AS NumberOfSingers FROM concert c LEFT OUTER JOIN singer_in_concert s ON c.concert_ID = s.concert_ID GROUP BY c.concert_ID, c.concert_Name, c.Theme"
      ]
    ]
  },
  {
    "id": 35,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT s.Name, COUNT(c.concert_ID) AS Num_Concerts FROM singer s JOIN singer_in_concert c ON s.Singer_ID = c.Singer_ID GROUP BY s.Name",
        "SELECT Name, COUNT(concert_ID) AS Concert_Count FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY Name",
        "SELECT Name, COUNT(*) AS Total_Concerts FROM singer INNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY Name",
        "SELECT s.Name, COUNT(c.Singer_ID) AS Concerts_Participated FROM singer s, singer_in_concert c WHERE s.Singer_ID = c.Singer_ID GROUP BY s.Name",
        "SELECT Name, COUNT(concert_ID) FROM singer INNER JOIN singer_in_concert USING (Singer_ID) GROUP BY Name",
        "SELECT s.Name AS Singer_Name, COUNT(*) AS Number_of_Concerts FROM singer s LEFT JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID GROUP BY s.Name",
        "SELECT Name, COUNT(concert_ID) AS Concerts FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID GROUP BY Name ORDER BY Name",
        "SELECT s.Name, COUNT(c.concert_ID) AS Concert_Total FROM singer s LEFT JOIN singer_in_concert c ON s.Singer_ID = c.Singer_ID GROUP BY s.Name ORDER BY s.Name",
        "SELECT Name, COUNT(concert_ID) AS Total_Concerts_Attended FROM singer JOIN singer_in_concert ON Singer_ID GROUP BY Name",
        "SELECT s.Name, COUNT(c.Singer_ID) AS Total_Concerts FROM singer s LEFT JOIN singer_in_concert c ON s.Singer_ID = c.Singer_ID GROUP BY s.Name ORDER BY Name ASC"
      ]
    ]
  },
  {
    "id": 36,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT s.Name, COUNT(sic.concert_ID) AS NumberOfConcerts FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID GROUP BY s.Name",
        "SELECT Name, COUNT(concert_ID) AS ConcertCount FROM singer INNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY Name",
        "SELECT s.Name, COUNT(*) AS TotalConcerts FROM singer s, singer_in_concert sic WHERE s.Singer_ID = sic.Singer_ID GROUP BY s.Name",
        "SELECT Name, COUNT(concert_ID) FROM singer JOIN singer_in_concert USING (Singer_ID) GROUP BY Name",
        "SELECT s.Name AS SingerName, COUNT(sic.concert_ID) AS ConcertsParticipated FROM singer s LEFT JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID GROUP BY s.Name",
        "SELECT Name, COUNT(concert_ID) AS NumOfConcerts FROM singer s INNER JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID GROUP BY s.Name ORDER BY Name",
        "SELECT s.Name, COUNT(sic.Singer_ID) AS ConcertCount FROM singer s LEFT OUTER JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID GROUP BY s.Name",
        "SELECT Name, COUNT(concert_ID) AS TotalConcerts FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY Name HAVING COUNT(concert_ID) > 0",
        "SELECT s.Name, COUNT(sic.concert_ID) AS Concerts FROM singer s INNER JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID GROUP BY s.Name ORDER BY s.Name ASC",
        "SELECT Name, COUNT(concert_ID) AS ConcertsCount FROM singer s LEFT JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID GROUP BY Name"
      ]
    ]
  },
  {
    "id": 37,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT DISTINCT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = 2014",
        "SELECT DISTINCT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM singer_in_concert WHERE concert_ID IN (SELECT concert_ID FROM concert WHERE Year = 2014))",
        "SELECT DISTINCT s.Name FROM singer s, singer_in_concert sic, concert c WHERE s.Singer_ID = sic.Singer_ID AND sic.concert_ID = c.concert_ID AND c.Year = 2014",
        "SELECT DISTINCT Name FROM singer WHERE EXISTS (SELECT 1 FROM singer_in_concert JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE singer.Singer_ID = singer_in_concert.Singer_ID AND concert.Year = 2014)",
        "SELECT DISTINCT s.Name FROM singer s INNER JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID INNER JOIN concert c ON sic.concert_ID = c.concert_ID AND c.Year = 2014",
        "SELECT DISTINCT Name FROM singer s WHERE Singer_ID IN (SELECT sic.Singer_ID FROM singer_in_concert sic JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = 2014)",
        "SELECT DISTINCT s.Name FROM singer s WHERE EXISTS (SELECT * FROM singer_in_concert sic JOIN concert c ON sic.concert_ID = c.concert_ID WHERE sic.Singer_ID = s.Singer_ID AND c.Year = 2014)",
        "SELECT DISTINCT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID WHERE sic.concert_ID IN (SELECT concert_ID FROM concert WHERE Year = 2014)",
        "SELECT DISTINCT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM singer_in_concert WHERE concert_ID IN (SELECT concert_ID FROM concert WHERE Year = 2014))",
        "SELECT DISTINCT s.Name FROM singer s, concert c, singer_in_concert sic WHERE s.Singer_ID = sic.Singer_ID AND sic.concert_ID = c.concert_ID AND c.Year = 2014"
      ]
    ]
  },
  {
    "id": 38,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT DISTINCT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = 2014",
        "SELECT DISTINCT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM singer_in_concert WHERE concert_ID IN (SELECT concert_ID FROM concert WHERE Year = 2014))",
        "SELECT DISTINCT Name FROM singer INNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID INNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014",
        "SELECT DISTINCT s.Name FROM singer AS s, singer_in_concert AS sic, concert AS c WHERE s.Singer_ID = sic.Singer_ID AND sic.concert_ID = c.concert_ID AND c.Year = 2014",
        "SELECT DISTINCT Name FROM singer WHERE EXISTS (SELECT 1 FROM singer_in_concert JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE singer.Singer_ID = singer_in_concert.Singer_ID AND concert.Year = 2014)",
        "SELECT DISTINCT s.Name FROM singer s WHERE s.Singer_ID IN (SELECT sic.Singer_ID FROM singer_in_concert sic JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = 2014)",
        "SELECT DISTINCT Name FROM (SELECT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = 2014) AS DistinctSingers",
        "SELECT DISTINCT s.Name FROM singer s, concert c, singer_in_concert sic WHERE s.Singer_ID = sic.Singer_ID AND sic.concert_ID = c.concert_ID AND c.Year = 2014",
        "SELECT DISTINCT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM singer_in_concert WHERE concert_ID IN (SELECT concert_ID FROM concert WHERE Year = 2014))",
        "SELECT DISTINCT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = 2014 ORDER BY s.Name"
      ]
    ]
  },
  {
    "id": 39,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'",
        "SELECT s.Name, s.Country FROM singer s WHERE s.Song_Name LIKE '%Hey%'",
        "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'",
        "SELECT DISTINCT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'",
        "SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%'",
        "SELECT Name AS SingerName, Country AS SingerCountry FROM singer WHERE Song_Name LIKE '%Hey%'",
        "SELECT s.Name AS SingerName, s.Country AS SingerCountry FROM singer s WHERE s.Song_Name LIKE '%Hey%'",
        "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%' ORDER BY Name",
        "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%' GROUP BY Name, Country",
        "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%' ORDER BY Country, Name"
      ]
    ]
  },
  {
    "id": 40,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'",
        "SELECT s.Name, s.Country FROM singer s WHERE s.Song_Name LIKE '%Hey%'",
        "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%' ORDER BY Name",
        "SELECT DISTINCT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'",
        "SELECT Name AS SingerName, Country AS Origin FROM singer WHERE Song_Name LIKE '%Hey%'",
        "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%' GROUP BY Name, Country",
        "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%' ORDER BY Country, Name",
        "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%' AND Song_Name IS NOT NULL",
        "SELECT Name, Country FROM singer WHERE INSTR(Song_Name, 'Hey') > 0",
        "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%' ORDER BY Name DESC"
      ]
    ]
  },
  {
    "id": 41,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT s.Name, s.Location FROM stadium s WHERE s.Stadium_ID IN (SELECT c.Stadium_ID FROM concert c WHERE c.Year = 2014 INTERSECT SELECT c.Stadium_ID FROM concert c WHERE c.Year = 2015)",
        "SELECT Name, Location FROM stadium WHERE Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year = 2014) AND Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year = 2015)",
        "SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year = 2014 INTERSECT SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year = 2015",
        "SELECT DISTINCT s.Name, s.Location FROM stadium s, concert c WHERE s.Stadium_ID = c.Stadium_ID AND c.Year IN (2014, 2015) GROUP BY s.Stadium_ID HAVING COUNT(DISTINCT c.Year) = 2",
        "SELECT Name, Location FROM stadium WHERE Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year IN (2014, 2015) GROUP BY Stadium_ID HAVING COUNT(DISTINCT Year) = 2)",
        "SELECT s.Name, s.Location FROM stadium s WHERE EXISTS (SELECT 1 FROM concert c WHERE c.Stadium_ID = s.Stadium_ID AND c.Year = 2014) AND EXISTS (SELECT 1 FROM concert c WHERE c.Stadium_ID = s.Stadium_ID AND c.Year = 2015)",
        "SELECT s.Name, s.Location FROM stadium s WHERE s.Stadium_ID IN (SELECT c.Stadium_ID FROM concert c WHERE c.Year = 2014 UNION ALL SELECT c.Stadium_ID FROM concert c WHERE c.Year = 2015 HAVING COUNT(*) > 1)",
        "WITH ConcertYears AS (SELECT Stadium_ID FROM concert WHERE Year = 2014 UNION SELECT Stadium_ID FROM concert WHERE Year = 2015) SELECT s.Name, s.Location FROM stadium s JOIN ConcertYears cy ON s.Stadium_ID = cy.Stadium_ID",
        "SELECT s.Name, s.Location FROM stadium s WHERE s.Stadium_ID IN (SELECT c.Stadium_ID FROM concert c GROUP BY c.Stadium_ID HAVING SUM(CASE WHEN c.Year = 2014 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN c.Year = 2015 THEN 1 ELSE 0 END) > 0)",
        "SELECT s.Name, s.Location FROM stadium s WHERE (SELECT COUNT(DISTINCT c.Year) FROM concert c WHERE c.Stadium_ID = s.Stadium_ID AND c.Year IN (2014, 2015)) = 2"
      ]
    ]
  },
  {
    "id": 42,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT s.Name, s.Location FROM stadium s WHERE s.Stadium_ID IN (SELECT c.Stadium_ID FROM concert c WHERE c.Year = 2014) AND s.Stadium_ID IN (SELECT c.Stadium_ID FROM concert c WHERE c.Year = 2015)",
        "SELECT Name, Location FROM stadium WHERE Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year = 2014 INTERSECT SELECT Stadium_ID FROM concert WHERE Year = 2015)",
        "SELECT Name, Location FROM stadium WHERE EXISTS (SELECT 1 FROM concert WHERE Stadium_ID = stadium.Stadium_ID AND Year = 2014) AND EXISTS (SELECT 1 FROM concert WHERE Stadium_ID = stadium.Stadium_ID AND Year = 2015)",
        "SELECT s.Name, s.Location FROM stadium s JOIN concert c1 ON s.Stadium_ID = c1.Stadium_ID JOIN concert c2 ON s.Stadium_ID = c2.Stadium_ID WHERE c1.Year = 2014 AND c2.Year = 2015",
        "SELECT DISTINCT s.Name, s.Location FROM stadium s, concert c WHERE s.Stadium_ID = c.Stadium_ID AND c.Year IN (2014, 2015) GROUP BY s.Stadium_ID HAVING COUNT(DISTINCT c.Year) = 2",
        "SELECT s.Name, s.Location FROM stadium s WHERE s.Stadium_ID IN (SELECT c.Stadium_ID FROM concert c WHERE c.Year = 2014 UNION ALL SELECT c.Stadium_ID FROM concert c WHERE c.Year = 2015 HAVING COUNT(*) > 1)",
        "SELECT s.Name, s.Location FROM stadium s WHERE s.Stadium_ID IN (SELECT c.Stadium_ID FROM concert c GROUP BY c.Stadium_ID HAVING SUM(CASE WHEN c.Year IN (2014, 2015) THEN 1 ELSE 0 END) = 2)",
        "WITH ConcertYears AS (SELECT Stadium_ID FROM concert WHERE Year IN (2014, 2015) GROUP BY Stadium_ID HAVING COUNT(DISTINCT Year) = 2) SELECT s.Name, s.Location FROM stadium s JOIN ConcertYears cy ON s.Stadium_ID = cy.Stadium_ID",
        "SELECT s.Name, s.Location FROM stadium s WHERE (SELECT COUNT(DISTINCT c.Year) FROM concert c WHERE c.Stadium_ID = s.Stadium_ID AND c.Year IN (2014, 2015)) = 2",
        "SELECT s.Name, s.Location FROM stadium s WHERE s.Stadium_ID IN (SELECT c.Stadium_ID FROM concert c WHERE c.Year = 2014) AND s.Stadium_ID IN (SELECT c.Stadium_ID FROM concert c WHERE c.Year = 2015 GROUP BY c.Stadium_ID HAVING COUNT(*) = 1)"
      ]
    ]
  },
  {
    "id": 43,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT COUNT(concert_ID) FROM concert WHERE Stadium_ID IN (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium))",
        "SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)",
        "SELECT COUNT(concert_ID) FROM concert INNER JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE stadium.Capacity = (SELECT MAX(Capacity) FROM stadium)",
        "WITH HighestCapacity AS (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium)) SELECT COUNT(*) FROM concert WHERE Stadium_ID IN (SELECT Stadium_ID FROM HighestCapacity)",
        "SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT TOP 1 Stadium_ID FROM stadium ORDER BY Capacity DESC)",
        "SELECT COUNT(concert_ID) FROM concert, stadium WHERE concert.Stadium_ID = stadium.Stadium_ID AND stadium.Capacity = (SELECT MAX(Capacity) FROM stadium)",
        "SELECT COUNT(*) FROM concert WHERE Stadium_ID IN (SELECT Stadium_ID FROM stadium WHERE Capacity >= ALL (SELECT Capacity FROM stadium))",
        "SELECT COUNT(concert_ID) FROM concert INNER JOIN (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium)) AS MaxCapacityStadium ON concert.Stadium_ID = MaxCapacityStadium.Stadium_ID",
        "SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium))",
        "SELECT COUNT(concert_ID) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium) LIMIT 1)"
      ]
    ]
  },
  {
    "id": 44,
    "db_id": "concert_singer",
    "infer_predictions": [
      [
        "SELECT COUNT(concert_ID) FROM concert WHERE Stadium_ID IN (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium))",
        "SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)",
        "SELECT COUNT(concert_ID) FROM concert INNER JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE stadium.Capacity = (SELECT MAX(Capacity) FROM stadium)",
        "SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium))",
        "SELECT COUNT(concert_ID) FROM concert, stadium WHERE concert.Stadium_ID = stadium.Stadium_ID AND stadium.Capacity = (SELECT MAX(Capacity) FROM stadium)",
        "SELECT COUNT(*) FROM concert INNER JOIN (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium)) AS MaxCapacityStadium ON concert.Stadium_ID = MaxCapacityStadium.Stadium_ID",
        "SELECT COUNT(concert_ID) FROM concert WHERE Stadium_ID IN (SELECT Stadium_ID FROM stadium WHERE Capacity >= ALL (SELECT Capacity FROM stadium))",
        "SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT TOP 1 Stadium_ID FROM stadium ORDER BY Capacity DESC)",
        "SELECT COUNT(concert_ID) FROM concert INNER JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID AND stadium.Capacity = (SELECT MAX(Capacity) FROM stadium GROUP BY Stadium_ID)",
        "SELECT COUNT(*) FROM concert WHERE Stadium_ID IN (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium GROUP BY Stadium_ID))"
      ]
    ]
  },
  {
    "id": 45,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Pets WHERE weight > 10",
        "SELECT COUNT(PetID) FROM Pets WHERE weight > 10",
        "SELECT COUNT(*) AS NumberOfPets FROM Pets WHERE weight > 10",
        "SELECT COUNT(PetID) AS NumberOfPets FROM Pets WHERE weight > 10",
        "SELECT COUNT(*) FROM Pets WHERE weight > 10.0",
        "SELECT COUNT(PetID) FROM Pets WHERE weight > 10.0",
        "SELECT COUNT(*) AS NumberOfPets FROM Pets WHERE weight > 10.0",
        "SELECT COUNT(PetID) AS NumberOfPets FROM Pets WHERE weight > 10.0",
        "SELECT COUNT(*) FROM Pets WHERE weight > '10'",
        "SELECT COUNT(PetID) FROM Pets WHERE weight > '10'"
      ]
    ]
  },
  {
    "id": 46,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Pets WHERE weight > 10",
        "SELECT COUNT(PetID) FROM Pets WHERE weight > 10",
        "SELECT COUNT(*) AS NumberOfPets FROM Pets WHERE weight > 10",
        "SELECT COUNT(PetID) AS NumberOfPets FROM Pets WHERE weight > 10",
        "SELECT COUNT(*) FROM Pets WHERE weight > 10.0",
        "SELECT COUNT(PetID) FROM Pets WHERE weight > 10.0",
        "SELECT COUNT(*) AS NumberOfPets FROM Pets WHERE weight > 10.0",
        "SELECT COUNT(PetID) AS NumberOfPets FROM Pets WHERE weight > 10.0",
        "SELECT COUNT(*) FROM Pets WHERE weight > '10'",
        "SELECT COUNT(PetID) FROM Pets WHERE weight > '10'"
      ]
    ]
  },
  {
    "id": 47,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog') AND PetType = 'dog'",
        "SELECT P.weight FROM Pets P WHERE P.PetType = 'dog' AND P.pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog')",
        "SELECT weight FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog')",
        "SELECT P.weight FROM Pets P INNER JOIN (SELECT MIN(pet_age) AS MinAge FROM Pets WHERE PetType = 'dog') AS MinPets ON P.pet_age = MinPets.MinAge WHERE P.PetType = 'dog'",
        "SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1",
        "SELECT weight FROM Pets WHERE pet_age IN (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog') AND PetType = 'dog'",
        "SELECT TOP 1 weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age",
        "SELECT weight FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog') FETCH FIRST 1 ROWS ONLY",
        "SELECT weight FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog') LIMIT 1",
        "SELECT P.weight FROM Pets P WHERE P.PetType = 'dog' AND P.pet_age = (SELECT MIN(P2.pet_age) FROM Pets P2 WHERE P2.PetType = 'dog')"
      ]
    ]
  },
  {
    "id": 48,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT weight FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog')",
        "SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1",
        "SELECT P.weight FROM Pets P WHERE P.PetType = 'dog' AND P.pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog')",
        "SELECT weight FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog') GROUP BY weight",
        "SELECT TOP 1 weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age",
        "SELECT weight FROM Pets WHERE PetType = 'dog' AND pet_age IN (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog')",
        "SELECT weight FROM (SELECT weight, pet_age FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC) AS youngest_dogs LIMIT 1",
        "SELECT weight FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog') ORDER BY weight",
        "SELECT DISTINCT weight FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog')",
        "SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC FETCH FIRST ROW ONLY"
      ]
    ]
  },
  {
    "id": 49,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT PetType, MAX(weight) AS MaxWeight FROM Pets GROUP BY PetType",
        "SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType",
        "SELECT MAX(weight), PetType FROM Pets GROUP BY PetType",
        "SELECT PetType, MAX(weight) AS MaximumWeight FROM Pets GROUP BY PetType",
        "SELECT PetType, MAX(Pets.weight) AS MaxWeight FROM Pets GROUP BY PetType",
        "SELECT MAX(Pets.weight) AS MaxWeight, PetType FROM Pets GROUP BY PetType",
        "SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType ORDER BY PetType",
        "SELECT PetType, MAX(weight) AS Max_Weight FROM Pets GROUP BY PetType",
        "SELECT PetType, MAX(weight) AS MaxWeight FROM Pets GROUP BY PetType ORDER BY MaxWeight DESC",
        "SELECT PetType, MAX(weight) AS Maximum_Weight FROM Pets GROUP BY PetType"
      ]
    ]
  },
  {
    "id": 50,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT PetType, MAX(weight) AS MaxWeight FROM Pets GROUP BY PetType",
        "SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType",
        "SELECT MAX(weight), PetType FROM Pets GROUP BY PetType",
        "SELECT PetType, MAX(weight) AS MaximumWeight FROM Pets GROUP BY PetType",
        "SELECT PetType, MAX(weight) AS Max_Weight FROM Pets GROUP BY PetType",
        "SELECT PetType, MAX(weight) AS 'Maximum Weight' FROM Pets GROUP BY PetType",
        "SELECT PetType, MAX(weight) AS 'Max Weight' FROM Pets GROUP BY PetType",
        "SELECT PetType, MAX(Pets.weight) AS MaxWeight FROM Pets GROUP BY PetType",
        "SELECT PetType, MAX(Pets.weight) FROM Pets GROUP BY PetType",
        "SELECT MAX(Pets.weight) AS MaxWeight, PetType FROM Pets GROUP BY PetType"
      ]
    ]
  },
  {
    "id": 51,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT COUNT(Has_Pet.PetID) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20",
        "SELECT COUNT(DISTINCT Has_Pet.PetID) AS NumberOfPets FROM Has_Pet INNER JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20",
        "SELECT COUNT(*) FROM Has_Pet, Student WHERE Has_Pet.StuID = Student.StuID AND Student.Age > 20",
        "SELECT COUNT(PetID) FROM Has_Pet LEFT JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20",
        "SELECT COUNT(HP.PetID) FROM Has_Pet HP, Student S WHERE HP.StuID = S.StuID AND S.Age > 20",
        "SELECT COUNT(HP.PetID) FROM Has_Pet HP JOIN Student S ON HP.StuID = S.StuID WHERE S.Age > 20",
        "SELECT COUNT(HP.PetID) FROM Has_Pet AS HP INNER JOIN Student AS S ON HP.StuID = S.StuID WHERE S.Age > 20",
        "SELECT COUNT(*) FROM Has_Pet HP JOIN Student S ON HP.StuID = S.StuID WHERE S.Age > 20",
        "SELECT COUNT(PetID) FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE Age > 20)",
        "SELECT COUNT(Has_Pet.PetID) FROM Has_Pet, Student WHERE Has_Pet.StuID = Student.StuID AND Student.Age > 20 GROUP BY Has_Pet.StuID"
      ]
    ]
  },
  {
    "id": 52,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE Age > 20)",
        "SELECT COUNT(DISTINCT PetID) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20",
        "SELECT COUNT(PetID) FROM Has_Pet INNER JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20",
        "SELECT COUNT(*) FROM (SELECT PetID FROM Has_Pet, Student WHERE Has_Pet.StuID = Student.StuID AND Student.Age > 20) AS SubQuery",
        "SELECT COUNT(PetID) FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE Age > 20)",
        "SELECT COUNT(*) FROM Has_Pet hp JOIN Student s ON hp.StuID = s.StuID WHERE s.Age > 20",
        "SELECT COUNT(PetID) FROM Has_Pet, Student WHERE Has_Pet.StuID = Student.StuID AND Student.Age > 20",
        "SELECT COUNT(*) FROM Has_Pet WHERE EXISTS (SELECT 1 FROM Student WHERE Student.StuID = Has_Pet.StuID AND Student.Age > 20)",
        "SELECT COUNT(DISTINCT hp.PetID) FROM Has_Pet hp, Student s WHERE hp.StuID = s.StuID AND s.Age > 20",
        "SELECT COUNT(*) FROM Has_Pet hp INNER JOIN Student s ON hp.StuID = s.StuID WHERE s.Age > 20 GROUP BY hp.PetID"
      ]
    ]
  },
  {
    "id": 53,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType = 'dog' AND Student.Sex = 'F'",
        "SELECT COUNT(Pets.PetID) AS NumberOfDogs FROM Pets INNER JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID INNER JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType = 'dog' AND Student.Sex = 'F'",
        "SELECT COUNT(DISTINCT Pets.PetID) FROM Pets, Has_Pet, Student WHERE Pets.PetID = Has_Pet.PetID AND Has_Pet.StuID = Student.StuID AND Pets.PetType = 'dog' AND Student.Sex = 'F'",
        "SELECT COUNT(*) FROM Student, Has_Pet, Pets WHERE Student.StuID = Has_Pet.StuID AND Has_Pet.PetID = Pets.PetID AND Pets.PetType = 'dog' AND Student.Sex = 'F'",
        "SELECT COUNT(*) FROM (SELECT Pets.PetID FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType = 'dog' AND Student.Sex = 'F') AS DogOwners",
        "SELECT COUNT(PetID) FROM Pets p JOIN Has_Pet hp ON p.PetID = hp.PetID JOIN Student s ON hp.StuID = s.StuID WHERE p.PetType = 'dog' AND s.Sex = 'F'",
        "SELECT COUNT(*) FROM Pets p, Has_Pet hp, Student s WHERE p.PetID = hp.PetID AND hp.StuID = s.StuID AND p.PetType = 'dog' AND s.Sex = 'F'",
        "SELECT COUNT(*) FROM Pets p INNER JOIN Has_Pet hp ON p.PetID = hp.PetID INNER JOIN Student s ON hp.StuID = s.StuID WHERE p.PetType = 'dog' AND s.Sex = 'F'",
        "SELECT COUNT(Pets.PetID) FROM Pets LEFT JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID LEFT JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType = 'dog' AND Student.Sex = 'F'",
        "SELECT COUNT(*) FROM Pets p CROSS JOIN Has_Pet hp ON p.PetID = hp.PetID CROSS JOIN Student s ON hp.StuID = s.StuID WHERE p.PetType = 'dog' AND s.Sex = 'F'"
      ]
    ]
  },
  {
    "id": 54,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Student.Sex = 'female'",
        "SELECT COUNT(Pets.PetID) AS NumberOfDogs FROM Student, Has_Pet, Pets WHERE Student.StuID = Has_Pet.StuID AND Has_Pet.PetID = Pets.PetID AND Pets.PetType = 'dog' AND Student.Sex = 'female'",
        "SELECT COUNT(DISTINCT Pets.PetID) FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Student.Sex = 'female'",
        "SELECT COUNT(*) FROM Pets WHERE PetType = 'dog' AND PetID IN (SELECT PetID FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE Sex = 'female'))",
        "SELECT COUNT(*) FROM (SELECT Pets.PetID FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType = 'dog' AND Student.Sex = 'female') AS DogOwners",
        "SELECT COUNT(PetID) FROM Pets p JOIN Has_Pet hp ON p.PetID = hp.PetID JOIN Student s ON hp.StuID = s.StuID WHERE p.PetType = 'dog' AND s.Sex = 'female'",
        "SELECT COUNT(*) FROM Student s, Has_Pet hp, Pets p WHERE s.StuID = hp.StuID AND hp.PetID = p.PetID AND p.PetType = 'dog' AND s.Sex = 'female'",
        "SELECT COUNT(*) FROM Pets p INNER JOIN Has_Pet hp ON p.PetID = hp.PetID INNER JOIN Student s ON hp.StuID = s.StuID WHERE p.PetType = 'dog' AND s.Sex = 'female'",
        "SELECT COUNT(Pets.PetID) FROM Pets LEFT JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID LEFT JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType = 'dog' AND Student.Sex = 'female'",
        "SELECT COUNT(*) FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'dog' AND s.Sex = 'female'"
      ]
    ]
  },
  {
    "id": 55,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT PetType) FROM Pets",
        "SELECT COUNT(UNIQUE PetType) FROM Pets",
        "SELECT COUNT(*) FROM (SELECT DISTINCT PetType FROM Pets)",
        "SELECT COUNT(DISTINCT PetType) AS NumberOfUniquePets FROM Pets",
        "SELECT DISTINCT COUNT(PetType) FROM Pets",
        "SELECT COUNT(DISTINCT PetType) FROM Pets GROUP BY PetType",
        "SELECT COUNT(*) FROM (SELECT PetType FROM Pets GROUP BY PetType)",
        "SELECT DISTINCT COUNT(*) OVER (PARTITION BY PetType) FROM Pets",
        "SELECT COUNT(DISTINCT PetType) FROM Pets WHERE PetType IS NOT NULL",
        "SELECT COUNT(DISTINCT PetType) FROM Pets ORDER BY PetType"
      ]
    ]
  },
  {
    "id": 56,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT PetType) FROM Pets",
        "SELECT COUNT(UNIQUE PetType) FROM Pets",
        "SELECT COUNT(*) FROM (SELECT DISTINCT PetType FROM Pets)",
        "SELECT DISTINCT COUNT(PetType) FROM Pets",
        "SELECT COUNT(DISTINCT PetType) AS NumberOfPetTypes FROM Pets",
        "SELECT COUNT(*) FROM (SELECT PetType FROM Pets GROUP BY PetType)",
        "SELECT COUNT(DISTINCT PetType) FROM Pets GROUP BY PetType HAVING COUNT(PetType) > 0",
        "SELECT COUNT(*) FROM (SELECT DISTINCT PetType FROM Pets AS UniqueTypes)",
        "SELECT DISTINCT COUNT(*) OVER (PARTITION BY PetType) FROM Pets",
        "SELECT COUNT(DISTINCT PetType) FROM Pets WHERE PetType IS NOT NULL"
      ]
    ]
  },
  {
    "id": 57,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT DISTINCT S.Fname FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType IN ('cat', 'dog')",
        "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat' OR PetType = 'dog'))",
        "SELECT Fname FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' OR Pets.PetType = 'dog'",
        "SELECT DISTINCT Student.Fname FROM Student, Has_Pet, Pets WHERE Student.StuID = Has_Pet.StuID AND Has_Pet.PetID = Pets.PetID AND (Pets.PetType = 'dog' OR Pets.PetType = 'cat')",
        "SELECT Fname FROM Student WHERE EXISTS (SELECT 1 FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Has_Pet.StuID = Student.StuID AND Pets.PetType IN ('dog', 'cat'))",
        "SELECT Fname FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'dog' OR P.PetType = 'cat'",
        "SELECT DISTINCT Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog') ORDER BY Fname",
        "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType IN ('cat', 'dog')))",
        "SELECT Fname FROM Student S, Has_Pet HP, Pets P WHERE S.StuID = HP.StuID AND HP.PetID = P.PetID AND (P.PetType = 'cat' OR P.PetType = 'dog')",
        "SELECT DISTINCT Fname FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog')"
      ]
    ]
  },
  {
    "id": 58,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT DISTINCT S.Fname FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType IN ('cat', 'dog')",
        "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat' OR PetType = 'dog'))",
        "SELECT DISTINCT Student.Fname FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' OR Pets.PetType = 'dog'",
        "SELECT Fname FROM Student, Has_Pet, Pets WHERE Student.StuID = Has_Pet.StuID AND Has_Pet.PetID = Pets.PetID AND (Pets.PetType = 'dog' OR Pets.PetType = 'cat')",
        "SELECT DISTINCT Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('dog', 'cat')",
        "SELECT Fname FROM Student WHERE EXISTS (SELECT 1 FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Has_Pet.StuID = Student.StuID AND Pets.PetType IN ('cat', 'dog'))",
        "SELECT DISTINCT Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat' OR p.PetType = 'dog'",
        "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' OR Pets.PetType = 'dog')",
        "SELECT DISTINCT Fname FROM Student s, Has_Pet hp, Pets p WHERE s.StuID = hp.StuID AND hp.PetID = p.PetID AND (p.PetType = 'cat' OR p.PetType = 'dog')",
        "SELECT Fname FROM Student s WHERE EXISTS (SELECT * FROM Has_Pet hp JOIN Pets p ON hp.PetID = p.PetID WHERE hp.StuID = s.StuID AND (p.PetType = 'cat' OR p.PetType = 'dog'))"
      ]
    ]
  },
  {
    "id": 59,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat') AND StuID IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'dog')",
        "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat')) AND StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog'))",
        "SELECT Fname FROM Student S WHERE EXISTS (SELECT 1 FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND HP.StuID = S.StuID) AND EXISTS (SELECT 1 FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'dog' AND HP.StuID = S.StuID)",
        "SELECT DISTINCT S.Fname FROM Student S, Has_Pet HP, Pets P WHERE S.StuID = HP.StuID AND HP.PetID = P.PetID AND P.PetType IN ('cat', 'dog') GROUP BY S.StuID HAVING COUNT(DISTINCT P.PetType) = 2",
        "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID GROUP BY StuID HAVING SUM(CASE WHEN P.PetType = 'cat' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN P.PetType = 'dog' THEN 1 ELSE 0 END) > 0)",
        "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet HP INNER JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' INTERSECT SELECT StuID FROM Has_Pet HP INNER JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'dog')",
        "SELECT Fname FROM Student WHERE EXISTS (SELECT * FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND HP.StuID = Student.StuID) AND EXISTS (SELECT * FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'dog' AND HP.StuID = Student.StuID)",
        "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat') INTERSECT SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'dog')",
        "SELECT Fname FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND S.StuID IN (SELECT StuID FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'dog')",
        "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat') INTERSECT SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog'))"
      ]
    ]
  },
  {
    "id": 60,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat') INTERSECT SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'dog')",
        "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat') AND StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog')))",
        "SELECT DISTINCT S.Fname FROM Student S, Has_Pet HP, Pets P WHERE S.StuID = HP.StuID AND HP.PetID = P.PetID AND P.PetType = 'cat' AND S.StuID IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'dog')",
        "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType IN ('cat', 'dog') GROUP BY StuID HAVING COUNT(DISTINCT P.PetType) = 2)",
        "SELECT Fname FROM Student WHERE EXISTS (SELECT 1 FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND HP.StuID = Student.StuID) AND EXISTS (SELECT 1 FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'dog' AND HP.StuID = Student.StuID)",
        "SELECT Fname FROM Student S WHERE (SELECT COUNT(DISTINCT PetType) FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE HP.StuID = S.StuID AND P.PetType IN ('cat', 'dog')) = 2",
        "WITH CatOwners AS (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat'), DogOwners AS (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'dog') SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM CatOwners INTERSECT SELECT StuID FROM DogOwners)",
        "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet HP1 JOIN Pets P1 ON HP1.PetID = P1.PetID WHERE P1.PetType = 'cat' AND EXISTS (SELECT 1 FROM Has_Pet HP2 JOIN Pets P2 ON HP2.PetID = P2.PetID WHERE P2.PetType = 'dog' AND HP1.StuID = HP2.StuID))",
        "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat') AND StuID IN (SELECT StuID FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'dog')",
        "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat')) AND StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog'))"
      ]
    ]
  },
  {
    "id": 61,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat')",
        "SELECT S.Major, S.Age FROM Student S WHERE NOT EXISTS (SELECT 1 FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND HP.StuID = S.StuID)",
        "SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet, Pets WHERE Has_Pet.PetID = Pets.PetID AND Pets.PetType = 'cat')",
        "SELECT Major, Age FROM Student AS S WHERE S.StuID NOT IN (SELECT HP.StuID FROM Has_Pet HP INNER JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat')",
        "SELECT S.Major, S.Age FROM Student S LEFT JOIN Has_Pet HP ON S.StuID = HP.StuID LEFT JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType <> 'cat' OR P.PetType IS NULL",
        "SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet HP, Pets P WHERE HP.PetID = P.PetID AND P.PetType = 'cat')",
        "SELECT DISTINCT S.Major, S.Age FROM Student S WHERE NOT EXISTS (SELECT * FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND HP.StuID = S.StuID)",
        "SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT HP.StuID FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat')",
        "SELECT S.Major, S.Age FROM Student S WHERE S.StuID NOT IN (SELECT HP.StuID FROM Has_Pet HP, Pets P WHERE HP.PetID = P.PetID AND P.PetType = 'cat')",
        "SELECT Major, Age FROM Student WHERE NOT EXISTS (SELECT 1 FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND HP.StuID = Student.StuID)"
      ]
    ]
  },
  {
    "id": 62,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat')",
        "SELECT S.Major, S.Age FROM Student S WHERE NOT EXISTS (SELECT 1 FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND HP.StuID = S.StuID)",
        "SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))",
        "SELECT DISTINCT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat')",
        "SELECT Major, Age FROM Student AS S WHERE NOT EXISTS (SELECT * FROM Has_Pet AS HP JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND HP.StuID = S.StuID)",
        "SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet, Pets WHERE Has_Pet.PetID = Pets.PetID AND Pets.PetType = 'cat')",
        "SELECT Major, Age FROM Student S LEFT JOIN Has_Pet HP ON S.StuID = HP.StuID LEFT JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType <> 'cat' OR P.PetType IS NULL",
        "SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet HP, Pets P WHERE HP.PetID = P.PetID AND P.PetType = 'cat')",
        "SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID AND Pets.PetType = 'cat')",
        "SELECT Major, Age FROM Student WHERE NOT EXISTS (SELECT NULL FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND HP.StuID = Student.StuID)"
      ]
    ]
  },
  {
    "id": 63,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat')",
        "SELECT StuID FROM Student WHERE NOT EXISTS (SELECT 1 FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat' AND Student.StuID = Has_Pet.StuID)",
        "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat'",
        "SELECT s.StuID FROM Student s LEFT JOIN Has_Pet hp ON s.StuID = hp.StuID LEFT JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat' AND p.PetID IS NULL",
        "SELECT s.StuID FROM Student s WHERE NOT EXISTS (SELECT NULL FROM Has_Pet hp JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat' AND hp.StuID = s.StuID)",
        "SELECT DISTINCT s.StuID FROM Student s WHERE s.StuID NOT IN (SELECT hp.StuID FROM Has_Pet hp INNER JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat')",
        "SELECT s.StuID FROM Student s WHERE s.StuID NOT IN (SELECT hp.StuID FROM Has_Pet hp, Pets p WHERE hp.PetID = p.PetID AND p.PetType = 'cat')",
        "SELECT DISTINCT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet, Pets WHERE Has_Pet.PetID = Pets.PetID AND Pets.PetType = 'cat')",
        "SELECT StuID FROM Student s WHERE NOT EXISTS (SELECT * FROM Has_Pet hp JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat' AND hp.StuID = s.StuID)",
        "SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat')"
      ]
    ]
  },
  {
    "id": 64,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat')",
        "SELECT StuID FROM Student WHERE NOT EXISTS (SELECT 1 FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat' AND Student.StuID = Has_Pet.StuID)",
        "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat'",
        "SELECT s.StuID FROM Student s LEFT JOIN Has_Pet hp ON s.StuID = hp.StuID LEFT JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType != 'cat' OR p.PetType IS NULL",
        "SELECT DISTINCT StuID FROM Student WHERE StuID NOT IN (SELECT DISTINCT StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat')",
        "SELECT StuID FROM Student s WHERE NOT EXISTS (SELECT NULL FROM Has_Pet hp JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat' AND hp.StuID = s.StuID)",
        "SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet, Pets WHERE Has_Pet.PetID = Pets.PetID AND Pets.PetType = 'cat')",
        "SELECT s.StuID FROM Student s WHERE s.StuID NOT IN (SELECT hp.StuID FROM Has_Pet hp, Pets p WHERE hp.PetID = p.PetID AND p.PetType = 'cat')",
        "SELECT DISTINCT s.StuID FROM Student s WHERE s.StuID NOT IN (SELECT hp.StuID FROM Has_Pet hp INNER JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat')",
        "SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat')"
      ]
    ]
  },
  {
    "id": 65,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'dog') AND StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat')",
        "SELECT S.Fname, S.Age FROM Student S WHERE EXISTS (SELECT 1 FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'dog' AND HP.StuID = S.StuID) AND NOT EXISTS (SELECT 1 FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND HP.StuID = S.StuID)",
        "SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog')) AND StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))",
        "SELECT Fname, Age FROM Student AS S WHERE EXISTS (SELECT * FROM Has_Pet AS HP INNER JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'dog' AND HP.StuID = S.StuID) AND NOT EXISTS (SELECT * FROM Has_Pet AS HP INNER JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND HP.StuID = S.StuID)",
        "SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'dog') EXCEPT SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat')",
        "SELECT DISTINCT S.Fname, S.Age FROM Student S, Has_Pet HP, Pets P WHERE S.StuID = HP.StuID AND HP.PetID = P.PetID AND P.PetType = 'dog' AND NOT EXISTS (SELECT 1 FROM Has_Pet HP2 JOIN Pets P2 ON HP2.PetID = P2.PetID WHERE P2.PetType = 'cat' AND HP2.StuID = S.StuID)",
        "SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet HP INNER JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'dog') AND NOT EXISTS (SELECT 1 FROM Has_Pet HP INNER JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND HP.StuID = Student.StuID)",
        "SELECT Fname, Age FROM Student WHERE EXISTS (SELECT * FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'dog' AND HP.StuID = Student.StuID) AND StuID NOT IN (SELECT StuID FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat')",
        "SELECT Fname, Age FROM Student S WHERE (SELECT COUNT(*) FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'dog' AND HP.StuID = S.StuID) > 0 AND (SELECT COUNT(*) FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND HP.StuID = S.StuID) = 0",
        "SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog')) AND StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))"
      ]
    ]
  },
  {
    "id": 66,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'dog') AND StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat')",
        "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet, Pets WHERE Has_Pet.PetID = Pets.PetID AND Pets.PetType = 'dog') AND StuID NOT IN (SELECT StuID FROM Has_Pet, Pets WHERE Has_Pet.PetID = Pets.PetID AND Pets.PetType = 'cat')",
        "SELECT S.Fname FROM Student S WHERE EXISTS (SELECT 1 FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'dog' AND HP.StuID = S.StuID) AND NOT EXISTS (SELECT 1 FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND HP.StuID = S.StuID)",
        "SELECT DISTINCT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'dog') AND StuID NOT IN (SELECT StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat')",
        "SELECT Fname FROM Student AS S WHERE EXISTS (SELECT * FROM Has_Pet AS HP JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'dog' AND HP.StuID = S.StuID) AND NOT EXISTS (SELECT * FROM Has_Pet AS HP JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND HP.StuID = S.StuID)",
        "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID AND Pets.PetType = 'dog') EXCEPT SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID AND Pets.PetType = 'cat')",
        "SELECT Fname FROM Student WHERE EXISTS (SELECT 1 FROM Has_Pet HP, Pets P WHERE HP.PetID = P.PetID AND P.PetType = 'dog' AND HP.StuID = Student.StuID) AND NOT EXISTS (SELECT 1 FROM Has_Pet HP, Pets P WHERE HP.PetID = P.PetID AND P.PetType = 'cat' AND HP.StuID = Student.StuID)",
        "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet, Pets WHERE Has_Pet.PetID = Pets.PetID AND Pets.PetType = 'dog') AND NOT EXISTS (SELECT 1 FROM Has_Pet, Pets WHERE Has_Pet.PetID = Pets.PetID AND Pets.PetType = 'cat' AND Has_Pet.StuID = Student.StuID)",
        "SELECT Fname FROM Student S WHERE (SELECT COUNT(*) FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'dog' AND HP.StuID = S.StuID) > 0 AND (SELECT COUNT(*) FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND HP.StuID = S.StuID) = 0",
        "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'dog') AND StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat')"
      ]
    ]
  },
  {
    "id": 67,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)",
        "SELECT PetType, weight FROM Pets WHERE pet_age IN (SELECT MIN(pet_age) FROM Pets)",
        "SELECT P.PetType, P.weight FROM Pets P WHERE P.pet_age = (SELECT MIN(pet_age) FROM Pets)",
        "SELECT PetType, weight FROM Pets ORDER BY pet_age ASC LIMIT 1",
        "SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets GROUP BY PetType)",
        "SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets) GROUP BY PetType, weight",
        "SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets) ORDER BY PetType",
        "SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets) ORDER BY weight",
        "SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets) ORDER BY PetType, weight",
        "SELECT DISTINCT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)"
      ]
    ]
  },
  {
    "id": 68,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)",
        "SELECT P.PetType, P.weight FROM Pets P WHERE P.pet_age = (SELECT MIN(pet_age) FROM Pets)",
        "SELECT type, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)",
        "SELECT PetType, weight FROM Pets WHERE pet_age IN (SELECT MIN(pet_age) FROM Pets)",
        "SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(Pets.pet_age) FROM Pets)",
        "SELECT P.PetType, P.weight FROM Pets P WHERE P.pet_age = (SELECT MIN(Pets.pet_age) FROM Pets P)",
        "SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets GROUP BY pet_age)",
        "SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets P)",
        "SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets) ORDER BY pet_age",
        "SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets) LIMIT 1"
      ]
    ]
  },
  {
    "id": 69,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT PetID, weight FROM Pets WHERE pet_age > 1",
        "SELECT PetID, weight FROM Pets WHERE pet_age > 1.0",
        "SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1",
        "SELECT p.PetID, p.weight FROM Pets p WHERE p.pet_age > 1",
        "SELECT PetID, weight FROM Pets WHERE pet_age > '1'",
        "SELECT PetID, weight FROM Pets WHERE pet_age > 1 ORDER BY PetID",
        "SELECT PetID, weight FROM Pets WHERE pet_age > 1 AND weight IS NOT NULL",
        "SELECT PetID, weight FROM Pets WHERE pet_age > 1 GROUP BY PetID, weight",
        "SELECT DISTINCT PetID, weight FROM Pets WHERE pet_age > 1",
        "SELECT PetID, weight FROM Pets WHERE pet_age > 1 LIMIT 100"
      ]
    ]
  },
  {
    "id": 70,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT PetID, weight FROM Pets WHERE pet_age > 1",
        "SELECT PetID, weight FROM Pets WHERE pet_age > 1 ORDER BY PetID",
        "SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1",
        "SELECT p.PetID, p.weight FROM Pets p WHERE p.pet_age > 1",
        "SELECT PetID, weight FROM Pets WHERE pet_age > 1 AND weight IS NOT NULL",
        "SELECT PetID, weight FROM Pets WHERE pet_age > 1 ORDER BY weight DESC",
        "SELECT PetID, weight FROM Pets WHERE pet_age > 1 ORDER BY weight ASC",
        "SELECT PetID, weight FROM Pets WHERE pet_age > 1 ORDER BY PetID ASC",
        "SELECT PetID, weight FROM Pets WHERE pet_age > 1 ORDER BY PetID DESC",
        "SELECT PetID, weight FROM Pets WHERE pet_age > 1 ORDER BY weight"
      ]
    ]
  },
  {
    "id": 71,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT PetType, AVG(pet_age) AS AverageAge, MAX(pet_age) AS MaxAge FROM Pets GROUP BY PetType",
        "SELECT PetType, AVG(pet_age) AS AvgAge, MAX(pet_age) AS MaximumAge FROM Pets GROUP BY PetType",
        "SELECT PetType, AVG(pet_age) AverageAge, MAX(pet_age) MaximumAge FROM Pets GROUP BY PetType",
        "SELECT PetType, average(pet_age) as AverageAge, maximum(pet_age) as MaxAge FROM Pets GROUP BY PetType",
        "SELECT PetType, mean(pet_age) as MeanAge, max(pet_age) as MaxAge FROM Pets GROUP BY PetType",
        "SELECT PetType, AVG(pet_age), MAX(pet_age) FROM Pets GROUP BY PetType",
        "SELECT PetType, AVG(pet_age) as Average_Age, MAX(pet_age) as Maximum_Age FROM Pets GROUP BY PetType",
        "SELECT PetType, AVG(pet_age) as Avg_Age, MAX(pet_age) as Max_Age FROM Pets GROUP BY PetType",
        "SELECT PetType, average(pet_age), maximum(pet_age) FROM Pets GROUP BY PetType",
        "SELECT PetType, mean(pet_age) as AverageAge, max(pet_age) as MaximumAge FROM Pets GROUP BY PetType"
      ]
    ]
  },
  {
    "id": 72,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT PetType, AVG(pet_age) AS AverageAge, MAX(pet_age) AS MaxAge FROM Pets GROUP BY PetType",
        "SELECT PetType, AVG(pet_age) AS AvgAge, MAX(pet_age) AS MaximumAge FROM Pets GROUP BY PetType",
        "SELECT PetType, AVG(pet_age), MAX(pet_age) FROM Pets GROUP BY PetType",
        "SELECT PetType, average(pet_age) AS AverageAge, maximum(pet_age) AS MaxAge FROM Pets GROUP BY PetType",
        "SELECT PetType, mean(pet_age) AS AverageAge, max(pet_age) AS MaxAge FROM Pets GROUP BY PetType",
        "SELECT PetType, AVG(pet_age) AS Average_Age, MAX(pet_age) AS Maximum_Age FROM Pets GROUP BY PetType",
        "SELECT PetType, AVG(pet_age) AS Avg_Age, MAX(pet_age) AS Max_Age FROM Pets GROUP BY PetType",
        "SELECT PetType, average(pet_age) AS AvgAge, maximum(pet_age) AS MaximumAge FROM Pets GROUP BY PetType",
        "SELECT PetType, mean(pet_age) AS AvgAge, max(pet_age) AS MaxAge FROM Pets GROUP BY PetType",
        "SELECT PetType, AVG(pet_age) AS AverageAge, MAX(pet_age) AS MaxAge FROM Pets GROUP BY PetType ORDER BY PetType"
      ]
    ]
  },
  {
    "id": 73,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT PetType, AVG(weight) AS AverageWeight FROM Pets GROUP BY PetType",
        "SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType",
        "SELECT AVG(weight), PetType FROM Pets GROUP BY PetType",
        "SELECT PetType, AVG(weight) AS AvgWeight FROM Pets GROUP BY PetType",
        "SELECT PetType, AVG(weight) AS Average_Weight FROM Pets GROUP BY PetType",
        "SELECT PetType, AVG(weight) AS avg_weight FROM Pets GROUP BY PetType",
        "SELECT PetType, AVG(weight) average_weight FROM Pets GROUP BY PetType",
        "SELECT AVG(weight) averageWeight, PetType FROM Pets GROUP BY PetType",
        "SELECT PetType, AVG(Pets.weight) AS AverageWeight FROM Pets GROUP BY PetType",
        "SELECT PetType, AVG(Pets.weight) AS AvgWeight FROM Pets GROUP BY PetType"
      ]
    ]
  },
  {
    "id": 74,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT PetType, AVG(weight) AS AverageWeight FROM Pets GROUP BY PetType",
        "SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType",
        "SELECT AVG(weight), PetType FROM Pets GROUP BY PetType",
        "SELECT PetType, AVG(weight) AS AvgWeight FROM Pets GROUP BY PetType",
        "SELECT PetType, AVG(weight) AS Average_Weight FROM Pets GROUP BY PetType",
        "SELECT PetType, AVG(weight) AS avg_weight FROM Pets GROUP BY PetType",
        "SELECT PetType, AVG(weight) average_weight FROM Pets GROUP BY PetType",
        "SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType ORDER BY PetType",
        "SELECT PetType, AVG(weight) AS AverageWeight FROM Pets GROUP BY PetType ORDER BY AverageWeight DESC",
        "SELECT PetType, AVG(weight) AS Average_Weight FROM Pets GROUP BY PetType ORDER BY Average_Weight"
      ]
    ]
  },
  {
    "id": 75,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)",
        "SELECT s.Fname, s.Age FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID",
        "SELECT Fname, Age FROM Student WHERE EXISTS (SELECT 1 FROM Has_Pet WHERE StuID = Student.StuID)",
        "SELECT Student.Fname, Student.Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID",
        "SELECT Fname, Age FROM Student s WHERE s.StuID IN (SELECT StuID FROM Has_Pet)",
        "SELECT distinct Fname, Age FROM Student, Has_Pet WHERE Student.StuID = Has_Pet.StuID",
        "SELECT Fname, Age FROM Student WHERE StuID IN (SELECT DISTINCT StuID FROM Has_Pet)",
        "SELECT Fname, Age FROM Student s WHERE EXISTS (SELECT * FROM Has_Pet hp WHERE hp.StuID = s.StuID)",
        "SELECT Fname, Age FROM Student AS s JOIN Has_Pet AS hp ON s.StuID = hp.StuID",
        "SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE StuID = Student.StuID)"
      ]
    ]
  },
  {
    "id": 76,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT DISTINCT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)",
        "SELECT DISTINCT S.Fname, S.Age FROM Student S INNER JOIN Has_Pet H ON S.StuID = H.StuID",
        "SELECT DISTINCT Fname, Age FROM Student WHERE EXISTS (SELECT 1 FROM Has_Pet WHERE StuID = Student.StuID)",
        "SELECT DISTINCT Fname, Age FROM Student S JOIN Has_Pet H ON S.StuID = H.StuID",
        "SELECT DISTINCT first_names.Fname, first_names.Age FROM (SELECT Fname, Age, StuID FROM Student) AS first_names WHERE first_names.StuID IN (SELECT StuID FROM Has_Pet)",
        "SELECT DISTINCT Fname AS FirstName, Age AS StudentAge FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)",
        "SELECT DISTINCT Fname, Age FROM Student, Has_Pet WHERE Student.StuID = Has_Pet.StuID",
        "SELECT DISTINCT Fname, Age FROM Student WHERE StuID IN (SELECT DISTINCT StuID FROM Has_Pet)",
        "SELECT DISTINCT Fname, Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID",
        "SELECT DISTINCT Fname, Age FROM Student S WHERE EXISTS (SELECT * FROM Has_Pet H WHERE H.StuID = S.StuID)"
      ]
    ]
  },
  {
    "id": 77,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT p.PetID FROM Pets p JOIN Has_Pet hp ON p.PetID = hp.PetID JOIN Student s ON hp.StuID = s.StuID WHERE s.LName = 'Smith'",
        "SELECT Pets.PetID FROM Pets INNER JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID INNER JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.LName = 'Smith'",
        "SELECT PetID FROM Pets WHERE PetID IN (SELECT PetID FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE LName = 'Smith'))",
        "SELECT DISTINCT p.PetID FROM Pets p, Has_Pet hp, Student s WHERE p.PetID = hp.PetID AND hp.StuID = s.StuID AND s.LName = 'Smith'",
        "SELECT p.PetID FROM Pets p INNER JOIN Has_Pet hp ON p.PetID = hp.PetID INNER JOIN Student s ON hp.StuID = s.StuID WHERE s.LName = 'Smith'",
        "SELECT PetID FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.LName = 'Smith'",
        "SELECT p.PetID FROM Pets p, Has_Pet hp, Student s WHERE p.PetID = hp.PetID AND hp.StuID = s.StuID AND s.LName = 'Smith'",
        "SELECT p.PetID FROM Pets AS p JOIN Has_Pet AS hp ON p.PetID = hp.PetID JOIN Student AS s ON hp.StuID = s.StuID WHERE s.LName = 'Smith'",
        "SELECT p.PetID FROM Pets p WHERE EXISTS (SELECT 1 FROM Has_Pet hp JOIN Student s ON hp.StuID = s.StuID WHERE hp.PetID = p.PetID AND s.LName = 'Smith')",
        "SELECT p.PetID FROM Pets p WHERE p.PetID IN (SELECT hp.PetID FROM Has_Pet hp JOIN Student s ON hp.StuID = s.StuID WHERE s.LName = 'Smith')"
      ]
    ]
  },
  {
    "id": 78,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT Pets.PetID FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.LName = 'Smith'",
        "SELECT p.PetID FROM Pets p INNER JOIN Has_Pet hp ON p.PetID = hp.PetID INNER JOIN Student s ON hp.StuID = s.StuID WHERE s.LName = 'Smith'",
        "SELECT PetID FROM Pets WHERE PetID IN (SELECT PetID FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE LName = 'Smith'))",
        "SELECT p.PetID FROM Pets p, Has_Pet hp, Student s WHERE p.PetID = hp.PetID AND hp.StuID = s.StuID AND s.LName = 'Smith'",
        "SELECT PetID FROM Pets, Has_Pet, Student WHERE Pets.PetID = Has_Pet.PetID AND Has_Pet.StuID = Student.StuID AND Student.LName = 'Smith'",
        "SELECT DISTINCT p.PetID FROM Pets p JOIN Has_Pet hp ON p.PetID = hp.PetID JOIN Student s ON hp.StuID = s.StuID WHERE s.LName = 'Smith'",
        "SELECT p.PetID FROM Pets p LEFT JOIN Has_Pet hp ON p.PetID = hp.PetID LEFT JOIN Student s ON hp.StuID = s.StuID WHERE s.LName = 'Smith'",
        "SELECT PetID FROM Pets WHERE EXISTS (SELECT 1 FROM Has_Pet WHERE Pets.PetID = Has_Pet.PetID AND Has_Pet.StuID IN (SELECT StuID FROM Student WHERE LName = 'Smith'))",
        "SELECT p.PetID FROM Pets p WHERE EXISTS (SELECT 1 FROM Has_Pet hp JOIN Student s ON hp.StuID = s.StuID WHERE hp.PetID = p.PetID AND s.LName = 'Smith')",
        "SELECT p.PetID FROM Pets p INNER JOIN Has_Pet hp ON p.PetID = hp.PetID WHERE hp.StuID = (SELECT StuID FROM Student WHERE LName = 'Smith')"
      ]
    ]
  },
  {
    "id": 79,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT S.StuID, COUNT(P.PetID) AS NumberOfPets FROM Student S JOIN Has_Pet P ON S.StuID = P.StuID GROUP BY S.StuID",
        "SELECT Student.StuID, COUNT(Has_Pet.PetID) AS PetCount FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID",
        "SELECT StuID, COUNT(PetID) AS TotalPets FROM Has_Pet GROUP BY StuID HAVING StuID IN (SELECT StuID FROM Student)",
        "SELECT s.StuID, COUNT(p.PetID) AS Pets FROM Student s, Has_Pet p WHERE s.StuID = p.StuID GROUP BY s.StuID",
        "SELECT StuID, COUNT(*) AS NumOfPets FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student) GROUP BY StuID",
        "SELECT StuID, COUNT(PetID) FROM Has_Pet GROUP BY StuID INTERSECT SELECT StuID FROM Student",
        "SELECT a.StuID, COUNT(b.PetID) AS NumberOfPets FROM Student a LEFT JOIN Has_Pet b ON a.StuID = b.StuID GROUP BY a.StuID",
        "SELECT StuID, COUNT(PetID) AS PetCount FROM Has_Pet WHERE StuID IN (SELECT DISTINCT StuID FROM Student) GROUP BY StuID",
        "SELECT DISTINCT StuID, (SELECT COUNT(PetID) FROM Has_Pet WHERE StuID = Student.StuID) AS PetCount FROM Student",
        "SELECT StuID, (SELECT COUNT(*) FROM Has_Pet WHERE StuID = Student.StuID) AS NumberOfPets FROM Student"
      ]
    ]
  },
  {
    "id": 80,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT Student.StuID, COUNT(Has_Pet.PetID) AS NumberOfPets FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID",
        "SELECT s.StuID, COUNT(p.PetID) AS PetCount FROM Student s INNER JOIN Has_Pet p ON s.StuID = p.StuID GROUP BY s.StuID",
        "SELECT StuID, COUNT(PetID) FROM Student, Has_Pet WHERE Student.StuID = Has_Pet.StuID GROUP BY StuID",
        "SELECT StuID AS StudentID, COUNT(PetID) AS TotalPets FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY StuID",
        "SELECT a.StuID, COUNT(b.PetID) AS Pets FROM Student a LEFT JOIN Has_Pet b ON a.StuID = b.StuID GROUP BY a.StuID",
        "SELECT StuID, COUNT(*) AS NumberOfPets FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY StuID",
        "SELECT StuID, COUNT(PetID) AS PetCount FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY StuID",
        "SELECT Student.StuID, COUNT(Has_Pet.PetID) FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID",
        "SELECT DISTINCT StuID, (SELECT COUNT(PetID) FROM Has_Pet WHERE Has_Pet.StuID = Student.StuID) AS NumberOfPets FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID",
        "SELECT StuID, COUNT(PetID) AS PetsOwned FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY StuID"
      ]
    ]
  },
  {
    "id": 81,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(PetID) > 1)",
        "SELECT S.Fname, S.Sex FROM Student S JOIN Has_Pet H ON S.StuID = H.StuID GROUP BY H.StuID HAVING COUNT(H.PetID) > 1",
        "SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1)",
        "SELECT Fname, Sex FROM Student WHERE EXISTS (SELECT 1 FROM Has_Pet WHERE Student.StuID = Has_Pet.StuID GROUP BY Has_Pet.StuID HAVING COUNT(Has_Pet.PetID) > 1)",
        "SELECT Fname, Sex FROM Student S WHERE (SELECT COUNT(*) FROM Has_Pet H WHERE H.StuID = S.StuID) > 1",
        "SELECT Fname, Sex FROM Student INNER JOIN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(PetID) > 1) AS HP ON Student.StuID = HP.StuID",
        "SELECT DISTINCT Fname, Sex FROM Student, Has_Pet WHERE Student.StuID = Has_Pet.StuID GROUP BY Has_Pet.StuID HAVING COUNT(Has_Pet.PetID) > 1",
        "SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet H GROUP BY H.StuID HAVING COUNT(H.PetID) > 1)",
        "SELECT Fname, Sex FROM Student S WHERE S.StuID IN (SELECT H.StuID FROM Has_Pet H GROUP BY H.StuID HAVING COUNT(H.PetID) > 1)",
        "SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(PetID) > 1)"
      ]
    ]
  },
  {
    "id": 82,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(PetID) > 1)",
        "SELECT S.Fname, S.Sex FROM Student S JOIN Has_Pet H ON S.StuID = H.StuID GROUP BY H.StuID HAVING COUNT(H.PetID) > 1",
        "SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1)",
        "SELECT Fname, Sex FROM Student WHERE EXISTS (SELECT 1 FROM Has_Pet WHERE Student.StuID = Has_Pet.StuID GROUP BY Has_Pet.StuID HAVING COUNT(Has_Pet.PetID) > 1)",
        "SELECT Fname, Sex FROM Student S WHERE (SELECT COUNT(*) FROM Has_Pet H WHERE H.StuID = S.StuID) > 1",
        "SELECT Fname, Sex FROM Student INNER JOIN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(PetID) > 1) AS MultiPetOwners ON Student.StuID = MultiPetOwners.StuID",
        "SELECT DISTINCT Fname, Sex FROM Student, Has_Pet WHERE Student.StuID = Has_Pet.StuID GROUP BY Has_Pet.StuID HAVING COUNT(Has_Pet.PetID) > 1",
        "SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP HAVING COUNT(PetID) > 1)",
        "SELECT Fname, Sex FROM Student AS S WHERE (SELECT COUNT(PetID) FROM Has_Pet AS H WHERE H.StuID = S.StuID) > 1",
        "SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet HAVING COUNT(PetID) > 1 GROUP BY StuID)"
      ]
    ]
  },
  {
    "id": 83,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3",
        "SELECT S.LName FROM Student S, Has_Pet HP, Pets P WHERE S.StuID = HP.StuID AND HP.PetID = P.PetID AND P.PetType = 'cat' AND P.pet_age = 3",
        "SELECT LName FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat' AND pet_age = 3))",
        "SELECT DISTINCT LName FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3",
        "SELECT LName FROM Student WHERE EXISTS (SELECT 1 FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Has_Pet.StuID = Student.StuID AND Pets.PetType = 'cat' AND Pets.pet_age = 3)",
        "SELECT LName FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND P.pet_age = 3",
        "SELECT top 1 LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3",
        "SELECT LName FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat' AND pet_age = 3)) ORDER BY LName",
        "SELECT LName FROM Student, Has_Pet, Pets WHERE Student.StuID = Has_Pet.StuID AND Has_Pet.PetID = Pets.PetID AND Pets.PetType = 'cat' AND Pets.pet_age = 3",
        "SELECT LName FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3 ORDER BY LName ASC"
      ]
    ]
  },
  {
    "id": 84,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3",
        "SELECT S.LName FROM Student S, Has_Pet HP, Pets P WHERE S.StuID = HP.StuID AND HP.PetID = P.PetID AND P.PetType = 'cat' AND P.pet_age = 3",
        "SELECT LName FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat' AND pet_age = 3))",
        "SELECT LName FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3",
        "SELECT distinct Student.LName FROM Student, Has_Pet, Pets WHERE Student.StuID = Has_Pet.StuID AND Has_Pet.PetID = Pets.PetID AND Pets.PetType = 'cat' AND Pets.pet_age = 3",
        "SELECT LName FROM Student WHERE EXISTS (SELECT 1 FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Has_Pet.StuID = Student.StuID AND Pets.PetType = 'cat' AND Pets.pet_age = 3)",
        "SELECT top 1 LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3",
        "SELECT LName FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat' AND p.pet_age = 3 ORDER BY LName",
        "SELECT LName FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat' AND pet_age = 3))",
        "SELECT LName FROM Student s WHERE EXISTS (SELECT * FROM Has_Pet hp JOIN Pets p ON hp.PetID = p.PetID WHERE hp.StuID = s.StuID AND p.PetType = 'cat' AND p.pet_age = 3)"
      ]
    ]
  },
  {
    "id": 85,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)",
        "SELECT AVG(S.Age) FROM Student S WHERE NOT EXISTS (SELECT 1 FROM Has_Pet H WHERE H.StuID = S.StuID)",
        "SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT DISTINCT StuID FROM Has_Pet)",
        "SELECT AVG(Student.Age) AS AverageAge FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Has_Pet.StuID IS NULL",
        "SELECT AVG(Age) FROM Student AS S WHERE S.StuID NOT IN (SELECT H.StuID FROM Has_Pet H)",
        "SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE StuID IS NOT NULL)",
        "SELECT AVG(Age) FROM Student WHERE NOT EXISTS (SELECT * FROM Has_Pet WHERE Student.StuID = Has_Pet.StuID)",
        "SELECT AVG(Age) FROM Student S WHERE S.StuID NOT IN (SELECT DISTINCT H.StuID FROM Has_Pet H)",
        "SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE StuID IS NOT NULL AND StuID <> '')",
        "SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet) AND Student.Age IS NOT NULL"
      ]
    ]
  },
  {
    "id": 86,
    "db_id": "pets_1",
    "infer_predictions": [
      [
        "SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)",
        "SELECT AVG(S.Age) FROM Student S WHERE NOT EXISTS (SELECT 1 FROM Has_Pet H WHERE H.StuID = S.StuID)",
        "SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT DISTINCT StuID FROM Has_Pet)",
        "SELECT AVG(Age) FROM Student AS S LEFT JOIN Has_Pet AS H ON S.StuID = H.StuID WHERE H.StuID IS NULL",
        "SELECT AVG(Student.Age) FROM Student LEFT OUTER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Has_Pet.StuID IS NULL",
        "SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE StuID IS NOT NULL)",
        "SELECT AVG(Age) FROM Student S WHERE S.StuID NOT IN (SELECT H.StuID FROM Has_Pet H)",
        "SELECT AVG(Age) FROM Student WHERE NOT EXISTS (SELECT * FROM Has_Pet WHERE StuID = Student.StuID)",
        "SELECT AVG(Age) FROM Student S WHERE S.StuID NOT IN (SELECT DISTINCT H.StuID FROM Has_Pet H)",
        "SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE StuID IS NOT NULL)"
      ]
    ]
  },
  {
    "id": 87,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT Continent) FROM continents",
        "SELECT COUNT(*) FROM (SELECT DISTINCT Continent FROM continents) AS unique_continents",
        "SELECT COUNT(Continent) FROM (SELECT DISTINCT Continent FROM continents) AS distinct_continents",
        "SELECT COUNT(Continent) FROM continents GROUP BY Continent",
        "SELECT COUNT(*) FROM continents GROUP BY Continent",
        "SELECT COUNT(DISTINCT Continent) AS NumberOfContinents FROM continents",
        "SELECT COUNT(*) FROM (SELECT Continent FROM continents GROUP BY Continent) AS count_continents",
        "SELECT COUNT(Continent) FROM continents WHERE Continent IS NOT NULL",
        "SELECT COUNT(*) FROM (SELECT DISTINCT Continent FROM continents WHERE Continent IS NOT NULL) AS continents_count",
        "SELECT DISTINCT COUNT(Continent) FROM continents"
      ]
    ]
  },
  {
    "id": 88,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM continents",
        "SELECT COUNT(Continent) FROM continents",
        "SELECT COUNT(DISTINCT Continent) FROM continents",
        "SELECT COUNT(ContId) FROM continents",
        "SELECT COUNT(ALL Continent) FROM continents",
        "SELECT COUNT(1) FROM continents",
        "SELECT COUNT(Continent) AS NumberOfContinents FROM continents",
        "SELECT COUNT(*) AS TotalContinents FROM continents",
        "SELECT COUNT(DISTINCT ContId) FROM continents",
        "SELECT COUNT(ALL ContId) FROM continents"
      ]
    ]
  },
  {
    "id": 89,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT c.ContId, c.Continent, COUNT(d.CountryId) AS NumberOfCountries FROM continents c LEFT JOIN countries d ON c.ContId = d.Continent GROUP BY c.ContId, c.Continent",
        "SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS CountryCount FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent",
        "SELECT ContId, Continent, COUNT(CountryId) FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY ContId, Continent",
        "SELECT c.ContId AS ContinentID, c.Continent AS ContinentName, COUNT(d.CountryId) AS TotalCountries FROM continents c INNER JOIN countries d ON c.ContId = d.Continent GROUP BY c.ContId, c.Continent",
        "SELECT ContId, Continent, COUNT(*) AS NumCountries FROM continents LEFT JOIN countries ON ContId = Continent GROUP BY ContId, Continent ORDER BY ContId",
        "SELECT c.ContId, c.Continent, COUNT(d.CountryId) FROM continents c, countries d WHERE c.ContId = d.Continent GROUP BY c.ContId, c.Continent",
        "SELECT c.ContId, c.Continent, COUNT(d.CountryId) AS CountriesCount FROM continents c LEFT OUTER JOIN countries d ON c.ContId = d.Continent GROUP BY c.ContId, c.Continent",
        "SELECT ContId, Continent, COUNT(CountryId) AS Country_Count FROM continents LEFT JOIN countries ON ContId = Continent GROUP BY ContId, Continent HAVING COUNT(CountryId) > 0",
        "SELECT c.ContId, c.Continent, COUNT(d.CountryId) AS Total_Countries FROM continents c JOIN countries d ON c.ContId = d.Continent GROUP BY c.ContId, c.Continent ORDER BY Total_Countries DESC",
        "SELECT c.ContId, c.Continent, COUNT(d.CountryId) AS CountryCount FROM continents c LEFT JOIN countries d ON c.ContId = d.Continent GROUP BY c.ContId, c.Continent HAVING COUNT(d.CountryId) > 0"
      ]
    ]
  },
  {
    "id": 90,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS NumberOfCountries FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent",
        "SELECT c.ContId, c.Continent, COUNT(co.CountryId) AS CountryCount FROM continents c LEFT JOIN countries co ON c.ContId = co.Continent GROUP BY c.ContId, c.Continent",
        "SELECT ContId, Continent, COUNT(CountryId) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY ContId, Continent",
        "SELECT continents.ContId AS ContinentID, continents.Continent AS ContinentName, COUNT(countries.CountryId) AS TotalCountries FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY ContinentID, ContinentName",
        "SELECT c.ContId, c.Continent, COUNT(co.CountryId) FROM continents c LEFT JOIN countries co ON c.ContId = co.Continent GROUP BY c.ContId, c.Continent",
        "SELECT ContId, Continent, COUNT(*) AS CountryCount FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY ContId, Continent",
        "SELECT c.ContId, c.Continent, COUNT(co.CountryId) AS NumberOfCountries FROM continents c LEFT JOIN countries co ON c.ContId = co.Continent GROUP BY c.ContId, c.Continent",
        "SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent",
        "SELECT c.ContId, c.Continent, COUNT(co.CountryId) FROM continents c JOIN countries co ON c.ContId = co.Continent GROUP BY c.ContId, c.Continent",
        "SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS CountryCount FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent"
      ]
    ]
  },
  {
    "id": 91,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM countries",
        "SELECT COUNT(CountryId) FROM countries",
        "SELECT COUNT(DISTINCT CountryId) FROM countries",
        "SELECT COUNT(DISTINCT CountryName) FROM countries",
        "SELECT COUNT(1) FROM countries",
        "SELECT COUNT(*) AS NumberOfCountries FROM countries",
        "SELECT COUNT(CountryName) FROM countries",
        "SELECT COUNT(DISTINCT CountryName) AS TotalCountries FROM countries",
        "SELECT COUNT(*) FROM (SELECT DISTINCT CountryId FROM countries) AS UniqueCountries",
        "SELECT COUNT(*) FROM (SELECT DISTINCT CountryName FROM countries) AS UniqueCountryNames"
      ]
    ]
  },
  {
    "id": 92,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM countries",
        "SELECT COUNT(CountryId) FROM countries",
        "SELECT COUNT(DISTINCT CountryId) FROM countries",
        "SELECT COUNT(DISTINCT CountryName) FROM countries",
        "SELECT COUNT(1) FROM countries",
        "SELECT COUNT(*) AS NumberOfCountries FROM countries",
        "SELECT COUNT(CountryName) FROM countries",
        "SELECT COUNT(DISTINCT CountryName) AS TotalCountries FROM countries",
        "SELECT COUNT(*) FROM (SELECT DISTINCT CountryId FROM countries) AS UniqueCountries",
        "SELECT COUNT(DISTINCT CountryId) AS CountryCount FROM countries"
      ]
    ]
  },
  {
    "id": 93,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT cm.FullName, cm.Id, COUNT(DISTINCT ml.Model) AS NumberOfModels FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName",
        "SELECT FullName, Id, COUNT(Model) AS ModelCount FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY Id, FullName",
        "SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.Model) FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName",
        "SELECT FullName, Id, COUNT(DISTINCT Model) AS TotalModels FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY FullName, Id",
        "SELECT cm.FullName AS MakerName, cm.Id AS MakerId, COUNT(DISTINCT ml.Model) AS ModelsProduced FROM car_makers cm LEFT JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.FullName, cm.Id",
        "SELECT FullName, Id, COUNT(*) AS ModelCount FROM car_makers, model_list WHERE car_makers.Id = model_list.Maker GROUP BY FullName, Id",
        "SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.Model) AS ModelCount FROM car_makers, model_list WHERE car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id",
        "SELECT FullName, Id, COUNT(Model) FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.FullName, cm.Id",
        "SELECT cm.FullName, cm.Id, COUNT(ml.Model) AS NumberOfModels FROM car_makers cm LEFT JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.FullName, cm.Id",
        "SELECT FullName, Id, COUNT(DISTINCT Model) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY FullName, Id"
      ]
    ]
  },
  {
    "id": 94,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT cm.FullName, cm.Id, COUNT(ml.ModelId) AS NumberOfModels FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName",
        "SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.ModelId) AS ModelCount FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName",
        "SELECT FullName, Id, COUNT(ModelId) FROM car_makers JOIN model_list ON Id = Maker GROUP BY Id, FullName",
        "SELECT A.FullName, A.Id, (SELECT COUNT(*) FROM model_list WHERE Maker = A.Id) AS ModelCount FROM car_makers A",
        "SELECT FullName, Id, (SELECT COUNT(ModelId) FROM model_list WHERE Maker = car_makers.Id) AS TotalModels FROM car_makers",
        "SELECT cm.FullName AS MakerName, cm.Id AS MakerId, COUNT(ml.ModelId) AS TotalModels FROM car_makers cm LEFT JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName",
        "SELECT FullName, Id, COUNT(*) AS ModelCount FROM car_makers, model_list WHERE car_makers.Id = model_list.Maker GROUP BY Id, FullName",
        "SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.ModelId) FROM car_makers LEFT JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName",
        "SELECT FullName, Id, COUNT(ModelId) AS NumberOfModels FROM car_makers cm LEFT JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName ORDER BY FullName",
        "SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.ModelId) AS ModelsProduced FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName HAVING COUNT(model_list.ModelId) > 0"
      ]
    ]
  },
  {
    "id": 95,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT Model FROM car_names WHERE MakeId = (SELECT Id FROM cars_data ORDER BY Horsepower ASC LIMIT 1)",
        "SELECT cn.Model FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)",
        "SELECT Model FROM car_names INNER JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY Horsepower LIMIT 1",
        "SELECT TOP 1 car_names.Model FROM car_names, cars_data WHERE car_names.MakeId = cars_data.Id ORDER BY cars_data.Horsepower ASC",
        "SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data))",
        "SELECT cn.Model FROM car_names cn, cars_data cd WHERE cn.MakeId = cd.Id AND cd.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)",
        "SELECT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data)",
        "SELECT Model FROM car_names WHERE MakeId = (SELECT Id FROM cars_data WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data))",
        "SELECT cn.Model FROM car_names cn INNER JOIN cars_data cd ON cn.MakeId = cd.Id ORDER BY cd.Horsepower ASC FETCH FIRST 1 ROWS ONLY",
        "SELECT Model FROM car_names AS cn JOIN cars_data AS cd ON cn.MakeId = cd.Id WHERE cd.Horsepower = (SELECT MIN(cd2.Horsepower) FROM cars_data cd2)"
      ]
    ]
  },
  {
    "id": 96,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data))",
        "SELECT cn.Model FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)",
        "SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data ORDER BY Horsepower ASC LIMIT 1)",
        "SELECT cn.Model FROM car_names cn, cars_data cd WHERE cn.MakeId = cd.Id AND cd.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)",
        "SELECT Model FROM car_names INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data)",
        "SELECT Model FROM car_names WHERE MakeId = (SELECT Id FROM cars_data WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data))",
        "SELECT cn.Model FROM car_names cn WHERE EXISTS (SELECT 1 FROM cars_data cd WHERE cn.MakeId = cd.Id AND cd.Horsepower = (SELECT MIN(Horsepower) FROM cars_data))",
        "SELECT Model FROM car_names cn JOIN (SELECT Id FROM cars_data WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data)) cd ON cn.MakeId = cd.Id",
        "SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data GROUP BY Id))",
        "SELECT Model FROM car_names AS cn JOIN cars_data AS cd ON cn.MakeId = cd.Id WHERE cd.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)"
      ]
    ]
  },
  {
    "id": 97,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data))",
        "SELECT cn.Model FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Weight < (SELECT AVG(Weight) FROM cars_data)",
        "SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data GROUP BY Id HAVING Weight < AVG(Weight))",
        "SELECT cn.Model FROM car_names cn, cars_data cd WHERE cn.MakeId = cd.Id AND cd.Weight < (SELECT AVG(Weight) FROM cars_data)",
        "SELECT Model FROM car_names INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)",
        "SELECT Model FROM car_names cn WHERE EXISTS (SELECT 1 FROM cars_data cd WHERE cn.MakeId = cd.Id AND cd.Weight < (SELECT AVG(Weight) FROM cars_data))",
        "SELECT cn.Model FROM car_names cn WHERE cn.MakeId IN (SELECT cd.Id FROM cars_data cd WHERE cd.Weight < (SELECT AVG(Weight) FROM cars_data))",
        "SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data HAVING Weight < (SELECT AVG(Weight) FROM cars_data))",
        "SELECT cn.Model FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Weight < (SELECT AVG(Weight) FROM cars_data WHERE cd.Id = cn.MakeId)",
        "SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data GROUP BY Id))"
      ]
    ]
  },
  {
    "id": 98,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT MakeId FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data))",
        "SELECT cn.MakeId FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Weight < (SELECT AVG(Weight) FROM cars_data)",
        "SELECT MakeId FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data GROUP BY Id HAVING Weight < AVG(Weight))",
        "SELECT cn.MakeId FROM car_names cn INNER JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Weight < (SELECT AVG(Weight) FROM cars_data)",
        "SELECT MakeId FROM car_names WHERE EXISTS (SELECT 1 FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data) AND Id = car_names.MakeId)",
        "SELECT MakeId FROM car_names cn WHERE (SELECT Weight FROM cars_data WHERE Id = cn.MakeId) < (SELECT AVG(Weight) FROM cars_data)",
        "SELECT cn.MakeId FROM car_names cn, cars_data cd WHERE cn.MakeId = cd.Id AND cd.Weight < (SELECT AVG(Weight) FROM cars_data)",
        "SELECT MakeId FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data HAVING Weight < (SELECT AVG(Weight) FROM cars_data GROUP BY Id))",
        "SELECT cn.MakeId FROM car_names cn WHERE (SELECT Weight FROM cars_data WHERE Id = cn.MakeId) < (SELECT AVG(Weight) FROM cars_data WHERE Id = cn.MakeId)",
        "SELECT MakeId FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data) GROUP BY Id)"
      ]
    ]
  },
  {
    "id": 99,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT DISTINCT cm.FullName FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year = 1970",
        "SELECT DISTINCT FullName FROM car_makers WHERE Id IN (SELECT Maker FROM model_list WHERE Model IN (SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Year = 1970)))",
        "SELECT DISTINCT car_makers.FullName FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker INNER JOIN car_names ON model_list.Model = car_names.Model INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970",
        "SELECT DISTINCT FullName FROM car_makers, model_list, car_names, cars_data WHERE car_makers.Id = model_list.Maker AND model_list.Model = car_names.Model AND car_names.MakeId = cars_data.Id AND cars_data.Year = 1970",
        "SELECT DISTINCT FullName FROM car_makers cm, model_list ml, car_names cn, cars_data cd WHERE cm.Id = ml.Maker AND ml.Model = cn.Model AND cn.MakeId = cd.Id AND cd.Year = 1970",
        "SELECT DISTINCT FullName FROM car_makers WHERE Id IN (SELECT Maker FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970)",
        "SELECT DISTINCT cm.FullName FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year = '1970'",
        "SELECT DISTINCT FullName FROM car_makers WHERE Id IN (SELECT Maker FROM model_list, car_names, cars_data WHERE model_list.Model = car_names.Model AND car_names.MakeId = cars_data.Id AND cars_data.Year = 1970)",
        "SELECT DISTINCT FullName FROM car_makers AS cm JOIN model_list AS ml ON cm.Id = ml.Maker JOIN car_names AS cn ON ml.Model = cn.Model JOIN cars_data AS cd ON cn.MakeId = cd.Id WHERE cd.Year = 1970",
        "SELECT DISTINCT FullName FROM car_makers WHERE Id IN (SELECT Maker FROM model_list WHERE Model IN (SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Year = '1970')))"
      ]
    ]
  },
  {
    "id": 100,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT DISTINCT cm.FullName FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year = 1970",
        "SELECT DISTINCT FullName FROM car_makers WHERE Id IN (SELECT Maker FROM model_list WHERE ModelId IN (SELECT MakeId FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Year = 1970)))",
        "SELECT DISTINCT car_makers.FullName FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker INNER JOIN car_names ON model_list.Model = car_names.Model INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970",
        "SELECT DISTINCT FullName FROM car_makers cm, model_list ml, car_names cn, cars_data cd WHERE cm.Id = ml.Maker AND ml.Model = cn.Model AND cn.MakeId = cd.Id AND cd.Year = 1970",
        "SELECT DISTINCT FullName FROM car_makers WHERE Id IN (SELECT Maker FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970)",
        "SELECT DISTINCT cm.FullName FROM car_makers cm, model_list ml, car_names cn, cars_data cd WHERE cm.Id = ml.Maker AND ml.ModelId = cn.MakeId AND cn.MakeId = cd.Id AND cd.Year = 1970",
        "SELECT DISTINCT FullName FROM car_makers WHERE Id IN (SELECT Maker FROM model_list WHERE ModelId IN (SELECT MakeId FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Year = 1970))",
        "SELECT DISTINCT cm.FullName FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.ModelId = cn.MakeId JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year = 1970",
        "SELECT DISTINCT FullName FROM car_makers AS cm JOIN model_list AS ml ON cm.Id = ml.Maker JOIN car_names AS cn ON ml.Model = cn.Model JOIN cars_data AS cd ON cn.MakeId = cd.Id WHERE cd.Year = 1970",
        "SELECT DISTINCT FullName FROM car_makers WHERE Id IN (SELECT Maker FROM model_list ml JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year = 1970)"
      ]
    ]
  },
  {
    "id": 101,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT T1.Make, T2.Year FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year = (SELECT MIN(Year) FROM cars_data)",
        "SELECT Make, Year FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Year = (SELECT MIN(Year) FROM cars_data)",
        "SELECT car_names.Make, cars_data.Year FROM car_names INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data)",
        "SELECT Make, Year FROM car_names, cars_data WHERE car_names.MakeId = cars_data.Id AND cars_data.Year = (SELECT MIN(Year) FROM cars_data)",
        "SELECT cn.Make, cd.Year FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year = (SELECT MIN(Year) FROM cars_data)",
        "SELECT Make, Year FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY Year ASC LIMIT 1",
        "SELECT Make, Year FROM car_names INNER JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.Year ASC FETCH FIRST 1 ROW ONLY",
        "SELECT TOP 1 Make, Year FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY Year",
        "SELECT Make, Year FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Year IN (SELECT MIN(Year) FROM cars_data)",
        "SELECT Make, Year FROM car_names AS cn, cars_data AS cd WHERE cn.MakeId = cd.Id AND cd.Year = (SELECT MIN(Year) FROM cars_data)"
      ]
    ]
  },
  {
    "id": 102,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT cm.FullName, MIN(cd.Year) FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.ModelId = cn.MakeId JOIN cars_data cd ON cn.MakeId = cd.Id GROUP BY cm.FullName ORDER BY MIN(cd.Year) ASC LIMIT 1",
        "SELECT car_makers.FullName, MIN(cars_data.Year) AS EarliestYear FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_makers.FullName ORDER BY EarliestYear ASC LIMIT 1",
        "SELECT TOP 1 car_makers.FullName, cars_data.Year FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker INNER JOIN car_names ON model_list.ModelId = car_names.MakeId INNER JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.Year ASC",
        "SELECT FullName, Year FROM (SELECT car_makers.FullName, cars_data.Year FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.Year ASC) AS EarliestCars LIMIT 1",
        "SELECT cm.FullName, cd.Year FROM car_makers cm, model_list ml, car_names cn, cars_data cd WHERE cm.Id = ml.Maker AND ml.ModelId = cn.MakeId AND cn.MakeId = cd.Id ORDER BY cd.Year ASC LIMIT 1",
        "SELECT FIRST(car_makers.FullName) AS MakerFullName, FIRST(cars_data.Year) AS ProductionYear FROM car_makers, model_list, car_names, cars_data WHERE car_makers.Id = model_list.Maker AND model_list.ModelId = car_names.MakeId AND car_names.MakeId = cars_data.Id ORDER BY cars_data.Year",
        "SELECT car_makers.FullName, cars_data.Year FROM car_makers, model_list, car_names, cars_data WHERE car_makers.Id = model_list.Maker AND model_list.ModelId = car_names.MakeId AND car_names.MakeId = cars_data.Id ORDER BY cars_data.Year ASC FETCH FIRST ROW ONLY",
        "SELECT cm.FullName, MIN(cd.Year) AS EarliestYear FROM car_makers cm CROSS JOIN model_list ml ON cm.Id = ml.Maker CROSS JOIN car_names cn ON ml.ModelId = cn.MakeId CROSS JOIN cars_data cd ON cn.MakeId = cd.Id GROUP BY cm.FullName HAVING MIN(cd.Year) = (SELECT MIN(Year) FROM cars_data)",
        "SELECT cm.FullName, cd.Year FROM car_makers cm INNER JOIN model_list ml ON cm.Id = ml.Maker INNER JOIN car_names cn ON ml.ModelId = cn.MakeId INNER JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year = (SELECT MIN(Year) FROM cars_data) LIMIT 1",
        "SELECT car_makers.FullName, MIN(cars_data.Year) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_makers.FullName HAVING MIN(cars_data.Year) = (SELECT MIN(Year) FROM cars_data)"
      ]
    ]
  },
  {
    "id": 103,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT DISTINCT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980",
        "SELECT DISTINCT Model FROM car_names INNER JOIN cars_data ON car_names.MakeId = cars_data.Id AND cars_data.Year > 1980",
        "SELECT DISTINCT cn.Model FROM car_names AS cn, cars_data AS cd WHERE cn.MakeId = cd.Id AND cd.Year > 1980",
        "SELECT DISTINCT Model FROM car_names, cars_data WHERE car_names.MakeId = cars_data.Id AND cars_data.Year > 1980",
        "SELECT DISTINCT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > '1980'",
        "SELECT DISTINCT car_names.Model FROM car_names INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980 ORDER BY car_names.Model",
        "SELECT DISTINCT Model FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year > 1980",
        "SELECT DISTINCT cn.Model FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year > 1980 ORDER BY cn.Model ASC",
        "SELECT DISTINCT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980 GROUP BY Model",
        "SELECT DISTINCT Model FROM car_names cn, cars_data cd WHERE cn.MakeId = cd.Id AND cd.Year > 1980 GROUP BY cn.Model"
      ]
    ]
  },
  {
    "id": 104,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT DISTINCT ml.ModelId, ml.Model FROM model_list ml JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year > 1980",
        "SELECT ml.ModelId, ml.Model FROM model_list ml, car_names cn, cars_data cd WHERE ml.Model = cn.Model AND cn.MakeId = cd.Id AND cd.Year > 1980 GROUP BY ml.ModelId, ml.Model",
        "SELECT DISTINCT model_list.ModelId, model_list.Model FROM model_list INNER JOIN car_names ON model_list.Model = car_names.Model INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980",
        "SELECT model_list.ModelId, model_list.Model FROM model_list, car_names, cars_data WHERE model_list.Model = car_names.Model AND car_names.MakeId = cars_data.Id AND cars_data.Year > 1980",
        "SELECT DISTINCT ml.ModelId, ml.Model FROM model_list AS ml JOIN car_names AS cn ON ml.Model = cn.Model JOIN cars_data AS cd ON cn.MakeId = cd.Id WHERE cd.Year > 1980 ORDER BY ml.Model",
        "SELECT model_list.ModelId, model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980",
        "SELECT DISTINCT ModelId, Model FROM model_list WHERE Model IN (SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Year > 1980))",
        "SELECT ml.ModelId, ml.Model FROM model_list ml INNER JOIN car_names cn ON ml.Model = cn.Model INNER JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year > 1980",
        "SELECT DISTINCT ml.ModelId, ml.Model FROM model_list ml, car_names cn, cars_data cd WHERE ml.Model = cn.Model AND cn.MakeId = cd.Id AND cd.Year > 1980",
        "SELECT model_list.ModelId, model_list.Model FROM model_list ml LEFT JOIN car_names cn ON ml.Model = cn.Model LEFT JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year > 1980"
      ]
    ]
  },
  {
    "id": 105,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT continents.Continent, COUNT(DISTINCT car_makers.Id) AS NumberOfCarMakers FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent",
        "SELECT C.Continent, COUNT(DISTINCT M.Id) AS CarMakersCount FROM continents C INNER JOIN countries CO ON C.ContId = CO.Continent INNER JOIN car_makers M ON CO.CountryId = M.Country GROUP BY C.Continent",
        "SELECT C.Continent, COUNT(DISTINCT M.Id) FROM continents C, countries CO, car_makers M WHERE C.ContId = CO.Continent AND CO.CountryId = M.Country GROUP BY C.Continent",
        "SELECT C.Continent AS ContinentName, COUNT(DISTINCT M.Id) AS TotalCarMakers FROM continents C LEFT JOIN countries CO ON C.ContId = CO.Continent LEFT JOIN car_makers M ON CO.CountryId = M.Country GROUP BY C.Continent",
        "SELECT C.Continent, COUNT(DISTINCT M.Id) AS MakerCount FROM continents C JOIN countries CO ON C.ContId = CO.Continent JOIN car_makers M ON CO.CountryId = M.Country GROUP BY C.Continent ORDER BY C.Continent",
        "SELECT C.Continent, COUNT(DISTINCT M.Id) AS CountOfCarMakers FROM continents AS C JOIN countries AS CO ON C.ContId = CO.Continent JOIN car_makers AS M ON CO.CountryId = M.Country GROUP BY C.Continent",
        "SELECT C.Continent, COUNT(DISTINCT M.Id) AS NumberOfMakers FROM continents C, countries CO, car_makers M WHERE C.ContId = CO.Continent AND CO.CountryId = M.Country GROUP BY C.Continent ORDER BY NumberOfMakers DESC",
        "SELECT C.Continent, COUNT(DISTINCT M.Id) AS TotalMakers FROM continents C INNER JOIN countries CO ON C.ContId = CO.Continent INNER JOIN car_makers M ON CO.CountryId = M.Country GROUP BY C.Continent HAVING COUNT(DISTINCT M.Id) > 0",
        "SELECT C.Continent, COUNT(DISTINCT M.Id) AS CarMakerCount FROM continents C LEFT JOIN countries CO ON C.ContId = CO.Continent LEFT JOIN car_makers M ON CO.CountryId = M.Country GROUP BY C.Continent HAVING COUNT(DISTINCT M.Id) > 0",
        "SELECT C.Continent, COUNT(DISTINCT M.Id) AS TotalCarMakers FROM continents C JOIN countries CO ON C.ContId = CO.Continent JOIN car_makers M ON CO.CountryId = M.Country GROUP BY C.Continent ORDER BY TotalCarMakers"
      ]
    ]
  },
  {
    "id": 106,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT c.Continent, COUNT(m.Id) AS NumberOfCarMakers FROM continents c JOIN countries co ON c.ContId = co.Continent JOIN car_makers m ON co.CountryId = m.Country GROUP BY c.Continent",
        "SELECT continents.Continent, COUNT(car_makers.Id) AS CarMakersCount FROM continents INNER JOIN countries ON continents.ContId = countries.Continent INNER JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent",
        "SELECT c.Continent, COUNT(DISTINCT m.Id) AS CarMakerCount FROM continents c, countries co, car_makers m WHERE c.ContId = co.Continent AND co.CountryId = m.Country GROUP BY c.Continent",
        "SELECT Continent, COUNT(Id) AS TotalCarMakers FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent LEFT JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY Continent",
        "SELECT c.Continent AS ContinentName, COUNT(m.Id) AS TotalMakers FROM continents c LEFT JOIN countries co ON c.ContId = co.Continent LEFT JOIN car_makers m ON co.CountryId = m.Country GROUP BY c.Continent ORDER BY c.Continent",
        "SELECT c.Continent, COUNT(m.Id) FROM continents c JOIN countries co ON c.ContId = co.Continent JOIN car_makers m ON co.CountryId = m.Country GROUP BY c.Continent",
        "SELECT c.Continent, COUNT(*) AS MakerCount FROM continents c JOIN countries co ON c.ContId = co.Continent JOIN car_makers m ON co.CountryId = m.Country GROUP BY c.Continent",
        "SELECT Continent, COUNT(car_makers.Id) FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY Continent",
        "SELECT c.Continent, COUNT(m.Id) AS NumberOfMakers FROM continents c, countries co, car_makers m WHERE c.ContId = co.Continent AND co.CountryId = m.Country GROUP BY c.Continent",
        "SELECT c.Continent AS ContinentName, COUNT(m.Id) AS MakerCount FROM continents c INNER JOIN countries co ON c.ContId = co.Continent INNER JOIN car_makers m ON co.CountryId = m.Country GROUP BY c.Continent ORDER BY MakerCount DESC"
      ]
    ]
  },
  {
    "id": 107,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(Id) = (SELECT MAX(MakerCount) FROM (SELECT Country, COUNT(Id) AS MakerCount FROM car_makers GROUP BY Country) AS SubQuery))",
        "SELECT CountryName FROM countries WHERE CountryId IN (SELECT Country FROM (SELECT Country, COUNT(*) AS TotalMakers FROM car_makers GROUP BY Country) AS Makers WHERE TotalMakers = (SELECT MAX(TotalMakers) FROM (SELECT COUNT(*) AS TotalMakers FROM car_makers GROUP BY Country) AS MaxMakers))",
        "SELECT c.CountryName FROM countries c JOIN (SELECT Country, COUNT(Id) AS MakerCount FROM car_makers GROUP BY Country) cm ON c.CountryId = cm.Country WHERE cm.MakerCount = (SELECT MAX(MakerCount) FROM (SELECT COUNT(Id) AS MakerCount FROM car_makers GROUP BY Country) AS SubQuery)",
        "SELECT c.CountryName FROM countries c WHERE EXISTS (SELECT 1 FROM car_makers m WHERE m.Country = c.CountryId GROUP BY m.Country HAVING COUNT(m.Id) = (SELECT MAX(MakerCount) FROM (SELECT COUNT(Id) AS MakerCount FROM car_makers GROUP BY Country) AS SubQuery))",
        "SELECT c.CountryName FROM countries c INNER JOIN (SELECT Country, COUNT(Id) AS MakerCount FROM car_makers GROUP BY Country) m ON c.CountryId = m.Country WHERE m.MakerCount = (SELECT MAX(MakerCount) FROM (SELECT COUNT(Id) AS MakerCount FROM car_makers GROUP BY Country) AS SubQuery)",
        "SELECT CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers GROUP BY Country ORDER BY COUNT(Id) DESC LIMIT 1)",
        "SELECT CountryName FROM countries WHERE CountryId = (SELECT Country FROM car_makers GROUP BY Country ORDER BY COUNT(Id) DESC LIMIT 1)",
        "SELECT CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(Id) >= ALL (SELECT COUNT(Id) FROM car_makers GROUP BY Country))",
        "SELECT c.CountryName FROM countries c WHERE (SELECT COUNT(*) FROM car_makers m WHERE m.Country = c.CountryId) = (SELECT MAX(MakerCount) FROM (SELECT COUNT(*) AS MakerCount FROM car_makers GROUP BY Country) AS SubQuery)",
        "SELECT c.CountryName FROM countries c JOIN car_makers m ON c.CountryId = m.Country GROUP BY c.CountryName HAVING COUNT(m.Id) = (SELECT MAX(MakerCount) FROM (SELECT COUNT(Id) AS MakerCount FROM car_makers GROUP BY Country) AS SubQuery)"
      ]
    ]
  },
  {
    "id": 108,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) = (SELECT MAX(MakerCount) FROM (SELECT COUNT(*) AS MakerCount FROM car_makers GROUP BY Country) AS Counts))",
        "SELECT c.CountryName FROM countries c JOIN (SELECT Country, COUNT(*) AS MakerCount FROM car_makers GROUP BY Country) cm ON c.CountryId = cm.Country WHERE cm.MakerCount = (SELECT MAX(MakerCount) FROM (SELECT COUNT(*) AS MakerCount FROM car_makers GROUP BY Country) AS sub)",
        "SELECT c.CountryName FROM countries c WHERE c.CountryId IN (SELECT cm.Country FROM car_makers cm GROUP BY cm.Country HAVING COUNT(cm.Id) = (SELECT MAX(cnt) FROM (SELECT COUNT(Id) AS cnt FROM car_makers GROUP BY Country) t))",
        "SELECT CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT c.CountryName FROM countries c WHERE EXISTS (SELECT 1 FROM car_makers cm WHERE cm.Country = c.CountryId GROUP BY cm.Country HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM car_makers GROUP BY Country) t))",
        "SELECT c.CountryName FROM countries c INNER JOIN (SELECT Country, COUNT(*) AS TotalMakers FROM car_makers GROUP BY Country) cm ON c.CountryId = cm.Country WHERE cm.TotalMakers = (SELECT MAX(TotalMakers) FROM (SELECT COUNT(*) AS TotalMakers FROM car_makers GROUP BY Country) tmp)",
        "SELECT TOP 1 WITH TIES c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName ORDER BY COUNT(cm.Id) DESC",
        "SELECT c.CountryName FROM countries c WHERE c.CountryId = (SELECT cm.Country FROM car_makers cm GROUP BY cm.Country ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName, c.CountryId HAVING COUNT(cm.Id) = (SELECT MAX(cnt) FROM (SELECT COUNT(Id) AS cnt FROM car_makers GROUP BY Country) t)",
        "SELECT CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM car_makers GROUP BY Country))"
      ]
    ]
  },
  {
    "id": 109,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT car_makers.FullName, COUNT(model_list.Model) AS ModelCount FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName",
        "SELECT FullName, COUNT(Model) AS ModelCount FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY FullName",
        "SELECT M.FullName, COUNT(L.Model) FROM car_makers M JOIN model_list L ON M.Id = L.Maker GROUP BY M.FullName",
        "SELECT FullName, COUNT(*) AS TotalModels FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY FullName",
        "SELECT cm.FullName, COUNT(ml.Model) AS NumberOfModels FROM car_makers cm, model_list ml WHERE cm.Id = ml.Maker GROUP BY cm.FullName",
        "SELECT FullName, COUNT(Model) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY FullName ORDER BY FullName",
        "SELECT car_makers.FullName, COUNT(model_list.Model) FROM car_makers, model_list WHERE car_makers.Id = model_list.Maker GROUP BY car_makers.FullName",
        "SELECT FullName, COUNT(Model) AS ModelCount FROM car_makers LEFT JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY FullName",
        "SELECT FullName, COUNT(model_list.Model) AS TotalModels FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY FullName HAVING COUNT(model_list.Model) > 0",
        "SELECT FullName, COUNT(Model) AS ModelCount FROM car_makers cm INNER JOIN model_list ml ON cm.Id = ml.Maker GROUP BY FullName ORDER BY FullName ASC"
      ]
    ]
  },
  {
    "id": 110,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.Model) AS ModelCount FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName",
        "SELECT M.Id, M.FullName, COUNT(L.Model) FROM car_makers AS M INNER JOIN model_list AS L ON M.Id = L.Maker GROUP BY M.Id, M.FullName",
        "SELECT cm.Id, cm.FullName, COUNT(ml.Model) FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName",
        "SELECT Id, FullName, (SELECT COUNT(Model) FROM model_list WHERE Maker = car_makers.Id) AS ModelCount FROM car_makers",
        "SELECT a.Id, a.FullName, b.TotalModels FROM car_makers a LEFT JOIN (SELECT Maker, COUNT(Model) AS TotalModels FROM model_list GROUP BY Maker) b ON a.Id = b.Maker",
        "SELECT car_makers.Id AS MakerID, car_makers.FullName AS MakerName, COUNT(model_list.Model) AS NumberOfModels FROM car_makers, model_list WHERE car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName",
        "SELECT Id, FullName, COUNT(Model) FROM car_makers, model_list WHERE car_makers.Id = model_list.Maker GROUP BY Id, FullName",
        "SELECT DISTINCT car_makers.Id, car_makers.FullName, (SELECT COUNT(*) FROM model_list WHERE Maker = car_makers.Id) AS ModelCount FROM car_makers, model_list WHERE car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName",
        "SELECT car_makers.Id, car_makers.FullName, COUNT(*) AS ModelCount FROM model_list INNER JOIN car_makers ON model_list.Maker = car_makers.Id GROUP BY car_makers.Id, car_makers.FullName",
        "SELECT cm.Id, cm.FullName, IFNULL(ml.ModelCount, 0) AS ModelCount FROM car_makers cm LEFT JOIN (SELECT Maker, COUNT(*) AS ModelCount FROM model_list GROUP BY Maker) ml ON cm.Id = ml.Maker"
      ]
    ]
  },
  {
    "id": 111,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = 'amc hornet sportabout (sw)'",
        "SELECT Accelerate FROM cars_data, car_names WHERE cars_data.Id = car_names.MakeId AND car_names.Model = 'amc hornet sportabout (sw)'",
        "SELECT cd.Accelerate FROM cars_data AS cd INNER JOIN car_names AS cn ON cd.Id = cn.MakeId WHERE cn.Model = 'amc hornet sportabout (sw)'",
        "SELECT Accelerate FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId AND car_names.Model = 'amc hornet sportabout (sw)'",
        "SELECT Accelerate FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cn.Model = 'amc hornet sportabout (sw)'",
        "SELECT a.Accelerate FROM cars_data a, car_names b WHERE a.Id = b.MakeId AND b.Model = 'amc hornet sportabout (sw)'",
        "SELECT Accelerate FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'amc hornet sportabout (sw)')",
        "SELECT Accelerate FROM cars_data WHERE EXISTS (SELECT 1 FROM car_names WHERE car_names.MakeId = cars_data.Id AND car_names.Model = 'amc hornet sportabout (sw)')",
        "SELECT Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model LIKE 'amc hornet sportabout (sw)'",
        "SELECT Accelerate FROM cars_data d JOIN car_names n ON d.Id = n.MakeId WHERE n.Model = 'amc hornet sportabout (sw)'"
      ]
    ]
  },
  {
    "id": 112,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = 'amc hornet sportabout (sw)'",
        "SELECT c.Accelerate FROM cars_data c INNER JOIN car_names n ON c.Id = n.MakeId WHERE n.Model = 'amc hornet sportabout (sw)'",
        "SELECT Accelerate FROM cars_data, car_names WHERE cars_data.Id = car_names.MakeId AND car_names.Model = 'amc hornet sportabout (sw)'",
        "SELECT Accelerate FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'amc hornet sportabout (sw)')",
        "SELECT c.Accelerate FROM cars_data AS c JOIN car_names AS n ON c.Id = n.MakeId AND n.Model = 'amc hornet sportabout (sw)'",
        "SELECT Accelerate FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Model = 'amc hornet sportabout (sw)')",
        "SELECT c.Accelerate FROM cars_data c, car_names n WHERE c.Id = n.MakeId AND n.Model = 'amc hornet sportabout (sw)'",
        "SELECT Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId AND car_names.Model = 'amc hornet sportabout (sw)'",
        "SELECT c.Accelerate FROM cars_data c INNER JOIN car_names n ON c.Id = n.MakeId WHERE n.Model LIKE 'amc hornet sportabout (sw)'",
        "SELECT Accelerate FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Model LIKE 'amc hornet sportabout (sw)')"
      ]
    ]
  },
  {
    "id": 113,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM car_makers WHERE Country IN (SELECT CountryId FROM countries WHERE CountryName = 'France')",
        "SELECT COUNT(DISTINCT car_makers.Id) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France'",
        "SELECT COUNT(car_makers.Id) FROM car_makers INNER JOIN countries ON car_makers.Country = countries.CountryId AND countries.CountryName = 'France'",
        "SELECT COUNT(*) FROM car_makers, countries WHERE car_makers.Country = countries.CountryId AND countries.CountryName = 'France'",
        "SELECT COUNT(car_makers.Id) AS NumberOfCarMakers FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France'",
        "SELECT COUNT(DISTINCT Id) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')",
        "SELECT COUNT(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')",
        "SELECT COUNT(car_makers.Id) FROM car_makers, countries WHERE car_makers.Country = countries.CountryId AND countries.CountryName = 'France'",
        "SELECT COUNT(DISTINCT car_makers.Id) FROM car_makers, countries WHERE car_makers.Country = countries.CountryId AND countries.CountryName = 'France'",
        "SELECT COUNT(*) FROM car_makers INNER JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France'"
      ]
    ]
  },
  {
    "id": 114,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT car_makers.Id) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France'",
        "SELECT COUNT(DISTINCT cm.Id) FROM car_makers cm INNER JOIN countries c ON cm.Country = c.CountryId WHERE c.CountryName = 'France'",
        "SELECT COUNT(UNIQUE car_makers.Id) FROM car_makers, countries WHERE car_makers.Country = countries.CountryId AND countries.CountryName = 'France'",
        "SELECT COUNT(*) FROM (SELECT DISTINCT car_makers.Id FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France')",
        "SELECT COUNT(DISTINCT Id) FROM car_makers WHERE Country IN (SELECT CountryId FROM countries WHERE CountryName = 'France')",
        "SELECT COUNT(DISTINCT car_makers.Id) FROM car_makers, countries WHERE car_makers.Country = countries.CountryId AND countries.CountryName = 'France'",
        "SELECT COUNT(DISTINCT Id) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')",
        "SELECT COUNT(DISTINCT car_makers.Id) FROM car_makers INNER JOIN countries ON car_makers.Country = countries.CountryId AND countries.CountryName = 'France'",
        "SELECT COUNT(DISTINCT Id) AS NumberOfMakers FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France'",
        "SELECT COUNT(DISTINCT car_makers.Id) FROM car_makers LEFT JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France'"
      ]
    ]
  },
  {
    "id": 115,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT car_names.Model) FROM car_names JOIN car_makers ON car_names.MakeId = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'USA'",
        "SELECT COUNT(DISTINCT Model) FROM car_names INNER JOIN car_makers ON car_names.MakeId = car_makers.Id INNER JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'USA'",
        "SELECT COUNT(UNIQUE car_names.Model) FROM car_names, car_makers, countries WHERE car_names.MakeId = car_makers.Id AND car_makers.Country = countries.CountryId AND countries.CountryName = 'USA'",
        "SELECT COUNT(*) FROM (SELECT DISTINCT car_names.Model FROM car_names JOIN car_makers ON car_names.MakeId = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'USA')",
        "SELECT COUNT(DISTINCT cn.Model) FROM car_names AS cn JOIN car_makers AS cm ON cn.MakeId = cm.Id JOIN countries AS c ON cm.Country = c.CountryId WHERE c.CountryName = 'USA'",
        "SELECT COUNT(DISTINCT Model) FROM car_names cn, car_makers cm, countries c WHERE cn.MakeId = cm.Id AND cm.Country = c.CountryId AND c.CountryName = 'USA'",
        "SELECT COUNT(DISTINCT car_names.Model) FROM car_names, car_makers, countries WHERE car_names.MakeId = car_makers.Id AND car_makers.Country = countries.CountryId AND countries.CountryName = 'USA'",
        "SELECT COUNT(DISTINCT Model) FROM car_names JOIN car_makers ON car_names.MakeId = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'USA'",
        "SELECT COUNT(DISTINCT car_names.Model) FROM car_names INNER JOIN car_makers ON car_names.MakeId = car_makers.Id INNER JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'USA'",
        "SELECT COUNT(DISTINCT Model) FROM car_names cn JOIN car_makers cm ON cn.MakeId = cm.Id JOIN countries c ON cm.Country = c.CountryId WHERE c.CountryName = 'USA'"
      ]
    ]
  },
  {
    "id": 116,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT car_names.Model) FROM car_names JOIN car_makers ON car_names.MakeId = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'usa'",
        "SELECT COUNT(DISTINCT Model) FROM car_names INNER JOIN car_makers ON car_names.MakeId = car_makers.Id INNER JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'usa'",
        "SELECT COUNT(UNIQUE car_names.Model) FROM car_names, car_makers, countries WHERE car_names.MakeId = car_makers.Id AND car_makers.Country = countries.CountryId AND countries.CountryName = 'usa'",
        "SELECT COUNT(DISTINCT cn.Model) FROM car_names AS cn JOIN car_makers AS cm ON cn.MakeId = cm.Id JOIN countries AS c ON cm.Country = c.CountryId WHERE c.CountryName = 'usa'",
        "SELECT COUNT(DISTINCT car_names.Model) FROM car_names, car_makers, countries WHERE car_names.MakeId = car_makers.Id AND car_makers.Country = countries.CountryId AND countries.CountryName = 'usa'",
        "SELECT COUNT(DISTINCT Model) FROM car_names cn INNER JOIN car_makers cm ON cn.MakeId = cm.Id INNER JOIN countries ct ON cm.Country = ct.CountryId WHERE ct.CountryName = 'usa'",
        "SELECT COUNT(*) FROM (SELECT DISTINCT car_names.Model FROM car_names JOIN car_makers ON car_names.MakeId = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'usa') AS unique_models",
        "SELECT COUNT(DISTINCT Model) FROM car_names JOIN car_makers ON car_names.MakeId = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'usa'",
        "SELECT COUNT(DISTINCT car_names.Model) FROM car_names INNER JOIN car_makers ON car_names.MakeId = car_makers.Id INNER JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'usa'",
        "SELECT COUNT(DISTINCT Model) FROM car_names cn, car_makers cm, countries ct WHERE cn.MakeId = cm.Id AND cm.Country = ct.CountryId AND ct.CountryName = 'usa'"
      ]
    ]
  },
  {
    "id": 117,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT AVG(MPG) AS average_mpg FROM cars_data WHERE Cylinders = 4",
        "SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4",
        "SELECT AVG(cars_data.MPG) FROM cars_data WHERE cars_data.Cylinders = 4",
        "SELECT AVG(MPG) FROM cars_data GROUP BY Cylinders HAVING Cylinders = 4",
        "SELECT AVG(MPG) AS AverageMilesPerGallon FROM cars_data WHERE Cylinders = 4",
        "SELECT AVG(MPG) FROM cars_data WHERE Cylinders = '4'",
        "SELECT AVG(MPG) AS AvgMPG FROM cars_data WHERE Cylinders = 4",
        "SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4 GROUP BY Cylinders",
        "SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4 AND MPG IS NOT NULL",
        "SELECT AVG(MPG) AS AverageFuelEfficiency FROM cars_data WHERE Cylinders = 4"
      ]
    ]
  },
  {
    "id": 118,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4",
        "SELECT AVG(MPG) AS AverageMPG FROM cars_data WHERE Cylinders = 4",
        "SELECT AVG(MPG) FROM cars_data WHERE Cylinders = '4'",
        "SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4 GROUP BY Cylinders",
        "SELECT AVG(MPG) AS Average_Miles_Per_Gallon FROM cars_data WHERE Cylinders = 4",
        "SELECT AVG(cars_data.MPG) FROM cars_data WHERE cars_data.Cylinders = 4",
        "SELECT AVG(MPG) FROM cars_data GROUP BY Cylinders HAVING Cylinders = 4",
        "SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4 AND MPG IS NOT NULL",
        "SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4 AND MPG > 0",
        "SELECT AVG(MPG) AS AvgMPG FROM cars_data WHERE Cylinders = 4"
      ]
    ]
  },
  {
    "id": 119,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974",
        "SELECT MIN(Weight) AS SmallestWeight FROM cars_data WHERE Cylinders = 8 AND Year = '1974'",
        "SELECT MIN(Weight) FROM cars_data WHERE Cylinders = '8' AND Year = '1974'",
        "SELECT Weight FROM cars_data WHERE Cylinders = 8 AND Year = 1974 ORDER BY Weight ASC LIMIT 1",
        "SELECT * FROM (SELECT MIN(Weight) AS MinWeight FROM cars_data WHERE Cylinders = 8 AND Year = 1974) AS subquery",
        "SELECT MIN(c.Weight) FROM cars_data c WHERE c.Cylinders = 8 AND c.Year = 1974",
        "SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974 GROUP BY Cylinders, Year",
        "SELECT TOP 1 Weight FROM cars_data WHERE Cylinders = 8 AND Year = 1974 ORDER BY Weight",
        "SELECT Weight FROM cars_data WHERE Cylinders = 8 AND Year = 1974 ORDER BY Weight LIMIT 1",
        "SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974 HAVING MIN(Weight)"
      ]
    ]
  },
  {
    "id": 120,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974",
        "SELECT MIN(Weight) AS MinimumWeight FROM cars_data WHERE Cylinders = 8 AND Year = '1974'",
        "SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = '1974'",
        "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974",
        "SELECT MIN(Weight) FROM cars_data WHERE Cylinders = '8' AND Year = '1974'",
        "SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974 GROUP BY Cylinders, Year",
        "SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974 LIMIT 1",
        "SELECT MIN(Weight) AS MinWeight FROM cars_data WHERE Cylinders = 8 AND Year = 1974",
        "SELECT MIN(Weight) FROM cars_data WHERE Cylinders = '8' AND Year = 1974 GROUP BY Year",
        "SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974 ORDER BY Weight ASC LIMIT 1"
      ]
    ]
  },
  {
    "id": 121,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT cm.FullName, ml.Model FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker",
        "SELECT FullName, Model FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker",
        "SELECT car_makers.FullName AS MakerFullName, model_list.Model AS MakerModel FROM car_makers, model_list WHERE car_makers.Id = model_list.Maker",
        "SELECT m.FullName, l.Model FROM car_makers m, model_list l WHERE m.Id = l.Maker",
        "SELECT `FullName`, `Model` FROM `car_makers` JOIN `model_list` ON `car_makers`.`Id` = `model_list`.`Maker`",
        "SELECT FullName AS MakerName, Model AS CarModel FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker",
        "SELECT A.FullName, B.Model FROM car_makers A INNER JOIN model_list B ON A.Id = B.Maker ORDER BY A.FullName",
        "SELECT DISTINCT car_makers.FullName, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker",
        "SELECT car_makers.FullName, model_list.Model FROM car_makers LEFT JOIN model_list ON car_makers.Id = model_list.Maker",
        "SELECT FullName, Model FROM car_makers cm CROSS JOIN model_list ml WHERE cm.Id = ml.Maker"
      ]
    ]
  },
  {
    "id": 122,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT car_makers.FullName, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker",
        "SELECT FullName, Model FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker",
        "SELECT m.FullName, l.Model FROM car_makers AS m JOIN model_list AS l ON m.Id = l.Maker",
        "SELECT FullName AS MakerFullName, Model AS MakerModel FROM car_makers, model_list WHERE car_makers.Id = model_list.Maker",
        "SELECT CONCAT(car_makers.FullName, ' - ', model_list.Model) AS FullDetails FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker",
        "SELECT car_makers.FullName AS MakerName, model_list.Model AS ModelName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker ORDER BY MakerName",
        "SELECT DISTINCT car_makers.FullName, model_list.Model FROM car_makers, model_list WHERE car_makers.Id = model_list.Maker",
        "SELECT car_makers.FullName || ' ' || model_list.Model AS CompleteName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker",
        "SELECT car_makers.FullName, model_list.Model FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.FullName IS NOT NULL",
        "SELECT * FROM (SELECT FullName, Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker) AS SubQuery"
      ]
    ]
  },
  {
    "id": 123,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT DISTINCT c.CountryName, c.CountryId FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country",
        "SELECT c.CountryName, c.CountryId FROM countries c WHERE EXISTS (SELECT 1 FROM car_makers cm WHERE cm.Country = c.CountryId)",
        "SELECT c.CountryName, c.CountryId FROM countries c INNER JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName, c.CountryId",
        "SELECT countries.CountryName, countries.CountryId FROM countries, car_makers WHERE countries.CountryId = car_makers.Country GROUP BY countries.CountryName, countries.CountryId",
        "SELECT DISTINCT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country",
        "SELECT c.CountryName, c.CountryId FROM countries c WHERE c.CountryId IN (SELECT Country FROM car_makers)",
        "SELECT DISTINCT c.CountryName, c.CountryId FROM countries c, car_makers cm WHERE c.CountryId = cm.Country",
        "SELECT c.CountryName, c.CountryId FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Country IS NOT NULL",
        "SELECT c.CountryName, c.CountryId FROM countries c WHERE EXISTS (SELECT Country FROM car_makers WHERE Country = c.CountryId)",
        "SELECT c.CountryName, c.CountryId FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Id IS NOT NULL"
      ]
    ]
  },
  {
    "id": 124,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId, countries.CountryName",
        "SELECT c.CountryId, c.CountryName FROM countries AS c INNER JOIN car_makers AS cm ON c.CountryId = cm.Country WHERE EXISTS (SELECT 1 FROM car_makers WHERE Country = c.CountryId)",
        "SELECT DISTINCT countries.CountryId, countries.CountryName FROM countries, car_makers WHERE countries.CountryId = car_makers.Country",
        "SELECT CountryId, CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers)",
        "SELECT c.CountryId, c.CountryName FROM countries c WHERE EXISTS (SELECT 1 FROM car_makers cm WHERE cm.Country = c.CountryId)",
        "SELECT countries.CountryId, countries.CountryName FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country",
        "SELECT CountryId, CountryName FROM countries WHERE CountryId IN (SELECT DISTINCT Country FROM car_makers)",
        "SELECT c.CountryId, c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryId, c.CountryName HAVING COUNT(cm.Id) > 0",
        "SELECT DISTINCT c.CountryId, c.CountryName FROM countries c, car_makers cm WHERE c.CountryId = cm.Country",
        "SELECT c.CountryId, c.CountryName FROM countries c WHERE c.CountryId IN (SELECT Country FROM car_makers GROUP BY Country)"
      ]
    ]
  },
  {
    "id": 125,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150",
        "SELECT COUNT(Id) FROM cars_data WHERE Horsepower > 150",
        "SELECT COUNT(*) AS NumberOfCars FROM cars_data WHERE Horsepower > 150",
        "SELECT COUNT(Id) AS CarCount FROM cars_data WHERE Horsepower > 150",
        "SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150 GROUP BY Horsepower",
        "SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150 ORDER BY Horsepower",
        "SELECT COUNT(*) FROM cars_data GROUP BY Horsepower HAVING Horsepower > 150",
        "SELECT COUNT(Id) FROM cars_data GROUP BY Horsepower HAVING Horsepower > 150",
        "SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Id IS NOT NULL",
        "SELECT COUNT(Id) FROM cars_data WHERE Horsepower > 150 AND Id IS NOT NULL"
      ]
    ]
  },
  {
    "id": 126,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150",
        "SELECT COUNT(Id) FROM cars_data WHERE Horsepower > 150",
        "SELECT COUNT(*) AS NumberOfCars FROM cars_data WHERE Horsepower > 150",
        "SELECT COUNT(Id) AS CarCount FROM cars_data WHERE Horsepower > 150",
        "SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150 GROUP BY Horsepower",
        "SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150 ORDER BY Horsepower",
        "SELECT COUNT(*) FROM cars_data GROUP BY Horsepower HAVING Horsepower > 150",
        "SELECT COUNT(Id) FROM cars_data GROUP BY Horsepower HAVING Horsepower > 150",
        "SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Horsepower IS NOT NULL",
        "SELECT COUNT(Id) FROM cars_data WHERE Horsepower > 150 AND Horsepower IS NOT NULL"
      ]
    ]
  },
  {
    "id": 127,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT Year, AVG(Weight) AS AverageWeight FROM cars_data GROUP BY Year",
        "SELECT Year, AVG(Weight) AS AvgWeight FROM cars_data GROUP BY Year ORDER BY Year",
        "SELECT Year, AVG(Weight) FROM cars_data GROUP BY Year",
        "SELECT Year, AVG(Weight) AS Average_Weight FROM cars_data GROUP BY Year",
        "SELECT Year, AVG(Weight) AS AverageWeight FROM cars_data GROUP BY Year ORDER BY Year ASC",
        "SELECT Year, AVG(Weight) AS AverageWeight FROM cars_data GROUP BY Year ORDER BY Year DESC",
        "SELECT Year, AVG(Weight) AS AverageWeight FROM cars_data GROUP BY Year ORDER BY AverageWeight DESC",
        "SELECT Year, AVG(Weight) AS AverageWeight FROM cars_data GROUP BY Year ORDER BY AverageWeight ASC",
        "SELECT Year, AVG(Weight) AS AverageWeight FROM cars_data GROUP BY Year ORDER BY Year ASC, AverageWeight DESC",
        "SELECT Year, AVG(Weight) AS AverageWeight FROM cars_data GROUP BY Year ORDER BY Year DESC, AverageWeight ASC"
      ]
    ]
  },
  {
    "id": 128,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT Year, AVG(Weight) AS Average_Weight FROM cars_data GROUP BY Year",
        "SELECT Year, AVG(Weight) AS AvgWeight FROM cars_data GROUP BY Year",
        "SELECT Year, AVG(Weight) FROM cars_data GROUP BY Year",
        "SELECT Year, AVG(Weight) AS AverageWeight FROM cars_data GROUP BY Year ORDER BY Year",
        "SELECT Year, AVG(Weight) AS Average_Weight FROM cars_data GROUP BY Year ORDER BY Year ASC",
        "SELECT Year, AVG(Weight) AS Average_Weight FROM cars_data GROUP BY Year ORDER BY Year DESC",
        "SELECT Year, AVG(Weight) AS Average_Weight FROM cars_data GROUP BY Year ORDER BY Average_Weight DESC",
        "SELECT Year, AVG(Weight) AS Average_Weight FROM cars_data GROUP BY Year ORDER BY Average_Weight ASC",
        "SELECT Year, AVG(Weight) AS Average_Weight FROM cars_data GROUP BY Year ORDER BY Year ASC, Average_Weight DESC",
        "SELECT Year, AVG(Weight) AS Average_Weight FROM cars_data GROUP BY Year ORDER BY Year DESC, Average_Weight ASC"
      ]
    ]
  },
  {
    "id": 129,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT C.CountryName FROM countries C JOIN continents T ON C.Continent = T.ContId JOIN car_makers M ON C.CountryId = M.Country WHERE T.Continent = 'Europe' GROUP BY C.CountryName HAVING COUNT(M.Id) >= 3",
        "SELECT countries.CountryName FROM countries INNER JOIN continents ON countries.Continent = continents.ContId INNER JOIN car_makers ON countries.CountryId = car_makers.Country WHERE continents.Continent = 'Europe' GROUP BY countries.CountryName HAVING COUNT(car_makers.Id) >= 3",
        "SELECT CountryName FROM countries, continents, car_makers WHERE countries.Continent = continents.ContId AND countries.CountryId = car_makers.Country AND continents.Continent = 'Europe' GROUP BY CountryName HAVING COUNT(car_makers.Id) >= 3",
        "SELECT C.CountryName FROM countries AS C, continents AS T, car_makers AS M WHERE C.Continent = T.ContId AND C.CountryId = M.Country AND T.Continent = 'Europe' GROUP BY C.CountryName HAVING COUNT(DISTINCT M.Id) >= 3",
        "SELECT DISTINCT C.CountryName FROM countries C JOIN continents T ON C.Continent = T.ContId JOIN car_makers M ON C.CountryId = M.Country WHERE T.Continent = 'Europe' GROUP BY C.CountryName HAVING COUNT(M.Id) >= 3",
        "SELECT C.CountryName FROM countries C, continents T, car_makers M WHERE C.Continent = T.ContId AND C.CountryId = M.Country AND T.Continent = 'Europe' GROUP BY C.CountryName HAVING COUNT(M.Id) >= 3",
        "SELECT C.CountryName FROM countries C LEFT JOIN continents T ON C.Continent = T.ContId LEFT JOIN car_makers M ON C.CountryId = M.Country WHERE T.Continent = 'Europe' GROUP BY C.CountryName HAVING COUNT(M.Id) >= 3",
        "SELECT C.CountryName FROM countries C INNER JOIN continents T ON C.Continent = T.ContId INNER JOIN car_makers M ON C.CountryId = M.Country WHERE T.Continent = 'Europe' GROUP BY C.CountryName HAVING COUNT(M.Id) >= 3",
        "SELECT C.CountryName FROM countries C, continents T, car_makers M WHERE C.Continent = T.ContId AND C.CountryId = M.Country AND T.Continent = 'Europe' GROUP BY C.CountryName HAVING COUNT(*) >= 3",
        "SELECT C.CountryName FROM countries C JOIN continents T ON C.Continent = T.ContId JOIN car_makers M ON C.CountryId = M.Country WHERE T.Continent = 'Europe' GROUP BY C.CountryName HAVING COUNT(DISTINCT M.Id) >= 3"
      ]
    ]
  },
  {
    "id": 130,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT c.CountryName FROM countries AS c JOIN car_makers AS cm ON c.CountryId = cm.Country JOIN continents AS ct ON c.Continent = ct.ContId WHERE ct.Continent = 'Europe' GROUP BY c.CountryName HAVING COUNT(cm.Id) >= 3",
        "SELECT CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(Id) >= 3) AND Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe')",
        "SELECT c.CountryName FROM countries c INNER JOIN car_makers cm ON c.CountryId = cm.Country INNER JOIN continents ct ON c.Continent = ct.ContId WHERE ct.Continent = 'Europe' GROUP BY c.CountryName HAVING COUNT(DISTINCT cm.Id) >= 3",
        "SELECT DISTINCT c.CountryName FROM countries c, car_makers cm, continents ct WHERE c.CountryId = cm.Country AND c.Continent = ct.ContId AND ct.Continent = 'Europe' GROUP BY c.CountryName HAVING COUNT(cm.Id) >= 3",
        "SELECT c.CountryName FROM countries c, car_makers cm WHERE c.CountryId = cm.Country AND c.Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe') GROUP BY c.CountryName HAVING COUNT(cm.Id) >= 3",
        "SELECT CountryName FROM countries WHERE Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe') AND CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) >= 3)",
        "SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE c.Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe') GROUP BY c.CountryName HAVING COUNT(cm.Id) >= 3",
        "SELECT CountryName FROM countries WHERE Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe') AND CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(Id) >= 3)",
        "SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country JOIN continents ct ON c.Continent = ct.ContId WHERE ct.Continent = 'Europe' GROUP BY c.CountryName HAVING COUNT(cm.Id) >= 3",
        "SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE EXISTS (SELECT 1 FROM continents WHERE Continent = 'Europe' AND ContId = c.Continent) GROUP BY c.CountryName HAVING COUNT(cm.Id) >= 3"
      ]
    ]
  },
  {
    "id": 131,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT MAX(cars_data.Horsepower) AS MaxHorsepower, car_names.Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 3 GROUP BY car_names.Make",
        "SELECT car_names.Make, MAX(cars_data.Horsepower) FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 3 GROUP BY car_names.Make",
        "SELECT MAX(Horsepower) AS MaximumHorsepower, Make FROM cars_data, car_names WHERE cars_data.Id = car_names.MakeId AND Cylinders = 3 GROUP BY Make",
        "SELECT car_names.Make, MAX(cars_data.Horsepower) AS MaxHP FROM cars_data, car_names WHERE cars_data.Id = car_names.MakeId AND cars_data.Cylinders = 3 GROUP BY car_names.Make",
        "SELECT MAX(Horsepower), Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId GROUP BY Make HAVING Cylinders = 3",
        "SELECT car_names.Make, MAX(cars_data.Horsepower) AS MaximumHorsepower FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId AND cars_data.Cylinders = 3 GROUP BY car_names.Make",
        "SELECT Make, MAX(Horsepower) FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Cylinders = 3 GROUP BY Make",
        "SELECT car_names.Make, MAX(cars_data.Horsepower) FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId GROUP BY car_names.Make HAVING cars_data.Cylinders = 3",
        "SELECT MAX(cars_data.Horsepower) AS MaxHP, car_names.Make FROM cars_data, car_names WHERE cars_data.Id = car_names.MakeId AND cars_data.Cylinders = 3 GROUP BY car_names.Make",
        "SELECT car_names.Make, MAX(Horsepower) AS MaxHorsepower FROM cars_data LEFT JOIN car_names ON cars_data.Id = car_names.MakeId WHERE Cylinders = 3 GROUP BY Make"
      ]
    ]
  },
  {
    "id": 132,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT MAX(cars_data.Horsepower), car_names.Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 3 GROUP BY car_names.Make ORDER BY MAX(cars_data.Horsepower) DESC LIMIT 1",
        "SELECT car_names.Make, MAX(cars_data.Horsepower) AS MaxHorsepower FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 3 GROUP BY car_names.Make ORDER BY MaxHorsepower DESC LIMIT 1",
        "SELECT TOP 1 car_names.Make, MAX(cars_data.Horsepower) FROM cars_data, car_names WHERE cars_data.Id = car_names.MakeId AND cars_data.Cylinders = 3 GROUP BY car_names.Make ORDER BY MAX(cars_data.Horsepower) DESC",
        "SELECT car_names.Make, MAX(cars_data.Horsepower) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 3 GROUP BY car_names.Make HAVING MAX(cars_data.Horsepower) = (SELECT MAX(Horsepower) FROM cars_data WHERE Cylinders = 3)",
        "SELECT car_names.Make, Horsepower FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 3 AND cars_data.Horsepower = (SELECT MAX(Horsepower) FROM cars_data WHERE Cylinders = 3)",
        "SELECT car_names.Make, MAX(Horsepower) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE Cylinders = 3 GROUP BY car_names.Make ORDER BY MAX(Horsepower) DESC FETCH FIRST 1 ROWS ONLY",
        "SELECT car_names.Make, MAX(cars_data.Horsepower) AS MaxHP FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 3 GROUP BY car_names.Make ORDER BY MaxHP DESC FETCH FIRST ROW ONLY",
        "SELECT car_names.Make, MAX(cars_data.Horsepower) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 3 GROUP BY car_names.Make ORDER BY MAX(cars_data.Horsepower) DESC LIMIT 1",
        "SELECT car_names.Make, MAX(cars_data.Horsepower) AS MaximumHP FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 3 GROUP BY car_names.Make ORDER BY MaximumHP DESC LIMIT 1",
        "SELECT car_names.Make, MAX(cars_data.Horsepower) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 3 GROUP BY car_names.Make ORDER BY MAX(cars_data.Horsepower) DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 133,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT Model FROM car_names WHERE MakeId = (SELECT Id FROM cars_data ORDER BY MPG DESC LIMIT 1)",
        "SELECT cn.Model FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id ORDER BY cd.MPG DESC LIMIT 1",
        "SELECT cn.Model FROM car_names cn INNER JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.MPG = (SELECT MAX(MPG) FROM cars_data)",
        "SELECT TOP 1 cn.Model FROM car_names cn, cars_data cd WHERE cn.MakeId = cd.Id ORDER BY cd.MPG DESC",
        "SELECT cn.Model FROM car_names cn WHERE cn.MakeId IN (SELECT cd.Id FROM cars_data cd WHERE cd.MPG = (SELECT MAX(MPG) FROM cars_data))",
        "SELECT Model FROM car_names WHERE MakeId = (SELECT Id FROM cars_data WHERE MPG = (SELECT MAX(MPG) FROM cars_data))",
        "SELECT cn.Model FROM car_names cn JOIN (SELECT Id, MAX(MPG) AS MaxMPG FROM cars_data GROUP BY Id) cd ON cn.MakeId = cd.Id",
        "SELECT cn.Model FROM car_names cn, cars_data cd WHERE cn.MakeId = cd.Id AND cd.MPG >= ALL (SELECT MPG FROM cars_data)",
        "SELECT cn.Model FROM car_names cn WHERE cn.MakeId = (SELECT Id FROM cars_data cd WHERE cd.MPG >= ALL (SELECT MPG FROM cars_data))",
        "SELECT Model FROM car_names WHERE MakeId = (SELECT Id FROM cars_data ORDER BY MPG DESC FETCH FIRST ROW ONLY)"
      ]
    ]
  },
  {
    "id": 134,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT Model FROM car_names WHERE MakeId = (SELECT Id FROM cars_data ORDER BY MPG DESC LIMIT 1)",
        "SELECT cn.Model FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id ORDER BY cd.MPG DESC LIMIT 1",
        "SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE MPG = (SELECT MAX(MPG) FROM cars_data))",
        "SELECT TOP 1 cn.Model FROM car_names cn INNER JOIN cars_data cd ON cn.MakeId = cd.Id ORDER BY cd.MPG DESC",
        "SELECT cn.Model FROM car_names cn, cars_data cd WHERE cn.MakeId = cd.Id AND cd.MPG = (SELECT MAX(MPG) FROM cars_data)",
        "SELECT Model FROM car_names WHERE MakeId = (SELECT Id FROM cars_data WHERE MPG = MAX(MPG))",
        "SELECT cn.Model FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.MPG >= ALL (SELECT MPG FROM cars_data)",
        "SELECT Model FROM (SELECT cn.Model, cd.MPG FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id ORDER BY cd.MPG DESC) WHERE ROWNUM = 1",
        "SELECT cn.Model FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id ORDER BY cd.MPG DESC FETCH FIRST ROW ONLY",
        "SELECT Model FROM car_names WHERE MakeId = (SELECT Id FROM cars_data ORDER BY MPG DESC FETCH FIRST ROW ONLY)"
      ]
    ]
  },
  {
    "id": 135,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980",
        "SELECT AVG(Horsepower) AS AverageHorsepower FROM cars_data WHERE Year < '1980'",
        "SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980",
        "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980",
        "SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980",
        "SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980",
        "SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980",
        "SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980",
        "SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980",
        "SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980"
      ]
    ]
  },
  {
    "id": 136,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980",
        "SELECT AVG(Horsepower) AS AverageHorsepower FROM cars_data WHERE Year < '1980'",
        "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980",
        "SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980 GROUP BY Year",
        "SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980 AND Horsepower IS NOT NULL",
        "SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980 AND Horsepower > 0",
        "SELECT AVG(Horsepower) AS AvgHP FROM cars_data WHERE Year < 1980",
        "SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980 ORDER BY Horsepower",
        "SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980 AND Horsepower IS NOT NULL GROUP BY Year",
        "SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980 AND Horsepower > 0 GROUP BY Year"
      ]
    ]
  },
  {
    "id": 137,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT AVG(cars_data.Edispl) AS Average_Edispl FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = 'Volvo'",
        "SELECT AVG(Edispl) FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = 'Volvo'",
        "SELECT AVG(cars_data.Edispl) FROM cars_data, car_names WHERE cars_data.Id = car_names.MakeId AND car_names.Model = 'Volvo'",
        "SELECT AVG(Edispl) AS AvgEdispl FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cn.Model = 'Volvo'",
        "SELECT AVG(cd.Edispl) FROM cars_data cd INNER JOIN car_names cn ON cd.Id = cn.MakeId AND cn.Model = 'Volvo'",
        "SELECT AVG(Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId AND car_names.Model = 'Volvo'",
        "SELECT AVG(cars_data.Edispl) FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId AND car_names.Model = 'Volvo'",
        "SELECT AVG(Edispl) FROM cars_data, car_names WHERE cars_data.Id = car_names.MakeId AND car_names.Model = 'Volvo' GROUP BY car_names.Model",
        "SELECT AVG(Edispl) FROM cars_data cd, car_names cn WHERE cd.Id = cn.MakeId AND cn.Model = 'Volvo'",
        "SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = 'Volvo' GROUP BY car_names.Model"
      ]
    ]
  },
  {
    "id": 138,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'Volvo'",
        "SELECT AVG(Edispl) AS AverageDisplacement FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId INNER JOIN model_list ON car_names.Model = model_list.Model INNER JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'Volvo'",
        "SELECT AVG(cd.Edispl) FROM cars_data cd, car_names cn, model_list ml, car_makers cm WHERE cd.Id = cn.MakeId AND cn.Model = ml.Model AND ml.Maker = cm.Id AND cm.Maker = 'Volvo'",
        "SELECT AVG(Edispl) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Maker = 'Volvo')))",
        "SELECT AVG(Edispl) FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.Maker = 'Volvo'",
        "SELECT AVG(cars_data.Edispl) AS AvgEdispl FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'Volvo Corporation'",
        "SELECT AVG(Edispl) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'Volvo')))",
        "SELECT AVG(Edispl) FROM cars_data, car_names, model_list, car_makers WHERE cars_data.Id = car_names.MakeId AND car_names.Model = model_list.Model AND model_list.Maker = car_makers.Id AND car_makers.Maker = 'Volvo'",
        "SELECT AVG(Edispl) FROM cars_data cd INNER JOIN car_names cn ON cd.Id = cn.MakeId INNER JOIN model_list ml ON cn.Model = ml.Model INNER JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.Maker = 'Volvo'",
        "SELECT AVG(Edispl) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE FullName = 'Volvo')))"
      ]
    ]
  },
  {
    "id": 139,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT Cylinders, MAX(Accelerate) AS MaxAccelerate FROM cars_data GROUP BY Cylinders",
        "SELECT Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders",
        "SELECT MAX(Accelerate) AS MaximumAcceleration, Cylinders FROM cars_data GROUP BY Cylinders ORDER BY Cylinders",
        "SELECT Cylinders, MAX(Accelerate) AS MaxAccel FROM cars_data GROUP BY Cylinders ORDER BY Cylinders ASC",
        "SELECT Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders ORDER BY MAX(Accelerate) DESC",
        "SELECT DISTINCT Cylinders, MAX(Accelerate) OVER (PARTITION BY Cylinders) AS MaxAcceleration FROM cars_data",
        "SELECT Cylinders, MAX(Accelerate) AS MaxAcceleration FROM cars_data GROUP BY Cylinders HAVING MAX(Accelerate) IS NOT NULL",
        "SELECT Cylinders, MAX(Accelerate) AS MaximumAcceleration FROM cars_data GROUP BY Cylinders ORDER BY Cylinders DESC",
        "SELECT Cylinders, MAX(Accelerate) AS MaxAccel FROM cars_data GROUP BY Cylinders HAVING COUNT(*) > 1",
        "SELECT Cylinders, MAX(Accelerate) AS MaxAcceleration FROM cars_data GROUP BY Cylinders ORDER BY Cylinders ASC, MaxAcceleration DESC"
      ]
    ]
  },
  {
    "id": 140,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT MAX(Accelerate), Cylinders FROM cars_data GROUP BY Cylinders",
        "SELECT Cylinders, MAX(Accelerate) AS MaxAccelerate FROM cars_data GROUP BY Cylinders",
        "SELECT Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders ORDER BY Cylinders",
        "SELECT Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders ORDER BY MAX(Accelerate) DESC",
        "SELECT Cylinders, MAX(Accelerate) AS MaximumAcceleration FROM cars_data GROUP BY Cylinders",
        "SELECT DISTINCT Cylinders, MAX(Accelerate) OVER (PARTITION BY Cylinders) AS MaxAccel FROM cars_data",
        "SELECT Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders HAVING MAX(Accelerate) IS NOT NULL",
        "SELECT Cylinders, MAX(Accelerate) AS MaxAccel FROM cars_data GROUP BY Cylinders ORDER BY Cylinders ASC",
        "SELECT Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders ORDER BY Cylinders DESC",
        "SELECT Cylinders, MAX(Accelerate) AS MaxAcceleration FROM cars_data GROUP BY Cylinders ORDER BY MaxAcceleration DESC"
      ]
    ]
  },
  {
    "id": 141,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT ModelId FROM model_list JOIN car_names ON model_list.Model = car_names.Model GROUP BY ModelId ORDER BY COUNT(DISTINCT car_names.MakeId) DESC LIMIT 1",
        "SELECT M.ModelId FROM model_list M INNER JOIN car_names C ON M.Model = C.Model GROUP BY M.ModelId HAVING COUNT(DISTINCT C.MakeId) = (SELECT MAX(COUNTS) FROM (SELECT COUNT(DISTINCT MakeId) AS COUNTS FROM car_names GROUP BY Model) AS SubQuery)",
        "SELECT TOP 1 ModelId FROM model_list JOIN car_names ON model_list.Model = car_names.Model GROUP BY ModelId ORDER BY COUNT(DISTINCT car_names.MakeId) DESC",
        "SELECT ModelId FROM (SELECT ModelId, COUNT(DISTINCT MakeId) AS VersionCount FROM model_list JOIN car_names ON model_list.Model = car_names.Model GROUP BY ModelId) AS SubQuery WHERE VersionCount = (SELECT MAX(VersionCount) FROM (SELECT COUNT(DISTINCT MakeId) AS VersionCount FROM model_list JOIN car_names ON model_list.Model = car_names.Model GROUP BY ModelId) AS SubQuery2)",
        "SELECT model_list.ModelId, COUNT(DISTINCT car_names.MakeId) AS Versions FROM model_list INNER JOIN car_names ON model_list.Model = car_names.Model GROUP BY model_list.ModelId ORDER BY Versions DESC LIMIT 1",
        "SELECT ModelId FROM model_list WHERE Model IN (SELECT Model FROM car_names GROUP BY Model HAVING COUNT(DISTINCT MakeId) = (SELECT MAX(Count) FROM (SELECT COUNT(DISTINCT MakeId) AS Count FROM car_names GROUP BY Model) AS Counts))",
        "SELECT ModelId FROM model_list AS m JOIN (SELECT Model, COUNT(DISTINCT MakeId) AS MakeCount FROM car_names GROUP BY Model) AS c ON m.Model = c.Model ORDER BY MakeCount DESC LIMIT 1",
        "SELECT m.ModelId FROM model_list m JOIN car_names c ON m.Model = c.Model GROUP BY m.ModelId ORDER BY COUNT(DISTINCT c.MakeId) DESC FETCH FIRST 1 ROWS ONLY",
        "SELECT ModelId FROM model_list WHERE Model IN (SELECT Model FROM car_names GROUP BY Model ORDER BY COUNT(DISTINCT MakeId) DESC LIMIT 1)",
        "SELECT m.ModelId FROM model_list m, car_names c WHERE m.Model = c.Model GROUP BY m.ModelId HAVING COUNT(DISTINCT c.MakeId) = (SELECT MAX(COUNT(DISTINCT MakeId)) FROM car_names GROUP BY Model)"
      ]
    ]
  },
  {
    "id": 142,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT ModelId FROM model_list JOIN car_names ON model_list.Model = car_names.Model GROUP BY ModelId ORDER BY COUNT(DISTINCT MakeId) DESC LIMIT 1",
        "SELECT M.ModelId FROM model_list M INNER JOIN car_names C ON M.Model = C.Model GROUP BY M.ModelId ORDER BY COUNT(DISTINCT C.MakeId) DESC FETCH FIRST 1 ROW ONLY",
        "SELECT TOP 1 model_list.ModelId FROM model_list JOIN car_names ON model_list.Model = car_names.Model GROUP BY model_list.ModelId ORDER BY COUNT(DISTINCT car_names.MakeId) DESC",
        "SELECT model_list.ModelId, COUNT(DISTINCT car_names.MakeId) AS MakeCount FROM model_list INNER JOIN car_names ON model_list.Model = car_names.Model GROUP BY model_list.ModelId ORDER BY MakeCount DESC LIMIT 1",
        "SELECT model_list.ModelId FROM model_list, car_names WHERE model_list.Model = car_names.Model GROUP BY model_list.ModelId HAVING COUNT(DISTINCT car_names.MakeId) = (SELECT MAX(Cnt) FROM (SELECT COUNT(DISTINCT MakeId) AS Cnt FROM car_names GROUP BY Model) AS SubQuery)",
        "SELECT model_list.ModelId FROM model_list JOIN car_names ON model_list.Model = car_names.Model GROUP BY model_list.ModelId HAVING COUNT(DISTINCT car_names.MakeId) >= ALL (SELECT COUNT(DISTINCT MakeId) FROM car_names GROUP BY Model)",
        "SELECT FIRST(ModelId) FROM (SELECT ModelId FROM model_list JOIN car_names ON model_list.Model = car_names.Model GROUP BY ModelId ORDER BY COUNT(DISTINCT MakeId) DESC)",
        "WITH RankedModels AS (SELECT model_list.ModelId, RANK() OVER (ORDER BY COUNT(DISTINCT car_names.MakeId) DESC) AS Rank FROM model_list JOIN car_names ON model_list.Model = car_names.Model GROUP BY model_list.ModelId) SELECT ModelId FROM RankedModels WHERE Rank = 1",
        "SELECT model_list.ModelId FROM model_list JOIN car_names ON model_list.Model = car_names.Model GROUP BY model_list.ModelId ORDER BY COUNT(DISTINCT car_names.MakeId) DESC LIMIT 1",
        "SELECT model_list.ModelId FROM model_list INNER JOIN car_names ON model_list.Model = car_names.Model GROUP BY model_list.ModelId ORDER BY COUNT(DISTINCT car_names.MakeId) DESC FETCH FIRST ROW ONLY"
      ]
    ]
  },
  {
    "id": 143,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4",
        "SELECT COUNT(Id) FROM cars_data WHERE Cylinders > 4",
        "SELECT COUNT(*) AS NumberOfCars FROM cars_data WHERE Cylinders > 4",
        "SELECT COUNT(Id) AS CarCount FROM cars_data WHERE Cylinders > 4",
        "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4 GROUP BY Cylinders",
        "SELECT COUNT(Id) FROM cars_data WHERE Cylinders > 4 GROUP BY Cylinders",
        "SELECT COUNT(*) FROM cars_data GROUP BY Cylinders HAVING Cylinders > 4",
        "SELECT COUNT(Id) FROM cars_data GROUP BY Cylinders HAVING Cylinders > 4",
        "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4 ORDER BY Cylinders",
        "SELECT COUNT(Id) FROM cars_data WHERE Cylinders > 4 ORDER BY Cylinders"
      ]
    ]
  },
  {
    "id": 144,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4",
        "SELECT COUNT(Id) FROM cars_data WHERE Cylinders > 4",
        "SELECT COUNT(*) AS NumberOfCars FROM cars_data WHERE Cylinders > 4",
        "SELECT COUNT(Id) AS CarCount FROM cars_data WHERE Cylinders > 4",
        "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4 GROUP BY Cylinders",
        "SELECT COUNT(*) FROM cars_data GROUP BY Cylinders HAVING Cylinders > 4",
        "SELECT Cylinders, COUNT(*) FROM cars_data WHERE Cylinders > 4 GROUP BY Cylinders",
        "SELECT Cylinders, COUNT(*) AS NumberOfCars FROM cars_data GROUP BY Cylinders HAVING Cylinders > 4",
        "SELECT COUNT(DISTINCT Id) FROM cars_data WHERE Cylinders > 4",
        "SELECT COUNT(DISTINCT Id) AS UniqueCars FROM cars_data WHERE Cylinders > 4"
      ]
    ]
  },
  {
    "id": 145,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM cars_data WHERE Year = 1980",
        "SELECT COUNT(Id) FROM cars_data WHERE Year = '1980'",
        "SELECT COUNT(*) AS TotalCars FROM cars_data WHERE Year = 1980",
        "SELECT COUNT(Id) AS CarCount FROM cars_data WHERE Year = '1980'",
        "SELECT COUNT(*) FROM cars_data WHERE Year = 1980 GROUP BY Year",
        "SELECT COUNT(Id) FROM cars_data WHERE Year = 1980 GROUP BY Year",
        "SELECT COUNT(*) FROM cars_data WHERE Year = '1980' GROUP BY Year",
        "SELECT COUNT(Id) AS Total FROM cars_data WHERE Year = 1980 GROUP BY Year",
        "SELECT Year, COUNT(*) FROM cars_data WHERE Year = 1980 GROUP BY Year",
        "SELECT Year, COUNT(Id) FROM cars_data WHERE Year = 1980 GROUP BY Year"
      ]
    ]
  },
  {
    "id": 146,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM cars_data WHERE Year = 1980",
        "SELECT COUNT(Id) FROM cars_data WHERE Year = '1980'",
        "SELECT COUNT(*) AS NumberOfCars FROM cars_data WHERE Year = 1980",
        "SELECT COUNT(Id) AS CarCount FROM cars_data WHERE Year = '1980'",
        "SELECT COUNT(*) FROM cars_data WHERE Year = 1980 GROUP BY Year",
        "SELECT COUNT(Id) FROM cars_data WHERE Year = 1980 GROUP BY Year",
        "SELECT Year, COUNT(*) FROM cars_data WHERE Year = 1980 GROUP BY Year",
        "SELECT Year, COUNT(Id) AS TotalCars FROM cars_data WHERE Year = 1980 GROUP BY Year",
        "SELECT COUNT(*) FROM cars_data WHERE Year = 1980 AND Id IS NOT NULL",
        "SELECT COUNT(Id) FROM cars_data WHERE Year = 1980 AND Id IS NOT NULL GROUP BY Year"
      ]
    ]
  },
  {
    "id": 147,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT COUNT(model_list.Model) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'American Motor Company'",
        "SELECT COUNT(*) FROM model_list INNER JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'American Motor Company'",
        "SELECT COUNT(DISTINCT model_list.Model) FROM model_list, car_makers WHERE model_list.Maker = car_makers.Id AND car_makers.FullName = 'American Motor Company'",
        "SELECT COUNT(model_list.Model) AS TotalModels FROM model_list LEFT JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'American Motor Company'",
        "SELECT COUNT(*) FROM model_list m JOIN car_makers c ON m.Maker = c.Id WHERE c.FullName = 'American Motor Company'",
        "SELECT COUNT(model_list.Model) FROM model_list INNER JOIN car_makers ON model_list.Maker = car_makers.Id AND car_makers.FullName = 'American Motor Company'",
        "SELECT COUNT(model_list.Model) FROM model_list m, car_makers c WHERE m.Maker = c.Id AND c.FullName = 'American Motor Company'",
        "SELECT COUNT(*) FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE FullName = 'American Motor Company')",
        "SELECT COUNT(model_list.Model) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName LIKE 'American Motor Company'",
        "SELECT COUNT(model_list.Model) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'American Motor Company' GROUP BY car_makers.FullName"
      ]
    ]
  },
  {
    "id": 148,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT COUNT(model_list.Model) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'American Motor Company'",
        "SELECT COUNT(*) FROM model_list INNER JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'American Motor Company'",
        "SELECT COUNT(DISTINCT model_list.Model) FROM model_list, car_makers WHERE model_list.Maker = car_makers.Id AND car_makers.FullName = 'American Motor Company'",
        "SELECT COUNT(model_list.Model) FROM model_list, car_makers WHERE model_list.Maker = car_makers.Id AND car_makers.FullName = 'American Motor Company'",
        "SELECT COUNT(model_list.Model) FROM model_list INNER JOIN car_makers ON model_list.Maker = car_makers.Id AND car_makers.FullName = 'American Motor Company'",
        "SELECT COUNT(model_list.Model) AS NumberOfModels FROM model_list LEFT JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'American Motor Company'",
        "SELECT COUNT(*) FROM model_list m JOIN car_makers c ON m.Maker = c.Id WHERE c.FullName = 'American Motor Company'",
        "SELECT COUNT(model_list.Model) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id AND car_makers.FullName = 'American Motor Company'",
        "SELECT COUNT(model_list.Model) FROM model_list INNER JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'American Motor Company' GROUP BY car_makers.FullName",
        "SELECT COUNT(model_list.Model) FROM model_list LEFT JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'American Motor Company'"
      ]
    ]
  },
  {
    "id": 149,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT cm.FullName, cm.Id FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName HAVING COUNT(ml.Model) > 3",
        "SELECT FullName, Id FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(Model) > 3)",
        "SELECT c.FullName, c.Id FROM car_makers c INNER JOIN model_list m ON c.Id = m.Maker GROUP BY c.Id, c.FullName HAVING COUNT(m.Model) > 3",
        "SELECT FullName, Id FROM car_makers AS cm JOIN (SELECT Maker, COUNT(*) AS ModelCount FROM model_list GROUP BY Maker HAVING ModelCount > 3) AS ml ON cm.Id = ml.Maker",
        "SELECT cm.FullName, cm.Id FROM car_makers cm, model_list ml WHERE cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName HAVING COUNT(DISTINCT ml.Model) > 3",
        "SELECT DISTINCT cm.FullName, cm.Id FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName HAVING COUNT(ml.Model) > 3",
        "SELECT FullName, Id FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(DISTINCT Model) > 3)",
        "SELECT c.FullName, c.Id FROM car_makers c JOIN model_list m ON c.Id = m.Maker GROUP BY c.Id, c.FullName HAVING COUNT(DISTINCT m.Model) > 3",
        "SELECT FullName, Id FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName HAVING COUNT(*) > 3",
        "SELECT cm.FullName, cm.Id FROM car_makers cm LEFT JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName HAVING COUNT(ml.Model) > 3"
      ]
    ]
  },
  {
    "id": 150,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT cm.Id, cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.Maker HAVING COUNT(ml.Model) > 3",
        "SELECT car_makers.Id, car_makers.Maker FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(model_list.Model) > 3",
        "SELECT Id, Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(Model) > 3)",
        "SELECT m.Id, m.Maker FROM car_makers m, model_list l WHERE m.Id = l.Maker GROUP BY m.Id, m.Maker HAVING COUNT(l.Model) > 3",
        "SELECT DISTINCT cm.Id, cm.Maker FROM car_makers cm, model_list ml WHERE cm.Id = ml.Maker GROUP BY cm.Id, cm.Maker HAVING COUNT(DISTINCT ml.Model) > 3",
        "SELECT cm.Id, cm.Maker FROM car_makers AS cm JOIN model_list AS ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.Maker HAVING COUNT(*) > 3",
        "SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(model_list.Model) > 3",
        "SELECT Id, Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) > 3)",
        "SELECT cm.Id, cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.Maker HAVING COUNT(ml.Model) > 3 ORDER BY cm.Maker",
        "SELECT Id, Maker FROM car_makers cm JOIN (SELECT Maker, COUNT(Model) AS ModelCount FROM model_list GROUP BY Maker) ml ON cm.Id = ml.Maker WHERE ml.ModelCount > 3"
      ]
    ]
  },
  {
    "id": 151,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT DISTINCT car_names.Model FROM car_names JOIN model_list ON car_names.MakeId = model_list.ModelId JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500",
        "SELECT DISTINCT Model FROM car_names INNER JOIN model_list ON car_names.MakeId = model_list.ModelId INNER JOIN car_makers ON model_list.Maker = car_makers.Id INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500",
        "SELECT DISTINCT cn.Model FROM car_names cn, model_list ml, car_makers cm, cars_data cd WHERE cn.MakeId = ml.ModelId AND ml.Maker = cm.Id AND cn.MakeId = cd.Id AND (cm.FullName = 'General Motors' OR cd.Weight > 3500)",
        "SELECT DISTINCT cn.Model FROM car_names AS cn JOIN model_list AS ml ON cn.MakeId = ml.ModelId JOIN car_makers AS cm ON ml.Maker = cm.Id JOIN cars_data AS cd ON cn.MakeId = cd.Id WHERE cm.FullName = 'General Motors' OR cd.Weight > 3500",
        "SELECT DISTINCT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Weight > 3500 UNION SELECT ModelId FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE FullName = 'General Motors'))",
        "SELECT DISTINCT cn.Model FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id JOIN model_list ml ON cn.MakeId = ml.ModelId JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.FullName = 'General Motors' OR cd.Weight > 3500",
        "SELECT DISTINCT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Weight > 3500) OR MakeId IN (SELECT ModelId FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE FullName = 'General Motors'))",
        "SELECT DISTINCT cn.Model FROM car_names cn LEFT JOIN cars_data cd ON cn.MakeId = cd.Id LEFT JOIN model_list ml ON cn.MakeId = ml.ModelId LEFT JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.FullName = 'General Motors' OR cd.Weight > 3500",
        "SELECT DISTINCT Model FROM car_names cn JOIN model_list ml ON cn.MakeId = ml.ModelId JOIN car_makers cm ON ml.Maker = cm.Id JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cm.FullName = 'General Motors' OR cd.Weight > 3500",
        "SELECT DISTINCT cn.Model FROM car_names cn, model_list ml, car_makers cm, cars_data cd WHERE cn.MakeId = ml.ModelId AND ml.Maker = cm.Id AND cn.MakeId = cd.Id AND (cm.FullName = 'General Motors' OR cd.Weight > 3500)"
      ]
    ]
  },
  {
    "id": 152,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT DISTINCT cn.Model FROM car_names cn JOIN car_makers cm ON cn.MakeId = cm.Id JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cm.Maker = 'General Motors' OR cd.Weight > 3500",
        "SELECT DISTINCT Model FROM car_names WHERE MakeId IN (SELECT Id FROM car_makers WHERE Maker = 'General Motors') OR MakeId IN (SELECT Id FROM cars_data WHERE Weight > 3500)",
        "SELECT DISTINCT cn.Model FROM car_names cn, car_makers cm, cars_data cd WHERE cn.MakeId = cm.Id AND cn.MakeId = cd.Id AND (cm.Maker = 'General Motors' OR cd.Weight > 3500)",
        "SELECT DISTINCT Model FROM car_names WHERE MakeId IN (SELECT Id FROM car_makers WHERE Maker = 'General Motors' UNION SELECT Id FROM cars_data WHERE Weight > 3500)",
        "SELECT DISTINCT Model FROM car_names cn INNER JOIN car_makers cm ON cn.MakeId = cm.Id WHERE cm.Maker = 'General Motors' UNION SELECT DISTINCT Model FROM car_names cn INNER JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Weight > 3500",
        "SELECT DISTINCT cn.Model FROM car_names cn LEFT JOIN car_makers cm ON cn.MakeId = cm.Id LEFT JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cm.Maker = 'General Motors' OR cd.Weight > 3500",
        "SELECT DISTINCT Model FROM car_names WHERE MakeId IN (SELECT Id FROM car_makers WHERE Maker = 'General Motors') UNION ALL SELECT DISTINCT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Weight > 3500)",
        "SELECT DISTINCT cn.Model FROM car_names cn JOIN car_makers cm ON cn.MakeId = cm.Id WHERE cm.Maker = 'General Motors' UNION SELECT DISTINCT cn.Model FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Weight > 3500",
        "SELECT DISTINCT Model FROM car_names cn JOIN car_makers cm ON cn.MakeId = cm.Id JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cm.Maker = 'General Motors' OR cd.Weight > 3500",
        "SELECT DISTINCT cn.Model FROM car_names cn, car_makers cm, cars_data cd WHERE cn.MakeId = cm.Id AND cn.MakeId = cd.Id AND (cm.Maker = 'General Motors' OR cd.Weight > 3500)"
      ]
    ]
  },
  {
    "id": 153,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT DISTINCT Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000",
        "SELECT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000 GROUP BY Year",
        "SELECT Year FROM cars_data GROUP BY Year HAVING MIN(Weight) >= 3000 AND MAX(Weight) <= 4000",
        "SELECT DISTINCT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000",
        "SELECT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000",
        "SELECT Year FROM (SELECT Year, Weight FROM cars_data) AS subquery WHERE Weight BETWEEN 3000 AND 4000 GROUP BY Year",
        "SELECT DISTINCT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000 ORDER BY Year",
        "SELECT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000 DISTINCT",
        "SELECT Year, COUNT(*) FROM cars_data WHERE Weight BETWEEN 3000 AND 4000 GROUP BY Year HAVING COUNT(*) > 0",
        "SELECT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000 ORDER BY Year"
      ]
    ]
  },
  {
    "id": 154,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 INTERSECT SELECT DISTINCT Year FROM cars_data WHERE Weight > 3000",
        "SELECT Year FROM (SELECT Year FROM cars_data WHERE Weight < 4000 UNION SELECT Year FROM cars_data WHERE Weight > 3000) GROUP BY Year HAVING COUNT(*) > 1",
        "SELECT Year FROM cars_data WHERE Year IN (SELECT Year FROM cars_data WHERE Weight < 4000) AND Year IN (SELECT Year FROM cars_data WHERE Weight > 3000) GROUP BY Year",
        "WITH Under4000 AS (SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000), Over3000 AS (SELECT DISTINCT Year FROM cars_data WHERE Weight > 3000) SELECT Year FROM Under4000 WHERE Year IN (SELECT Year FROM Over3000)",
        "SELECT DISTINCT a.Year FROM cars_data a JOIN cars_data b ON a.Year = b.Year WHERE a.Weight < 4000 AND b.Weight > 3000",
        "SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 AND Year IN (SELECT DISTINCT Year FROM cars_data WHERE Weight > 3000)",
        "SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 UNION SELECT DISTINCT Year FROM cars_data WHERE Weight > 3000 HAVING COUNT(Year) > 1",
        "SELECT DISTINCT Year FROM cars_data a WHERE EXISTS (SELECT 1 FROM cars_data b WHERE a.Year = b.Year AND b.Weight > 3000) AND a.Weight < 4000",
        "SELECT Year FROM cars_data GROUP BY Year HAVING MAX(Weight) > 3000 AND MIN(Weight) < 4000",
        "SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 OR Weight > 3000 GROUP BY Year HAVING COUNT(DISTINCT CASE WHEN Weight < 4000 THEN 'under' WHEN Weight > 3000 THEN 'over' END) = 2"
      ]
    ]
  },
  {
    "id": 155,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)",
        "SELECT c.Horsepower FROM cars_data c ORDER BY c.Accelerate DESC LIMIT 1",
        "SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data LIMIT 1)",
        "SELECT TOP 1 Horsepower FROM cars_data ORDER BY Accelerate DESC",
        "SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC FETCH FIRST 1 ROW ONLY",
        "SELECT c.Horsepower FROM cars_data c WHERE c.Accelerate = (SELECT MAX(Accelerate) FROM cars_data)",
        "SELECT Horsepower FROM cars_data WHERE Accelerate IN (SELECT MAX(Accelerate) FROM cars_data)",
        "SELECT Horsepower FROM (SELECT Horsepower, RANK() OVER (ORDER BY Accelerate DESC) AS rank FROM cars_data) WHERE rank = 1",
        "SELECT Horsepower FROM cars_data WHERE Accelerate >= ALL (SELECT Accelerate FROM cars_data)",
        "SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data) LIMIT 1"
      ]
    ]
  },
  {
    "id": 156,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)",
        "SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1",
        "SELECT c.Horsepower FROM cars_data c WHERE c.Accelerate = (SELECT MAX(Accelerate) FROM cars_data)",
        "SELECT Horsepower FROM cars_data WHERE Accelerate IN (SELECT MAX(Accelerate) FROM cars_data)",
        "SELECT Horsepower FROM cars_data AS cd WHERE cd.Accelerate = (SELECT MAX(Accelerate) FROM cars_data AS cd2)",
        "SELECT TOP 1 Horsepower FROM cars_data ORDER BY Accelerate DESC",
        "SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data GROUP BY Accelerate)",
        "SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data) LIMIT 1",
        "SELECT Horsepower FROM (SELECT Horsepower, RANK() OVER (ORDER BY Accelerate DESC) AS rank FROM cars_data) WHERE rank = 1",
        "SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data) FETCH FIRST ROW ONLY"
      ]
    ]
  },
  {
    "id": 157,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT Cylinders FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = 'Volvo' ORDER BY Accelerate ASC LIMIT 1",
        "SELECT cd.Cylinders FROM cars_data cd INNER JOIN car_names cn ON cd.Id = cn.MakeId WHERE cn.Model = 'Volvo' ORDER BY cd.Accelerate ASC FETCH FIRST 1 ROW ONLY",
        "SELECT TOP 1 Cylinders FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = 'Volvo' ORDER BY Accelerate",
        "SELECT Cylinders FROM cars_data, car_names WHERE cars_data.Id = car_names.MakeId AND car_names.Model = 'Volvo' ORDER BY Accelerate LIMIT 1",
        "SELECT Cylinders FROM (SELECT * FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = 'Volvo' ORDER BY Accelerate) AS VolvoCars LIMIT 1",
        "SELECT Cylinders FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId AND car_names.Model = 'Volvo' ORDER BY Accelerate ASC LIMIT 1",
        "SELECT MIN(Cylinders) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = 'Volvo' GROUP BY Accelerate ORDER BY Accelerate ASC LIMIT 1",
        "SELECT Cylinders FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cn.Model = 'Volvo' ORDER BY cd.Accelerate ASC LIMIT 1",
        "SELECT Cylinders FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = 'Volvo' ORDER BY Accelerate ASC LIMIT 1",
        "SELECT Cylinders FROM cars_data AS cd JOIN car_names AS cn ON cd.Id = cn.MakeId WHERE cn.Model = 'Volvo' ORDER BY cd.Accelerate ASC LIMIT 1"
      ]
    ]
  },
  {
    "id": 158,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT Cylinders FROM cars_data WHERE Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'Volvo'))))",
        "SELECT Cylinders FROM cars_data WHERE Id = (SELECT Id FROM cars_data WHERE Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'Volvo')))",
        "SELECT Cylinders FROM cars_data WHERE Accelerate = (SELECT MIN(Accelerate) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'Volvo')",
        "SELECT Cylinders FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'Volvo')) AND Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'Volvo')))))",
        "SELECT Cylinders FROM cars_data WHERE Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'Volvo')))",
        "SELECT Cylinders FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Model = (SELECT Model FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'Volvo') AND Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'Volvo')))))",
        "SELECT Cylinders FROM cars_data WHERE Accelerate = (SELECT MIN(Accelerate) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model IN (SELECT Model FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'Volvo')))",
        "SELECT Cylinders FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'Volvo') AND Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'Volvo'))))",
        "SELECT Cylinders FROM cars_data WHERE Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'Volvo')))) AND Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'Volvo')))",
        "SELECT Cylinders FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'Volvo')) AND Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'Volvo')))))"
      ]
    ]
  },
  {
    "id": 159,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)",
        "SELECT COUNT(Id) AS NumberOfCars FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)",
        "SELECT COUNT(*) FROM cars_data WHERE Accelerate > ALL (SELECT Horsepower FROM cars_data)",
        "WITH MaxHP AS (SELECT MAX(Horsepower) AS MaxHorsepower FROM cars_data) SELECT COUNT(*) FROM cars_data, MaxHP WHERE cars_data.Accelerate > MaxHP.MaxHorsepower",
        "SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT Horsepower FROM cars_data ORDER BY Horsepower DESC LIMIT 1)",
        "SELECT COUNT(Id) FROM cars_data WHERE Accelerate > (SELECT Horsepower FROM cars_data ORDER BY Horsepower DESC FETCH FIRST ROW ONLY)",
        "SELECT COUNT(*) FROM cars_data c1 WHERE c1.Accelerate > (SELECT MAX(c2.Horsepower) FROM cars_data c2)",
        "SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT TOP 1 Horsepower FROM cars_data ORDER BY Horsepower DESC)",
        "SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT Horsepower FROM cars_data WHERE Horsepower = (SELECT MAX(Horsepower) FROM cars_data))",
        "SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data WHERE Horsepower IS NOT NULL)"
      ]
    ]
  },
  {
    "id": 160,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT Accelerate FROM cars_data WHERE Horsepower = (SELECT MAX(Horsepower) FROM cars_data))",
        "SELECT COUNT(Id) AS NumberOfCars FROM cars_data WHERE Accelerate > (SELECT Accelerate FROM cars_data ORDER BY Horsepower DESC LIMIT 1)",
        "SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT Accelerate FROM cars_data WHERE Horsepower IN (SELECT MAX(Horsepower) FROM cars_data))",
        "SELECT COUNT(*) FROM cars_data a WHERE a.Accelerate > (SELECT b.Accelerate FROM cars_data b WHERE b.Horsepower = (SELECT MAX(Horsepower) FROM cars_data))",
        "SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT Accelerate FROM cars_data WHERE Horsepower = (SELECT MAX(Horsepower) FROM cars_data LIMIT 1))",
        "SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Accelerate) FROM cars_data WHERE Horsepower = (SELECT MAX(Horsepower) FROM cars_data))",
        "SELECT COUNT(*) FROM cars_data WHERE Accelerate > ALL (SELECT Accelerate FROM cars_data WHERE Horsepower = (SELECT MAX(Horsepower) FROM cars_data))",
        "SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT TOP 1 Accelerate FROM cars_data ORDER BY Horsepower DESC)",
        "SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT Accelerate FROM cars_data WHERE Horsepower >= ALL (SELECT Horsepower FROM cars_data))",
        "SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT Accelerate FROM cars_data WHERE Horsepower = (SELECT MAX(Horsepower) FROM cars_data) FETCH FIRST ROW ONLY)"
      ]
    ]
  },
  {
    "id": 161,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT Country) FROM car_makers GROUP BY Country HAVING COUNT(Id) > 2",
        "SELECT COUNT(*) FROM (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(Id) > 2) AS derivedTable",
        "SELECT COUNT(*) FROM (SELECT Country, COUNT(Id) AS MakerCount FROM car_makers GROUP BY Country HAVING MakerCount > 2) AS result",
        "WITH CTE AS (SELECT Country, COUNT(Id) AS NumMakers FROM car_makers GROUP BY Country) SELECT COUNT(*) FROM CTE WHERE NumMakers > 2",
        "SELECT COUNT(Country) FROM (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(Id) > 2) sub",
        "SELECT COUNT(*) FROM (SELECT Country, COUNT(*) AS TotalMakers FROM car_makers GROUP BY Country HAVING TotalMakers > 2) AS CountQuery",
        "SELECT COUNT(*) FROM (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(Id) > 2) AS CountryCount",
        "SELECT COUNT(*) FROM (SELECT Country, COUNT(Id) AS MakerCount FROM car_makers GROUP BY Country HAVING MakerCount > 2) AS MakerCountTable",
        "WITH MakerCounts AS (SELECT Country, COUNT(Id) AS TotalMakers FROM car_makers GROUP BY Country) SELECT COUNT(*) FROM MakerCounts WHERE TotalMakers > 2",
        "SELECT COUNT(*) FROM (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(Id) > 2) AS TempTable"
      ]
    ]
  },
  {
    "id": 162,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT CountryName) FROM countries WHERE CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(Id) > 2)",
        "SELECT COUNT(*) FROM (SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName HAVING COUNT(car_makers.Id) > 2) AS subquery",
        "SELECT COUNT(country) FROM (SELECT Country, COUNT(Id) AS MakerCount FROM car_makers GROUP BY Country HAVING MakerCount > 2) AS C",
        "SELECT COUNT(DISTINCT c.CountryName) FROM countries c INNER JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName HAVING COUNT(cm.Id) > 2",
        "SELECT COUNT(*) FROM (SELECT CountryName FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY CountryName HAVING COUNT(car_makers.Id) > 2) AS result",
        "SELECT COUNT(DISTINCT CountryName) FROM countries WHERE CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 2)",
        "SELECT COUNT(DISTINCT c.CountryName) FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName HAVING COUNT(DISTINCT cm.Id) > 2",
        "SELECT COUNT(*) FROM (SELECT CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY CountryName HAVING COUNT(cm.Id) > 2) AS derived_table",
        "SELECT COUNT(DISTINCT CountryName) FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY CountryName HAVING COUNT(cm.Id) > 2",
        "SELECT COUNT(DISTINCT c.CountryName) FROM countries c, car_makers cm WHERE c.CountryId = cm.Country GROUP BY c.CountryName HAVING COUNT(cm.Id) > 2"
      ]
    ]
  },
  {
    "id": 163,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6",
        "SELECT COUNT(Id) FROM cars_data WHERE Cylinders > 6",
        "SELECT COUNT(*) AS NumberOfCars FROM cars_data WHERE Cylinders > 6",
        "SELECT COUNT(Id) AS CarCount FROM cars_data WHERE Cylinders > 6",
        "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6 GROUP BY Cylinders",
        "SELECT COUNT(*) FROM cars_data GROUP BY Cylinders HAVING Cylinders > 6",
        "SELECT COUNT(DISTINCT Id) FROM cars_data WHERE Cylinders > 6",
        "SELECT COUNT(DISTINCT Id) AS TotalCars FROM cars_data WHERE Cylinders > 6",
        "SELECT Cylinders, COUNT(*) FROM cars_data WHERE Cylinders > 6 GROUP BY Cylinders",
        "SELECT Cylinders, COUNT(Id) AS CarCount FROM cars_data WHERE Cylinders > 6 GROUP BY Cylinders"
      ]
    ]
  },
  {
    "id": 164,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6",
        "SELECT COUNT(Id) FROM cars_data WHERE Cylinders > 6",
        "SELECT COUNT(*) AS NumberOfCars FROM cars_data WHERE Cylinders > 6",
        "SELECT COUNT(Id) AS CarCount FROM cars_data WHERE Cylinders > 6",
        "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6 GROUP BY Cylinders",
        "SELECT Cylinders, COUNT(*) FROM cars_data WHERE Cylinders > 6 GROUP BY Cylinders",
        "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6 ORDER BY Cylinders",
        "SELECT COUNT(*) FROM cars_data GROUP BY Cylinders HAVING Cylinders > 6",
        "SELECT Cylinders, COUNT(*) AS TotalCars FROM cars_data WHERE Cylinders > 6 GROUP BY Cylinders",
        "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6 AND Year > 1970"
      ]
    ]
  },
  {
    "id": 165,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT T2.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 4 ORDER BY T1.Horsepower DESC LIMIT 1",
        "SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Cylinders = 4 ORDER BY Horsepower DESC LIMIT 1)",
        "SELECT car_names.Model FROM car_names INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1",
        "SELECT cn.Model FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Cylinders = 4 ORDER BY cd.Horsepower DESC FETCH FIRST 1 ROW ONLY",
        "SELECT TOP 1 car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC",
        "SELECT Model FROM car_names WHERE MakeId = (SELECT Id FROM cars_data WHERE Cylinders = 4 ORDER BY Horsepower DESC LIMIT 1)",
        "SELECT cn.Model FROM car_names cn, cars_data cd WHERE cn.MakeId = cd.Id AND cd.Cylinders = 4 ORDER BY cd.Horsepower DESC LIMIT 1",
        "SELECT Model FROM (SELECT car_names.Model, cars_data.Horsepower FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 4) AS SubQuery ORDER BY Horsepower DESC LIMIT 1",
        "SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Cylinders = 4) ORDER BY (SELECT Horsepower FROM cars_data WHERE cars_data.Id = car_names.MakeId) DESC LIMIT 1",
        "SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 166,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT T2.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 4 ORDER BY T1.Horsepower DESC LIMIT 1",
        "SELECT car_names.Model FROM car_names INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC FETCH FIRST 1 ROW ONLY",
        "SELECT TOP 1 car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC",
        "SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Cylinders = 4) ORDER BY (SELECT Horsepower FROM cars_data WHERE cars_data.Id = car_names.MakeId) DESC LIMIT 1",
        "SELECT car_names.Model FROM car_names, cars_data WHERE car_names.MakeId = cars_data.Id AND cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1",
        "SELECT (SELECT Model FROM car_names WHERE MakeId = T1.Id) AS Model FROM cars_data AS T1 WHERE T1.Cylinders = 4 ORDER BY T1.Horsepower DESC LIMIT 1",
        "SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id AND cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1",
        "SELECT Model FROM (SELECT car_names.Model, cars_data.Horsepower FROM car_names INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 4) AS SubQuery ORDER BY Horsepower DESC LIMIT 1",
        "SELECT Model FROM car_names WHERE MakeId = (SELECT Id FROM cars_data WHERE Cylinders = 4 ORDER BY Horsepower DESC LIMIT 1)",
        "SELECT car_names.Model FROM car_names INNER JOIN (SELECT Id, Horsepower FROM cars_data WHERE Cylinders = 4 ORDER BY Horsepower DESC LIMIT 1) AS MaxHP ON car_names.MakeId = MaxHP.Id"
      ]
    ]
  },
  {
    "id": 167,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT car_names.MakeId, car_makers.Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN car_makers ON car_names.MakeId = car_makers.Id WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders <= 3",
        "SELECT cn.MakeId, cm.Maker FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN car_makers cm ON cn.MakeId = cm.Id WHERE cd.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cd.Cylinders <= 3",
        "SELECT cn.MakeId, cm.Maker FROM cars_data AS cd INNER JOIN car_names AS cn ON cd.Id = cn.MakeId INNER JOIN car_makers AS cm ON cn.MakeId = cm.Id WHERE cd.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cd.Cylinders <= 3",
        "SELECT MakeId, Maker FROM car_names JOIN car_makers ON car_names.MakeId = car_makers.Id WHERE MakeId IN (SELECT Id FROM cars_data WHERE Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND Cylinders <= 3)",
        "SELECT cn.MakeId, cm.Maker FROM cars_data cd, car_names cn, car_makers cm WHERE cd.Id = cn.MakeId AND cn.MakeId = cm.Id AND cd.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cd.Cylinders <= 3",
        "SELECT DISTINCT cn.MakeId, cm.Maker FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN car_makers cm ON cn.MakeId = cm.Id WHERE cd.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cd.Cylinders <= 3",
        "SELECT cn.MakeId, cm.Maker FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN car_makers cm ON cn.MakeId = cm.Id WHERE cd.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cd.Cylinders <= 3 ORDER BY cn.MakeId",
        "SELECT cn.MakeId, cm.Maker FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN car_makers cm ON cn.MakeId = cm.Id WHERE cd.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cd.Cylinders <= 3 GROUP BY cn.MakeId, cm.Maker",
        "SELECT cn.MakeId, cm.Maker FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN car_makers cm ON cn.MakeId = cm.Id WHERE cd.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cd.Cylinders <= 3 HAVING COUNT(*) > 0",
        "SELECT cn.MakeId, cm.Maker FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN car_makers cm ON cn.MakeId = cm.Id WHERE cd.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cd.Cylinders <= 3 LIMIT 100"
      ]
    ]
  },
  {
    "id": 168,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT cn.MakeId, cn.Make FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cd.Cylinders < 4",
        "SELECT MakeId, Make FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND Cylinders < 4)",
        "SELECT cn.MakeId, cn.Make FROM car_names cn, cars_data cd WHERE cn.MakeId = cd.Id AND cd.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cd.Cylinders < 4",
        "SELECT MakeId, Make FROM car_names INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders < 4",
        "SELECT cn.MakeId, cn.Make FROM car_names cn INNER JOIN cars_data cd ON cn.MakeId = cd.Id AND cd.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cd.Cylinders < 4",
        "SELECT MakeId, Make FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Horsepower NOT IN (SELECT MIN(Horsepower) FROM cars_data) AND Cylinders < 4)",
        "SELECT cn.MakeId, cn.Make FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Horsepower NOT IN (SELECT MIN(Horsepower) FROM cars_data) AND cd.Cylinders < 4",
        "SELECT MakeId, Make FROM car_names AS cn JOIN cars_data AS cd ON cn.MakeId = cd.Id WHERE cd.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cd.Cylinders < 4",
        "SELECT cn.MakeId, cn.Make FROM car_names cn, cars_data cd WHERE cn.MakeId = cd.Id AND cd.Horsepower NOT IN (SELECT MIN(Horsepower) FROM cars_data) AND cd.Cylinders < 4",
        "SELECT MakeId, Make FROM car_names INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower NOT IN (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders < 4"
      ]
    ]
  },
  {
    "id": 169,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980",
        "SELECT MAX(MPG) AS MaxMPG FROM cars_data WHERE Cylinders = 8 OR Year < 1980",
        "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year <= 1979",
        "SELECT MAX(MPG) FROM cars_data WHERE (Cylinders = 8) OR (Year < 1980)",
        "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = '8' OR Year < '1980'",
        "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980 GROUP BY Cylinders, Year",
        "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980 ORDER BY MPG DESC LIMIT 1",
        "SELECT MAX(MPG) AS MaximumMilesPerGallon FROM cars_data WHERE Cylinders = 8 OR Year < 1980",
        "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980 HAVING MAX(MPG) > 0",
        "SELECT MAX(MPG) FROM cars_data WHERE (Cylinders = 8) OR (Year < 1980) LIMIT 1"
      ]
    ]
  },
  {
    "id": 170,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980",
        "SELECT MAX(MPG) AS MaximumMPG FROM cars_data WHERE Cylinders = 8 OR Year < 1980",
        "SELECT MAX(MPG) FROM cars_data WHERE (Cylinders = 8) OR (Year < 1980)",
        "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < '1980'",
        "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = '8' OR Year < 1980",
        "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year <= 1979",
        "SELECT MAX(MPG) FROM cars_data WHERE (Cylinders = 8) OR (Year <= 1979)",
        "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = '8' OR Year < '1980'",
        "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980 GROUP BY Cylinders, Year",
        "SELECT MAX(MPG) FROM cars_data WHERE (Cylinders = 8 OR Year < 1980) GROUP BY Cylinders, Year"
      ]
    ]
  },
  {
    "id": 171,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT Id FROM cars_data WHERE Weight < 3500 AND Id NOT IN (SELECT MakeId FROM car_names WHERE Make IN (SELECT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE FullName = 'Ford Motor Company')))",
        "SELECT c.Id FROM cars_data c WHERE c.Weight < 3500 AND NOT EXISTS (SELECT 1 FROM car_names n JOIN model_list m ON n.Make = m.Model JOIN car_makers k ON m.Maker = k.Id WHERE k.FullName = 'Ford Motor Company' AND n.MakeId = c.Id)",
        "SELECT Id FROM cars_data WHERE Weight < 3500 AND Id NOT IN (SELECT MakeId FROM car_names JOIN model_list ON car_names.Make = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'Ford Motor Company')",
        "SELECT c.Id FROM cars_data c LEFT JOIN car_names n ON c.Id = n.MakeId LEFT JOIN model_list m ON n.Make = m.Model LEFT JOIN car_makers k ON m.Maker = k.Id WHERE c.Weight < 3500 AND (k.FullName <> 'Ford Motor Company' OR k.FullName IS NULL)",
        "SELECT DISTINCT c.Id FROM cars_data c, car_names n, model_list m, car_makers k WHERE c.Weight < 3500 AND c.Id = n.MakeId AND n.Make = m.Model AND m.Maker = k.Id AND k.FullName <> 'Ford Motor Company'",
        "SELECT c.Id FROM cars_data c WHERE c.Weight < 3500 AND c.Id NOT IN (SELECT n.MakeId FROM car_names n, model_list m, car_makers k WHERE n.Make = m.Model AND m.Maker = k.Id AND k.FullName = 'Ford Motor Company')",
        "SELECT Id FROM cars_data WHERE Weight < 3500 EXCEPT SELECT MakeId FROM car_names WHERE Make IN (SELECT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE FullName = 'Ford Motor Company'))",
        "SELECT c.Id FROM cars_data c WHERE c.Weight < 3500 AND NOT EXISTS (SELECT * FROM car_names n INNER JOIN model_list m ON n.Make = m.Model INNER JOIN car_makers k ON m.Maker = k.Id WHERE k.FullName = 'Ford Motor Company' AND n.MakeId = c.Id)",
        "SELECT Id FROM cars_data WHERE Weight < 3500 AND Id NOT IN (SELECT n.MakeId FROM car_names n INNER JOIN model_list m ON n.Make = m.Model INNER JOIN car_makers k ON m.Maker = k.Id WHERE k.FullName = 'Ford Motor Company')",
        "SELECT c.Id FROM cars_data c WHERE c.Weight < 3500 AND c.Id NOT IN (SELECT n.MakeId FROM car_names n JOIN model_list m ON n.Make = m.Model JOIN car_makers k ON m.Maker = k.Id WHERE k.FullName = 'Ford Motor Company')"
      ]
    ]
  },
  {
    "id": 172,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT DISTINCT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id JOIN model_list ON car_names.MakeId = model_list.ModelId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker != 'Ford Motor Company'",
        "SELECT DISTINCT car_names.Model FROM car_names INNER JOIN cars_data ON car_names.MakeId = cars_data.Id INNER JOIN model_list ON car_names.MakeId = model_list.ModelId INNER JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker <> 'Ford Motor Company'",
        "SELECT DISTINCT cn.Model FROM car_names cn, cars_data cd, model_list ml, car_makers cm WHERE cn.MakeId = cd.Id AND cn.MakeId = ml.ModelId AND ml.Maker = cm.Id AND cd.Weight < 3500 AND cm.Maker != 'Ford Motor Company'",
        "SELECT DISTINCT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Weight < 3500) AND MakeId NOT IN (SELECT ModelId FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Maker = 'Ford Motor Company'))",
        "SELECT DISTINCT Model FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Weight < 3500 AND NOT EXISTS (SELECT 1 FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id WHERE ml.ModelId = cn.MakeId AND cm.Maker = 'Ford Motor Company')",
        "SELECT DISTINCT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Weight < 3500) EXCEPT SELECT Model FROM car_names WHERE MakeId IN (SELECT ModelId FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Maker = 'Ford Motor Company'))",
        "SELECT DISTINCT Model FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id JOIN model_list ml ON cn.MakeId = ml.ModelId JOIN car_makers cm ON ml.Maker = cm.Id WHERE cd.Weight < 3500 AND cm.Maker NOT LIKE 'Ford Motor Company'",
        "SELECT DISTINCT Model FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id JOIN model_list ml ON cn.MakeId = ml.ModelId JOIN car_makers cm ON ml.Maker = cm.Id WHERE cd.Weight < 3500 AND cm.Maker NOT IN ('Ford Motor Company')",
        "SELECT DISTINCT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Weight < 3500) AND MakeId NOT IN (SELECT ModelId FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Maker = 'Ford Motor Company'))",
        "SELECT DISTINCT Model FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id JOIN model_list ml ON cn.MakeId = ml.ModelId JOIN car_makers cm ON ml.Maker = cm.Id WHERE cd.Weight < 3500 AND cm.Maker <> 'Ford Motor Company'"
      ]
    ]
  },
  {
    "id": 173,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)",
        "SELECT c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Id IS NULL",
        "SELECT CountryName FROM countries WHERE NOT EXISTS (SELECT 1 FROM car_makers WHERE Country = CountryId)",
        "SELECT c.CountryName FROM countries c WHERE c.CountryId NOT IN (SELECT Country FROM car_makers)",
        "SELECT CountryName FROM countries c WHERE NOT EXISTS (SELECT NULL FROM car_makers cm WHERE cm.Country = c.CountryId)",
        "SELECT c.CountryName FROM countries c LEFT OUTER JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Country IS NULL",
        "SELECT DISTINCT CountryName FROM countries WHERE CountryId NOT IN (SELECT DISTINCT Country FROM car_makers)",
        "SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers WHERE Country IS NOT NULL)",
        "SELECT CountryName FROM countries AS c WHERE NOT EXISTS (SELECT * FROM car_makers AS cm WHERE cm.Country = c.CountryId)",
        "SELECT c.CountryName FROM countries c WHERE c.CountryId NOT IN (SELECT cm.Country FROM car_makers cm)"
      ]
    ]
  },
  {
    "id": 174,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)",
        "SELECT c.CountryName FROM countries AS c LEFT JOIN car_makers AS cm ON c.CountryId = cm.Country WHERE cm.Country IS NULL",
        "SELECT CountryName FROM countries WHERE NOT EXISTS (SELECT 1 FROM car_makers WHERE Country = countries.CountryId)",
        "SELECT c.CountryName FROM countries c WHERE c.CountryId NOT IN (SELECT cm.Country FROM car_makers cm)",
        "SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT DISTINCT Country FROM car_makers)",
        "SELECT c.CountryName FROM countries c WHERE NOT EXISTS (SELECT NULL FROM car_makers cm WHERE cm.Country = c.CountryId)",
        "SELECT CountryName FROM countries c LEFT OUTER JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Country IS NULL",
        "SELECT DISTINCT c.CountryName FROM countries c WHERE c.CountryId NOT IN (SELECT cm.Country FROM car_makers cm)",
        "SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers WHERE Country IS NOT NULL)",
        "SELECT c.CountryName FROM countries c WHERE c.CountryId NOT IN (SELECT Country FROM car_makers) AND c.CountryName IS NOT NULL"
      ]
    ]
  },
  {
    "id": 175,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT M.Id, M.Maker FROM car_makers M JOIN model_list L ON M.Id = L.Maker JOIN car_names N ON L.Model = N.Model JOIN cars_data D ON N.MakeId = D.Id GROUP BY M.Id, M.Maker HAVING COUNT(DISTINCT L.Model) >= 2 AND COUNT(D.Id) > 3",
        "SELECT M.Id, M.Maker FROM car_makers M WHERE M.Id IN (SELECT L.Maker FROM model_list L GROUP BY L.Maker HAVING COUNT(DISTINCT L.Model) >= 2) AND M.Id IN (SELECT N.MakeId FROM car_names N JOIN cars_data D ON N.MakeId = D.Id GROUP BY N.MakeId HAVING COUNT(D.Id) > 3)",
        "SELECT M.Id, M.Maker FROM car_makers M INNER JOIN (SELECT Maker, COUNT(DISTINCT Model) AS ModelCount FROM model_list GROUP BY Maker) AS L ON M.Id = L.Maker INNER JOIN (SELECT MakeId, COUNT(*) AS CarCount FROM cars_data GROUP BY MakeId) AS D ON M.Id = D.MakeId WHERE L.ModelCount >= 2 AND D.CarCount > 3",
        "SELECT M.Id, M.Maker FROM car_makers M WHERE EXISTS (SELECT 1 FROM model_list L WHERE L.Maker = M.Id GROUP BY L.Maker HAVING COUNT(DISTINCT L.Model) >= 2) AND EXISTS (SELECT 1 FROM car_names N JOIN cars_data D ON N.MakeId = D.Id WHERE N.MakeId = M.Id GROUP BY N.MakeId HAVING COUNT(D.Id) > 3)",
        "SELECT M.Id, M.Maker FROM car_makers M JOIN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(DISTINCT Model) >= 2) AS L ON M.Id = L.Maker JOIN (SELECT MakeId FROM cars_data GROUP BY MakeId HAVING COUNT(*) > 3) AS D ON M.Id = D.MakeId",
        "SELECT DISTINCT M.Id, M.Maker FROM car_makers M, model_list L, car_names N, cars_data D WHERE M.Id = L.Maker AND L.Model = N.Model AND N.MakeId = D.Id GROUP BY M.Id, M.Maker HAVING COUNT(DISTINCT L.Model) >= 2 AND COUNT(DISTINCT D.Id) > 3",
        "SELECT M.Id, M.Maker FROM car_makers M WHERE (SELECT COUNT(DISTINCT Model) FROM model_list WHERE Maker = M.Id) >= 2 AND (SELECT COUNT(*) FROM cars_data WHERE MakeId IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker = M.Id))) > 3",
        "SELECT M.Id, M.Maker FROM car_makers M, model_list L, car_names N, cars_data D WHERE M.Id = L.Maker AND L.Model = N.Model AND N.MakeId = D.Id GROUP BY M.Id, M.Maker HAVING COUNT(DISTINCT L.Model) >= 2 AND COUNT(DISTINCT D.Id) > 3",
        "SELECT M.Id, M.Maker FROM car_makers M JOIN model_list L ON M.Id = L.Maker JOIN car_names N ON L.Model = N.Model JOIN cars_data D ON N.MakeId = D.Id GROUP BY M.Id, M.Maker HAVING COUNT(DISTINCT L.Model) >= 2 AND COUNT(DISTINCT D.Id) > 3",
        "SELECT M.Id, M.Maker FROM car_makers M WHERE M.Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(DISTINCT Model) >= 2) AND M.Id IN (SELECT MakeId FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY MakeId HAVING COUNT(*) > 3)"
      ]
    ]
  },
  {
    "id": 176,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT M.Id, M.Maker FROM car_makers M JOIN model_list ML ON M.Id = ML.Maker GROUP BY M.Id, M.Maker HAVING COUNT(DISTINCT ML.Model) >= 2 AND (SELECT COUNT(*) FROM cars_data CD JOIN car_names CN ON CD.Id = CN.MakeId WHERE CN.Make = M.Maker) > 3",
        "SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT model_list.Model) >= 2 AND (SELECT COUNT(*) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Make = car_makers.Maker) > 3",
        "SELECT Id, Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(DISTINCT Model) >= 2) AND Id IN (SELECT MakeId FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY MakeId HAVING COUNT(*) > 3)",
        "SELECT cm.Id, cm.Maker FROM car_makers cm WHERE (SELECT COUNT(DISTINCT ml.Model) FROM model_list ml WHERE ml.Maker = cm.Id) >= 2 AND (SELECT COUNT(*) FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cn.Make = cm.Maker) > 3",
        "SELECT DISTINCT cm.Id, cm.Maker FROM car_makers cm, model_list ml, car_names cn, cars_data cd WHERE cm.Id = ml.Maker AND ml.Model = cn.Model AND cn.MakeId = cd.Id GROUP BY cm.Id, cm.Maker HAVING COUNT(DISTINCT ml.Model) >= 2 AND COUNT(DISTINCT cd.Id) > 3",
        "SELECT cm.Id, cm.Maker FROM car_makers cm JOIN (SELECT Maker, COUNT(DISTINCT Model) AS ModelCount FROM model_list GROUP BY Maker) ml ON cm.Id = ml.Maker JOIN (SELECT MakeId, COUNT(*) AS CarCount FROM cars_data GROUP BY MakeId) cd ON cm.Id = cd.MakeId WHERE ml.ModelCount >= 2 AND cd.CarCount > 3",
        "SELECT cm.Id, cm.Maker FROM car_makers cm INNER JOIN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(DISTINCT Model) >= 2) ml ON cm.Id = ml.Maker INNER JOIN (SELECT MakeId FROM cars_data GROUP BY MakeId HAVING COUNT(*) > 3) cd ON cm.Id = cd.MakeId",
        "SELECT cm.Id, cm.Maker FROM car_makers cm WHERE EXISTS (SELECT 1 FROM model_list ml WHERE ml.Maker = cm.Id GROUP BY ml.Maker HAVING COUNT(DISTINCT ml.Model) >= 2) AND EXISTS (SELECT 1 FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cn.Make = cm.Maker GROUP BY cn.Make HAVING COUNT(*) > 3)",
        "SELECT cm.Id, cm.Maker FROM car_makers cm, model_list ml, car_names cn, cars_data cd WHERE cm.Id = ml.Maker AND ml.Model = cn.Model AND cn.MakeId = cd.Id GROUP BY cm.Id, cm.Maker HAVING COUNT(DISTINCT ml.Model) >= 2 AND COUNT(DISTINCT cd.Id) > 3",
        "SELECT cm.Id, cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id GROUP BY cm.Id, cm.Maker HAVING COUNT(DISTINCT ml.Model) >= 2 AND COUNT(DISTINCT cd.Id) > 3"
      ]
    ]
  },
  {
    "id": 177,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT DISTINCT CountryId, CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 3) OR CountryId IN (SELECT Country FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE car_names.Model = 'fiat')",
        "SELECT CountryId, CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Id) > 3 UNION SELECT Country FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE car_names.Model = 'fiat')",
        "SELECT DISTINCT c.CountryId, c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country LEFT JOIN model_list ml ON cm.Id = ml.Maker LEFT JOIN car_names cn ON ml.Model = cn.Model WHERE cn.Model = 'fiat' OR c.CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 3)",
        "SELECT c.CountryId, c.CountryName FROM countries c WHERE EXISTS (SELECT 1 FROM car_makers cm WHERE cm.Country = c.CountryId GROUP BY cm.Country HAVING COUNT(cm.Id) > 3) OR EXISTS (SELECT 1 FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model WHERE cn.Model = 'fiat' AND cm.Country = c.CountryId)",
        "SELECT DISTINCT c.CountryId, c.CountryName FROM countries c WHERE (SELECT COUNT(*) FROM car_makers cm WHERE cm.Country = c.CountryId) > 3 OR c.CountryId IN (SELECT cm.Country FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model WHERE cn.Model = 'fiat')",
        "SELECT CountryId, CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(Id) > 3) OR CountryId IN (SELECT Country FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE car_names.Model = 'fiat')",
        "SELECT DISTINCT c.CountryId, c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryId, c.CountryName HAVING COUNT(DISTINCT cm.Id) > 3 OR 'fiat' IN (SELECT cn.Model FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm2 ON ml.Maker = cm2.Id WHERE cm2.Country = c.CountryId)",
        "SELECT c.CountryId, c.CountryName FROM countries c WHERE (SELECT COUNT(DISTINCT cm.Id) FROM car_makers cm WHERE cm.Country = c.CountryId) > 3 OR 'fiat' IN (SELECT cn.Model FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.Country = c.CountryId)",
        "SELECT DISTINCT c.CountryId, c.CountryName FROM countries c WHERE EXISTS (SELECT 1 FROM car_makers cm WHERE cm.Country = c.CountryId GROUP BY cm.Country HAVING COUNT(*) > 3) OR EXISTS (SELECT 1 FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE cn.Model = 'fiat' AND cm.Country = c.CountryId)",
        "SELECT CountryId, CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 3 UNION SELECT Country FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE car_names.Model = 'fiat')"
      ]
    ]
  },
  {
    "id": 178,
    "db_id": "car_1",
    "infer_predictions": [
      [
        "SELECT CountryId, CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(Id) > 3 UNION SELECT CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE car_names.Model = 'fiat')",
        "SELECT c.CountryId, c.CountryName FROM countries c WHERE c.CountryId IN (SELECT cm.Country FROM car_makers cm GROUP BY cm.Country HAVING COUNT(cm.Id) > 3) OR c.CountryId IN (SELECT c.CountryId FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model WHERE cn.Model = 'fiat')",
        "SELECT CountryId, CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(Id) > 3) OR CountryId IN (SELECT CountryId FROM countries JOIN car_makers ON CountryId = Country JOIN model_list ON Id = Maker JOIN car_names ON Model = Model WHERE Model = 'fiat')",
        "SELECT DISTINCT c.CountryId, c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country LEFT JOIN model_list ml ON cm.Id = ml.Maker LEFT JOIN car_names cn ON ml.Model = cn.Model WHERE cn.Model = 'fiat' OR c.CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(Id) > 3)",
        "SELECT c.CountryId, c.CountryName FROM countries c WHERE EXISTS (SELECT 1 FROM car_makers cm WHERE cm.Country = c.CountryId GROUP BY cm.Country HAVING COUNT(cm.Id) > 3) OR EXISTS (SELECT 1 FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model WHERE cn.Model = 'fiat' AND cm.Country = c.CountryId)",
        "SELECT c.CountryId, c.CountryName FROM countries c WHERE (SELECT COUNT(*) FROM car_makers cm WHERE cm.Country = c.CountryId) > 3 OR c.CountryId IN (SELECT cm.Country FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model WHERE cn.Model = 'fiat')",
        "SELECT c.CountryId, c.CountryName FROM countries c WHERE c.CountryId IN (SELECT cm.Country FROM car_makers cm GROUP BY cm.Country HAVING COUNT(*) > 3) OR c.CountryId IN (SELECT cm.Country FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model WHERE cn.Model = 'fiat')",
        "SELECT c.CountryId, c.CountryName FROM countries c WHERE c.CountryId IN (SELECT cm.Country FROM car_makers cm GROUP BY cm.Country HAVING COUNT(cm.Id) > 3) OR EXISTS (SELECT 1 FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model WHERE cn.Model = 'fiat' AND cm.Country = c.CountryId)",
        "SELECT c.CountryId, c.CountryName FROM countries c WHERE (SELECT COUNT(cm.Id) FROM car_makers cm WHERE cm.Country = c.CountryId) > 3 OR c.CountryId IN (SELECT cm.Country FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model WHERE cn.Model = 'fiat')",
        "SELECT c.CountryId, c.CountryName FROM countries c WHERE c.CountryId IN (SELECT cm.Country FROM car_makers cm WHERE cm.Country = c.CountryId GROUP BY cm.Country HAVING COUNT(cm.Id) > 3) OR c.CountryId IN (SELECT cm.Country FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model WHERE cn.Model = 'fiat')"
      ]
    ]
  },
  {
    "id": 179,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'",
        "SELECT Country FROM airlines WHERE Airline LIKE 'JetBlue Airways'",
        "SELECT a.Country FROM airlines a WHERE a.Airline = 'JetBlue Airways'",
        "SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways' LIMIT 1",
        "SELECT DISTINCT Country FROM airlines WHERE Airline = 'JetBlue Airways'",
        "SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways' AND Country IS NOT NULL",
        "SELECT a.Country FROM airlines a WHERE a.Airline LIKE '%JetBlue Airways%'",
        "SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways' ORDER BY Country DESC LIMIT 1",
        "SELECT TOP 1 Country FROM airlines WHERE Airline = 'JetBlue Airways'",
        "SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways' GROUP BY Country"
      ]
    ]
  },
  {
    "id": 180,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways'",
        "SELECT Country FROM airlines WHERE Airline LIKE 'Jetblue Airways'",
        "SELECT a.Country FROM airlines a WHERE a.Airline = 'Jetblue Airways'",
        "SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways' LIMIT 1",
        "SELECT DISTINCT Country FROM airlines WHERE Airline = 'Jetblue Airways'",
        "SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways' AND Country IS NOT NULL",
        "SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways' ORDER BY Country DESC LIMIT 1",
        "SELECT TOP 1 Country FROM airlines WHERE Airline = 'Jetblue Airways'",
        "SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways' GROUP BY Country",
        "SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways' FETCH FIRST ROW ONLY"
      ]
    ]
  },
  {
    "id": 181,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'",
        "SELECT a.Abbreviation FROM airlines a WHERE a.Airline = 'JetBlue Airways'",
        "SELECT Abbreviation FROM airlines WHERE Airline LIKE 'JetBlue Airways'",
        "SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways' LIMIT 1",
        "SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways' AND Abbreviation IS NOT NULL",
        "SELECT a.Abbreviation FROM airlines AS a WHERE a.Airline = 'JetBlue Airways'",
        "SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways' FETCH FIRST ROW ONLY",
        "SELECT TOP 1 Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'",
        "SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways' ORDER BY Abbreviation ASC LIMIT 1",
        "SELECT DISTINCT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'"
      ]
    ]
  },
  {
    "id": 182,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways'",
        "SELECT a.Abbreviation FROM airlines a WHERE a.Airline = 'Jetblue Airways'",
        "SELECT Abbreviation FROM airlines WHERE Airline LIKE 'Jetblue Airways'",
        "SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways' LIMIT 1",
        "SELECT a.Abbreviation FROM airlines a WHERE a.Airline LIKE '%Jetblue Airways%'",
        "SELECT Abbreviation FROM airlines WHERE UPPER(Airline) = UPPER('Jetblue Airways')",
        "SELECT Abbreviation FROM airlines WHERE LOWER(Airline) = LOWER('Jetblue Airways')",
        "SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways' AND Abbreviation IS NOT NULL",
        "SELECT DISTINCT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways'",
        "SELECT TOP 1 Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways'"
      ]
    ]
  },
  {
    "id": 183,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT DISTINCT Airline, Abbreviation FROM airlines WHERE Country = 'USA'",
        "SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA' GROUP BY Airline, Abbreviation",
        "SELECT UNIQUE Airline, Abbreviation FROM airlines WHERE Country = 'USA'",
        "SELECT Airline AS AirlineName, Abbreviation AS AirlineAbbreviation FROM airlines WHERE Country = 'USA' GROUP BY Airline, Abbreviation",
        "SELECT DISTINCT Airline, Abbreviation FROM airlines WHERE Country LIKE 'USA'",
        "SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA' DISTINCT",
        "SELECT DISTINCT ON (Airline, Abbreviation) Airline, Abbreviation FROM airlines WHERE Country = 'USA'",
        "SELECT DISTINCT Airline, Abbreviation FROM airlines WHERE Country = 'USA' ORDER BY Airline",
        "SELECT DISTINCT Airline, Abbreviation FROM airlines WHERE Country = 'USA' ORDER BY Abbreviation",
        "SELECT DISTINCT Airline AS AirlineName, Abbreviation AS AirlineAbbrev FROM airlines WHERE Country = 'USA'"
      ]
    ]
  },
  {
    "id": 184,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'",
        "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country = 'USA'",
        "SELECT a.Airline, a.Abbreviation FROM airlines AS a WHERE a.Country = 'USA'",
        "SELECT Airline AS AirlineName, Abbreviation AS AirlineAbbreviation FROM airlines WHERE Country = 'USA'",
        "SELECT DISTINCT Airline, Abbreviation FROM airlines WHERE Country = 'USA'",
        "SELECT Airline, Abbreviation FROM airlines WHERE Country LIKE 'USA'",
        "SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA' ORDER BY Airline",
        "SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA' AND Abbreviation IS NOT NULL",
        "SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA' GROUP BY Airline, Abbreviation",
        "SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA' AND Airline IS NOT NULL AND Abbreviation IS NOT NULL"
      ]
    ]
  },
  {
    "id": 185,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'",
        "SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = 'Anthony'",
        "SELECT a.AirportCode, a.AirportName FROM airports AS a WHERE a.City = 'Anthony'",
        "SELECT AirportCode AS Code, AirportName AS Name FROM airports WHERE City = 'Anthony'",
        "SELECT AirportCode, AirportName FROM airports WHERE City LIKE 'Anthony'",
        "SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony' AND Country = 'USA'",
        "SELECT DISTINCT AirportCode, AirportName FROM airports WHERE City = 'Anthony'",
        "SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony' ORDER BY AirportName",
        "SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony' LIMIT 10",
        "SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony' GROUP BY AirportCode, AirportName"
      ]
    ]
  },
  {
    "id": 186,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'",
        "SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = 'Anthony'",
        "SELECT a.AirportCode, a.AirportName FROM airports a WHERE a.City = 'Anthony'",
        "SELECT AirportCode AS code, AirportName AS name FROM airports WHERE City = 'Anthony'",
        "SELECT AirportCode, AirportName FROM airports WHERE City LIKE 'Anthony'",
        "SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony' LIMIT 1",
        "SELECT DISTINCT AirportCode, AirportName FROM airports WHERE City = 'Anthony'",
        "SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony' ORDER BY AirportCode",
        "SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony' AND Country = 'USA'",
        "SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony' AND CountryAbbrev = 'US'"
      ]
    ]
  },
  {
    "id": 187,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM airlines",
        "SELECT COUNT(uid) FROM airlines",
        "SELECT COUNT(DISTINCT uid) FROM airlines",
        "SELECT COUNT(DISTINCT Airline) FROM airlines",
        "SELECT COUNT(Airline) FROM airlines",
        "SELECT COUNT(1) FROM airlines",
        "SELECT COUNT(*) AS NumberOfAirlines FROM airlines",
        "SELECT COUNT(DISTINCT Airline) AS UniqueAirlines FROM airlines",
        "SELECT COUNT(uid) AS TotalAirlines FROM airlines",
        "SELECT COUNT(*) FROM (SELECT DISTINCT Airline FROM airlines) AS UniqueAirlines"
      ]
    ]
  },
  {
    "id": 188,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM airlines",
        "SELECT COUNT(uid) FROM airlines",
        "SELECT COUNT(Airline) FROM airlines",
        "SELECT COUNT(DISTINCT uid) FROM airlines",
        "SELECT COUNT(DISTINCT Airline) FROM airlines",
        "SELECT COUNT(1) FROM airlines",
        "SELECT COUNT(*) AS TotalAirlines FROM airlines",
        "SELECT COUNT(uid) AS TotalAirlines FROM airlines",
        "SELECT COUNT(Airline) AS TotalAirlines FROM airlines",
        "SELECT COUNT(DISTINCT Airline) AS TotalAirlines FROM airlines"
      ]
    ]
  },
  {
    "id": 189,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM airports",
        "SELECT COUNT(AirportCode) FROM airports",
        "SELECT COUNT(1) FROM airports",
        "SELECT COUNT(AirportName) FROM airports",
        "SELECT COUNT(DISTINCT AirportCode) FROM airports",
        "SELECT COUNT(DISTINCT AirportName) FROM airports",
        "SELECT COUNT(*) AS TotalAirports FROM airports",
        "SELECT COUNT(AirportCode) AS TotalAirportCodes FROM airports",
        "SELECT COUNT(*) FROM airports WHERE AirportCode IS NOT NULL",
        "SELECT COUNT(*) FROM airports WHERE AirportName IS NOT NULL"
      ]
    ]
  },
  {
    "id": 190,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM airports",
        "SELECT COUNT(AirportCode) FROM airports",
        "SELECT COUNT(1) FROM airports",
        "SELECT COUNT(AirportName) AS NumberOfAirports FROM airports",
        "SELECT COUNT(DISTINCT AirportCode) FROM airports",
        "SELECT COUNT(DISTINCT AirportName) FROM airports",
        "SELECT COUNT(*) AS TotalAirports FROM airports",
        "SELECT COUNT(*) FROM airports WHERE AirportCode IS NOT NULL",
        "SELECT COUNT(*) FROM airports WHERE AirportName IS NOT NULL",
        "SELECT COUNT(DISTINCT AirportCode) AS UniqueAirports FROM airports"
      ]
    ]
  },
  {
    "id": 191,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM flights",
        "SELECT COUNT(FlightNo) FROM flights",
        "SELECT COUNT(*) AS TotalFlights FROM flights",
        "SELECT COUNT(1) FROM flights",
        "SELECT COUNT(flights.FlightNo) FROM flights",
        "SELECT COUNT(DISTINCT FlightNo) FROM flights",
        "SELECT COUNT(flights.*) FROM flights",
        "SELECT COUNT(ALL FlightNo) FROM flights",
        "SELECT COUNT(flights.FlightNo) AS NumberOfFlights FROM flights",
        "SELECT COUNT(*) FROM flights WHERE FlightNo IS NOT NULL"
      ]
    ]
  },
  {
    "id": 192,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM flights",
        "SELECT COUNT(FlightNo) FROM flights",
        "SELECT COUNT(*) AS NumberOfFlights FROM flights",
        "SELECT COUNT(1) FROM flights",
        "SELECT COUNT(flights.FlightNo) FROM flights",
        "SELECT COUNT(*) FROM flights AS f",
        "SELECT COUNT(f.FlightNo) FROM flights f",
        "SELECT COUNT(DISTINCT FlightNo) FROM flights",
        "SELECT COUNT(DISTINCT flights.FlightNo) FROM flights",
        "SELECT COUNT(ALL FlightNo) FROM flights"
      ]
    ]
  },
  {
    "id": 193,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'",
        "SELECT Airline FROM airlines WHERE Abbreviation LIKE 'UAL'",
        "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL' LIMIT 1",
        "SELECT a.Airline FROM airlines a WHERE a.Abbreviation = 'UAL'",
        "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL' AND uid IS NOT NULL",
        "SELECT DISTINCT Airline FROM airlines WHERE Abbreviation = 'UAL'",
        "SELECT TOP 1 Airline FROM airlines WHERE Abbreviation = 'UAL'",
        "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL' ORDER BY uid",
        "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL' GROUP BY Airline",
        "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL' AND Airline IS NOT NULL"
      ]
    ]
  },
  {
    "id": 194,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'",
        "SELECT Airline FROM airlines WHERE Abbreviation LIKE 'UAL'",
        "SELECT uid, Airline FROM airlines WHERE Abbreviation = 'UAL'",
        "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL' LIMIT 1",
        "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL' AND Country IS NOT NULL",
        "SELECT DISTINCT Airline FROM airlines WHERE Abbreviation = 'UAL'",
        "SELECT Airline, Country FROM airlines WHERE Abbreviation = 'UAL'",
        "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL' ORDER BY Airline",
        "SELECT TOP 1 Airline FROM airlines WHERE Abbreviation = 'UAL'",
        "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL' GROUP BY Airline"
      ]
    ]
  },
  {
    "id": 195,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM airlines WHERE Country = 'USA'",
        "SELECT COUNT(uid) FROM airlines WHERE Country = 'USA'",
        "SELECT COUNT(Airline) FROM airlines WHERE Country = 'USA'",
        "SELECT COUNT(DISTINCT Airline) FROM airlines WHERE Country = 'USA'",
        "SELECT COUNT(DISTINCT uid) FROM airlines WHERE Country = 'USA'",
        "SELECT COUNT(*) AS NumberOfAirlines FROM airlines WHERE Country = 'USA'",
        "SELECT COUNT(*) FROM airlines WHERE Country LIKE 'USA'",
        "SELECT COUNT(*) FROM airlines WHERE Country = 'USA' GROUP BY Country",
        "SELECT COUNT(*) FROM airlines WHERE Country = 'USA' AND Airline IS NOT NULL",
        "SELECT COUNT(*) FROM airlines WHERE Country = UPPER('usa')"
      ]
    ]
  },
  {
    "id": 196,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM airlines WHERE Country = 'USA'",
        "SELECT COUNT(uid) FROM airlines WHERE Country = 'USA'",
        "SELECT COUNT(Airline) FROM airlines WHERE Country = 'USA'",
        "SELECT COUNT(DISTINCT Airline) FROM airlines WHERE Country = 'USA'",
        "SELECT COUNT(DISTINCT uid) FROM airlines WHERE Country = 'USA'",
        "SELECT COUNT(*) AS NumberOfAirlines FROM airlines WHERE Country = 'USA'",
        "SELECT COUNT(*) FROM airlines WHERE Country LIKE 'USA'",
        "SELECT COUNT(*) FROM airlines WHERE Country = 'USA' GROUP BY Country",
        "SELECT COUNT(*) FROM airlines WHERE Country = 'USA' AND Airline IS NOT NULL",
        "SELECT COUNT(*) FROM airlines WHERE UPPER(Country) = 'USA'"
      ]
    ]
  },
  {
    "id": 197,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT City, Country FROM airports WHERE AirportName = 'Alton'",
        "SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName LIKE 'Alton'",
        "SELECT City, Country FROM airports WHERE AirportName LIKE '%Alton%'",
        "SELECT a.City, a.Country FROM airports a WHERE a.AirportName = 'Alton'",
        "SELECT City, Country FROM airports WHERE AirportName = 'Alton' LIMIT 1",
        "SELECT DISTINCT City, Country FROM airports WHERE AirportName = 'Alton'",
        "SELECT City, Country FROM airports WHERE UPPER(AirportName) = UPPER('Alton')",
        "SELECT City, Country FROM airports WHERE AirportName COLLATE NOCASE = 'Alton'",
        "SELECT City, Country FROM airports WHERE AirportName IN ('Alton')",
        "SELECT City, Country FROM airports WHERE AirportName = 'Alton' AND Country IS NOT NULL"
      ]
    ]
  },
  {
    "id": 198,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT City, Country FROM airports WHERE AirportName = 'Alton'",
        "SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName LIKE 'Alton'",
        "SELECT City, Country FROM airports WHERE AirportName LIKE '%Alton%'",
        "SELECT a.City, a.Country FROM airports a WHERE a.AirportName = 'Alton'",
        "SELECT City, Country FROM airports WHERE AirportName = 'Alton' LIMIT 1",
        "SELECT DISTINCT City, Country FROM airports WHERE AirportName = 'Alton'",
        "SELECT City, Country FROM airports WHERE UPPER(AirportName) = 'ALTON'",
        "SELECT City, Country FROM airports WHERE LOWER(AirportName) = 'alton'",
        "SELECT City, Country FROM airports WHERE AirportName COLLATE NOCASE = 'Alton'",
        "SELECT City, Country FROM airports WHERE AirportName = 'Alton' AND Country IS NOT NULL"
      ]
    ]
  },
  {
    "id": 199,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT AirportName FROM airports WHERE AirportCode = 'AKO'",
        "SELECT airports.AirportName FROM airports WHERE airports.AirportCode = 'AKO'",
        "SELECT a.AirportName FROM airports AS a WHERE a.AirportCode = 'AKO'",
        "SELECT AirportName FROM airports WHERE AirportCode LIKE 'AKO'",
        "SELECT AirportName FROM airports WHERE AirportCode = 'AKO' LIMIT 1",
        "SELECT AirportName FROM airports WHERE AirportCode = 'AKO' AND AirportName IS NOT NULL",
        "SELECT AirportName FROM airports WHERE UPPER(AirportCode) = 'AKO'",
        "SELECT AirportName FROM airports WHERE LOWER(AirportCode) = 'ako'",
        "SELECT AirportName FROM airports WHERE AirportCode = 'AKO' ORDER BY AirportName",
        "SELECT AirportName FROM airports WHERE AirportCode = 'AKO' FETCH FIRST 1 ROWS ONLY"
      ]
    ]
  },
  {
    "id": 200,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT AirportName FROM airports WHERE AirportCode = 'AKO'",
        "SELECT airports.AirportName FROM airports WHERE airports.AirportCode = 'AKO'",
        "SELECT AirportName FROM airports WHERE AirportCode LIKE 'AKO'",
        "SELECT name FROM airports WHERE code = 'AKO'",
        "SELECT AirportName FROM airports WHERE AirportCode = 'AKO' LIMIT 1",
        "SELECT a.AirportName FROM airports AS a WHERE a.AirportCode = 'AKO'",
        "SELECT AirportName FROM airports WHERE AirportCode = 'AKO' AND Country IS NOT NULL",
        "SELECT AirportName FROM airports WHERE AirportCode = 'AKO' AND AirportName IS NOT NULL",
        "SELECT AirportName FROM airports WHERE AirportCode = 'AKO' ORDER BY AirportName",
        "SELECT AirportName FROM airports WHERE AirportCode = 'AKO' FETCH FIRST 1 ROWS ONLY"
      ]
    ]
  },
  {
    "id": 201,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT DISTINCT AirportName FROM airports WHERE City = 'Aberdeen'",
        "SELECT AirportName FROM airports WHERE City = 'Aberdeen' GROUP BY AirportName",
        "SELECT UNIQUE AirportName FROM airports WHERE City = 'Aberdeen'",
        "SELECT AirportName FROM airports WHERE City = 'Aberdeen' DISTINCT",
        "SELECT DISTINCT AirportName FROM airports WHERE City LIKE 'Aberdeen'",
        "SELECT DISTINCT AirportName FROM airports WHERE City = 'Aberdeen' ORDER BY AirportName",
        "SELECT DISTINCT AirportName FROM airports WHERE City = 'Aberdeen' AND AirportName IS NOT NULL",
        "SELECT DISTINCT AirportName FROM airports WHERE City = 'Aberdeen' AND AirportName <> ''",
        "SELECT DISTINCT AirportName FROM airports WHERE City = 'Aberdeen' AND AirportName != ''",
        "SELECT DISTINCT AirportName FROM airports WHERE City = 'Aberdeen' AND AirportName NOT IN ('')"
      ]
    ]
  },
  {
    "id": 202,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT AirportName FROM airports WHERE City = 'Aberdeen'",
        "SELECT airports.AirportName FROM airports WHERE airports.City = 'Aberdeen'",
        "SELECT AirportName FROM airports WHERE City LIKE 'Aberdeen'",
        "SELECT a.AirportName FROM airports AS a WHERE a.City = 'Aberdeen'",
        "SELECT AirportName FROM airports WHERE City = 'Aberdeen' AND Country = 'UK'",
        "SELECT DISTINCT AirportName FROM airports WHERE City = 'Aberdeen'",
        "SELECT AirportName FROM airports WHERE City IN ('Aberdeen')",
        "SELECT AirportName FROM airports WHERE City = 'Aberdeen' ORDER BY AirportName",
        "SELECT AirportName FROM airports WHERE City = 'Aberdeen' AND Country = 'United Kingdom'",
        "SELECT AirportName FROM airports WHERE City = 'Aberdeen' AND CountryAbbrev = 'GB'"
      ]
    ]
  },
  {
    "id": 203,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'",
        "SELECT COUNT(FlightNo) FROM flights WHERE SourceAirport = 'APG'",
        "SELECT COUNT(*) AS NumberOfFlights FROM flights WHERE SourceAirport = 'APG'",
        "SELECT COUNT(1) FROM flights WHERE SourceAirport = 'APG'",
        "SELECT COUNT(DISTINCT FlightNo) FROM flights WHERE SourceAirport = 'APG'",
        "SELECT COUNT(*) FROM flights WHERE SourceAirport LIKE 'APG'",
        "SELECT COUNT(*) FROM flights f WHERE f.SourceAirport = 'APG'",
        "SELECT COUNT(*) FROM flights WHERE flights.SourceAirport = 'APG'",
        "SELECT COUNT(FlightNo) AS FlightCount FROM flights WHERE SourceAirport = 'APG'",
        "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG' GROUP BY SourceAirport"
      ]
    ]
  },
  {
    "id": 204,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'",
        "SELECT COUNT(FlightNo) AS NumberOfFlights FROM flights WHERE SourceAirport = 'APG'",
        "SELECT COUNT(*) AS FlightCount FROM flights WHERE SourceAirport = 'APG'",
        "SELECT COUNT(1) FROM flights WHERE SourceAirport = 'APG'",
        "SELECT COUNT(*) FROM flights f WHERE f.SourceAirport = 'APG'",
        "SELECT COUNT(f.FlightNo) FROM flights f WHERE f.SourceAirport = 'APG'",
        "SELECT COUNT(*) FROM flights WHERE flights.SourceAirport = 'APG'",
        "SELECT COUNT(FlightNo) FROM flights WHERE flights.SourceAirport = 'APG'",
        "SELECT COUNT(*) FROM flights WHERE SourceAirport LIKE 'APG'",
        "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG' GROUP BY SourceAirport"
      ]
    ]
  },
  {
    "id": 205,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'",
        "SELECT COUNT(FlightNo) FROM flights WHERE DestAirport = 'ATO'",
        "SELECT COUNT(*) AS NumberOfFlights FROM flights WHERE DestAirport = 'ATO'",
        "SELECT COUNT(1) FROM flights WHERE DestAirport = 'ATO'",
        "SELECT COUNT(DISTINCT FlightNo) FROM flights WHERE DestAirport = 'ATO'",
        "SELECT COUNT(*) FROM flights WHERE DestAirport LIKE 'ATO'",
        "SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO' GROUP BY DestAirport",
        "SELECT COUNT(*) FROM flights f WHERE f.DestAirport = 'ATO'",
        "SELECT COUNT(FlightNo) AS FlightCount FROM flights WHERE DestAirport = 'ATO'",
        "SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO' AND FlightNo IS NOT NULL"
      ]
    ]
  },
  {
    "id": 206,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'",
        "SELECT COUNT(FlightNo) AS NumberOfFlights INTO ATO FROM flights WHERE DestAirport = 'ATO'",
        "SELECT COUNT(*) AS FlightCount FROM flights WHERE DestAirport = 'ATO'",
        "SELECT COUNT(1) FROM flights WHERE DestAirport = 'ATO'",
        "SELECT COUNT(flights.FlightNo) FROM flights WHERE flights.DestAirport = 'ATO'",
        "SELECT COUNT(*) FROM flights f WHERE f.DestAirport = 'ATO'",
        "SELECT COUNT(DISTINCT FlightNo) FROM flights WHERE DestAirport = 'ATO'",
        "SELECT COUNT(*) FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE AirportCode = 'ATO')",
        "SELECT COUNT(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE AirportCode = 'ATO')",
        "SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO' GROUP BY DestAirport"
      ]
    ]
  },
  {
    "id": 207,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'",
        "SELECT COUNT(flights.FlightNo) AS NumberOfFlights FROM flights INNER JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'",
        "SELECT COUNT(1) FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.City = 'Aberdeen'",
        "SELECT COUNT(DISTINCT flights.FlightNo) FROM flights LEFT JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'",
        "SELECT COUNT(*) FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen'",
        "SELECT COUNT(flights.FlightNo) FROM flights INNER JOIN airports ON flights.SourceAirport = airports.AirportCode AND airports.City = 'Aberdeen'",
        "SELECT COUNT(*) FROM flights f, airports a WHERE f.SourceAirport = a.AirportCode AND a.City = 'Aberdeen'",
        "SELECT COUNT(*) AS TotalFlights FROM flights INNER JOIN airports ON flights.SourceAirport = airports.AirportCode AND airports.City = 'Aberdeen'",
        "SELECT COUNT(flights.FlightNo) FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.City = 'Aberdeen'",
        "SELECT COUNT(*) FROM flights INNER JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'"
      ]
    ]
  },
  {
    "id": 208,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'",
        "SELECT COUNT(flights.FlightNo) AS NumberOfFlights FROM flights INNER JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'",
        "SELECT COUNT(1) FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.City = 'Aberdeen'",
        "SELECT COUNT(DISTINCT flights.FlightNo) FROM flights LEFT JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'",
        "SELECT COUNT(*) FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen'",
        "SELECT COUNT(flights.FlightNo) FROM flights INNER JOIN airports ON flights.SourceAirport = airports.AirportCode AND airports.City = 'Aberdeen'",
        "SELECT COUNT(*) FROM flights f, airports a WHERE f.SourceAirport = a.AirportCode AND a.City = 'Aberdeen'",
        "SELECT COUNT(flights.FlightNo) FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.City = 'Aberdeen' GROUP BY airports.City",
        "SELECT COUNT(*) FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')",
        "SELECT COUNT(*) FROM (SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen') AS DepartingFlights"
      ]
    ]
  },
  {
    "id": 209,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'",
        "SELECT COUNT(flights.FlightNo) AS NumberOfFlights FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'",
        "SELECT COUNT(1) FROM flights, airports WHERE flights.DestAirport = airports.AirportCode AND airports.City = 'Aberdeen'",
        "SELECT COUNT(DISTINCT flights.FlightNo) FROM flights LEFT JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'",
        "SELECT COUNT(*) FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen'",
        "SELECT COUNT(flights.FlightNo) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode AND airports.City = 'Aberdeen'",
        "SELECT COUNT(*) FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode AND airports.City = 'Aberdeen'",
        "SELECT COUNT(*) AS TotalFlights FROM flights f, airports a WHERE f.DestAirport = a.AirportCode AND a.City = 'Aberdeen'",
        "SELECT COUNT(flights.FlightNo) FROM flights, airports WHERE flights.DestAirport = airports.AirportCode AND airports.City = 'Aberdeen'",
        "SELECT COUNT(*) FROM flights f INNER JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen'"
      ]
    ]
  },
  {
    "id": 210,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName = 'Aberdeen'",
        "SELECT COUNT(flights.FlightNo) AS NumberOfFlights FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName = 'Aberdeen'",
        "SELECT COUNT(1) FROM flights, airports WHERE flights.DestAirport = airports.AirportCode AND airports.AirportName = 'Aberdeen'",
        "SELECT COUNT(DISTINCT flights.FlightNo) FROM flights LEFT JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName = 'Aberdeen'",
        "SELECT COUNT(*) FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.AirportName = 'Aberdeen'",
        "SELECT COUNT(flights.FlightNo) FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode AND airports.AirportName = 'Aberdeen'",
        "SELECT COUNT(*) FROM flights f, airports a WHERE f.DestAirport = a.AirportCode AND a.AirportName = 'Aberdeen'",
        "SELECT COUNT(*) FROM (SELECT * FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE AirportName = 'Aberdeen'))",
        "SELECT COUNT(f.FlightNo) FROM flights f INNER JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.AirportName = 'Aberdeen'",
        "SELECT COUNT(*) FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE AirportName = 'Aberdeen')"
      ]
    ]
  },
  {
    "id": 211,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM flights JOIN airports AS src ON flights.SourceAirport = src.AirportCode JOIN airports AS dest ON flights.DestAirport = dest.AirportCode WHERE src.City = 'Aberdeen' AND dest.City = 'Ashley'",
        "SELECT COUNT(flights.FlightNo) FROM flights, airports src, airports dest WHERE flights.SourceAirport = src.AirportCode AND flights.DestAirport = dest.AirportCode AND src.City = 'Aberdeen' AND dest.City = 'Ashley'",
        "SELECT COUNT(1) FROM flights INNER JOIN airports src ON flights.SourceAirport = src.AirportCode INNER JOIN airports dest ON flights.DestAirport = dest.AirportCode WHERE src.City = 'Aberdeen' AND dest.City = 'Ashley'",
        "SELECT COUNT(DISTINCT flights.FlightNo) FROM flights f JOIN airports a1 ON f.SourceAirport = a1.AirportCode JOIN airports a2 ON f.DestAirport = a2.AirportCode WHERE a1.City = 'Aberdeen' AND a2.City = 'Ashley'",
        "SELECT COUNT(*) FROM flights f, airports a1, airports a2 WHERE f.SourceAirport = a1.AirportCode AND f.DestAirport = a2.AirportCode AND a1.City = 'Aberdeen' AND a2.City = 'Ashley'",
        "SELECT COUNT(flights.FlightNo) AS TotalFlights FROM flights LEFT JOIN airports AS Source ON flights.SourceAirport = Source.AirportCode LEFT JOIN airports AS Destination ON flights.DestAirport = Destination.AirportCode WHERE Source.City = 'Aberdeen' AND Destination.City = 'Ashley'",
        "SELECT COUNT(*) FROM flights f INNER JOIN airports src ON f.SourceAirport = src.AirportCode INNER JOIN airports dest ON f.DestAirport = dest.AirportCode WHERE src.City = 'Aberdeen' AND dest.City = 'Ashley'",
        "SELECT COUNT(flights.FlightNo) FROM flights INNER JOIN airports src ON flights.SourceAirport = src.AirportCode INNER JOIN airports dest ON flights.DestAirport = dest.AirportCode WHERE src.City = 'Aberdeen' AND dest.City = 'Ashley'",
        "SELECT COUNT(*) FROM flights f JOIN airports src ON f.SourceAirport = src.AirportCode JOIN airports dest ON f.DestAirport = dest.AirportCode WHERE src.City = 'Aberdeen' AND dest.City = 'Ashley'",
        "SELECT COUNT(*) FROM flights f LEFT JOIN airports src ON f.SourceAirport = src.AirportCode LEFT JOIN airports dest ON f.DestAirport = dest.AirportCode WHERE src.City = 'Aberdeen' AND dest.City = 'Ashley'"
      ]
    ]
  },
  {
    "id": 212,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen') AND DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Ashley')",
        "SELECT COUNT(f.FlightNo) AS NumberOfFlights FROM flights f JOIN airports src ON f.SourceAirport = src.AirportCode JOIN airports dest ON f.DestAirport = dest.AirportCode WHERE src.City = 'Aberdeen' AND dest.City = 'Ashley'",
        "SELECT COUNT(*) FROM flights, airports src, airports dest WHERE flights.SourceAirport = src.AirportCode AND flights.DestAirport = dest.AirportCode AND src.City = 'Aberdeen' AND dest.City = 'Ashley'",
        "SELECT COUNT(DISTINCT flights.FlightNo) FROM flights INNER JOIN airports AS src ON flights.SourceAirport = src.AirportCode INNER JOIN airports AS dest ON flights.DestAirport = dest.AirportCode WHERE src.City = 'Aberdeen' AND dest.City = 'Ashley'",
        "SELECT COUNT(*) FROM flights f WHERE EXISTS (SELECT 1 FROM airports a WHERE a.AirportCode = f.SourceAirport AND a.City = 'Aberdeen') AND EXISTS (SELECT 1 FROM airports a WHERE a.AirportCode = f.DestAirport AND a.City = 'Ashley')",
        "SELECT COUNT(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen') AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Ashley')",
        "SELECT COUNT(flights.FlightNo) FROM flights JOIN airports src ON flights.SourceAirport = src.AirportCode JOIN airports dest ON flights.DestAirport = dest.AirportCode WHERE src.City = 'Aberdeen' AND dest.City = 'Ashley'",
        "SELECT COUNT(*) FROM flights f, airports a1, airports a2 WHERE f.SourceAirport = a1.AirportCode AND a1.City = 'Aberdeen' AND f.DestAirport = a2.AirportCode AND a2.City = 'Ashley'",
        "SELECT COUNT(*) FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen') AND DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Ashley') GROUP BY SourceAirport, DestAirport",
        "SELECT COUNT(*) FROM (SELECT f.FlightNo FROM flights f JOIN airports src ON f.SourceAirport = src.AirportCode JOIN airports dest ON f.DestAirport = dest.AirportCode WHERE src.City = 'Aberdeen' AND dest.City = 'Ashley') AS FlightCount"
      ]
    ]
  },
  {
    "id": 213,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'JetBlue Airways'",
        "SELECT COUNT(flights.FlightNo) AS TotalFlights FROM flights INNER JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'JetBlue Airways'",
        "SELECT COUNT(1) FROM flights, airlines WHERE flights.Airline = airlines.uid AND airlines.Airline = 'JetBlue Airways'",
        "SELECT COUNT(DISTINCT flights.FlightNo) FROM flights LEFT JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'JetBlue Airways'",
        "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'JetBlue Airways'",
        "SELECT COUNT(flights.FlightNo) FROM flights INNER JOIN airlines ON flights.Airline = airlines.uid AND airlines.Airline = 'JetBlue Airways'",
        "SELECT COUNT(*) FROM flights f, airlines a WHERE f.Airline = a.uid AND a.Airline = 'JetBlue Airways'",
        "SELECT COUNT(*) AS NumberOfFlights FROM flights JOIN airlines ON flights.Airline = airlines.uid AND airlines.Airline = 'JetBlue Airways'",
        "SELECT COUNT(flights.FlightNo) FROM flights, airlines WHERE flights.Airline = airlines.uid AND airlines.Airline = 'JetBlue Airways'",
        "SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'JetBlue Airways'"
      ]
    ]
  },
  {
    "id": 214,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'Jetblue Airways'",
        "SELECT COUNT(flights.FlightNo) AS NumberOfFlights FROM flights INNER JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'Jetblue Airways'",
        "SELECT COUNT(1) FROM flights, airlines WHERE flights.Airline = airlines.uid AND airlines.Airline = 'Jetblue Airways'",
        "SELECT COUNT(DISTINCT flights.FlightNo) FROM flights LEFT JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'Jetblue Airways'",
        "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.Airline = a.uid AND a.Airline = 'Jetblue Airways'",
        "SELECT COUNT(flights.FlightNo) FROM flights JOIN airlines ON flights.Airline = airlines.uid AND airlines.Airline = 'Jetblue Airways'",
        "SELECT COUNT(*) FROM flights f, airlines a WHERE f.Airline = a.uid AND a.Airline = 'Jetblue Airways'",
        "SELECT COUNT(*) AS TotalFlights FROM flights INNER JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'Jetblue Airways'",
        "SELECT COUNT(flights.FlightNo) FROM flights, airlines WHERE flights.Airline = airlines.uid AND airlines.Airline = 'Jetblue Airways'",
        "SELECT COUNT(*) FROM flights f INNER JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'Jetblue Airways'"
      ]
    ]
  },
  {
    "id": 215,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND DestAirport = 'ASY'",
        "SELECT COUNT(f.FlightNo) FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.DestAirport = 'ASY'",
        "SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines' AND flights.DestAirport = 'ASY'",
        "SELECT COUNT(FlightNo) FROM flights, airlines WHERE flights.Airline = airlines.uid AND airlines.Airline = 'United Airlines' AND flights.DestAirport = 'ASY'",
        "SELECT COUNT(*) FROM flights f, airlines a WHERE f.Airline = a.uid AND a.Airline = 'United Airlines' AND f.DestAirport = 'ASY'",
        "SELECT COUNT(DISTINCT flights.FlightNo) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines' AND flights.DestAirport = 'ASY'",
        "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.DestAirport = 'ASY'",
        "SELECT COUNT(*) FROM flights WHERE Airline IN (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND DestAirport = 'ASY'",
        "SELECT COUNT(f.FlightNo) FROM flights f INNER JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.DestAirport = 'ASY'",
        "SELECT COUNT(*) FROM flights f LEFT JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.DestAirport = 'ASY'"
      ]
    ]
  },
  {
    "id": 216,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'ASY'",
        "SELECT COUNT(flights.FlightNo) AS NumberOfFlights FROM flights INNER JOIN airlines ON flights.Airline = airlines.uid INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'ASY'",
        "SELECT COUNT(1) FROM flights, airlines, airports WHERE flights.Airline = airlines.uid AND flights.DestAirport = airports.AirportCode AND airlines.Airline = 'United Airlines' AND airports.AirportCode = 'ASY'",
        "SELECT COUNT(DISTINCT flights.FlightNo) FROM flights LEFT JOIN airlines ON flights.Airline = airlines.uid LEFT JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'ASY'",
        "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.Airline = a.uid JOIN airports p ON f.DestAirport = p.AirportCode WHERE a.Airline = 'United Airlines' AND p.AirportCode = 'ASY'",
        "SELECT COUNT(flights.FlightNo) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'ASY'",
        "SELECT COUNT(*) FROM flights f, airlines a, airports p WHERE f.Airline = a.uid AND f.DestAirport = p.AirportCode AND a.Airline = 'United Airlines' AND p.AirportCode = 'ASY'",
        "SELECT COUNT(flights.FlightNo) FROM flights, airlines, airports WHERE flights.Airline = airlines.uid AND flights.DestAirport = airports.AirportCode AND airlines.Airline = 'United Airlines' AND airports.AirportCode = 'ASY' GROUP BY flights.DestAirport",
        "SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.Airline = airlines.uid INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'ASY'",
        "SELECT COUNT(*) AS TotalFlights FROM flights f INNER JOIN airlines a ON f.Airline = a.uid INNER JOIN airports p ON f.DestAirport = p.AirportCode WHERE a.Airline = 'United Airlines' AND p.AirportCode = 'ASY'"
      ]
    ]
  },
  {
    "id": 217,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'AHD'",
        "SELECT COUNT(flights.FlightNo) AS NumberOfFlights FROM flights, airlines, airports WHERE flights.Airline = airlines.uid AND flights.SourceAirport = airports.AirportCode AND airlines.Airline = 'United Airlines' AND airports.AirportCode = 'AHD'",
        "SELECT COUNT(*) FROM flights f INNER JOIN airlines a ON f.Airline = a.uid INNER JOIN airports p ON f.SourceAirport = p.AirportCode WHERE a.Airline = 'United Airlines' AND p.AirportCode = 'AHD'",
        "SELECT COUNT(DISTINCT flights.FlightNo) FROM flights LEFT JOIN airlines ON flights.Airline = airlines.uid LEFT JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'AHD'",
        "SELECT COUNT(1) FROM flights f, airlines a, airports p WHERE f.Airline = a.uid AND f.SourceAirport = p.AirportCode AND a.Airline = 'United Airlines' AND p.AirportCode = 'AHD'",
        "SELECT COUNT(*) AS TotalFlights FROM flights INNER JOIN airlines ON flights.Airline = airlines.uid INNER JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'AHD'",
        "SELECT COUNT(flights.FlightNo) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'AHD'",
        "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.Airline = a.uid JOIN airports p ON f.SourceAirport = p.AirportCode WHERE a.Airline = 'United Airlines' AND p.AirportCode = 'AHD'",
        "SELECT COUNT(flights.FlightNo) FROM flights, airlines, airports WHERE flights.Airline = airlines.uid AND flights.SourceAirport = airports.AirportCode AND airlines.Airline = 'United Airlines' AND airports.AirportCode = 'AHD' GROUP BY airlines.Airline, airports.AirportCode",
        "SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND SourceAirport = (SELECT AirportCode FROM airports WHERE AirportCode = 'AHD')"
      ]
    ]
  },
  {
    "id": 218,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'AHD'",
        "SELECT COUNT(flights.FlightNo) AS NumberOfFlights FROM flights INNER JOIN airlines ON flights.Airline = airlines.uid INNER JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'AHD'",
        "SELECT COUNT(1) FROM flights, airlines, airports WHERE flights.Airline = airlines.uid AND flights.SourceAirport = airports.AirportCode AND airlines.Airline = 'United Airlines' AND airports.AirportCode = 'AHD'",
        "SELECT COUNT(DISTINCT flights.FlightNo) FROM flights f JOIN airlines a ON f.Airline = a.uid JOIN airports ap ON f.SourceAirport = ap.AirportCode WHERE a.Airline = 'United Airlines' AND ap.AirportCode = 'AHD'",
        "SELECT COUNT(*) FROM flights f, airlines a, airports ap WHERE f.Airline = a.uid AND f.SourceAirport = ap.AirportCode AND a.Airline = 'United Airlines' AND ap.AirportCode = 'AHD'",
        "SELECT COUNT(f.FlightNo) FROM flights f INNER JOIN airlines a ON f.Airline = a.uid INNER JOIN airports ap ON f.SourceAirport = ap.AirportCode WHERE a.Airline = 'United Airlines' AND ap.AirportCode = 'AHD'",
        "SELECT COUNT(*) FROM flights WHERE Airline IN (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND SourceAirport IN (SELECT AirportCode FROM airports WHERE AirportCode = 'AHD')",
        "SELECT COUNT(flights.FlightNo) FROM flights LEFT JOIN airlines ON flights.Airline = airlines.uid LEFT JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'AHD'",
        "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.SourceAirport = 'AHD'",
        "SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND SourceAirport = 'AHD'"
      ]
    ]
  },
  {
    "id": 219,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen'",
        "SELECT COUNT(flights.FlightNo) AS NumberOfFlights FROM flights INNER JOIN airlines ON flights.Airline = airlines.uid INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen'",
        "SELECT COUNT(DISTINCT flights.FlightNo) FROM flights, airlines, airports WHERE flights.Airline = airlines.uid AND flights.DestAirport = airports.AirportCode AND airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen'",
        "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.Airline = a.uid JOIN airports p ON f.DestAirport = p.AirportCode WHERE a.Airline = 'United Airlines' AND p.City = 'Aberdeen'",
        "SELECT COUNT(flights.FlightNo) FROM flights LEFT JOIN airlines ON flights.Airline = airlines.uid LEFT JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen'",
        "SELECT COUNT(*) FROM flights f, airlines a, airports p WHERE f.Airline = a.uid AND f.DestAirport = p.AirportCode AND a.Airline = 'United Airlines' AND p.City = 'Aberdeen'",
        "SELECT COUNT(*) AS TotalFlights FROM flights INNER JOIN airlines ON flights.Airline = airlines.uid INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen'",
        "SELECT COUNT(flights.FlightNo) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen' GROUP BY airlines.Airline, airports.City",
        "SELECT COUNT(*) FROM flights f INNER JOIN airlines a ON f.Airline = a.uid INNER JOIN airports p ON f.DestAirport = p.AirportCode WHERE a.Airline = 'United Airlines' AND p.City = 'Aberdeen'",
        "SELECT COUNT(*) FROM flights, airlines, airports WHERE flights.Airline = airlines.uid AND flights.DestAirport = airports.AirportCode AND airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen'"
      ]
    ]
  },
  {
    "id": 220,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen'",
        "SELECT COUNT(flights.FlightNo) AS NumberOfFlights FROM flights INNER JOIN airlines ON flights.Airline = airlines.uid INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen'",
        "SELECT COUNT(1) FROM flights, airlines, airports WHERE flights.Airline = airlines.uid AND flights.DestAirport = airports.AirportCode AND airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen'",
        "SELECT COUNT(DISTINCT flights.FlightNo) FROM flights f JOIN airlines a ON f.Airline = a.uid JOIN airports ap ON f.DestAirport = ap.AirportCode WHERE a.Airline = 'United Airlines' AND ap.City = 'Aberdeen'",
        "SELECT COUNT(*) FROM flights f, airlines a, airports ap WHERE f.Airline = a.uid AND f.DestAirport = ap.AirportCode AND a.Airline = 'United Airlines' AND ap.City = 'Aberdeen'",
        "SELECT COUNT(f.FlightNo) FROM flights f INNER JOIN airlines a ON f.Airline = a.uid INNER JOIN airports ap ON f.DestAirport = ap.AirportCode WHERE a.Airline = 'United Airlines' AND ap.City = 'Aberdeen'",
        "SELECT COUNT(*) FROM flights f LEFT JOIN airlines a ON f.Airline = a.uid LEFT JOIN airports ap ON f.DestAirport = ap.AirportCode WHERE a.Airline = 'United Airlines' AND ap.City = 'Aberdeen'",
        "SELECT COUNT(flights.FlightNo) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen'",
        "SELECT COUNT(*) FROM flights f CROSS JOIN airlines a CROSS JOIN airports ap WHERE f.Airline = a.uid AND f.DestAirport = ap.AirportCode AND a.Airline = 'United Airlines' AND ap.City = 'Aberdeen'",
        "SELECT COUNT(*) FROM flights, airlines, airports WHERE flights.Airline = airlines.uid AND flights.DestAirport = airports.AirportCode AND airlines.Airline = 'United Airlines' AND airports.AirportName LIKE '%Aberdeen%'"
      ]
    ]
  },
  {
    "id": 221,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT City FROM airports WHERE AirportCode IN (SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT A.City FROM airports A JOIN flights F ON A.AirportCode = F.DestAirport GROUP BY A.City ORDER BY COUNT(F.FlightNo) DESC LIMIT 1",
        "SELECT City FROM (SELECT City, COUNT(*) AS FlightCount FROM airports JOIN flights ON AirportCode = DestAirport GROUP BY City) AS Result ORDER BY FlightCount DESC LIMIT 1",
        "SELECT TOP 1 City FROM airports INNER JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY City ORDER BY COUNT(flights.FlightNo) DESC",
        "SELECT City FROM airports WHERE AirportCode = (SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT City FROM airports A WHERE EXISTS (SELECT NULL FROM flights F WHERE F.DestAirport = A.AirportCode GROUP BY F.DestAirport HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM flights GROUP BY DestAirport) AS SubQuery))",
        "SELECT City FROM airports JOIN (SELECT DestAirport, COUNT(*) AS FlightCount FROM flights GROUP BY DestAirport) AS FlightData ON airports.AirportCode = FlightData.DestAirport ORDER BY FlightData.FlightCount DESC LIMIT 1",
        "WITH FlightCounts AS (SELECT DestAirport, COUNT(*) AS Count FROM flights GROUP BY DestAirport) SELECT City FROM airports JOIN FlightCounts ON airports.AirportCode = FlightCounts.DestAirport WHERE Count = (SELECT MAX(Count) FROM FlightCounts)",
        "SELECT City FROM airports WHERE AirportCode IN (SELECT DestAirport FROM flights GROUP BY DestAirport HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM flights GROUP BY DestAirport) AS Counts))",
        "SELECT City FROM airports, (SELECT DestAirport, COUNT(*) AS TotalFlights FROM flights GROUP BY DestAirport) AS FlightTotals WHERE airports.AirportCode = FlightTotals.DestAirport ORDER BY FlightTotals.TotalFlights DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 222,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT City FROM airports WHERE AirportCode IN (SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT a.City FROM airports a INNER JOIN (SELECT DestAirport, COUNT(*) AS freq FROM flights GROUP BY DestAirport ORDER BY freq DESC LIMIT 1) f ON a.AirportCode = f.DestAirport",
        "SELECT City FROM airports WHERE AirportCode = (SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT City FROM airports JOIN (SELECT DestAirport FROM flights GROUP BY DestAirport HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM flights GROUP BY DestAirport) AS counts)) AS MostFreq ON airports.AirportCode = MostFreq.DestAirport",
        "SELECT City FROM airports WHERE AirportCode IN (SELECT DestAirport FROM flights GROUP BY DestAirport HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM flights GROUP BY DestAirport) AS sub))",
        "SELECT a.City FROM airports a, (SELECT DestAirport FROM flights GROUP BY DestAirport HAVING COUNT(DestAirport) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM flights GROUP BY DestAirport) sub)) b WHERE a.AirportCode = b.DestAirport",
        "SELECT City FROM airports WHERE AirportCode IN (SELECT DestAirport FROM flights GROUP BY DestAirport HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM flights GROUP BY DestAirport))",
        "SELECT TOP 1 WITH TIES a.City FROM airports a JOIN flights f ON a.AirportCode = f.DestAirport GROUP BY a.City ORDER BY COUNT(*) DESC",
        "SELECT City FROM (SELECT a.City, COUNT(f.DestAirport) AS DestinationCount FROM airports a JOIN flights f ON a.AirportCode = f.DestAirport GROUP BY a.City ORDER BY DestinationCount DESC LIMIT 1) AS MostFrequent",
        "SELECT City FROM airports WHERE AirportCode = (SELECT TOP 1 DestAirport FROM flights GROUP BY DestAirport ORDER BY COUNT(*) DESC)"
      ]
    ]
  },
  {
    "id": 223,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT City FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY City HAVING COUNT(*) = (SELECT MAX(FlightCount) FROM (SELECT COUNT(*) AS FlightCount FROM flights GROUP BY SourceAirport) AS SubQuery)",
        "SELECT City FROM airports WHERE AirportCode IN (SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT A.City FROM airports A INNER JOIN (SELECT SourceAirport, COUNT(*) AS FlightCount FROM flights GROUP BY SourceAirport) F ON A.AirportCode = F.SourceAirport ORDER BY F.FlightCount DESC LIMIT 1",
        "SELECT TOP 1 City FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY City ORDER BY COUNT(*) DESC",
        "SELECT City FROM (SELECT City, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY City) WHERE rank = 1",
        "SELECT City FROM airports WHERE AirportCode IN (SELECT SourceAirport FROM flights GROUP BY SourceAirport HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM flights GROUP BY SourceAirport) AS Counts))",
        "WITH FlightCounts AS (SELECT SourceAirport, COUNT(*) AS NumFlights FROM flights GROUP BY SourceAirport) SELECT City FROM airports JOIN FlightCounts ON airports.AirportCode = FlightCounts.SourceAirport WHERE NumFlights = (SELECT MAX(NumFlights) FROM FlightCounts)",
        "SELECT City FROM airports JOIN (SELECT SourceAirport, COUNT(*) AS FlightCount FROM flights GROUP BY SourceAirport) AS FlightStats ON airports.AirportCode = FlightStats.SourceAirport WHERE FlightCount = (SELECT MAX(FlightCount) FROM FlightStats)",
        "SELECT City FROM airports INNER JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY City HAVING COUNT(flights.FlightNo) = (SELECT MAX(FlightCount) FROM (SELECT COUNT(*) AS FlightCount FROM flights GROUP BY SourceAirport) AS SubQuery)",
        "SELECT City FROM airports, (SELECT SourceAirport, COUNT(*) AS TotalFlights FROM flights GROUP BY SourceAirport) AS FlightData WHERE airports.AirportCode = FlightData.SourceAirport AND TotalFlights = (SELECT MAX(TotalFlights) FROM FlightData)"
      ]
    ]
  },
  {
    "id": 224,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT City FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY City HAVING COUNT(*) = (SELECT MAX(flight_count) FROM (SELECT COUNT(*) AS flight_count FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY City) AS subquery)",
        "SELECT City FROM (SELECT City, COUNT(*) AS flight_count FROM airports INNER JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY City) AS counts WHERE flight_count = (SELECT MAX(flight_count) FROM (SELECT COUNT(*) AS flight_count FROM airports INNER JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY City) AS subquery)",
        "WITH CityCounts AS (SELECT City, COUNT(*) AS NumFlights FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY City) SELECT City FROM CityCounts WHERE NumFlights = (SELECT MAX(NumFlights) FROM CityCounts)",
        "SELECT a.City FROM airports a JOIN flights f ON a.AirportCode = f.SourceAirport GROUP BY a.City ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT TOP 1 WITH TIES a.City FROM airports a JOIN flights f ON a.AirportCode = f.SourceAirport GROUP BY a.City ORDER BY COUNT(*) DESC",
        "SELECT a.City FROM airports a, flights f WHERE a.AirportCode = f.SourceAirport GROUP BY a.City HAVING COUNT(f.SourceAirport) = (SELECT MAX(Count) FROM (SELECT COUNT(f.SourceAirport) AS Count FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode GROUP BY a.City) AS subquery)",
        "SELECT City FROM (SELECT City, COUNT(flights.SourceAirport) AS FlightCount FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY City) AS CityFlightCounts WHERE FlightCount = (SELECT MAX(FlightCount) FROM (SELECT COUNT(flights.SourceAirport) AS FlightCount FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY City) AS MaxFlightCounts)",
        "SELECT City FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY City HAVING COUNT(flights.SourceAirport) = (SELECT MAX(FlightCount) FROM (SELECT COUNT(flights.SourceAirport) AS FlightCount FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY City) AS FlightCounts)",
        "SELECT City FROM airports a JOIN flights f ON a.AirportCode = f.SourceAirport GROUP BY City HAVING COUNT(f.SourceAirport) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY City) AS Counts)",
        "SELECT City FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY City HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY City) AS TotalCounts)"
      ]
    ]
  },
  {
    "id": 225,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT AirportCode FROM (SELECT AirportCode, COUNT(*) AS total_flights FROM (SELECT DestAirport AS AirportCode FROM flights UNION ALL SELECT SourceAirport AS AirportCode FROM flights) AS combined GROUP BY AirportCode) AS flight_counts WHERE total_flights = (SELECT MAX(total_flights) FROM (SELECT AirportCode, COUNT(*) AS total_flights FROM (SELECT DestAirport AS AirportCode FROM flights UNION ALL SELECT SourceAirport AS AirportCode FROM flights) AS combined GROUP BY AirportCode) AS max_flights)",
        "SELECT A.AirportCode FROM airports A JOIN (SELECT AirportCode, COUNT(*) AS total_flights FROM (SELECT DestAirport AS AirportCode FROM flights UNION ALL SELECT SourceAirport AS AirportCode FROM flights) combined GROUP BY AirportCode) B ON A.AirportCode = B.AirportCode WHERE B.total_flights = (SELECT MAX(total_flights) FROM (SELECT AirportCode, COUNT(*) AS total_flights FROM (SELECT DestAirport AS AirportCode FROM flights UNION ALL SELECT SourceAirport AS AirportCode FROM flights) combined GROUP BY AirportCode))",
        "WITH FlightCounts AS (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT DestAirport AS AirportCode FROM flights UNION ALL SELECT SourceAirport AS AirportCode FROM flights) GROUP BY AirportCode) SELECT AirportCode FROM FlightCounts WHERE TotalFlights = (SELECT MAX(TotalFlights) FROM FlightCounts)",
        "SELECT AirportCode FROM airports WHERE AirportCode IN (SELECT AirportCode FROM (SELECT DestAirport AS AirportCode, COUNT(*) AS TotalFlights FROM flights GROUP BY DestAirport UNION ALL SELECT SourceAirport, COUNT(*) FROM flights GROUP BY SourceAirport) GROUP BY AirportCode HAVING SUM(TotalFlights) = (SELECT MAX(SumTotal) FROM (SELECT SUM(TotalFlights) AS SumTotal FROM (SELECT DestAirport AS AirportCode, COUNT(*) AS TotalFlights FROM flights GROUP BY DestAirport UNION ALL SELECT SourceAirport, COUNT(*) FROM flights GROUP BY SourceAirport) GROUP BY AirportCode)))",
        "SELECT AirportCode FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT DestAirport AS AirportCode FROM flights UNION ALL SELECT SourceAirport AS AirportCode FROM flights) GROUP BY AirportCode ORDER BY TotalFlights DESC LIMIT 1) AS MaxFlights",
        "SELECT TOP 1 WITH TIES AirportCode FROM (SELECT DestAirport AS AirportCode FROM flights UNION ALL SELECT SourceAirport AS AirportCode FROM flights) AS AllFlights GROUP BY AirportCode ORDER BY COUNT(*) DESC",
        "SELECT AirportCode FROM (SELECT AirportCode, COUNT(*) AS FlightCount FROM (SELECT DestAirport AS AirportCode FROM flights UNION ALL SELECT SourceAirport AS AirportCode FROM flights) GROUP BY AirportCode) WHERE FlightCount = (SELECT MAX(FlightCount) FROM (SELECT COUNT(*) AS FlightCount FROM (SELECT DestAirport AS AirportCode FROM flights UNION ALL SELECT SourceAirport AS AirportCode FROM flights) GROUP BY AirportCode))",
        "SELECT AirportCode FROM airports WHERE AirportCode IN (SELECT AirportCode FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT DestAirport AS AirportCode FROM flights UNION SELECT SourceAirport AS AirportCode FROM flights) GROUP BY AirportCode HAVING TotalFlights = (SELECT MAX(TotalFlights) FROM (SELECT COUNT(*) AS TotalFlights FROM (SELECT DestAirport AS AirportCode FROM flights UNION SELECT SourceAirport AS AirportCode FROM flights) GROUP BY AirportCode)))",
        "SELECT AirportCode FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT DestAirport AS AirportCode FROM flights UNION ALL SELECT SourceAirport AS AirportCode FROM flights) GROUP BY AirportCode HAVING COUNT(*) = (SELECT MAX(TotalFlights) FROM (SELECT COUNT(*) AS TotalFlights FROM (SELECT DestAirport AS AirportCode FROM flights UNION ALL SELECT SourceAirport AS AirportCode FROM flights) GROUP BY AirportCode)))",
        "SELECT AirportCode FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT DestAirport AS AirportCode FROM flights UNION ALL SELECT SourceAirport AS AirportCode FROM flights) GROUP BY AirportCode) AS FlightCounts WHERE TotalFlights = (SELECT MAX(TotalFlights) FROM FlightCounts)"
      ]
    ]
  },
  {
    "id": 226,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT AirportCode FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) AS Combined GROUP BY AirportCode) AS Result WHERE TotalFlights = (SELECT MAX(TotalFlights) FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) AS Combined GROUP BY AirportCode) AS MaxFlights)",
        "SELECT A.AirportCode FROM (SELECT AirportCode, COUNT(*) AS FlightCount FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport FROM flights) AS AllFlights GROUP BY AirportCode) A WHERE A.FlightCount = (SELECT MAX(FlightCount) FROM (SELECT AirportCode, COUNT(*) AS FlightCount FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport FROM flights) AS AllFlights GROUP BY AirportCode) B)",
        "WITH FlightCounts AS (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) GROUP BY AirportCode) SELECT AirportCode FROM FlightCounts WHERE TotalFlights = (SELECT MAX(TotalFlights) FROM FlightCounts)",
        "SELECT AirportCode FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) GROUP BY AirportCode HAVING COUNT(*) = (SELECT MAX(TotalFlights) FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) GROUP BY AirportCode) AS MaxFlights))",
        "SELECT AirportCode FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) GROUP BY AirportCode ORDER BY TotalFlights DESC LIMIT 1)",
        "SELECT TOP 1 WITH TIES AirportCode FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) GROUP BY AirportCode) ORDER BY TotalFlights DESC",
        "SELECT AirportCode FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) GROUP BY AirportCode) WHERE TotalFlights = (SELECT MAX(TotalFlights) FROM (SELECT COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) GROUP BY AirportCode))",
        "SELECT AirportCode FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) GROUP BY AirportCode) AS FlightCounts WHERE TotalFlights = (SELECT MAX(TotalFlights) FROM FlightCounts)",
        "SELECT AirportCode FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) GROUP BY AirportCode) AS FlightCounts WHERE TotalFlights = (SELECT MAX(TotalFlights) FROM FlightCounts)",
        "SELECT AirportCode FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) GROUP BY AirportCode) AS FlightCounts WHERE TotalFlights = (SELECT MAX(TotalFlights) FROM FlightCounts)"
      ]
    ]
  },
  {
    "id": 227,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT AirportCode FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) AS Combined GROUP BY AirportCode) AS FlightCounts WHERE TotalFlights = (SELECT MIN(TotalFlights) FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) AS Combined GROUP BY AirportCode) AS MinFlights)",
        "SELECT A.AirportCode FROM (SELECT AirportCode, COUNT(*) AS FlightCount FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport FROM flights) Combined GROUP BY AirportCode) A WHERE A.FlightCount = (SELECT MIN(FlightCount) FROM (SELECT AirportCode, COUNT(*) AS FlightCount FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport FROM flights) Combined GROUP BY AirportCode) B)",
        "SELECT AirportCode FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) GROUP BY AirportCode) WHERE TotalFlights = (SELECT MIN(TotalFlights) FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) GROUP BY AirportCode))",
        "WITH FlightCounts AS (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) GROUP BY AirportCode) SELECT AirportCode FROM FlightCounts WHERE TotalFlights = (SELECT MIN(TotalFlights) FROM FlightCounts)",
        "SELECT AirportCode FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) GROUP BY AirportCode HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) GROUP BY AirportCode))",
        "SELECT AirportCode FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) GROUP BY AirportCode ORDER BY TotalFlights ASC LIMIT 1)",
        "SELECT TOP 1 AirportCode FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) GROUP BY AirportCode ORDER BY TotalFlights ASC)",
        "SELECT AirportCode FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION SELECT DestAirport AS AirportCode FROM flights) GROUP BY AirportCode) AS FlightCounts WHERE TotalFlights = (SELECT MIN(TotalFlights) FROM FlightCounts)",
        "SELECT AirportCode FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) GROUP BY AirportCode) AS FlightCounts WHERE TotalFlights = (SELECT MIN(TotalFlights) FROM FlightCounts)",
        "SELECT AirportCode FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) GROUP BY AirportCode) AS FlightCounts WHERE TotalFlights = (SELECT MIN(TotalFlights) FROM (SELECT COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) GROUP BY AirportCode))"
      ]
    ]
  },
  {
    "id": 228,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT AirportCode FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) AS CombinedFlights GROUP BY AirportCode) AS FlightCounts WHERE TotalFlights = (SELECT MIN(TotalFlights) FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) AS CombinedFlights GROUP BY AirportCode) AS MinFlightCounts)",
        "SELECT A.AirportCode FROM (SELECT AirportCode, COUNT(*) AS FlightCount FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) Combined GROUP BY AirportCode) A WHERE A.FlightCount = (SELECT MIN(FlightCount) FROM (SELECT AirportCode, COUNT(*) AS FlightCount FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) Combined GROUP BY AirportCode) B)",
        "WITH FlightCounts AS (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) AS CombinedFlights GROUP BY AirportCode) SELECT AirportCode FROM FlightCounts WHERE TotalFlights = (SELECT MIN(TotalFlights) FROM FlightCounts)",
        "SELECT AirportCode FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) AS CombinedFlights GROUP BY AirportCode HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) AS CombinedFlights GROUP BY AirportCode)) AS Result",
        "SELECT AirportCode FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) GROUP BY AirportCode ORDER BY COUNT(*) ASC LIMIT 1) AS LeastFlights",
        "SELECT TOP 1 WITH TIES AirportCode FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) AS CombinedFlights GROUP BY AirportCode) AS FlightCounts ORDER BY TotalFlights",
        "SELECT AirportCode FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) AS CombinedFlights GROUP BY AirportCode) AS FlightCounts WHERE TotalFlights = (SELECT MIN(TotalFlights) FROM FlightCounts)",
        "SELECT AirportCode FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) AS CombinedFlights GROUP BY AirportCode ORDER BY TotalFlights ASC LIMIT 1) AS MinFlights",
        "SELECT AirportCode FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) AS CombinedFlights GROUP BY AirportCode) AS FlightCounts WHERE TotalFlights = (SELECT MIN(TotalFlights) FROM FlightCounts)",
        "SELECT AirportCode FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) AS CombinedFlights GROUP BY AirportCode) AS FlightCounts WHERE TotalFlights = (SELECT MIN(TotalFlights) FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) AS CombinedFlights GROUP BY AirportCode) AS MinFlightCounts)"
      ]
    ]
  },
  {
    "id": 229,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT A.Airline FROM airlines A JOIN flights F ON A.uid = F.Airline GROUP BY A.Airline HAVING COUNT(*) = (SELECT MAX(flight_count) FROM (SELECT COUNT(*) AS flight_count FROM flights GROUP BY Airline) AS subquery)",
        "SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT airlines.Airline FROM airlines INNER JOIN (SELECT Airline, COUNT(*) AS FlightCount FROM flights GROUP BY Airline) AS FlightData ON airlines.uid = FlightData.Airline WHERE FlightData.FlightCount = (SELECT MAX(FlightCount) FROM (SELECT COUNT(*) AS FlightCount FROM flights GROUP BY Airline) AS MaxFlights)",
        "SELECT A.Airline FROM airlines A WHERE A.uid IN (SELECT F.Airline FROM flights F GROUP BY F.Airline HAVING COUNT(F.FlightNo) = (SELECT MAX(Count) FROM (SELECT COUNT(F.FlightNo) AS Count FROM flights F GROUP BY F.Airline) AS Counts))",
        "WITH FlightCounts AS (SELECT Airline, COUNT(*) AS TotalFlights FROM flights GROUP BY Airline), MaxFlights AS (SELECT MAX(TotalFlights) AS MaxFlight FROM FlightCounts) SELECT A.Airline FROM airlines A JOIN FlightCounts FC ON A.uid = FC.Airline WHERE FC.TotalFlights = (SELECT MaxFlight FROM MaxFlights)",
        "SELECT A.Airline FROM airlines A, (SELECT Airline, COUNT(*) AS Total FROM flights GROUP BY Airline) AS F WHERE A.uid = F.Airline AND F.Total = (SELECT MAX(Total) FROM (SELECT COUNT(*) AS Total FROM flights GROUP BY Airline) AS T)",
        "SELECT DISTINCT A.Airline FROM airlines A JOIN flights F ON A.uid = F.Airline GROUP BY A.Airline, F.Airline HAVING COUNT(F.FlightNo) = (SELECT MAX(FlightCount) FROM (SELECT COUNT(*) AS FlightCount FROM flights GROUP BY Airline) AS FlightCounts)",
        "SELECT TOP 1 WITH TIES A.Airline FROM airlines A JOIN flights F ON A.uid = F.Airline GROUP BY A.Airline ORDER BY COUNT(*) DESC",
        "SELECT A.Airline FROM airlines A WHERE EXISTS (SELECT 1 FROM flights F WHERE F.Airline = A.uid GROUP BY F.Airline HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM flights GROUP BY Airline) AS MaxCount))",
        "SELECT A.Airline FROM airlines A JOIN flights F ON A.uid = F.Airline GROUP BY A.Airline HAVING COUNT(F.FlightNo) = (SELECT COUNT(F.FlightNo) FROM flights F2 WHERE F2.Airline = F.Airline GROUP BY F2.Airline ORDER BY COUNT(F2.FlightNo) DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 230,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT A.Airline FROM airlines A JOIN flights F ON A.uid = F.Airline GROUP BY A.Airline HAVING COUNT(*) = (SELECT MAX(flight_count) FROM (SELECT COUNT(*) AS flight_count FROM flights GROUP BY Airline) AS subquery)",
        "SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT A.Airline FROM airlines A WHERE A.uid IN (SELECT F.Airline FROM flights F GROUP BY F.Airline HAVING COUNT(F.FlightNo) = (SELECT MAX(COUNT(F.FlightNo)) FROM flights F GROUP BY F.Airline))",
        "SELECT A.Airline FROM airlines A INNER JOIN (SELECT Airline, COUNT(*) AS TotalFlights FROM flights GROUP BY Airline) AS F ON A.uid = F.Airline WHERE F.TotalFlights = (SELECT MAX(TotalFlights) FROM (SELECT COUNT(*) AS TotalFlights FROM flights GROUP BY Airline) AS subquery)",
        "SELECT A.Airline FROM airlines A, flights F WHERE A.uid = F.Airline GROUP BY A.Airline HAVING COUNT(F.FlightNo) = (SELECT MAX(flight_count) FROM (SELECT COUNT(*) AS flight_count FROM flights GROUP BY Airline) AS subquery)",
        "SELECT TOP 1 WITH TIES A.Airline FROM airlines A JOIN flights F ON A.uid = F.Airline GROUP BY A.Airline ORDER BY COUNT(*) DESC",
        "SELECT A.Airline FROM airlines A WHERE EXISTS (SELECT 1 FROM flights F WHERE F.Airline = A.uid GROUP BY F.Airline HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM flights GROUP BY Airline))",
        "SELECT A.Airline FROM airlines A JOIN flights F ON A.uid = F.Airline GROUP BY A.Airline ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS WITH TIES",
        "SELECT A.Airline FROM airlines A JOIN (SELECT Airline, COUNT(*) AS FlightCount FROM flights GROUP BY Airline) F ON A.uid = F.Airline WHERE F.FlightCount = (SELECT MAX(FlightCount) FROM (SELECT COUNT(*) AS FlightCount FROM flights GROUP BY Airline) sub)",
        "SELECT A.Airline FROM airlines A WHERE A.uid IN (SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM flights GROUP BY Airline))"
      ]
    ]
  },
  {
    "id": 231,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT A.Abbreviation, A.Country FROM airlines A JOIN flights F ON A.uid = F.Airline GROUP BY A.uid, A.Abbreviation, A.Country HAVING COUNT(F.FlightNo) = (SELECT MIN(TotalFlights) FROM (SELECT COUNT(*) AS TotalFlights FROM flights GROUP BY Airline) AS SubQuery)",
        "SELECT Abbreviation, Country FROM airlines WHERE uid IN (SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) = (SELECT MIN(Count) FROM (SELECT COUNT(*) AS Count FROM flights GROUP BY Airline) AS Counts))",
        "SELECT A.Abbreviation, A.Country FROM airlines A WHERE A.uid IN (SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) ASC LIMIT 1)",
        "SELECT Abbreviation, Country FROM airlines WHERE uid = (SELECT Airline FROM (SELECT Airline, COUNT(*) AS FlightCount FROM flights GROUP BY Airline ORDER BY FlightCount ASC LIMIT 1) AS MinFlights)",
        "SELECT A.Abbreviation, A.Country FROM airlines A, (SELECT Airline, COUNT(*) AS FlightCount FROM flights GROUP BY Airline HAVING FlightCount = (SELECT MIN(FlightCount) FROM (SELECT COUNT(*) AS FlightCount FROM flights GROUP BY Airline) AS Sub)) AS F WHERE A.uid = F.Airline",
        "SELECT A.Abbreviation, A.Country FROM airlines A INNER JOIN (SELECT Airline, COUNT(*) AS TotalFlights FROM flights GROUP BY Airline) AS F ON A.uid = F.Airline WHERE TotalFlights = (SELECT MIN(TotalFlights) FROM (SELECT COUNT(*) AS TotalFlights FROM flights GROUP BY Airline) AS SubQuery)",
        "SELECT A.Abbreviation, A.Country FROM airlines A WHERE EXISTS (SELECT 1 FROM flights F WHERE A.uid = F.Airline GROUP BY F.Airline HAVING COUNT(*) = (SELECT MIN(Count) FROM (SELECT COUNT(*) AS Count FROM flights GROUP BY Airline) AS Counts))",
        "SELECT A.Abbreviation, A.Country FROM airlines A JOIN (SELECT Airline, COUNT(*) AS FlightCount FROM flights GROUP BY Airline) AS F ON A.uid = F.Airline WHERE F.FlightCount = (SELECT MIN(FlightCount) FROM (SELECT COUNT(*) AS FlightCount FROM flights GROUP BY Airline) AS Sub)",
        "SELECT A.Abbreviation, A.Country FROM airlines A WHERE A.uid IN (SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) = (SELECT MIN(FlightCount) FROM (SELECT COUNT(*) AS FlightCount FROM flights GROUP BY Airline) AS Sub))",
        "SELECT A.Abbreviation, A.Country FROM airlines A WHERE A.uid IN (SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) = (SELECT MIN(TotalFlights) FROM (SELECT Airline, COUNT(*) AS TotalFlights FROM flights GROUP BY Airline) AS Sub))"
      ]
    ]
  },
  {
    "id": 232,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT A.Abbreviation, A.Country FROM airlines AS A JOIN flights AS F ON A.uid = F.Airline GROUP BY A.uid, A.Abbreviation, A.Country HAVING COUNT(F.FlightNo) = (SELECT MIN(FlightCount) FROM (SELECT COUNT(*) AS FlightCount FROM flights GROUP BY Airline) AS SubQuery)",
        "SELECT Abbreviation, Country FROM airlines WHERE uid IN (SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) = (SELECT MIN(Count) FROM (SELECT COUNT(*) AS Count FROM flights GROUP BY Airline) AS Counts))",
        "SELECT A.Abbreviation, A.Country FROM airlines A WHERE A.uid IN (SELECT F.Airline FROM flights F GROUP BY F.Airline HAVING COUNT(F.FlightNo) = (SELECT MIN(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM flights GROUP BY Airline) T))",
        "SELECT Abbreviation, Country FROM airlines WHERE uid IN (SELECT Airline FROM (SELECT Airline, COUNT(*) AS NumFlights FROM flights GROUP BY Airline ORDER BY NumFlights ASC LIMIT 1) AS MinFlights)",
        "SELECT A.Abbreviation, A.Country FROM airlines A INNER JOIN (SELECT Airline, COUNT(*) AS FlightCount FROM flights GROUP BY Airline HAVING FlightCount = (SELECT MIN(FlightCount) FROM (SELECT COUNT(*) AS FlightCount FROM flights GROUP BY Airline) AS SubQuery)) F ON A.uid = F.Airline",
        "SELECT A.Abbreviation, A.Country FROM airlines A, (SELECT Airline, COUNT(*) AS FlightCount FROM flights GROUP BY Airline) AS F WHERE A.uid = F.Airline AND F.FlightCount = (SELECT MIN(FlightCount) FROM (SELECT COUNT(*) AS FlightCount FROM flights GROUP BY Airline) AS SubQuery)",
        "SELECT A.Abbreviation, A.Country FROM airlines A JOIN flights F ON A.uid = F.Airline GROUP BY A.uid, A.Abbreviation, A.Country ORDER BY COUNT(F.FlightNo) ASC LIMIT 1",
        "SELECT A.Abbreviation, A.Country FROM airlines A WHERE EXISTS (SELECT 1 FROM flights F WHERE A.uid = F.Airline GROUP BY F.Airline HAVING COUNT(*) = (SELECT MIN(Count) FROM (SELECT COUNT(*) AS Count FROM flights GROUP BY Airline) AS Counts))",
        "SELECT A.Abbreviation, A.Country FROM airlines A WHERE A.uid IN (SELECT F.Airline FROM flights F GROUP BY F.Airline ORDER BY COUNT(*) ASC LIMIT 1)",
        "SELECT A.Abbreviation, A.Country FROM airlines A WHERE A.uid = (SELECT F.Airline FROM flights F GROUP BY F.Airline HAVING COUNT(F.FlightNo) = (SELECT MIN(FlightCount) FROM (SELECT COUNT(*) AS FlightCount FROM flights GROUP BY Airline) AS SubQuery))"
      ]
    ]
  },
  {
    "id": 233,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'AHD'",
        "SELECT a.Airline FROM airlines a, flights f WHERE a.uid = f.Airline AND f.SourceAirport = 'AHD' GROUP BY a.Airline",
        "SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights WHERE SourceAirport = 'AHD')",
        "SELECT DISTINCT airlines.Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD'",
        "SELECT a.Airline FROM airlines a INNER JOIN flights f ON a.uid = f.Airline AND f.SourceAirport = 'AHD'",
        "SELECT DISTINCT a.Airline FROM airlines a, flights f WHERE a.uid = f.Airline AND f.SourceAirport = 'AHD'",
        "SELECT a.Airline FROM airlines a WHERE EXISTS (SELECT 1 FROM flights f WHERE f.Airline = a.uid AND f.SourceAirport = 'AHD')",
        "SELECT DISTINCT Airline FROM (SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'AHD') AS subquery",
        "SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'AHD' ORDER BY a.Airline",
        "SELECT DISTINCT a.Airline FROM airlines a LEFT JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'AHD'"
      ]
    ]
  },
  {
    "id": 234,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'AHD'",
        "SELECT a.Airline FROM airlines a, flights f WHERE a.uid = f.Airline AND f.SourceAirport = 'AHD' GROUP BY a.Airline",
        "SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights WHERE SourceAirport = 'AHD')",
        "SELECT DISTINCT Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD'",
        "SELECT a.Airline FROM airlines a INNER JOIN flights f ON a.uid = f.Airline AND f.SourceAirport = 'AHD'",
        "SELECT DISTINCT a.Airline FROM airlines a, flights f WHERE a.uid = f.Airline AND f.SourceAirport = 'AHD'",
        "SELECT a.Airline FROM airlines a WHERE EXISTS (SELECT 1 FROM flights f WHERE f.Airline = a.uid AND f.SourceAirport = 'AHD')",
        "SELECT DISTINCT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights WHERE SourceAirport = 'AHD')",
        "SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'AHD' ORDER BY a.Airline",
        "SELECT DISTINCT a.Airline FROM airlines a LEFT JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'AHD'"
      ]
    ]
  },
  {
    "id": 235,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.DestAirport = 'AHD'",
        "SELECT a.Airline FROM airlines a, flights f WHERE a.uid = f.Airline AND f.DestAirport = 'AHD' GROUP BY a.Airline",
        "SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights WHERE DestAirport = 'AHD')",
        "SELECT DISTINCT Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD'",
        "SELECT a.Airline FROM airlines a INNER JOIN flights f ON a.uid = f.Airline WHERE f.DestAirport = 'AHD' GROUP BY a.Airline",
        "SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD'",
        "SELECT DISTINCT a.Airline FROM airlines a, flights f WHERE a.uid = f.Airline AND f.DestAirport = 'AHD'",
        "SELECT DISTINCT a.Airline FROM airlines a LEFT JOIN flights f ON a.uid = f.Airline WHERE f.DestAirport = 'AHD'",
        "SELECT DISTINCT a.Airline FROM airlines a RIGHT JOIN flights f ON a.uid = f.Airline WHERE f.DestAirport = 'AHD'",
        "SELECT DISTINCT a.Airline FROM airlines a CROSS JOIN flights f WHERE a.uid = f.Airline AND f.DestAirport = 'AHD'"
      ]
    ]
  },
  {
    "id": 236,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.DestAirport = 'AHD'",
        "SELECT a.Airline FROM airlines a, flights f WHERE a.uid = f.Airline AND f.DestAirport = 'AHD'",
        "SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights WHERE DestAirport = 'AHD')",
        "SELECT DISTINCT Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD'",
        "SELECT a.Airline FROM airlines a INNER JOIN flights f ON a.uid = f.Airline AND f.DestAirport = 'AHD'",
        "SELECT DISTINCT a.Airline FROM airlines a, flights f WHERE a.uid = f.Airline AND f.DestAirport = 'AHD'",
        "SELECT a.Airline FROM airlines a WHERE EXISTS (SELECT 1 FROM flights f WHERE f.Airline = a.uid AND f.DestAirport = 'AHD')",
        "SELECT DISTINCT Airline FROM airlines JOIN flights USING (uid) WHERE DestAirport = 'AHD'",
        "SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights WHERE DestAirport = 'AHD' GROUP BY Airline)",
        "SELECT DISTINCT a.Airline FROM airlines a LEFT JOIN flights f ON a.uid = f.Airline WHERE f.DestAirport = 'AHD'"
      ]
    ]
  },
  {
    "id": 237,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights WHERE SourceAirport = 'APG') INTERSECT SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights WHERE SourceAirport = 'CVO')",
        "SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'APG' INTERSECT SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO'",
        "SELECT DISTINCT a.Airline FROM airlines a, flights f WHERE a.uid = f.Airline AND f.SourceAirport IN ('APG', 'CVO') GROUP BY a.Airline HAVING COUNT(DISTINCT f.SourceAirport) = 2",
        "SELECT a.Airline FROM airlines a WHERE EXISTS (SELECT 1 FROM flights f WHERE f.Airline = a.uid AND f.SourceAirport = 'APG') AND EXISTS (SELECT 1 FROM flights f WHERE f.Airline = a.uid AND f.SourceAirport = 'CVO')",
        "SELECT a.Airline FROM airlines a WHERE a.uid IN (SELECT f.Airline FROM flights f WHERE f.SourceAirport = 'APG' UNION ALL SELECT f.Airline FROM flights f WHERE f.SourceAirport = 'CVO') HAVING COUNT(*) > 1",
        "WITH APG_Airlines AS (SELECT Airline FROM flights WHERE SourceAirport = 'APG'), CVO_Airlines AS (SELECT Airline FROM flights WHERE SourceAirport = 'CVO') SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM APG_Airlines INTERSECT SELECT Airline FROM CVO_Airlines)",
        "SELECT a.Airline FROM airlines a WHERE a.uid IN (SELECT f.Airline FROM flights f WHERE f.SourceAirport = 'APG') AND a.uid IN (SELECT f.Airline FROM flights f WHERE f.SourceAirport = 'CVO')",
        "SELECT DISTINCT a.Airline FROM airlines a INNER JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'APG' AND a.uid IN (SELECT Airline FROM flights WHERE SourceAirport = 'CVO')",
        "SELECT a.Airline FROM airlines a WHERE EXISTS (SELECT 1 FROM flights f WHERE f.Airline = a.uid AND f.SourceAirport = 'APG') INTERSECT SELECT a.Airline FROM airlines a WHERE EXISTS (SELECT 1 FROM flights f WHERE f.Airline = a.uid AND f.SourceAirport = 'CVO')",
        "SELECT a.Airline FROM airlines a JOIN flights f1 ON a.uid = f1.Airline JOIN flights f2 ON a.uid = f2.Airline WHERE f1.SourceAirport = 'APG' AND f2.SourceAirport = 'CVO'"
      ]
    ]
  },
  {
    "id": 238,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights WHERE SourceAirport = 'APG' INTERSECT SELECT Airline FROM flights WHERE SourceAirport = 'CVO')",
        "SELECT a.Airline FROM airlines a JOIN flights f1 ON a.uid = f1.Airline JOIN flights f2 ON a.uid = f2.Airline WHERE f1.SourceAirport = 'APG' AND f2.SourceAirport = 'CVO'",
        "SELECT DISTINCT a.Airline FROM airlines a, flights f WHERE a.uid = f.Airline AND f.SourceAirport IN ('APG', 'CVO') GROUP BY a.Airline HAVING COUNT(DISTINCT f.SourceAirport) = 2",
        "SELECT a.Airline FROM airlines a WHERE EXISTS (SELECT 1 FROM flights f WHERE f.Airline = a.uid AND f.SourceAirport = 'APG') AND EXISTS (SELECT 1 FROM flights f WHERE f.Airline = a.uid AND f.SourceAirport = 'CVO')",
        "SELECT DISTINCT a.Airline FROM airlines a INNER JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'APG' INTERSECT SELECT DISTINCT a.Airline FROM airlines a INNER JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO'",
        "WITH APG_Airlines AS (SELECT Airline FROM flights WHERE SourceAirport = 'APG'), CVO_Airlines AS (SELECT Airline FROM flights WHERE SourceAirport = 'CVO') SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM APG_Airlines INTERSECT SELECT Airline FROM CVO_Airlines)",
        "SELECT a.Airline FROM airlines a WHERE a.uid IN (SELECT f.Airline FROM flights f WHERE f.SourceAirport = 'APG') AND a.uid IN (SELECT f.Airline FROM flights f WHERE f.SourceAirport = 'CVO')",
        "SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'APG' UNION SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO' HAVING COUNT(*) > 1",
        "SELECT a.Airline FROM airlines a JOIN flights f1 ON a.uid = f1.Airline WHERE f1.SourceAirport = 'APG' JOIN flights f2 ON a.uid = f2.Airline WHERE f2.SourceAirport = 'CVO'",
        "SELECT DISTINCT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights WHERE SourceAirport = 'APG') AND uid IN (SELECT Airline FROM flights WHERE SourceAirport = 'CVO')"
      ]
    ]
  },
  {
    "id": 239,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights WHERE SourceAirport = 'CVO') AND uid NOT IN (SELECT Airline FROM flights WHERE SourceAirport = 'APG')",
        "SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO' AND a.uid NOT IN (SELECT Airline FROM flights WHERE SourceAirport = 'APG')",
        "SELECT DISTINCT a.Airline FROM airlines a, flights f WHERE a.uid = f.Airline AND f.SourceAirport = 'CVO' AND NOT EXISTS (SELECT 1 FROM flights f2 WHERE f2.Airline = f.Airline AND f2.SourceAirport = 'APG')",
        "SELECT a.Airline FROM airlines a WHERE EXISTS (SELECT 1 FROM flights f WHERE f.Airline = a.uid AND f.SourceAirport = 'CVO') AND NOT EXISTS (SELECT 1 FROM flights f WHERE f.Airline = a.uid AND f.SourceAirport = 'APG')",
        "SELECT a.Airline FROM airlines a WHERE a.uid IN (SELECT f.Airline FROM flights f WHERE f.SourceAirport = 'CVO') EXCEPT SELECT a.Airline FROM airlines a WHERE a.uid IN (SELECT f.Airline FROM flights f WHERE f.SourceAirport = 'APG')",
        "WITH CVO_Airlines AS (SELECT Airline FROM flights WHERE SourceAirport = 'CVO'), APG_Airlines AS (SELECT Airline FROM flights WHERE SourceAirport = 'APG') SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM CVO_Airlines) AND uid NOT IN (SELECT Airline FROM APG_Airlines)",
        "SELECT a.Airline FROM airlines a WHERE a.uid IN (SELECT f.Airline FROM flights f WHERE f.SourceAirport = 'CVO') AND a.uid NOT IN (SELECT f.Airline FROM flights f WHERE f.SourceAirport = 'APG')",
        "SELECT DISTINCT a.Airline FROM airlines a INNER JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO' AND a.uid NOT IN (SELECT Airline FROM flights WHERE SourceAirport = 'APG')",
        "SELECT a.Airline FROM airlines a WHERE EXISTS (SELECT NULL FROM flights f WHERE f.Airline = a.uid AND f.SourceAirport = 'CVO') AND NOT EXISTS (SELECT NULL FROM flights f WHERE f.Airline = a.uid AND f.SourceAirport = 'APG')",
        "SELECT a.Airline FROM airlines a JOIN flights f1 ON a.uid = f1.Airline LEFT JOIN flights f2 ON a.uid = f2.Airline AND f2.SourceAirport = 'APG' WHERE f1.SourceAirport = 'CVO' AND f2.Airline IS NULL"
      ]
    ]
  },
  {
    "id": 240,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'CVO' EXCEPT SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'APG'",
        "SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO' AND a.uid NOT IN (SELECT uid FROM flights WHERE SourceAirport = 'APG')",
        "SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights WHERE SourceAirport = 'CVO') AND uid NOT IN (SELECT Airline FROM flights WHERE SourceAirport = 'APG')",
        "SELECT DISTINCT a.Airline FROM airlines a WHERE EXISTS (SELECT 1 FROM flights f WHERE f.Airline = a.uid AND f.SourceAirport = 'CVO') AND NOT EXISTS (SELECT 1 FROM flights f WHERE f.Airline = a.uid AND f.SourceAirport = 'APG')",
        "SELECT DISTINCT Airline FROM flights f1 WHERE f1.SourceAirport = 'CVO' AND NOT EXISTS (SELECT 1 FROM flights f2 WHERE f2.Airline = f1.Airline AND f2.SourceAirport = 'APG')",
        "WITH CVO_Airlines AS (SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'CVO'), APG_Airlines AS (SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'APG') SELECT Airline FROM CVO_Airlines WHERE Airline NOT IN (SELECT Airline FROM APG_Airlines)",
        "SELECT DISTINCT Airline FROM flights f WHERE f.SourceAirport = 'CVO' AND f.Airline NOT IN (SELECT Airline FROM flights WHERE SourceAirport = 'APG')",
        "SELECT DISTINCT a.Airline FROM airlines a INNER JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO' AND a.uid NOT IN (SELECT Airline FROM flights WHERE SourceAirport = 'APG')",
        "SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'CVO' AND Airline NOT IN (SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'APG')",
        "SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights WHERE SourceAirport = 'CVO' EXCEPT SELECT Airline FROM flights WHERE SourceAirport = 'APG')"
      ]
    ]
  },
  {
    "id": 241,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.uid HAVING COUNT(f.FlightNo) >= 10",
        "SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10)",
        "SELECT a.Airline FROM airlines a WHERE EXISTS (SELECT 1 FROM flights f WHERE f.Airline = a.uid GROUP BY f.Airline HAVING COUNT(f.FlightNo) >= 10)",
        "SELECT a.Airline FROM airlines a INNER JOIN flights f ON a.uid = f.Airline GROUP BY a.uid HAVING COUNT(*) >= 10",
        "SELECT DISTINCT a.Airline FROM airlines a, flights f WHERE a.uid = f.Airline GROUP BY a.uid, a.Airline HAVING COUNT(f.FlightNo) >= 10",
        "SELECT a.Airline FROM airlines a WHERE (SELECT COUNT(*) FROM flights f WHERE f.Airline = a.uid) >= 10",
        "SELECT a.Airline FROM airlines a JOIN (SELECT Airline, COUNT(*) as FlightCount FROM flights GROUP BY Airline HAVING COUNT(*) >= 10) f ON a.uid = f.Airline",
        "SELECT a.Airline FROM airlines a, flights f WHERE a.uid = f.Airline GROUP BY a.uid HAVING COUNT(f.FlightNo) >= 10",
        "SELECT a.Airline FROM airlines a WHERE a.uid IN (SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(FlightNo) >= 10)",
        "SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.uid, a.Airline HAVING COUNT(f.FlightNo) >= 10"
      ]
    ]
  },
  {
    "id": 242,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.Airline HAVING COUNT(f.FlightNo) >= 10",
        "SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10)",
        "SELECT a.Airline FROM airlines a WHERE EXISTS (SELECT 1 FROM flights f WHERE f.Airline = a.uid GROUP BY f.Airline HAVING COUNT(f.FlightNo) >= 10)",
        "SELECT a.Airline FROM airlines a INNER JOIN flights f ON a.uid = f.Airline GROUP BY a.Airline HAVING COUNT(*) >= 10",
        "SELECT DISTINCT a.Airline FROM airlines a, flights f WHERE a.uid = f.Airline GROUP BY a.Airline HAVING COUNT(f.FlightNo) >= 10",
        "SELECT a.Airline FROM airlines a WHERE (SELECT COUNT(*) FROM flights f WHERE f.Airline = a.uid) >= 10",
        "SELECT a.Airline FROM airlines a JOIN (SELECT Airline, COUNT(*) AS FlightCount FROM flights GROUP BY Airline) fc ON a.uid = fc.Airline WHERE fc.FlightCount >= 10",
        "SELECT a.Airline FROM airlines a, flights f WHERE a.uid = f.Airline GROUP BY a.Airline HAVING COUNT(f.FlightNo) >= 10",
        "SELECT a.Airline FROM airlines a WHERE a.uid IN (SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(FlightNo) >= 10)",
        "SELECT Airline FROM (SELECT a.Airline, COUNT(f.FlightNo) AS num_flights FROM airlines a LEFT JOIN flights f ON a.uid = f.Airline GROUP BY a.Airline) sub WHERE sub.num_flights >= 10"
      ]
    ]
  },
  {
    "id": 243,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT A.Airline FROM airlines A JOIN flights F ON A.uid = F.Airline GROUP BY A.uid HAVING COUNT(F.FlightNo) < 200",
        "SELECT airlines.Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.uid HAVING COUNT(flights.FlightNo) < 200",
        "SELECT A.Airline FROM airlines A, flights F WHERE A.uid = F.Airline GROUP BY A.uid HAVING COUNT(*) < 200",
        "SELECT A.Airline FROM airlines A LEFT JOIN flights F ON A.uid = F.Airline GROUP BY A.uid HAVING COUNT(F.FlightNo) < 200",
        "SELECT DISTINCT A.Airline FROM airlines A JOIN flights F ON A.uid = F.Airline GROUP BY A.uid HAVING COUNT(F.FlightNo) < 200",
        "SELECT A.Airline FROM airlines A WHERE A.uid IN (SELECT F.Airline FROM flights F GROUP BY F.Airline HAVING COUNT(F.FlightNo) < 200)",
        "SELECT A.Airline FROM airlines A WHERE (SELECT COUNT(*) FROM flights F WHERE F.Airline = A.uid) < 200",
        "SELECT A.Airline FROM airlines A JOIN flights F ON A.uid = F.Airline GROUP BY A.uid HAVING COUNT(F.FlightNo) < 200 ORDER BY A.Airline",
        "SELECT A.Airline FROM airlines A WHERE EXISTS (SELECT 1 FROM flights F WHERE A.uid = F.Airline GROUP BY F.Airline HAVING COUNT(F.FlightNo) < 200)",
        "SELECT A.Airline FROM airlines A JOIN flights F ON A.uid = F.Airline GROUP BY A.uid HAVING COUNT(DISTINCT F.FlightNo) < 200"
      ]
    ]
  },
  {
    "id": 244,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT A.Airline FROM airlines A JOIN flights F ON A.uid = F.Airline GROUP BY A.Airline HAVING COUNT(F.FlightNo) < 200",
        "SELECT airlines.Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING COUNT(flights.FlightNo) < 200",
        "SELECT A.Airline FROM airlines A, flights F WHERE A.uid = F.Airline GROUP BY A.Airline HAVING COUNT(F.FlightNo) < 200",
        "SELECT A.Airline FROM airlines A LEFT JOIN flights F ON A.uid = F.Airline GROUP BY A.Airline HAVING COUNT(F.FlightNo) < 200",
        "SELECT A.Airline FROM airlines A WHERE A.uid IN (SELECT F.Airline FROM flights F GROUP BY F.Airline HAVING COUNT(F.FlightNo) < 200)",
        "SELECT DISTINCT A.Airline FROM airlines A JOIN flights F ON A.uid = F.Airline GROUP BY A.Airline HAVING COUNT(*) < 200",
        "SELECT A.Airline FROM airlines A WHERE (SELECT COUNT(*) FROM flights F WHERE F.Airline = A.uid) < 200",
        "SELECT A.Airline FROM airlines A JOIN flights F ON A.uid = F.Airline GROUP BY A.uid HAVING COUNT(F.FlightNo) < 200",
        "SELECT A.Airline FROM airlines A LEFT OUTER JOIN flights F ON A.uid = F.Airline GROUP BY A.uid HAVING COUNT(F.FlightNo) < 200",
        "SELECT A.Airline FROM airlines A WHERE EXISTS (SELECT 1 FROM flights F WHERE A.uid = F.Airline GROUP BY F.Airline HAVING COUNT(F.FlightNo) < 200)"
      ]
    ]
  },
  {
    "id": 245,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT DISTINCT FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines'",
        "SELECT DISTINCT f.FlightNo FROM flights f INNER JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines'",
        "SELECT FlightNo FROM flights WHERE Airline IN (SELECT uid FROM airlines WHERE Airline = 'United Airlines') GROUP BY FlightNo",
        "SELECT DISTINCT flights.FlightNo FROM flights, airlines WHERE flights.Airline = airlines.uid AND airlines.Airline = 'United Airlines'",
        "SELECT DISTINCT FlightNo FROM flights f JOIN airlines a ON f.Airline = a.uid AND a.Airline = 'United Airlines'",
        "SELECT DISTINCT f.FlightNo FROM flights f, airlines a WHERE f.Airline = a.uid AND a.Airline = 'United Airlines'",
        "SELECT DISTINCT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines')",
        "SELECT DISTINCT FlightNo FROM flights INNER JOIN airlines ON flights.Airline = airlines.uid AND airlines.Airline = 'United Airlines'",
        "SELECT DISTINCT f.FlightNo FROM flights f LEFT JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines'",
        "SELECT DISTINCT FlightNo FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' ORDER BY FlightNo"
      ]
    ]
  },
  {
    "id": 246,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines'",
        "SELECT f.FlightNo FROM flights f INNER JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines'",
        "SELECT flights.FlightNo FROM flights, airlines WHERE flights.Airline = airlines.uid AND airlines.Airline = 'United Airlines'",
        "SELECT FlightNo FROM flights f, airlines a WHERE f.Airline = a.uid AND a.Airline = 'United Airlines'",
        "SELECT FlightNo FROM flights INNER JOIN airlines ON flights.Airline = airlines.uid AND airlines.Airline = 'United Airlines'",
        "SELECT DISTINCT FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines'",
        "SELECT f.FlightNo FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines'",
        "SELECT FlightNo FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines'",
        "SELECT FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.uid AND airlines.Airline = 'United Airlines'",
        "SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines'"
      ]
    ]
  },
  {
    "id": 247,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'",
        "SELECT f.FlightNo FROM flights f WHERE f.SourceAirport = 'APG'",
        "SELECT FlightNo FROM flights WHERE SourceAirport LIKE 'APG'",
        "SELECT DISTINCT FlightNo FROM flights WHERE SourceAirport = 'APG'",
        "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG'",
        "SELECT FlightNo FROM flights AS f WHERE f.SourceAirport = 'APG'",
        "SELECT FlightNo FROM flights WHERE SourceAirport IN ('APG')",
        "SELECT FlightNo FROM flights WHERE SourceAirport = 'APG' ORDER BY FlightNo",
        "SELECT FlightNo FROM flights WHERE SourceAirport = 'APG' AND FlightNo IS NOT NULL",
        "SELECT FlightNo FROM flights WHERE SourceAirport = 'APG' GROUP BY FlightNo"
      ]
    ]
  },
  {
    "id": 248,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'",
        "SELECT f.FlightNo FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.AirportCode = 'APG'",
        "SELECT FlightNo FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.AirportCode = 'APG'",
        "SELECT flights.FlightNo FROM flights INNER JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'APG'",
        "SELECT FlightNo FROM flights f WHERE f.SourceAirport IN (SELECT AirportCode FROM airports WHERE AirportCode = 'APG')",
        "SELECT FlightNo FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE AirportCode = 'APG')",
        "SELECT DISTINCT FlightNo FROM flights WHERE SourceAirport = 'APG'",
        "SELECT f.FlightNo FROM flights f WHERE EXISTS (SELECT 1 FROM airports a WHERE a.AirportCode = 'APG' AND f.SourceAirport = a.AirportCode)",
        "SELECT FlightNo FROM flights f WHERE f.SourceAirport = 'APG'",
        "SELECT f.FlightNo FROM flights AS f JOIN airports AS a ON f.SourceAirport = a.AirportCode WHERE a.AirportCode = 'APG'"
      ]
    ]
  },
  {
    "id": 249,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT FlightNo FROM flights WHERE DestAirport = 'APG'",
        "SELECT f.FlightNo FROM flights f WHERE f.DestAirport = 'APG'",
        "SELECT FlightNo FROM flights WHERE DestAirport IN ('APG')",
        "SELECT flights.FlightNo FROM flights WHERE flights.DestAirport = 'APG'",
        "SELECT FlightNo FROM flights WHERE DestAirport LIKE 'APG'",
        "SELECT DISTINCT FlightNo FROM flights WHERE DestAirport = 'APG'",
        "SELECT f.FlightNo FROM flights AS f WHERE f.DestAirport = 'APG'",
        "SELECT FlightNo FROM flights WHERE DestAirport = 'APG' AND FlightNo IS NOT NULL",
        "SELECT FlightNo FROM flights WHERE DestAirport = 'APG' ORDER BY FlightNo",
        "SELECT FlightNo FROM flights WHERE DestAirport = 'APG' GROUP BY FlightNo"
      ]
    ]
  },
  {
    "id": 250,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT FlightNo FROM flights WHERE DestAirport = 'APG'",
        "SELECT f.FlightNo FROM flights f WHERE f.DestAirport = 'APG'",
        "SELECT FlightNo FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE AirportCode = 'APG')",
        "SELECT FlightNo FROM flights AS f JOIN airports AS a ON f.DestAirport = a.AirportCode WHERE a.AirportCode = 'APG'",
        "SELECT f.FlightNo FROM flights f INNER JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.AirportCode = 'APG'",
        "SELECT FlightNo FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE AirportCode = 'APG')",
        "SELECT DISTINCT FlightNo FROM flights WHERE DestAirport = 'APG'",
        "SELECT f.FlightNo FROM flights f WHERE EXISTS (SELECT 1 FROM airports a WHERE a.AirportCode = 'APG' AND f.DestAirport = a.AirportCode)",
        "SELECT FlightNo FROM flights WHERE DestAirport = 'APG' ORDER BY FlightNo",
        "SELECT FlightNo FROM flights f WHERE f.DestAirport = 'APG' GROUP BY f.FlightNo"
      ]
    ]
  },
  {
    "id": 251,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT DISTINCT f.FlightNo FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen'",
        "SELECT DISTINCT FlightNo FROM flights INNER JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'",
        "SELECT DISTINCT flights.FlightNo FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.City = 'Aberdeen'",
        "SELECT DISTINCT FlightNo FROM flights f, airports a WHERE f.SourceAirport = a.AirportCode AND a.City = 'Aberdeen'",
        "SELECT DISTINCT f.FlightNo FROM flights AS f INNER JOIN airports AS a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen'",
        "SELECT DISTINCT FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode AND airports.City = 'Aberdeen'",
        "SELECT DISTINCT f.FlightNo FROM flights f LEFT JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen'",
        "SELECT DISTINCT FlightNo FROM flights INNER JOIN airports ON flights.SourceAirport = airports.AirportCode AND airports.City = 'Aberdeen' ORDER BY FlightNo",
        "SELECT DISTINCT f.FlightNo FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen' GROUP BY f.FlightNo",
        "SELECT DISTINCT FlightNo FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.City = 'Aberdeen' ORDER BY FlightNo ASC"
      ]
    ]
  },
  {
    "id": 252,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'",
        "SELECT f.FlightNo FROM flights f INNER JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen'",
        "SELECT FlightNo FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.City = 'Aberdeen'",
        "SELECT flights.FlightNo FROM flights LEFT JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'",
        "SELECT FlightNo FROM flights f, airports a WHERE f.SourceAirport = a.AirportCode AND a.City = 'Aberdeen'",
        "SELECT DISTINCT FlightNo FROM flights INNER JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'",
        "SELECT flights.FlightNo FROM flights INNER JOIN airports ON flights.SourceAirport = airports.AirportCode AND airports.City = 'Aberdeen'",
        "SELECT FlightNo FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')",
        "SELECT f.FlightNo FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode AND a.City = 'Aberdeen'",
        "SELECT FlightNo FROM flights AS f JOIN airports AS a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen'"
      ]
    ]
  },
  {
    "id": 253,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT f.FlightNo FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen'",
        "SELECT FlightNo FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'",
        "SELECT flights.FlightNo FROM flights, airports WHERE flights.DestAirport = airports.AirportCode AND airports.City = 'Aberdeen'",
        "SELECT FlightNo FROM flights f, airports a WHERE f.DestAirport = a.AirportCode AND a.City = 'Aberdeen'",
        "SELECT DISTINCT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'",
        "SELECT f.FlightNo FROM flights AS f INNER JOIN airports AS a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen'",
        "SELECT FlightNo FROM flights f INNER JOIN airports a ON f.DestAirport = a.AirportCode AND a.City = 'Aberdeen'",
        "SELECT f.FlightNo FROM flights f LEFT JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen'",
        "SELECT FlightNo FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')",
        "SELECT f.FlightNo FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City LIKE 'Aberdeen'"
      ]
    ]
  },
  {
    "id": 254,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'",
        "SELECT f.FlightNo FROM flights f INNER JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen'",
        "SELECT flights.FlightNo FROM flights, airports WHERE flights.DestAirport = airports.AirportCode AND airports.City = 'Aberdeen'",
        "SELECT FlightNo FROM flights f, airports a WHERE f.DestAirport = a.AirportCode AND a.City = 'Aberdeen'",
        "SELECT DISTINCT FlightNo FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'",
        "SELECT f.FlightNo FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode AND a.City = 'Aberdeen'",
        "SELECT FlightNo FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')",
        "SELECT f.FlightNo FROM flights f LEFT JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen'",
        "SELECT FlightNo FROM flights AS f JOIN airports AS a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen' ORDER BY FlightNo",
        "SELECT f.FlightNo FROM flights f, airports a WHERE f.DestAirport = a.AirportCode AND a.City LIKE 'Aberdeen'"
      ]
    ]
  },
  {
    "id": 255,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City IN ('Aberdeen', 'Abilene')",
        "SELECT COUNT(flights.FlightNo) AS NumberOfFlights FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen' OR airports.City = 'Abilene'",
        "SELECT COUNT(1) FROM flights, airports WHERE flights.DestAirport = airports.AirportCode AND (airports.City = 'Aberdeen' OR airports.City = 'Abilene')",
        "SELECT COUNT(DISTINCT flights.FlightNo) FROM flights, airports WHERE flights.DestAirport = airports.AirportCode AND airports.City IN ('Aberdeen', 'Abilene')",
        "SELECT COUNT(*) FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen' OR a.City = 'Abilene'",
        "SELECT COUNT(flights.FlightNo) FROM flights LEFT JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City IN ('Aberdeen', 'Abilene')",
        "SELECT COUNT(*) FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode AND (airports.City = 'Aberdeen' OR airports.City = 'Abilene')",
        "SELECT COUNT(*) AS FlightCount FROM flights f INNER JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City IN ('Aberdeen', 'Abilene')",
        "SELECT COUNT(flights.FlightNo) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City IN ('Aberdeen', 'Abilene') GROUP BY airports.City",
        "SELECT COUNT(*) FROM flights f, airports a WHERE f.DestAirport = a.AirportCode AND (a.City = 'Aberdeen' OR a.City = 'Abilene')"
      ]
    ]
  },
  {
    "id": 256,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName IN ('Aberdeen', 'Abilene')",
        "SELECT COUNT(flights.FlightNo) AS TotalFlights FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName = 'Aberdeen' OR airports.AirportName = 'Abilene'",
        "SELECT COUNT(*) FROM flights, airports WHERE flights.DestAirport = airports.AirportCode AND (airports.AirportName = 'Aberdeen' OR airports.AirportName = 'Abilene')",
        "SELECT COUNT(DISTINCT flights.FlightNo) FROM flights LEFT JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName IN ('Aberdeen', 'Abilene')",
        "SELECT COUNT(*) FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.AirportName IN ('Aberdeen', 'Abilene')",
        "SELECT COUNT(flights.FlightNo) FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode AND airports.AirportName IN ('Aberdeen', 'Abilene')",
        "SELECT COUNT(*) FROM flights f, airports a WHERE f.DestAirport = a.AirportCode AND (a.AirportName = 'Aberdeen' OR a.AirportName = 'Abilene')",
        "SELECT COUNT(*) FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName = 'Aberdeen' OR airports.AirportName = 'Abilene'",
        "SELECT COUNT(*) FROM flights f INNER JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.AirportName = 'Aberdeen' OR a.AirportName = 'Abilene'",
        "SELECT COUNT(flights.FlightNo) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName IN ('Aberdeen', 'Abilene')"
      ]
    ]
  },
  {
    "id": 257,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights)",
        "SELECT a.AirportName FROM airports a LEFT JOIN flights f ON a.AirportCode = f.SourceAirport OR a.AirportCode = f.DestAirport WHERE f.SourceAirport IS NULL AND f.DestAirport IS NULL",
        "SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights)",
        "SELECT a.AirportName FROM airports a WHERE NOT EXISTS (SELECT 1 FROM flights f WHERE f.SourceAirport = a.AirportCode OR f.DestAirport = a.AirportCode)",
        "SELECT AirportName FROM airports EXCEPT SELECT AirportName FROM airports JOIN flights ON AirportCode = SourceAirport OR AirportCode = DestAirport",
        "SELECT AirportName FROM airports a WHERE a.AirportCode NOT IN (SELECT DISTINCT SourceAirport FROM flights UNION ALL SELECT DISTINCT DestAirport FROM flights)",
        "SELECT a.AirportName FROM airports a WHERE NOT EXISTS (SELECT NULL FROM flights f WHERE f.SourceAirport = a.AirportCode UNION ALL SELECT NULL FROM flights f WHERE f.DestAirport = a.AirportCode)",
        "SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT DISTINCT SourceAirport FROM flights UNION SELECT DISTINCT DestAirport FROM flights)",
        "SELECT a.AirportName FROM airports a WHERE a.AirportCode NOT IN (SELECT f.SourceAirport FROM flights f UNION SELECT f.DestAirport FROM flights f)",
        "SELECT AirportName FROM airports a WHERE NOT EXISTS (SELECT * FROM flights f WHERE f.SourceAirport = a.AirportCode OR f.DestAirport = a.AirportCode)"
      ]
    ]
  },
  {
    "id": 258,
    "db_id": "flight_2",
    "infer_predictions": [
      [
        "SELECT AirportCode FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights)",
        "SELECT a.AirportCode FROM airports a LEFT JOIN flights f ON a.AirportCode = f.SourceAirport OR a.AirportCode = f.DestAirport WHERE f.SourceAirport IS NULL AND f.DestAirport IS NULL",
        "SELECT AirportCode FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights)",
        "SELECT a.AirportCode FROM airports a WHERE NOT EXISTS (SELECT 1 FROM flights f WHERE f.SourceAirport = a.AirportCode OR f.DestAirport = a.AirportCode)",
        "SELECT AirportCode FROM airports EXCEPT (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights)",
        "SELECT a.AirportCode FROM airports a WHERE a.AirportCode NOT IN (SELECT f.SourceAirport FROM flights f UNION SELECT f.DestAirport FROM flights f)",
        "SELECT AirportCode FROM airports a WHERE NOT EXISTS (SELECT NULL FROM flights f WHERE f.SourceAirport = a.AirportCode UNION SELECT NULL FROM flights f WHERE f.DestAirport = a.AirportCode)",
        "SELECT DISTINCT a.AirportCode FROM airports a WHERE a.AirportCode NOT IN (SELECT DISTINCT f.SourceAirport FROM flights f UNION SELECT DISTINCT f.DestAirport FROM flights f)",
        "SELECT a.AirportCode FROM airports a WHERE a.AirportCode NOT IN (SELECT f.SourceAirport FROM flights f) AND a.AirportCode NOT IN (SELECT f.DestAirport FROM flights f)",
        "SELECT AirportCode FROM airports WHERE AirportCode NOT IN (SELECT DISTINCT SourceAirport FROM flights UNION ALL SELECT DISTINCT DestAirport FROM flights)"
      ]
    ]
  },
  {
    "id": 259,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM employee",
        "SELECT COUNT(Employee_ID) FROM employee",
        "SELECT COUNT(1) FROM employee",
        "SELECT COUNT(DISTINCT Employee_ID) FROM employee",
        "SELECT COUNT(Employee_ID) AS TotalEmployees FROM employee",
        "SELECT COUNT(*) AS EmployeeCount FROM employee",
        "SELECT COUNT(*) FROM employee WHERE Employee_ID IS NOT NULL",
        "SELECT COUNT(DISTINCT Employee_ID) AS NumberOfEmployees FROM employee",
        "SELECT COUNT(*) FROM (SELECT Employee_ID FROM employee) AS EmployeeTable",
        "SELECT COUNT(Employee_ID) FROM employee WHERE Employee_ID > 0"
      ]
    ]
  },
  {
    "id": 260,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM employee",
        "SELECT COUNT(Employee_ID) FROM employee",
        "SELECT COUNT(1) FROM employee",
        "SELECT COUNT(Employee_ID) AS NumberOfEmployees FROM employee",
        "SELECT COUNT(*) AS TotalEmployees FROM employee",
        "SELECT COUNT(DISTINCT Employee_ID) FROM employee",
        "SELECT COUNT(DISTINCT Employee_ID) AS UniqueEmployeeCount FROM employee",
        "SELECT COUNT(*) FROM employee WHERE Employee_ID IS NOT NULL",
        "SELECT COUNT(*) AS EmployeeCount FROM employee WHERE Employee_ID > 0",
        "SELECT COUNT(*) FROM employee WHERE Employee_ID IS NOT NULL AND Employee_ID <> ''"
      ]
    ]
  },
  {
    "id": 261,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT Name FROM employee ORDER BY Age ASC, Employee_ID ASC",
        "SELECT Name FROM employee ORDER BY Age, Employee_ID",
        "SELECT Name FROM employee ORDER BY Age ASC, Employee_ID",
        "SELECT Name FROM employee ORDER BY Age, Employee_ID ASC",
        "SELECT Name FROM employee ORDER BY Age ASC, Employee_ID ASCENDING",
        "SELECT employee.Name FROM employee ORDER BY employee.Age ASC, employee.Employee_ID ASC",
        "SELECT Name FROM employee ORDER BY Age ASCENDING, Employee_ID ASCENDING",
        "SELECT Name FROM employee ORDER BY Age ASCENDING, Employee_ID",
        "SELECT Name FROM employee ORDER BY Age, Employee_ID ASCENDING",
        "SELECT Name FROM employee ORDER BY employee.Age, employee.Employee_ID ASC"
      ]
    ]
  },
  {
    "id": 262,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT Name FROM employee ORDER BY Age ASC, Name ASC",
        "SELECT Name FROM employee ORDER BY Age, Name",
        "SELECT e.Name FROM employee e ORDER BY e.Age ASC, e.Name ASC",
        "SELECT Name FROM employee ORDER BY Age ASC, Name",
        "SELECT Name FROM employee ORDER BY Age, Name ASC",
        "SELECT employee.Name FROM employee ORDER BY employee.Age ASC, employee.Name ASC",
        "SELECT Name FROM employee ORDER BY Age ASC, Name COLLATE NOCASE ASC",
        "SELECT Name FROM employee ORDER BY Age ASC, UPPER(Name) ASC",
        "SELECT Name FROM employee ORDER BY Age ASC, LOWER(Name) ASC",
        "SELECT Name FROM employee ORDER BY Age, Name COLLATE NOCASE ASC"
      ]
    ]
  },
  {
    "id": 263,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT City, COUNT(Employee_ID) AS NumberOfEmployees FROM employee GROUP BY City",
        "SELECT City, COUNT(*) AS EmployeeCount FROM employee GROUP BY City",
        "SELECT City, COUNT(Employee_ID) FROM employee GROUP BY City",
        "SELECT employee.City, COUNT(employee.Employee_ID) AS TotalEmployees FROM employee GROUP BY employee.City",
        "SELECT e.City, COUNT(e.Employee_ID) FROM employee e GROUP BY e.City",
        "SELECT City, COUNT(DISTINCT Employee_ID) FROM employee GROUP BY City",
        "SELECT COUNT(Employee_ID), City FROM employee GROUP BY City",
        "SELECT City, COUNT(Employee_ID) AS CountOfEmployees FROM employee GROUP BY City ORDER BY City",
        "SELECT City, COUNT(Employee_ID) AS EmployeeNumber FROM employee GROUP BY City ORDER BY COUNT(Employee_ID) DESC",
        "SELECT employee.City, COUNT(*) FROM employee GROUP BY employee.City"
      ]
    ]
  },
  {
    "id": 264,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT City, COUNT(Employee_ID) AS Employee_Count FROM employee GROUP BY City",
        "SELECT City, COUNT(*) AS Num_Employees FROM employee GROUP BY City",
        "SELECT employee.City, COUNT(employee.Employee_ID) AS Total_Employees FROM employee GROUP BY employee.City",
        "SELECT e.City, COUNT(e.Employee_ID) FROM employee e GROUP BY e.City",
        "SELECT COUNT(Employee_ID), City FROM employee GROUP BY City",
        "SELECT City, COUNT(Employee_ID) FROM employee GROUP BY City ORDER BY City",
        "SELECT City, COUNT(Employee_ID) FROM employee GROUP BY City ORDER BY COUNT(Employee_ID) DESC",
        "SELECT City, COUNT(*) FROM employee GROUP BY City",
        "SELECT employee.City, COUNT(*) FROM employee GROUP BY employee.City",
        "SELECT City, COUNT(Employee_ID) AS EmployeeCount FROM employee GROUP BY City ORDER BY EmployeeCount DESC"
      ]
    ]
  },
  {
    "id": 265,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1",
        "SELECT e.City FROM employee e WHERE e.Age < 30 GROUP BY e.City HAVING COUNT(e.City) > 1",
        "SELECT DISTINCT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(City) > 1",
        "SELECT City, COUNT(*) AS Num FROM employee WHERE Age < 30 GROUP BY City HAVING Num > 1",
        "WITH YoungEmployees AS (SELECT City FROM employee WHERE Age < 30) SELECT City FROM YoungEmployees GROUP BY City HAVING COUNT(*) > 1",
        "SELECT City FROM (SELECT City, COUNT(*) as Count FROM employee WHERE Age < 30 GROUP BY City) AS SubQuery WHERE Count > 1",
        "SELECT City FROM employee GROUP BY City HAVING COUNT(CASE WHEN Age < 30 THEN 1 ELSE NULL END) > 1",
        "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(ID) > 1",
        "SELECT City, COUNT(ID) as EmployeeCount FROM employee WHERE Age < 30 GROUP BY City HAVING EmployeeCount > 1",
        "SELECT DISTINCT City FROM employee WHERE Age < 30 AND City IN (SELECT City FROM employee GROUP BY City HAVING COUNT(*) > 1)"
      ]
    ]
  },
  {
    "id": 266,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1",
        "SELECT e.City FROM employee e WHERE e.Age < 30 GROUP BY e.City HAVING COUNT(e.Employee_ID) > 1",
        "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1",
        "SELECT City, COUNT(*) AS num_employees FROM employee WHERE Age < 30 GROUP BY City HAVING num_employees > 1",
        "SELECT City FROM (SELECT City, COUNT(*) as Count FROM employee WHERE Age < 30 GROUP BY City) AS subquery WHERE Count > 1",
        "SELECT employee.City FROM employee WHERE employee.Age < 30 GROUP BY employee.City HAVING COUNT(employee.City) > 1",
        "SELECT City FROM employee GROUP BY City HAVING SUM(CASE WHEN Age < 30 THEN 1 ELSE 0 END) > 1",
        "SELECT DISTINCT City FROM employee WHERE Age < 30 AND City IN (SELECT City FROM employee GROUP BY City HAVING COUNT(*) > 1)",
        "SELECT City, COUNT(Employee_ID) as YoungEmployees FROM employee WHERE Age < 30 GROUP BY City HAVING YoungEmployees > 1",
        "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(DISTINCT Employee_ID) > 1"
      ]
    ]
  },
  {
    "id": 267,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT Location, COUNT(Shop_ID) AS NumberOfShops FROM shop GROUP BY Location",
        "SELECT Location, COUNT(*) AS ShopCount FROM shop GROUP BY Location",
        "SELECT COUNT(Shop_ID) AS TotalShops, Location FROM shop GROUP BY Location",
        "SELECT Location, COUNT(Shop_ID) FROM shop GROUP BY Location",
        "SELECT Location, COUNT(Shop_ID) AS ShopTotal FROM shop GROUP BY Location ORDER BY Location",
        "SELECT Location, COUNT(*) FROM shop GROUP BY Location ORDER BY COUNT(*) DESC",
        "SELECT Location, COUNT(Shop_ID) AS NumberOfShops FROM shop GROUP BY Location ORDER BY NumberOfShops",
        "SELECT COUNT(Shop_ID), Location FROM shop GROUP BY Location",
        "SELECT Location, COUNT(Shop_ID) AS ShopCount FROM shop GROUP BY Location ORDER BY ShopCount DESC",
        "SELECT Location, COUNT(*) AS TotalShops FROM shop GROUP BY Location ORDER BY TotalShops DESC"
      ]
    ]
  },
  {
    "id": 268,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT Location, COUNT(*) AS NumberOfShops FROM shop GROUP BY Location",
        "SELECT Location, COUNT(Shop_ID) AS ShopCount FROM shop GROUP BY Location",
        "SELECT COUNT(Shop_ID), Location FROM shop GROUP BY Location",
        "SELECT Location, COUNT(*) FROM shop GROUP BY Location",
        "SELECT Location, COUNT(Shop_ID) FROM shop GROUP BY Location",
        "SELECT COUNT(*), Location FROM shop GROUP BY Location",
        "SELECT Location, COUNT(Shop_ID) AS TotalShops FROM shop GROUP BY Location",
        "SELECT COUNT(Shop_ID) AS NumberOfShops, Location FROM shop GROUP BY Location",
        "SELECT Location, COUNT(*) AS TotalNumberOfShops FROM shop GROUP BY Location",
        "SELECT COUNT(*) AS ShopCount, Location FROM shop GROUP BY Location"
      ]
    ]
  },
  {
    "id": 269,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop)",
        "SELECT s.Manager_name, s.District FROM shop s WHERE s.Number_products = (SELECT MAX(Number_products) FROM shop)",
        "SELECT Manager_name, District FROM shop WHERE Number_products IN (SELECT MAX(Number_products) FROM shop)",
        "SELECT Manager_name, District FROM shop ORDER BY Number_products DESC LIMIT 1",
        "SELECT TOP 1 Manager_name, District FROM shop ORDER BY Number_products DESC",
        "SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop s)",
        "SELECT s.Manager_name, s.District FROM shop s JOIN (SELECT MAX(Number_products) AS MaxProducts FROM shop) t ON s.Number_products = t.MaxProducts",
        "SELECT Manager_name, District FROM shop WHERE Number_products >= ALL (SELECT Number_products FROM shop)",
        "SELECT Manager_name, District FROM shop AS s WHERE s.Number_products = (SELECT MAX(Number_products) FROM shop AS s2)",
        "SELECT Manager_name, District FROM (SELECT Manager_name, District, RANK() OVER (ORDER BY Number_products DESC) AS rank FROM shop) AS ranked WHERE rank = 1"
      ]
    ]
  },
  {
    "id": 270,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop)",
        "SELECT s.Manager_name, s.District FROM shop s WHERE s.Number_products = (SELECT MAX(Number_products) FROM shop)",
        "SELECT Manager_name, District FROM shop ORDER BY Number_products DESC LIMIT 1",
        "SELECT s.Manager_name, s.District FROM shop s ORDER BY s.Number_products DESC FETCH FIRST 1 ROW ONLY",
        "SELECT TOP 1 Manager_name, District FROM shop ORDER BY Number_products DESC",
        "SELECT Manager_name, District FROM shop WHERE Number_products IN (SELECT MAX(Number_products) FROM shop)",
        "SELECT s.Manager_name, s.District FROM shop s WHERE s.Number_products >= ALL (SELECT Number_products FROM shop)",
        "SELECT Manager_name, District FROM shop AS s WHERE s.Number_products = (SELECT MAX(Number_products) FROM shop AS s2)",
        "SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop GROUP BY Number_products)",
        "SELECT Manager_name, District FROM (SELECT Manager_name, District, RANK() OVER (ORDER BY Number_products DESC) AS rank FROM shop) WHERE rank = 1"
      ]
    ]
  },
  {
    "id": 271,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT MIN(Number_products), MAX(Number_products) FROM shop",
        "SELECT MIN(Number_products) AS MinProducts, MAX(Number_products) AS MaxProducts FROM shop",
        "SELECT MIN(shop.Number_products), MAX(shop.Number_products) FROM shop",
        "SELECT MINIMUM(Number_products), MAXIMUM(Number_products) FROM shop",
        "SELECT shop.MIN(Number_products), shop.MAX(Number_products) FROM shop",
        "SELECT MINIMUM(shop.Number_products), MAXIMUM(shop.Number_products) FROM shop",
        "SELECT MIN(shop.Number_products) AS MinimumProducts, MAX(shop.Number_products) AS MaximumProducts FROM shop",
        "SELECT MIN(Number_products) AS MinNumProducts, MAX(Number_products) AS MaxNumProducts FROM shop",
        "SELECT MIN(Number_products) MIN_PRODUCTS, MAX(Number_products) MAX_PRODUCTS FROM shop",
        "SELECT MIN(shop.Number_products) MIN_PRODUCTS, MAX(shop.Number_products) MAX_PRODUCTS FROM shop"
      ]
    ]
  },
  {
    "id": 272,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT MIN(Number_products), MAX(Number_products) FROM shop",
        "SELECT MIN(Number_products) AS MinProducts, MAX(Number_products) AS MaxProducts FROM shop",
        "SELECT MIN(shop.Number_products), MAX(shop.Number_products) FROM shop",
        "SELECT MINIMUM(Number_products), MAXIMUM(Number_products) FROM shop",
        "SELECT MIN(Number_products) MINIMUM, MAX(Number_products) MAXIMUM FROM shop",
        "SELECT MIN(Number_products) as MinimumProducts, MAX(Number_products) as MaximumProducts FROM shop",
        "SELECT MIN(shop.Number_products) AS MinProd, MAX(shop.Number_products) AS MaxProd FROM shop",
        "SELECT MIN(Number_products) Min_Products, MAX(Number_products) Max_Products FROM shop",
        "SELECT MIN(Number_products) Minimum, MAX(Number_products) Maximum FROM shop GROUP BY Number_products",
        "SELECT MIN(Number_products) MinValue, MAX(Number_products) MaxValue FROM shop"
      ]
    ]
  },
  {
    "id": 273,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC, Shop_ID ASC",
        "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC, Shop_ID",
        "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC, Shop_ID ASCENDING",
        "SELECT shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products DESC, shop.Shop_ID ASC",
        "SELECT s.Name, s.Location, s.District FROM shop s ORDER BY s.Number_products DESC, s.Shop_ID ASC",
        "SELECT Name, Location, District FROM shop SORT BY Number_products DESCENDING, Shop_ID ASCENDING",
        "SELECT Name, Location, District FROM shop ORDER BY DESC Number_products, ASC Shop_ID",
        "SELECT Name, Location, District FROM shop ORDER BY Number_products DESCENDING, Shop_ID ASCENDING",
        "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC, Shop_ID ASCENDING",
        "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC, Shop_ID ASC"
      ]
    ]
  },
  {
    "id": 274,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC, Shop_ID ASC",
        "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC, Shop_ID",
        "SELECT shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products DESC, shop.Shop_ID ASC",
        "SELECT s.Name, s.Location, s.District FROM shop s ORDER BY s.Number_products DESC, s.Shop_ID ASC",
        "SELECT Name, Location, District FROM shop SORT BY Number_products DESCENDING, Shop_ID ASCENDING",
        "SELECT Name, Location, District FROM shop ORDER BY Number_products DESCENDING, Shop_ID ASCENDING",
        "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC, Shop_ID",
        "SELECT Name, Location, District FROM shop ORDER BY DESC Number_products, ASC Shop_ID",
        "SELECT Name, Location, District FROM shop ORDER BY Number_products DESCENDING, Shop_ID ASCENDING",
        "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC, Shop_ID ASCENDING"
      ]
    ]
  },
  {
    "id": 275,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)",
        "SELECT s.Name FROM shop s WHERE s.Number_products > (SELECT AVG(Number_products) FROM shop)",
        "SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT AVG(Number_products) FROM shop)",
        "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop AS s)",
        "SELECT Name FROM shop s WHERE s.Number_products > (SELECT AVG(s2.Number_products) FROM shop s2)",
        "SELECT shop.Name FROM shop WHERE Number_products > (SELECT AVG(s.Number_products) FROM shop s)",
        "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop GROUP BY Name)",
        "SELECT s.Name FROM shop s WHERE s.Number_products > (SELECT AVG(s2.Number_products) FROM shop s2 WHERE s2.Name = s.Name)",
        "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop s WHERE s.Name = shop.Name)",
        "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop WHERE Name = shop.Name)"
      ]
    ]
  },
  {
    "id": 276,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)",
        "SELECT s.Name FROM shop s WHERE s.Number_products > (SELECT AVG(Number_products) FROM shop)",
        "SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT AVG(Number_products) FROM shop AS s)",
        "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(s.Number_products) FROM shop s)",
        "SELECT shop.Name FROM shop, (SELECT AVG(Number_products) AS avg_num FROM shop) AS avg_table WHERE shop.Number_products > avg_table.avg_num",
        "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop GROUP BY Name)",
        "SELECT Name FROM shop s1 WHERE s1.Number_products > (SELECT AVG(s2.Number_products) FROM shop s2)",
        "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop s WHERE s.Shop_ID = shop.Shop_ID)",
        "SELECT Name FROM shop s WHERE s.Number_products > (SELECT AVG(Number_products) FROM shop WHERE Shop_ID = s.Shop_ID)",
        "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop WHERE Name IS NOT NULL)"
      ]
    ]
  },
  {
    "id": 277,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT Name FROM employee WHERE Employee_ID IN (SELECT Employee_ID FROM evaluation GROUP BY Employee_ID HAVING COUNT(*) = (SELECT MAX(awards_count) FROM (SELECT COUNT(*) AS awards_count FROM evaluation GROUP BY Employee_ID) AS subquery))",
        "SELECT e.Name FROM employee e JOIN (SELECT Employee_ID, COUNT(*) AS awards_count FROM evaluation GROUP BY Employee_ID) ev ON e.Employee_ID = ev.Employee_ID WHERE ev.awards_count = (SELECT MAX(awards_count) FROM (SELECT COUNT(*) AS awards_count FROM evaluation GROUP BY Employee_ID) AS subquery)",
        "SELECT e.Name FROM employee e WHERE e.Employee_ID IN (SELECT Employee_ID FROM evaluation GROUP BY Employee_ID ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT e.Name FROM employee e WHERE EXISTS (SELECT 1 FROM evaluation ev WHERE ev.Employee_ID = e.Employee_ID GROUP BY ev.Employee_ID HAVING COUNT(*) = (SELECT MAX(awards_count) FROM (SELECT COUNT(*) AS awards_count FROM evaluation GROUP BY Employee_ID) AS subquery))",
        "SELECT e.Name FROM employee e, (SELECT Employee_ID, COUNT(*) AS awards_count FROM evaluation GROUP BY Employee_ID) AS ev WHERE e.Employee_ID = ev.Employee_ID AND ev.awards_count = (SELECT MAX(awards_count) FROM (SELECT COUNT(*) AS awards_count FROM evaluation GROUP BY Employee_ID) AS subquery)",
        "SELECT Name FROM employee WHERE Employee_ID IN (SELECT Employee_ID FROM evaluation GROUP BY Employee_ID HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM evaluation GROUP BY Employee_ID))",
        "SELECT e.Name FROM employee e INNER JOIN (SELECT Employee_ID, COUNT(*) AS awards_count FROM evaluation GROUP BY Employee_ID) ev ON e.Employee_ID = ev.Employee_ID WHERE ev.awards_count = (SELECT MAX(awards_count) FROM (SELECT COUNT(*) AS awards_count FROM evaluation GROUP BY Employee_ID) AS subquery)",
        "SELECT Name FROM employee WHERE Employee_ID IN (SELECT Employee_ID FROM evaluation GROUP BY Employee_ID HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM evaluation GROUP BY Employee_ID))",
        "SELECT e.Name FROM employee e WHERE e.Employee_ID IN (SELECT Employee_ID FROM (SELECT Employee_ID, COUNT(*) AS awards_count FROM evaluation GROUP BY Employee_ID HAVING awards_count = (SELECT MAX(awards_count) FROM (SELECT COUNT(*) AS awards_count FROM evaluation GROUP BY Employee_ID) AS subquery)) AS max_awards)",
        "SELECT e.Name FROM employee e WHERE e.Employee_ID IN (SELECT Employee_ID FROM evaluation GROUP BY Employee_ID HAVING COUNT(*) = (SELECT COUNT(*) FROM evaluation GROUP BY Employee_ID ORDER BY COUNT(*) DESC LIMIT 1))"
      ]
    ]
  },
  {
    "id": 278,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT Name FROM employee WHERE Employee_ID IN (SELECT Employee_ID FROM evaluation GROUP BY Employee_ID HAVING COUNT(*) = (SELECT MAX(Awards) FROM (SELECT COUNT(*) AS Awards FROM evaluation GROUP BY Employee_ID) AS AwardCounts))",
        "SELECT e.Name FROM employee e JOIN (SELECT Employee_ID, COUNT(*) AS Awards FROM evaluation GROUP BY Employee_ID) ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Awards = (SELECT MAX(Awards) FROM (SELECT COUNT(*) AS Awards FROM evaluation GROUP BY Employee_ID) AS AwardCounts)",
        "SELECT e.Name FROM employee e WHERE EXISTS (SELECT 1 FROM evaluation ev WHERE ev.Employee_ID = e.Employee_ID GROUP BY ev.Employee_ID HAVING COUNT(*) = (SELECT MAX(Awards) FROM (SELECT COUNT(*) AS Awards FROM evaluation GROUP BY Employee_ID) AS AwardCounts))",
        "SELECT e.Name FROM employee e INNER JOIN (SELECT Employee_ID, COUNT(*) AS Awards FROM evaluation GROUP BY Employee_ID HAVING COUNT(*) = (SELECT MAX(Awards) FROM (SELECT COUNT(*) AS Awards FROM evaluation GROUP BY Employee_ID) AS AwardCounts)) ev ON e.Employee_ID = ev.Employee_ID",
        "SELECT e.Name FROM employee e WHERE e.Employee_ID IN (SELECT Employee_ID FROM evaluation GROUP BY Employee_ID ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT e.Name FROM employee e, (SELECT Employee_ID, COUNT(*) AS Awards FROM evaluation GROUP BY Employee_ID) ev WHERE e.Employee_ID = ev.Employee_ID AND ev.Awards = (SELECT MAX(Awards) FROM (SELECT COUNT(*) AS Awards FROM evaluation GROUP BY Employee_ID) AS AwardCounts)",
        "SELECT e.Name FROM employee e WHERE e.Employee_ID IN (SELECT Employee_ID FROM evaluation GROUP BY Employee_ID HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM evaluation GROUP BY Employee_ID))",
        "SELECT e.Name FROM employee e WHERE e.Employee_ID IN (SELECT Employee_ID FROM evaluation GROUP BY Employee_ID HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM evaluation GROUP BY Employee_ID))",
        "SELECT Name FROM employee WHERE Employee_ID IN (SELECT Employee_ID FROM evaluation GROUP BY Employee_ID HAVING COUNT(*) = (SELECT MAX(Awards) FROM (SELECT Employee_ID, COUNT(*) AS Awards FROM evaluation GROUP BY Employee_ID) AS AwardCounts))",
        "SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Employee_ID, e.Name HAVING COUNT(ev.Employee_ID) = (SELECT MAX(Awards) FROM (SELECT COUNT(*) AS Awards FROM evaluation GROUP BY Employee_ID) AS AwardCounts)"
      ]
    ]
  },
  {
    "id": 279,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT Name FROM employee WHERE Employee_ID IN (SELECT Employee_ID FROM evaluation WHERE Bonus = (SELECT MAX(Bonus) FROM evaluation))",
        "SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Bonus = (SELECT MAX(Bonus) FROM evaluation)",
        "SELECT Name FROM employee WHERE Employee_ID IN (SELECT Employee_ID FROM evaluation GROUP BY Employee_ID HAVING Bonus = MAX(Bonus))",
        "SELECT employee.Name FROM employee INNER JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Bonus = (SELECT MAX(Bonus) FROM evaluation)",
        "SELECT Name FROM employee e WHERE EXISTS (SELECT 1 FROM evaluation ev WHERE ev.Employee_ID = e.Employee_ID AND ev.Bonus = (SELECT MAX(Bonus) FROM evaluation))",
        "SELECT e.Name FROM employee e, evaluation ev WHERE e.Employee_ID = ev.Employee_ID AND ev.Bonus = (SELECT MAX(Bonus) FROM evaluation)",
        "SELECT Name FROM employee WHERE Employee_ID = (SELECT Employee_ID FROM evaluation ORDER BY Bonus DESC LIMIT 1)",
        "SELECT e.Name FROM employee e WHERE e.Employee_ID = (SELECT ev.Employee_ID FROM evaluation ev WHERE ev.Bonus = (SELECT MAX(Bonus) FROM evaluation))",
        "SELECT Name FROM employee WHERE Employee_ID IN (SELECT Employee_ID FROM evaluation WHERE Bonus >= ALL (SELECT Bonus FROM evaluation))",
        "SELECT e.Name FROM employee e WHERE e.Employee_ID IN (SELECT ev.Employee_ID FROM evaluation ev WHERE ev.Bonus = (SELECT MAX(Bonus) FROM evaluation))"
      ]
    ]
  },
  {
    "id": 280,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Bonus = (SELECT MAX(Bonus) FROM evaluation)",
        "SELECT Name FROM employee WHERE Employee_ID IN (SELECT Employee_ID FROM evaluation WHERE Bonus = (SELECT MAX(Bonus) FROM evaluation))",
        "SELECT employee.Name FROM employee INNER JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Bonus = (SELECT MAX(Bonus) FROM evaluation)",
        "SELECT Name FROM employee WHERE Employee_ID = (SELECT Employee_ID FROM evaluation ORDER BY Bonus DESC LIMIT 1)",
        "SELECT e.Name FROM employee e, evaluation ev WHERE e.Employee_ID = ev.Employee_ID AND ev.Bonus = (SELECT MAX(Bonus) FROM evaluation)",
        "SELECT Name FROM employee WHERE Employee_ID IN (SELECT Employee_ID FROM evaluation GROUP BY Employee_ID HAVING Bonus = MAX(Bonus))",
        "SELECT e.Name FROM employee e WHERE EXISTS (SELECT 1 FROM evaluation ev WHERE ev.Employee_ID = e.Employee_ID AND ev.Bonus = (SELECT MAX(Bonus) FROM evaluation))",
        "SELECT Name FROM employee WHERE Employee_ID = (SELECT Employee_ID FROM evaluation WHERE Bonus = (SELECT MAX(Bonus) FROM evaluation) LIMIT 1)",
        "SELECT TOP 1 WITH TIES Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC",
        "SELECT e.Name FROM employee e WHERE e.Employee_ID IN (SELECT Employee_ID FROM evaluation WHERE Bonus >= ALL (SELECT Bonus FROM evaluation))"
      ]
    ]
  },
  {
    "id": 281,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "SELECT e.Name FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL",
        "SELECT Name FROM employee WHERE NOT EXISTS (SELECT 1 FROM evaluation WHERE Employee_ID = employee.Employee_ID)",
        "SELECT e.Name FROM employee e WHERE e.Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "SELECT Name FROM employee e WHERE e.Employee_ID NOT IN (SELECT DISTINCT Employee_ID FROM evaluation)",
        "SELECT employee.Name FROM employee LEFT OUTER JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Employee_ID IS NULL",
        "SELECT Name FROM employee EXCEPT SELECT Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID",
        "SELECT Name FROM employee e WHERE NOT EXISTS (SELECT NULL FROM evaluation ev WHERE ev.Employee_ID = e.Employee_ID)",
        "SELECT DISTINCT e.Name FROM employee e WHERE e.Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "SELECT e.Name FROM employee e WHERE NOT EXISTS (SELECT * FROM evaluation ev WHERE ev.Employee_ID = e.Employee_ID)"
      ]
    ]
  },
  {
    "id": 282,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT Name, Employee_ID FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "SELECT e.Name, e.Employee_ID FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL",
        "SELECT Name, Employee_ID FROM employee WHERE NOT EXISTS (SELECT 1 FROM evaluation WHERE Employee_ID = employee.Employee_ID)",
        "SELECT employee.Name, employee.Employee_ID FROM employee WHERE employee.Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "SELECT Name, Employee_ID FROM employee e WHERE e.Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "SELECT e.Name, e.Employee_ID FROM employee e WHERE NOT EXISTS (SELECT NULL FROM evaluation ev WHERE ev.Employee_ID = e.Employee_ID)",
        "SELECT Name, Employee_ID FROM employee EXCEPT SELECT Name, Employee_ID FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID",
        "SELECT Name, Employee_ID FROM employee e WHERE e.Employee_ID NOT IN (SELECT DISTINCT Employee_ID FROM evaluation)",
        "SELECT DISTINCT e.Name, e.Employee_ID FROM employee e LEFT OUTER JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL",
        "SELECT Name, Employee_ID FROM employee WHERE Employee_ID NOT IN (SELECT DISTINCT Employee_ID FROM evaluation)"
      ]
    ]
  },
  {
    "id": 283,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT Name FROM shop WHERE Shop_ID IN (SELECT Shop_ID FROM hiring GROUP BY Shop_ID HAVING COUNT(Employee_ID) = (SELECT MAX(count) FROM (SELECT COUNT(Employee_ID) AS count FROM hiring GROUP BY Shop_ID) AS counts))",
        "SELECT s.Name FROM shop s JOIN (SELECT Shop_ID, COUNT(*) AS num_employees FROM hiring GROUP BY Shop_ID ORDER BY num_employees DESC LIMIT 1) h ON s.Shop_ID = h.Shop_ID",
        "SELECT s.Name FROM shop s WHERE s.Shop_ID = (SELECT h.Shop_ID FROM hiring h GROUP BY h.Shop_ID ORDER BY COUNT(h.Employee_ID) DESC LIMIT 1)",
        "SELECT Name FROM shop WHERE Shop_ID = (SELECT Shop_ID FROM hiring GROUP BY Shop_ID ORDER BY COUNT(Employee_ID) DESC LIMIT 1)",
        "SELECT s.Name FROM shop s WHERE EXISTS (SELECT 1 FROM hiring h WHERE h.Shop_ID = s.Shop_ID GROUP BY h.Shop_ID HAVING COUNT(h.Employee_ID) = (SELECT MAX(c) FROM (SELECT COUNT(Employee_ID) AS c FROM hiring GROUP BY Shop_ID) t))",
        "SELECT Name FROM shop WHERE Shop_ID IN (SELECT Shop_ID FROM hiring GROUP BY Shop_ID ORDER BY COUNT(Employee_ID) DESC LIMIT 1)",
        "SELECT s.Name FROM shop s INNER JOIN (SELECT Shop_ID FROM hiring GROUP BY Shop_ID HAVING COUNT(Employee_ID) = (SELECT MAX(COUNT(Employee_ID)) FROM hiring GROUP BY Shop_ID)) h ON s.Shop_ID = h.Shop_ID",
        "SELECT Name FROM shop WHERE Shop_ID IN (SELECT Shop_ID FROM (SELECT Shop_ID, COUNT(Employee_ID) AS EmployeeCount FROM hiring GROUP BY Shop_ID ORDER BY EmployeeCount DESC LIMIT 1) AS MaxHiring)",
        "SELECT s.Name FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID, s.Name HAVING COUNT(h.Employee_ID) = (SELECT MAX(COUNT(Employee_ID)) FROM hiring GROUP BY Shop_ID)",
        "SELECT Name FROM shop WHERE Shop_ID = (SELECT Shop_ID FROM hiring GROUP BY Shop_ID HAVING COUNT(Employee_ID) >= ALL (SELECT COUNT(Employee_ID) FROM hiring GROUP BY Shop_ID))"
      ]
    ]
  },
  {
    "id": 284,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT Name FROM shop WHERE Shop_ID IN (SELECT Shop_ID FROM hiring GROUP BY Shop_ID HAVING COUNT(Employee_ID) = (SELECT MAX(employee_count) FROM (SELECT Shop_ID, COUNT(Employee_ID) AS employee_count FROM hiring GROUP BY Shop_ID) AS subquery))",
        "SELECT S.Name FROM shop S JOIN (SELECT Shop_ID, COUNT(*) AS NumEmployees FROM hiring GROUP BY Shop_ID) AS H ON S.Shop_ID = H.Shop_ID WHERE H.NumEmployees = (SELECT MAX(NumEmployees) FROM (SELECT COUNT(*) AS NumEmployees FROM hiring GROUP BY Shop_ID) AS subquery)",
        "SELECT S.Name FROM shop S WHERE S.Shop_ID IN (SELECT H.Shop_ID FROM hiring H GROUP BY H.Shop_ID ORDER BY COUNT(H.Employee_ID) DESC LIMIT 1)",
        "SELECT shop.Name FROM shop INNER JOIN (SELECT Shop_ID FROM hiring GROUP BY Shop_ID HAVING COUNT(Employee_ID) = (SELECT MAX(COUNT(Employee_ID)) FROM hiring GROUP BY Shop_ID)) AS MaxEmployees ON shop.Shop_ID = MaxEmployees.Shop_ID",
        "SELECT Name FROM shop WHERE Shop_ID = (SELECT Shop_ID FROM hiring GROUP BY Shop_ID ORDER BY COUNT(Employee_ID) DESC LIMIT 1)",
        "SELECT Name FROM shop WHERE Shop_ID IN (SELECT Shop_ID FROM hiring GROUP BY Shop_ID HAVING COUNT(Employee_ID) >= ALL (SELECT COUNT(Employee_ID) FROM hiring GROUP BY Shop_ID))",
        "SELECT Name FROM shop WHERE Shop_ID IN (SELECT Shop_ID FROM hiring GROUP BY Shop_ID HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM hiring GROUP BY Shop_ID) AS counts))",
        "SELECT Name FROM shop WHERE Shop_ID IN (SELECT Shop_ID FROM (SELECT Shop_ID, COUNT(Employee_ID) AS TotalEmployees FROM hiring GROUP BY Shop_ID) AS EmployeeCounts WHERE TotalEmployees = (SELECT MAX(TotalEmployees) FROM (SELECT COUNT(Employee_ID) AS TotalEmployees FROM hiring GROUP BY Shop_ID) AS MaxEmployees))",
        "SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID HAVING COUNT(hiring.Employee_ID) = (SELECT MAX(employee_count) FROM (SELECT COUNT(Employee_ID) AS employee_count FROM hiring GROUP BY Shop_ID) AS subquery)",
        "SELECT Name FROM shop WHERE Shop_ID IN (SELECT Shop_ID FROM hiring GROUP BY Shop_ID HAVING COUNT(Employee_ID) = (SELECT MAX(employee_count) FROM (SELECT Shop_ID, COUNT(Employee_ID) AS employee_count FROM hiring GROUP BY Shop_ID) AS subquery))"
      ]
    ]
  },
  {
    "id": 285,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT DISTINCT Shop_ID FROM hiring)",
        "SELECT s.Name FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Shop_ID IS NULL",
        "SELECT Name FROM shop WHERE NOT EXISTS (SELECT 1 FROM hiring WHERE Shop_ID = shop.Shop_ID)",
        "SELECT shop.Name FROM shop WHERE shop.Shop_ID NOT IN (SELECT Shop_ID FROM hiring)",
        "SELECT Name FROM shop s WHERE NOT EXISTS (SELECT NULL FROM hiring h WHERE h.Shop_ID = s.Shop_ID)",
        "SELECT s.Name FROM shop s WHERE s.Shop_ID NOT IN (SELECT DISTINCT h.Shop_ID FROM hiring h)",
        "SELECT Name FROM shop EXCEPT SELECT Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID",
        "SELECT Name FROM shop s WHERE s.Shop_ID NOT IN (SELECT Shop_ID FROM hiring GROUP BY Shop_ID)",
        "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring WHERE Shop_ID IS NOT NULL)",
        "SELECT s.Name FROM shop s LEFT OUTER JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Shop_ID IS NULL"
      ]
    ]
  },
  {
    "id": 286,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring WHERE Employee_ID IS NOT NULL);",
        "SELECT s.Name FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Employee_ID IS NULL;",
        "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT DISTINCT Shop_ID FROM hiring);",
        "SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name HAVING COUNT(hiring.Employee_ID) = 0;",
        "SELECT Name FROM shop EXCEPT SELECT Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NOT NULL;",
        "SELECT s.Name FROM shop s WHERE NOT EXISTS (SELECT 1 FROM hiring h WHERE h.Shop_ID = s.Shop_ID AND h.Employee_ID IS NOT NULL);",
        "SELECT Name FROM shop WHERE Shop_ID NOT EXISTS (SELECT Shop_ID FROM hiring WHERE Employee_ID IS NOT NULL);",
        "SELECT DISTINCT s.Name FROM shop s LEFT OUTER JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Employee_ID IS NULL;",
        "SELECT Name FROM shop s WHERE NOT EXISTS (SELECT NULL FROM hiring h WHERE h.Shop_ID = s.Shop_ID AND h.Employee_ID IS NOT NULL);",
        "SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID AND hiring.Employee_ID IS NULL WHERE hiring.Shop_ID IS NULL;"
      ]
    ]
  },
  {
    "id": 287,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT shop.Name, COUNT(hiring.Employee_ID) AS NumberOfEmployees FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY shop.Name",
        "SELECT s.Name, COUNT(h.Employee_ID) FROM hiring h INNER JOIN shop s ON h.Shop_ID = s.Shop_ID GROUP BY s.Name",
        "SELECT Name, COUNT(Employee_ID) FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY Name",
        "SELECT shop.Name AS ShopName, COUNT(*) AS EmployeeCount FROM shop INNER JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY ShopName",
        "SELECT Name, COUNT(Employee_ID) AS TotalEmployees FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY Name",
        "SELECT s.Name, COUNT(h.Employee_ID) AS Employees FROM shop s, hiring h WHERE s.Shop_ID = h.Shop_ID GROUP BY s.Name",
        "SELECT Name, COUNT(Employee_ID) FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY Name",
        "SELECT shop.Name, COUNT(hiring.Employee_ID) FROM shop, hiring WHERE shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name",
        "SELECT Name, COUNT(Employee_ID) FROM hiring, shop WHERE hiring.Shop_ID = shop.Shop_ID GROUP BY Name",
        "SELECT Name AS ShopName, COUNT(Employee_ID) AS EmployeeCount FROM shop JOIN hiring ON Shop_ID = hiring.Shop_ID GROUP BY ShopName"
      ]
    ]
  },
  {
    "id": 288,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT s.Name, COUNT(DISTINCT h.Employee_ID) AS Num_Employees FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID, s.Name",
        "SELECT Name, COUNT(DISTINCT Employee_ID) AS Employee_Count FROM shop INNER JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY Shop_ID, Name",
        "SELECT shop.Name, COUNT(DISTINCT hiring.Employee_ID) FROM shop, hiring WHERE shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID, shop.Name",
        "SELECT s.Name AS Shop_Name, COUNT(DISTINCT h.Employee_ID) AS Total_Employees FROM shop s, hiring h WHERE s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID, s.Name",
        "SELECT Name, COUNT(DISTINCT Employee_ID) FROM shop JOIN hiring USING (Shop_ID) GROUP BY Shop_ID, Name",
        "SELECT s.Name, COUNT(DISTINCT h.Employee_ID) AS Employees FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID, s.Name",
        "SELECT Name, COUNT(DISTINCT Employee_ID) AS Employee_Count FROM shop s LEFT OUTER JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID, s.Name",
        "SELECT s.Name AS ShopName, COUNT(DISTINCT h.Employee_ID) AS NumberOfEmployees FROM shop s INNER JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID, s.Name ORDER BY s.Name",
        "SELECT Name, COUNT(DISTINCT Employee_ID) AS EmployeeCount FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY Shop_ID, Name ORDER BY Name",
        "SELECT s.Name, COUNT(DISTINCT h.Employee_ID) AS EmployeeCount FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID, s.Name ORDER BY s.Name ASC"
      ]
    ]
  },
  {
    "id": 289,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT SUM(Bonus) AS TotalBonus FROM evaluation",
        "SELECT SUM(evaluation.Bonus) AS TotalBonus FROM evaluation",
        "SELECT SUM(Bonus) FROM evaluation",
        "SELECT SUM(evaluation.Bonus) FROM evaluation",
        "SELECT TOTAL(Bonus) AS TotalBonus FROM evaluation",
        "SELECT TOTAL(evaluation.Bonus) AS TotalBonus FROM evaluation",
        "SELECT SUM(Bonus) AS Total_Bonus FROM evaluation",
        "SELECT SUM(evaluation.Bonus) AS Total_Bonus FROM evaluation",
        "SELECT SUM(Bonus) TotalBonus FROM evaluation",
        "SELECT SUM(evaluation.Bonus) TotalBonus FROM evaluation"
      ]
    ]
  },
  {
    "id": 290,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT SUM(Bonus) FROM evaluation",
        "SELECT SUM(evaluation.Bonus) AS TotalBonus FROM evaluation",
        "SELECT TOTAL(Bonus) FROM evaluation",
        "SELECT SUM(Bonus) AS TotalAmountOfBonus FROM evaluation",
        "SELECT SUM(evaluation.Bonus) FROM evaluation",
        "SELECT SUM(Bonus) AS Total FROM evaluation",
        "SELECT SUM(Bonus) TotalBonus FROM evaluation",
        "SELECT SUM(evaluation.Bonus) Total FROM evaluation",
        "SELECT SUM(Bonus) FROM evaluation AS TotalBonus",
        "SELECT SUM(evaluation.Bonus) FROM evaluation AS TotalAmount"
      ]
    ]
  },
  {
    "id": 291,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT * FROM hiring",
        "SELECT hiring.* FROM hiring",
        "SELECT Shop_ID, Employee_ID, Start_from, Is_full_time FROM hiring",
        "SELECT hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time FROM hiring",
        "SELECT h.* FROM hiring h",
        "SELECT h.Shop_ID, h.Employee_ID, h.Start_from, h.Is_full_time FROM hiring h",
        "SELECT Shop_ID AS ShopID, Employee_ID AS EmployeeID, Start_from AS StartDate, Is_full_time AS FullTimeStatus FROM hiring",
        "SELECT * FROM hiring ORDER BY Shop_ID",
        "SELECT * FROM hiring WHERE 1=1",
        "SELECT ALL * FROM hiring"
      ]
    ]
  },
  {
    "id": 292,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT * FROM hiring",
        "SELECT hiring.* FROM hiring",
        "SELECT Shop_ID, Employee_ID, Start_from, Is_full_time FROM hiring",
        "SELECT hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time FROM hiring",
        "SELECT h.* FROM hiring h",
        "SELECT h.Shop_ID, h.Employee_ID, h.Start_from, h.Is_full_time FROM hiring h",
        "SELECT Shop_ID AS ShopID, Employee_ID AS EmployeeID, Start_from AS StartDate, Is_full_time AS FullTimeStatus FROM hiring",
        "SELECT * FROM hiring ORDER BY Shop_ID",
        "SELECT * FROM hiring ORDER BY Employee_ID",
        "SELECT Shop_ID, Employee_ID, Start_from, Is_full_time FROM hiring ORDER BY Shop_ID, Employee_ID"
      ]
    ]
  },
  {
    "id": 293,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT District FROM shop WHERE District IN (SELECT District FROM shop WHERE Number_products < 3000) INTERSECT SELECT District FROM shop WHERE District IN (SELECT District FROM shop WHERE Number_products > 10000)",
        "SELECT s1.District FROM shop s1 JOIN shop s2 ON s1.District = s2.District WHERE s1.Number_products < 3000 AND s2.Number_products > 10000",
        "SELECT DISTINCT s.District FROM shop s WHERE EXISTS (SELECT 1 FROM shop WHERE Number_products < 3000 AND District = s.District) AND EXISTS (SELECT 1 FROM shop WHERE Number_products > 10000 AND District = s.District)",
        "WITH Low AS (SELECT District FROM shop WHERE Number_products < 3000), High AS (SELECT District FROM shop WHERE Number_products > 10000) SELECT Low.District FROM Low JOIN High ON Low.District = High.District",
        "SELECT District FROM shop WHERE Number_products < 3000 AND District IN (SELECT District FROM shop WHERE Number_products > 10000)",
        "SELECT DISTINCT District FROM shop WHERE Number_products < 3000 AND District IN (SELECT District FROM shop WHERE Number_products > 10000)",
        "SELECT s.District FROM shop s WHERE s.District IN (SELECT District FROM shop WHERE Number_products < 3000) AND s.District IN (SELECT District FROM shop WHERE Number_products > 10000)",
        "SELECT DISTINCT District FROM (SELECT District FROM shop WHERE Number_products < 3000 UNION ALL SELECT District FROM shop WHERE Number_products > 10000) AS subquery GROUP BY District HAVING COUNT(*) > 1",
        "SELECT DISTINCT District FROM shop WHERE (SELECT COUNT(*) FROM shop s WHERE s.District = shop.District AND s.Number_products < 3000) > 0 AND (SELECT COUNT(*) FROM shop s WHERE s.District = shop.District AND s.Number_products > 10000) > 0",
        "SELECT DISTINCT District FROM shop a WHERE EXISTS (SELECT * FROM shop b WHERE a.District = b.District AND b.Number_products < 3000) AND EXISTS (SELECT * FROM shop c WHERE a.District = c.District AND c.Number_products > 10000)"
      ]
    ]
  },
  {
    "id": 294,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT District FROM shop WHERE District IN (SELECT District FROM shop WHERE Number_products < 3000) AND District IN (SELECT District FROM shop WHERE Number_products > 10000)",
        "SELECT DISTINCT s1.District FROM shop s1 JOIN shop s2 ON s1.District = s2.District WHERE s1.Number_products < 3000 AND s2.Number_products > 10000",
        "SELECT s.District FROM shop s WHERE EXISTS (SELECT 1 FROM shop WHERE Number_products < 3000 AND District = s.District) AND EXISTS (SELECT 1 FROM shop WHERE Number_products > 10000 AND District = s.District)",
        "WITH Low AS (SELECT District FROM shop WHERE Number_products < 3000), High AS (SELECT District FROM shop WHERE Number_products > 10000) SELECT Low.District FROM Low JOIN High ON Low.District = High.District",
        "SELECT s.District FROM shop s WHERE s.District IN (SELECT District FROM shop WHERE Number_products < 3000) INTERSECT SELECT District FROM shop WHERE Number_products > 10000",
        "SELECT DISTINCT District FROM shop WHERE District IN (SELECT District FROM shop WHERE Number_products < 3000) INTERSECT SELECT District FROM shop WHERE Number_products > 10000",
        "SELECT s.District FROM shop s GROUP BY s.District HAVING MIN(s.Number_products) < 3000 AND MAX(s.Number_products) > 10000",
        "SELECT s.District FROM shop s WHERE (SELECT COUNT(*) FROM shop WHERE Number_products < 3000 AND District = s.District) > 0 AND (SELECT COUNT(*) FROM shop WHERE Number_products > 10000 AND District = s.District) > 0",
        "SELECT DISTINCT s.District FROM shop s WHERE s.District IN (SELECT District FROM shop WHERE Number_products < 3000 UNION ALL SELECT District FROM shop WHERE Number_products > 10000) GROUP BY s.District HAVING COUNT(DISTINCT CASE WHEN Number_products < 3000 THEN 'low' WHEN Number_products > 10000 THEN 'high' END) = 2",
        "SELECT s.District FROM shop s WHERE s.District IN (SELECT District FROM shop WHERE Number_products < 3000) AND s.District IN (SELECT District FROM shop WHERE Number_products > 10000) GROUP BY s.District"
      ]
    ]
  },
  {
    "id": 295,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT Location) FROM shop",
        "SELECT COUNT(UNIQUE Location) FROM shop",
        "SELECT COUNT(*) FROM (SELECT DISTINCT Location FROM shop) AS unique_locations",
        "SELECT COUNT(DISTINCT Location) AS location_count FROM shop",
        "SELECT COUNT(Location) FROM (SELECT DISTINCT Location FROM shop) AS locations",
        "SELECT DISTINCT COUNT(Location) FROM shop",
        "SELECT COUNT(*) FROM (SELECT Location FROM shop GROUP BY Location) AS distinct_locations",
        "SELECT COUNT(DISTINCT Location) FROM shop WHERE Location IS NOT NULL",
        "SELECT COUNT(Location) FROM (SELECT DISTINCT Location FROM shop WHERE Location IS NOT NULL) AS locations",
        "SELECT DISTINCT COUNT(Location) FROM shop WHERE Location IS NOT NULL"
      ]
    ]
  },
  {
    "id": 296,
    "db_id": "employee_hire_evaluation",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT Location) FROM shop",
        "SELECT COUNT(UNIQUE Location) FROM shop",
        "SELECT COUNT(*) FROM (SELECT DISTINCT Location FROM shop) AS unique_locations",
        "SELECT COUNT(DISTINCT shop.Location) FROM shop",
        "SELECT COUNT(Location) FROM (SELECT DISTINCT Location FROM shop) AS locations",
        "SELECT COUNT(*) FROM (SELECT Location FROM shop GROUP BY Location) AS distinct_locations",
        "SELECT COUNT(DISTINCT Location) AS LocationCount FROM shop",
        "SELECT COUNT(Location) FROM shop GROUP BY Location HAVING COUNT(Location) > 0",
        "SELECT COUNT(*) FROM (SELECT DISTINCT Location FROM shop) location_count",
        "SELECT DISTINCT COUNT(Location) FROM shop"
      ]
    ]
  },
  {
    "id": 297,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Documents",
        "SELECT COUNT(Document_ID) FROM Documents",
        "SELECT COUNT(1) FROM Documents",
        "SELECT COUNT(Document_ID) AS NumberOfDocuments FROM Documents",
        "SELECT COUNT(*) AS TotalDocuments FROM Documents",
        "SELECT COUNT(DISTINCT Document_ID) FROM Documents",
        "SELECT COUNT(DISTINCT Document_ID) AS UniqueDocuments FROM Documents",
        "SELECT COUNT(*) FROM Documents WHERE Document_ID IS NOT NULL",
        "SELECT COUNT(*) AS DocumentCount FROM Documents",
        "SELECT COUNT(Document_ID) FROM Documents WHERE Document_ID > 0"
      ]
    ]
  },
  {
    "id": 298,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Documents",
        "SELECT COUNT(Document_ID) FROM Documents",
        "SELECT COUNT(1) FROM Documents",
        "SELECT COUNT(Document_ID) AS NumberOfDocuments FROM Documents",
        "SELECT COUNT(*) AS TotalDocuments FROM Documents",
        "SELECT COUNT(DISTINCT Document_ID) FROM Documents",
        "SELECT COUNT(DISTINCT Document_ID) AS UniqueDocumentCount FROM Documents",
        "SELECT COUNT(*) FROM Documents WHERE Document_ID IS NOT NULL",
        "SELECT COUNT(*) AS DocumentCount FROM Documents WHERE Document_ID > 0",
        "SELECT COUNT(Document_ID) FROM Documents WHERE Document_ID > 0"
      ]
    ]
  },
  {
    "id": 299,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Document_ID, Document_Name, Document_Description FROM Documents",
        "SELECT D.Document_ID, D.Document_Name, D.Document_Description FROM Documents D",
        "SELECT Document_ID AS ID, Document_Name AS Name, Document_Description AS Description FROM Documents",
        "SELECT * FROM Documents WHERE Document_ID IS NOT NULL AND Document_Name IS NOT NULL AND Document_Description IS NOT NULL",
        "SELECT Document_ID, Document_Name, Document_Description FROM Documents WHERE Document_ID > 0",
        "SELECT Document_ID, Document_Name, Document_Description FROM Documents ORDER BY Document_ID",
        "SELECT DISTINCT Document_ID, Document_Name, Document_Description FROM Documents",
        "SELECT Document_ID, Document_Name, Document_Description FROM Documents WHERE Document_Description IS NOT NULL",
        "SELECT Document_ID, Document_Name, Document_Description FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Documents)",
        "SELECT Document_ID, Document_Name, Document_Description FROM Documents WHERE Document_Name LIKE '%'"
      ]
    ]
  },
  {
    "id": 300,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Document_ID, Document_Name, Document_Description FROM Documents",
        "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents",
        "SELECT d.Document_ID, d.Document_Name, d.Document_Description FROM Documents d",
        "SELECT Document_ID AS ID, Document_Name AS Name, Document_Description AS Description FROM Documents",
        "SELECT * FROM Documents WHERE Document_ID IS NOT NULL AND Document_Name IS NOT NULL AND Document_Description IS NOT NULL",
        "SELECT Document_ID, Document_Name, Document_Description FROM Documents WHERE Document_ID > 0",
        "SELECT Document_ID, Document_Name, Document_Description FROM Documents ORDER BY Document_ID",
        "SELECT DISTINCT Document_ID, Document_Name, Document_Description FROM Documents",
        "SELECT Document_ID, Document_Name, Document_Description FROM Documents WHERE Document_Description IS NOT NULL",
        "SELECT Document_ID, Document_Name, Document_Description FROM Documents WHERE Document_Name LIKE '%'"
      ]
    ]
  },
  {
    "id": 301,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'",
        "SELECT Document_Name, Template_ID FROM Documents WHERE INSTR(Document_Description, 'w') > 0",
        "SELECT D.Document_Name, D.Template_ID FROM Documents D WHERE D.Document_Description LIKE '%w%'",
        "SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%' ESCAPE '\\'",
        "SELECT Document_Name, Template_ID FROM Documents WHERE CHARINDEX('w', Document_Description) > 0",
        "SELECT Document_Name, Template_ID FROM Documents WHERE POSITION('w' IN Document_Description) > 0",
        "SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '_%w%'",
        "SELECT Document_Name, Template_ID FROM Documents WHERE LOWER(Document_Description) LIKE '%w%'",
        "SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description COLLATE UTF8_GENERAL_CI LIKE '%w%'",
        "SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description REGEXP '.*w.*'"
      ]
    ]
  },
  {
    "id": 302,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'",
        "SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%' ORDER BY Document_Name",
        "SELECT D.Document_Name, D.Template_ID FROM Documents D WHERE D.Document_Description LIKE '%w%'",
        "SELECT Document_Name, Template_ID FROM Documents WHERE LOWER(Document_Description) LIKE '%w%'",
        "SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description ILIKE '%w%'",
        "SELECT Document_Name, Template_ID FROM Documents WHERE CHARINDEX('w', Document_Description) > 0",
        "SELECT Document_Name, Template_ID FROM Documents WHERE POSITION('w' IN Document_Description) > 0",
        "SELECT Document_Name, Template_ID FROM Documents WHERE INSTR(Document_Description, 'w') > 0",
        "SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%' COLLATE SQL_Latin1_General_CP1_CI_AS",
        "SELECT Document_Name, Template_ID FROM Documents WHERE PATINDEX('%w%', Document_Description) > 0"
      ]
    ]
  },
  {
    "id": 303,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'",
        "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name LIKE 'Robbin CV'",
        "SELECT D.Document_ID, D.Template_ID, D.Document_Description FROM Documents D WHERE D.Document_Name = 'Robbin CV'",
        "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'",
        "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'",
        "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'",
        "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'",
        "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'",
        "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'",
        "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'"
      ]
    ]
  },
  {
    "id": 304,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'",
        "SELECT D.Document_ID, D.Template_ID, D.Document_Description FROM Documents AS D WHERE D.Document_Name = 'Robbin CV'",
        "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name LIKE 'Robbin CV'",
        "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'",
        "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'",
        "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'",
        "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'",
        "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'",
        "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'",
        "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'"
      ]
    ]
  },
  {
    "id": 305,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT Template_ID) FROM Documents",
        "SELECT COUNT(UNIQUE Template_ID) FROM Documents",
        "SELECT COUNT(*) FROM (SELECT DISTINCT Template_ID FROM Documents) AS unique_templates",
        "SELECT COUNT(DISTINCT Documents.Template_ID) FROM Documents",
        "SELECT COUNT(DISTINCT T1.Template_ID) FROM Documents AS T1",
        "SELECT COUNT(*) FROM (SELECT Template_ID FROM Documents GROUP BY Template_ID) AS temp",
        "SELECT COUNT(DISTINCT Template_ID) AS NumberOfUniqueTemplates FROM Documents",
        "SELECT COUNT(UNIQUE T1.Template_ID) FROM Documents T1",
        "SELECT COUNT(*) FROM (SELECT DISTINCT Template_ID FROM Documents) temp",
        "SELECT DISTINCT COUNT(Template_ID) FROM Documents"
      ]
    ]
  },
  {
    "id": 306,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT Template_ID) FROM Documents",
        "SELECT COUNT(DISTINCT D.Template_ID) FROM Documents AS D",
        "SELECT COUNT(UNIQUE Template_ID) FROM Documents",
        "SELECT COUNT(*) FROM (SELECT DISTINCT Template_ID FROM Documents) AS unique_templates",
        "SELECT COUNT(DISTINCT Template_ID) AS NumberOfUniqueTemplates FROM Documents",
        "SELECT COUNT(*) FROM (SELECT Template_ID FROM Documents GROUP BY Template_ID) AS temp",
        "SELECT COUNT(DISTINCT Documents.Template_ID) FROM Documents",
        "SELECT COUNT(DISTINCT T.Template_ID) FROM Templates AS T JOIN Documents AS D ON T.Template_ID = D.Template_ID",
        "SELECT COUNT(*) FROM (SELECT DISTINCT D.Template_ID FROM Documents D) AS UniqueTemplates",
        "SELECT DISTINCT COUNT(Template_ID) FROM Documents"
      ]
    ]
  },
  {
    "id": 307,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'PPT'",
        "SELECT COUNT(Documents.Document_ID) AS NumberOfDocuments FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'PPT'",
        "SELECT COUNT(DISTINCT Documents.Document_ID) FROM Documents, Templates WHERE Documents.Template_ID = Templates.Template_ID AND Templates.Template_Type_Code = 'PPT'",
        "SELECT COUNT(1) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'PPT'",
        "SELECT COUNT(*) FROM Documents d, Templates t WHERE d.Template_ID = t.Template_ID AND t.Template_Type_Code = 'PPT'",
        "SELECT COUNT(Documents.Document_ID) FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID AND Templates.Template_Type_Code = 'PPT'",
        "SELECT COUNT(*) FROM Documents d INNER JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'PPT'",
        "SELECT COUNT(DISTINCT d.Document_ID) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'PPT'",
        "SELECT COUNT(*) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT')",
        "SELECT COUNT(Documents.Document_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID AND Templates.Template_Type_Code = 'PPT'"
      ]
    ]
  },
  {
    "id": 308,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT Documents.Document_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'PPT'",
        "SELECT COUNT(*) FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'PPT'",
        "SELECT COUNT(Documents.Document_ID) AS DocumentCount FROM Documents, Templates, Ref_Template_Types WHERE Documents.Template_ID = Templates.Template_ID AND Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code AND Ref_Template_Types.Template_Type_Description = 'PPT'",
        "SELECT COUNT(1) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE r.Template_Type_Description = 'PPT'",
        "SELECT COUNT(DISTINCT d.Document_ID) FROM Documents d, Templates t, Ref_Template_Types r WHERE d.Template_ID = t.Template_ID AND t.Template_Type_Code = r.Template_Type_Code AND r.Template_Type_Description = 'PPT'",
        "SELECT COUNT(*) FROM Documents d INNER JOIN Templates t ON d.Template_ID = t.Template_ID INNER JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE r.Template_Type_Description LIKE 'PPT'",
        "SELECT COUNT(DISTINCT d.Document_ID) FROM Documents d LEFT JOIN Templates t ON d.Template_ID = t.Template_ID LEFT JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE r.Template_Type_Description = 'PPT'",
        "SELECT COUNT(Documents.Document_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description LIKE 'PPT'",
        "SELECT COUNT(*) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE r.Template_Type_Description = 'PPT'",
        "SELECT COUNT(DISTINCT Document_ID) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'PPT'))"
      ]
    ]
  },
  {
    "id": 309,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT T.Template_ID, COUNT(D.Document_ID) AS NumberOfDocuments FROM Templates T LEFT JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_ID",
        "SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS DocumentCount FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID",
        "SELECT t.Template_ID, COUNT(d.Document_ID) FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID",
        "SELECT Template_ID, COUNT(*) AS DocsCount FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Template_ID",
        "SELECT a.Template_ID, COUNT(b.Document_ID) AS TotalDocuments FROM Templates a, Documents b WHERE a.Template_ID = b.Template_ID GROUP BY a.Template_ID",
        "SELECT `Template_ID`, COUNT(`Document_ID`) AS `CountOfDocuments` FROM `Templates` LEFT JOIN `Documents` ON `Templates`.`Template_ID` = `Documents`.`Template_ID` GROUP BY `Template_ID`",
        "SELECT Template_ID, COUNT(Document_ID) AS NumberOfDocs FROM Templates LEFT OUTER JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Template_ID",
        "SELECT T1.Template_ID, COUNT(T2.Document_ID) AS Document_Count FROM Templates AS T1 LEFT JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID",
        "SELECT Template_ID, COUNT(Document_ID) DocumentCount FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Template_ID",
        "SELECT Templates.Template_ID, COUNT(Documents.Document_ID) FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID"
      ]
    ]
  },
  {
    "id": 310,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Template_ID, COUNT(*) AS usage_count FROM Documents GROUP BY Template_ID",
        "SELECT Template_ID, COUNT(Template_ID) AS usage_count FROM Documents GROUP BY Template_ID",
        "SELECT Template_ID, COUNT(Document_ID) AS usage_count FROM Documents GROUP BY Template_ID",
        "SELECT d.Template_ID, COUNT(*) AS usage_count FROM Documents d GROUP BY d.Template_ID",
        "SELECT d.Template_ID, COUNT(d.Template_ID) AS usage_count FROM Documents d GROUP BY d.Template_ID",
        "SELECT d.Template_ID, COUNT(d.Document_ID) AS usage_count FROM Documents d GROUP BY d.Template_ID",
        "SELECT Template_ID, COUNT(*) FROM Documents GROUP BY Template_ID",
        "SELECT Template_ID, COUNT(Template_ID) FROM Documents GROUP BY Template_ID",
        "SELECT Template_ID, COUNT(Document_ID) FROM Documents GROUP BY Template_ID",
        "SELECT d.Template_ID, COUNT(*) FROM Documents d GROUP BY d.Template_ID"
      ]
    ]
  },
  {
    "id": 311,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT T1.Template_ID, T1.Template_Type_Code FROM Templates AS T1 JOIN (SELECT Template_ID, COUNT(*) AS Count FROM Documents GROUP BY Template_ID) AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Count = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM Documents GROUP BY Template_ID) AS T3)",
        "SELECT Template_ID, Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) = (SELECT MAX(C) FROM (SELECT COUNT(*) AS C FROM Documents GROUP BY Template_ID) AS sub))",
        "SELECT T.Template_ID, T.Template_Type_Code FROM Templates T INNER JOIN (SELECT Template_ID, COUNT(*) AS Total FROM Documents GROUP BY Template_ID) D ON T.Template_ID = D.Template_ID WHERE D.Total = (SELECT MAX(Total) FROM (SELECT COUNT(*) AS Total FROM Documents GROUP BY Template_ID) X)",
        "SELECT T.Template_ID, T.Template_Type_Code FROM Templates T WHERE T.Template_ID IN (SELECT D.Template_ID FROM Documents D GROUP BY D.Template_ID HAVING COUNT(D.Document_ID) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Documents GROUP BY Template_ID) Y))",
        "SELECT T.Template_ID, T.Template_Type_Code FROM Templates T, (SELECT Template_ID, COUNT(*) AS Count FROM Documents GROUP BY Template_ID HAVING Count = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM Documents GROUP BY Template_ID) AS Temp)) AS D WHERE T.Template_ID = D.Template_ID",
        "SELECT T.Template_ID, T.Template_Type_Code FROM Templates T WHERE EXISTS (SELECT 1 FROM Documents D WHERE T.Template_ID = D.Template_ID GROUP BY D.Template_ID HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Documents GROUP BY Template_ID) AS Sub))",
        "SELECT T.Template_ID, T.Template_Type_Code FROM Templates T WHERE T.Template_ID IN (SELECT D.Template_ID FROM Documents D GROUP BY D.Template_ID ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT T.Template_ID, T.Template_Type_Code FROM Templates T WHERE T.Template_ID = (SELECT D.Template_ID FROM Documents D GROUP BY D.Template_ID ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT T.Template_ID, T.Template_Type_Code FROM Templates T JOIN (SELECT Template_ID FROM Documents GROUP BY Template_ID ORDER BY COUNT(*) DESC LIMIT 1) D ON T.Template_ID = D.Template_ID",
        "SELECT T.Template_ID, T.Template_Type_Code FROM Templates T WHERE T.Template_ID IN (SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM Documents GROUP BY Template_ID))"
      ]
    ]
  },
  {
    "id": 312,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT T.Template_ID, T.Template_Type_Code FROM Templates T JOIN (SELECT Template_ID, COUNT(*) AS Count FROM Documents GROUP BY Template_ID) D ON T.Template_ID = D.Template_ID WHERE D.Count = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM Documents GROUP BY Template_ID) Temp)",
        "SELECT T.Template_ID, T.Template_Type_Code FROM Templates T WHERE T.Template_ID IN (SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) = (SELECT MAX(C) FROM (SELECT COUNT(*) AS C FROM Documents GROUP BY Template_ID) AS MaxCount))",
        "SELECT T.Template_ID, T.Template_Type_Code FROM Templates T INNER JOIN (SELECT Template_ID, COUNT(*) AS Total FROM Documents GROUP BY Template_ID) D ON T.Template_ID = D.Template_ID WHERE D.Total = (SELECT MAX(Total) FROM (SELECT COUNT(*) AS Total FROM Documents GROUP BY Template_ID) AS Sub)",
        "SELECT Template_ID, Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(Document_ID) = (SELECT MAX(Cnt) FROM (SELECT COUNT(Document_ID) AS Cnt FROM Documents GROUP BY Template_ID) AS MaxDocuments))",
        "SELECT T1.Template_ID, T1.Template_Type_Code FROM Templates AS T1 JOIN (SELECT Template_ID, COUNT(*) AS DocumentCount FROM Documents GROUP BY Template_ID) AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.DocumentCount = (SELECT MAX(DocumentCount) FROM (SELECT COUNT(*) AS DocumentCount FROM Documents GROUP BY Template_ID) AS T3)",
        "SELECT T.Template_ID, T.Template_Type_Code FROM Templates T WHERE EXISTS (SELECT 1 FROM Documents D WHERE D.Template_ID = T.Template_ID GROUP BY D.Template_ID HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Documents GROUP BY Template_ID) AS MaxCount))",
        "SELECT T.Template_ID, T.Template_Type_Code FROM Templates T WHERE T.Template_ID IN (SELECT D.Template_ID FROM Documents D GROUP BY D.Template_ID HAVING COUNT(D.Document_ID) = (SELECT MAX(Count) FROM (SELECT COUNT(Document_ID) AS Count FROM Documents GROUP BY Template_ID) AS Counts))",
        "SELECT T.Template_ID, T.Template_Type_Code FROM Templates T WHERE T.Template_ID IN (SELECT D.Template_ID FROM Documents D GROUP BY D.Template_ID HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM Documents GROUP BY Template_ID) AS DocumentCounts))",
        "SELECT Template_ID, Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM Documents GROUP BY Template_ID) AS DocumentCounts))",
        "SELECT T.Template_ID, T.Template_Type_Code FROM Templates T WHERE T.Template_ID IN (SELECT D.Template_ID FROM Documents D GROUP BY D.Template_ID HAVING COUNT(D.Document_ID) = (SELECT MAX(Cnt) FROM (SELECT COUNT(Document_ID) AS Cnt FROM Documents GROUP BY Template_ID) AS MaxDocuments))"
      ]
    ]
  },
  {
    "id": 313,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) > 1",
        "SELECT d.Template_ID FROM Documents d GROUP BY d.Template_ID HAVING COUNT(d.Document_ID) > 1",
        "SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(Document_ID) > 1",
        "SELECT t.Template_ID FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID HAVING COUNT(d.Document_ID) > 1",
        "SELECT DISTINCT d.Template_ID FROM Documents d WHERE (SELECT COUNT(*) FROM Documents WHERE Template_ID = d.Template_ID) > 1",
        "SELECT Template_ID FROM (SELECT Template_ID, COUNT(*) AS doc_count FROM Documents GROUP BY Template_ID) AS subquery WHERE doc_count > 1",
        "SELECT DISTINCT Template_ID FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) > 1)",
        "WITH CTE AS (SELECT Template_ID, COUNT(*) AS Count FROM Documents GROUP BY Template_ID) SELECT Template_ID FROM CTE WHERE Count > 1",
        "SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(DISTINCT Document_ID) > 1",
        "SELECT DISTINCT Template_ID FROM Documents d1 WHERE EXISTS (SELECT 1 FROM Documents d2 WHERE d1.Template_ID = d2.Template_ID GROUP BY d2.Template_ID HAVING COUNT(*) > 1)"
      ]
    ]
  },
  {
    "id": 314,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT T.Template_ID FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_ID HAVING COUNT(D.Document_ID) > 1",
        "SELECT Template_ID FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) > 1)",
        "SELECT DISTINCT T.Template_ID FROM Templates T, Documents D WHERE T.Template_ID = D.Template_ID GROUP BY T.Template_ID HAVING COUNT(D.Document_ID) > 1",
        "SELECT T.Template_ID FROM Templates AS T INNER JOIN Documents AS D ON T.Template_ID = D.Template_ID GROUP BY T.Template_ID HAVING COUNT(DISTINCT D.Document_ID) > 1",
        "SELECT T.Template_ID FROM Templates T WHERE EXISTS (SELECT 1 FROM Documents D WHERE T.Template_ID = D.Template_ID GROUP BY D.Template_ID HAVING COUNT(*) > 1)",
        "SELECT T.Template_ID FROM Templates T LEFT JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_ID HAVING COUNT(D.Document_ID) > 1",
        "SELECT T.Template_ID FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_ID HAVING COUNT(*) > 1",
        "SELECT Template_ID FROM (SELECT Template_ID, COUNT(Document_ID) AS DocCount FROM Documents GROUP BY Template_ID) AS SubQuery WHERE DocCount > 1",
        "SELECT T.Template_ID FROM Templates T WHERE T.Template_ID IN (SELECT D.Template_ID FROM Documents D GROUP BY D.Template_ID HAVING COUNT(D.Document_ID) > 1)",
        "SELECT DISTINCT T.Template_ID FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID WHERE (SELECT COUNT(*) FROM Documents WHERE Template_ID = T.Template_ID) > 1 GROUP BY T.Template_ID"
      ]
    ]
  },
  {
    "id": 315,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)",
        "SELECT T.Template_ID FROM Templates T LEFT JOIN Documents D ON T.Template_ID = D.Template_ID WHERE D.Template_ID IS NULL",
        "SELECT Template_ID FROM Templates EXCEPT SELECT Template_ID FROM Documents",
        "SELECT T.Template_ID FROM Templates T WHERE NOT EXISTS (SELECT 1 FROM Documents D WHERE D.Template_ID = T.Template_ID)",
        "SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT DISTINCT Template_ID FROM Documents)",
        "SELECT DISTINCT T.Template_ID FROM Templates T WHERE T.Template_ID NOT IN (SELECT D.Template_ID FROM Documents D)",
        "SELECT T.Template_ID FROM Templates T WHERE T.Template_ID NOT IN (SELECT D.Template_ID FROM Documents D WHERE D.Template_ID IS NOT NULL)",
        "SELECT Template_ID FROM Templates T WHERE NOT EXISTS (SELECT NULL FROM Documents D WHERE D.Template_ID = T.Template_ID)",
        "SELECT DISTINCT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents WHERE Template_ID IS NOT NULL)",
        "SELECT T.Template_ID FROM Templates T WHERE T.Template_ID NOT IN (SELECT Template_ID FROM Documents)"
      ]
    ]
  },
  {
    "id": 316,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)",
        "SELECT T.Template_ID FROM Templates T LEFT JOIN Documents D ON T.Template_ID = D.Template_ID WHERE D.Template_ID IS NULL",
        "SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT DISTINCT Template_ID FROM Documents)",
        "SELECT T.Template_ID FROM Templates T WHERE NOT EXISTS (SELECT 1 FROM Documents D WHERE D.Template_ID = T.Template_ID)",
        "SELECT Template_ID FROM Templates EXCEPT SELECT Template_ID FROM Documents",
        "SELECT T.Template_ID FROM Templates T WHERE T.Template_ID NOT IN (SELECT D.Template_ID FROM Documents D)",
        "SELECT DISTINCT T.Template_ID FROM Templates T WHERE T.Template_ID NOT IN (SELECT D.Template_ID FROM Documents D)",
        "SELECT T.Template_ID FROM Templates T WHERE T.Template_ID NOT IN (SELECT Template_ID FROM Documents WHERE Template_ID IS NOT NULL)",
        "SELECT Template_ID FROM Templates T WHERE NOT EXISTS (SELECT NULL FROM Documents D WHERE D.Template_ID = T.Template_ID)",
        "SELECT DISTINCT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents WHERE Template_ID IS NOT NULL)"
      ]
    ]
  },
  {
    "id": 317,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Templates",
        "SELECT COUNT(Template_ID) FROM Templates",
        "SELECT COUNT(1) FROM Templates",
        "SELECT COUNT(DISTINCT Template_ID) FROM Templates",
        "SELECT COUNT(*) AS TotalTemplates FROM Templates",
        "SELECT COUNT(Template_ID) AS TemplateCount FROM Templates",
        "SELECT COUNT(*) FROM Templates WHERE Template_ID IS NOT NULL",
        "SELECT COUNT(DISTINCT Template_ID) AS UniqueTemplateCount FROM Templates",
        "SELECT COUNT(*) FROM (SELECT Template_ID FROM Templates) AS Temp",
        "SELECT COUNT(Template_ID) FROM Templates WHERE Template_ID > 0"
      ]
    ]
  },
  {
    "id": 318,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Templates",
        "SELECT COUNT(Template_ID) FROM Templates",
        "SELECT COUNT(1) FROM Templates",
        "SELECT COUNT(Template_ID) AS NumberOfTemplates FROM Templates",
        "SELECT COUNT(*) AS TotalTemplates FROM Templates",
        "SELECT COUNT(DISTINCT Template_ID) FROM Templates",
        "SELECT COUNT(DISTINCT Template_ID) AS UniqueTemplateCount FROM Templates",
        "SELECT COUNT(*) FROM Templates WHERE Template_ID IS NOT NULL",
        "SELECT COUNT(Template_ID) FROM Templates WHERE Template_ID > 0",
        "SELECT COUNT(*) FROM Templates WHERE Template_ID > 0"
      ]
    ]
  },
  {
    "id": 319,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates",
        "SELECT T.Template_ID, T.Version_Number, T.Template_Type_Code FROM Templates T",
        "SELECT Template_ID AS ID, Version_Number AS Version, Template_Type_Code AS TypeCode FROM Templates",
        "SELECT * FROM Templates",
        "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates",
        "SELECT DISTINCT Template_ID, Version_Number, Template_Type_Code FROM Templates",
        "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates ORDER BY Template_ID",
        "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates WHERE Template_ID IS NOT NULL",
        "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates GROUP BY Template_ID, Version_Number, Template_Type_Code",
        "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates LIMIT ALL"
      ]
    ]
  },
  {
    "id": 320,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates",
        "SELECT T.Template_ID, T.Version_Number, T.Template_Type_Code FROM Templates AS T",
        "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates",
        "SELECT Template_ID AS ID, Version_Number AS Version, Template_Type_Code AS TypeCode FROM Templates",
        "SELECT * FROM Templates WHERE Template_ID IS NOT NULL AND Version_Number IS NOT NULL AND Template_Type_Code IS NOT NULL",
        "SELECT DISTINCT Template_ID, Version_Number, Template_Type_Code FROM Templates",
        "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates ORDER BY Template_ID",
        "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates GROUP BY Template_ID, Version_Number, Template_Type_Code",
        "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Templates)",
        "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates WHERE Template_ID > 0"
      ]
    ]
  },
  {
    "id": 321,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT DISTINCT Template_Type_Code FROM Templates",
        "SELECT DISTINCT T.Template_Type_Code FROM Templates AS T",
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code",
        "SELECT DISTINCT Template_Type_Code FROM Templates WHERE Template_Type_Code IS NOT NULL",
        "SELECT DISTINCT T.Template_Type_Code FROM Templates T WHERE T.Template_Type_Code IS NOT NULL",
        "SELECT DISTINCT Template_Type_Code FROM Templates ORDER BY Template_Type_Code",
        "SELECT DISTINCT Template_Type_Code FROM Templates T GROUP BY T.Template_Type_Code",
        "SELECT DISTINCT Template_Type_Code FROM Templates WHERE Template_Type_Code <> ''",
        "SELECT DISTINCT Template_Type_Code FROM Templates T WHERE T.Template_Type_Code <> ''",
        "SELECT DISTINCT Template_Type_Code FROM Templates T ORDER BY T.Template_Type_Code"
      ]
    ]
  },
  {
    "id": 322,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types",
        "SELECT Template_Type_Code FROM Ref_Template_Types GROUP BY Template_Type_Code",
        "SELECT DISTINCT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types",
        "SELECT Template_Type_Code FROM Ref_Template_Types",
        "SELECT DISTINCT T.Template_Type_Code FROM Ref_Template_Types T",
        "SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types ORDER BY Template_Type_Code",
        "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code IS NOT NULL",
        "SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code IS NOT NULL",
        "SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types ORDER BY Template_Type_Code ASC",
        "SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types ORDER BY Template_Type_Code DESC"
      ]
    ]
  },
  {
    "id": 323,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')",
        "SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT'",
        "SELECT T.Template_ID FROM Templates T WHERE T.Template_Type_Code = 'PP' OR T.Template_Type_Code = 'PPT'",
        "SELECT Template_ID FROM Templates WHERE Template_Type_Code LIKE 'PP%'",
        "SELECT DISTINCT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')",
        "SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' UNION SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT'",
        "SELECT Template_ID FROM Templates WHERE Template_Type_Code = ANY (ARRAY['PP', 'PPT'])",
        "SELECT Template_ID FROM Templates WHERE Template_Type_Code MATCHES 'PP|PPT'",
        "SELECT Template_ID FROM Templates WHERE 'PP' = ANY (Template_Type_Code) OR 'PPT' = ANY (Template_Type_Code)",
        "SELECT Template_ID FROM Templates WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT')"
      ]
    ]
  },
  {
    "id": 324,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')",
        "SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT'",
        "SELECT T.Template_ID FROM Templates T WHERE T.Template_Type_Code = 'PP' OR T.Template_Type_Code = 'PPT'",
        "SELECT DISTINCT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' UNION SELECT DISTINCT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT'",
        "SELECT Template_ID FROM Templates WHERE Template_Type_Code LIKE 'PP%' OR Template_Type_Code LIKE 'PPT%'",
        "SELECT Template_ID FROM Templates WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT')",
        "SELECT DISTINCT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT'",
        "SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' UNION ALL SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT'",
        "SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT') GROUP BY Template_ID",
        "SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' UNION SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT'"
      ]
    ]
  },
  {
    "id": 325,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'",
        "SELECT COUNT(Template_ID) FROM Templates WHERE Template_Type_Code = 'CV'",
        "SELECT COUNT(*) AS NumberOfTemplates FROM Templates WHERE Template_Type_Code = 'CV'",
        "SELECT COUNT(1) FROM Templates WHERE Template_Type_Code = 'CV'",
        "SELECT COUNT(DISTINCT Template_ID) FROM Templates WHERE Template_Type_Code = 'CV'",
        "SELECT COUNT(*) FROM Templates t WHERE t.Template_Type_Code = 'CV'",
        "SELECT COUNT(*) FROM Templates WHERE Template_Type_Code LIKE 'CV'",
        "SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV' GROUP BY Template_Type_Code",
        "SELECT Template_Type_Code, COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV' GROUP BY Template_Type_Code",
        "SELECT COUNT(*) FROM Templates t WHERE t.Template_Type_Code = 'CV' AND t.Template_ID IS NOT NULL"
      ]
    ]
  },
  {
    "id": 326,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'CV'",
        "SELECT COUNT(Templates.Template_ID) AS NumberOfCVTemplates FROM Templates INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'CV'",
        "SELECT COUNT(1) FROM Templates, Ref_Template_Types WHERE Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code AND Ref_Template_Types.Template_Type_Description = 'CV'",
        "SELECT COUNT(DISTINCT Templates.Template_ID) FROM Templates LEFT JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'CV'",
        "SELECT COUNT(*) FROM Templates t JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE r.Template_Type_Description LIKE 'CV'",
        "SELECT COUNT(*) FROM Templates t, Ref_Template_Types r WHERE t.Template_Type_Code = r.Template_Type_Code AND r.Template_Type_Description = 'CV'",
        "SELECT COUNT(Template_ID) FROM Templates WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'CV')",
        "SELECT COUNT(*) FROM Templates WHERE EXISTS (SELECT 1 FROM Ref_Template_Types WHERE Templates.Template_Type_Code = Template_Type_Code AND Template_Type_Description = 'CV')",
        "SELECT COUNT(*) FROM Templates t INNER JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code AND r.Template_Type_Description = 'CV'",
        "SELECT COUNT(Templates.Template_ID) FROM Templates INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code AND Ref_Template_Types.Template_Type_Description = 'CV'"
      ]
    ]
  },
  {
    "id": 327,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5",
        "SELECT T.Version_Number, T.Template_Type_Code FROM Templates AS T WHERE T.Version_Number > 5",
        "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > '5'",
        "SELECT t.Version_Number, t.Template_Type_Code FROM Templates t WHERE t.Version_Number > 5",
        "SELECT Version_Number, Template_Type_Code FROM Templates WHERE CAST(Version_Number AS INT) > 5",
        "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5 ORDER BY Version_Number",
        "SELECT DISTINCT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5",
        "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5 AND Template_Type_Code IS NOT NULL",
        "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5 GROUP BY Version_Number, Template_Type_Code",
        "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5 LIMIT 100"
      ]
    ]
  },
  {
    "id": 328,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5",
        "SELECT T.Version_Number, T.Template_Type_Code FROM Templates AS T WHERE T.Version_Number > 5",
        "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5 ORDER BY Version_Number",
        "SELECT DISTINCT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5",
        "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5 GROUP BY Version_Number, Template_Type_Code",
        "SELECT t.Version_Number, t.Template_Type_Code FROM Templates t WHERE t.Version_Number > 5",
        "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5 AND Template_Type_Code IS NOT NULL",
        "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5 ORDER BY Template_Type_Code",
        "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5 ORDER BY Version_Number DESC",
        "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5 ORDER BY Template_Type_Code DESC"
      ]
    ]
  },
  {
    "id": 329,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT r.Template_Type_Code, COUNT(t.Template_ID) AS NumberOfTemplates FROM Ref_Template_Types r LEFT JOIN Templates t ON r.Template_Type_Code = t.Template_Type_Code GROUP BY r.Template_Type_Code",
        "SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS TemplateCount FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code",
        "SELECT rtt.Template_Type_Code, COUNT(tmpl.Template_ID) AS TotalTemplates FROM Ref_Template_Types rtt INNER JOIN Templates tmpl ON rtt.Template_Type_Code = tmpl.Template_Type_Code GROUP BY rtt.Template_Type_Code",
        "SELECT Template_Type_Code, COUNT(Template_ID) FROM Ref_Template_Types LEFT JOIN Templates USING (Template_Type_Code) GROUP BY Template_Type_Code",
        "SELECT r.Template_Type_Code, COUNT(t.Template_ID) FROM Ref_Template_Types AS r LEFT OUTER JOIN Templates AS t ON r.Template_Type_Code = t.Template_Type_Code GROUP BY r.Template_Type_Code",
        "SELECT Template_Type_Code, COUNT(*) AS NumOfTemplates FROM Templates GROUP BY Template_Type_Code",
        "SELECT r.Template_Type_Code, COUNT(t.Template_ID) AS TemplateCount FROM Ref_Template_Types r, Templates t WHERE r.Template_Type_Code = t.Template_Type_Code GROUP BY r.Template_Type_Code",
        "SELECT r.Template_Type_Code, IFNULL(COUNT(t.Template_ID), 0) AS TemplatesCount FROM Ref_Template_Types r LEFT JOIN Templates t ON r.Template_Type_Code = t.Template_Type_Code GROUP BY r.Template_Type_Code",
        "SELECT Template_Type_Code, COUNT(Template_ID) AS CountOfTemplates FROM Templates GROUP BY Template_Type_Code",
        "SELECT r.Template_Type_Code, COUNT(t.Template_ID) AS NumberOfTemplates FROM Ref_Template_Types r JOIN Templates t ON r.Template_Type_Code = t.Template_Type_Code GROUP BY r.Template_Type_Code"
      ]
    ]
  },
  {
    "id": 330,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT r.Template_Type_Code, COUNT(t.Template_ID) AS Template_Count FROM Ref_Template_Types r JOIN Templates t ON r.Template_Type_Code = t.Template_Type_Code GROUP BY r.Template_Type_Code",
        "SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) FROM Ref_Template_Types INNER JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code",
        "SELECT r.Template_Type_Code, COUNT(*) AS Num_Templates FROM Ref_Template_Types r, Templates t WHERE r.Template_Type_Code = t.Template_Type_Code GROUP BY r.Template_Type_Code",
        "SELECT Template_Type_Code, COUNT(Template_ID) FROM Templates GROUP BY Template_Type_Code",
        "SELECT r.Template_Type_Code, COUNT(t.Template_ID) FROM Ref_Template_Types AS r LEFT JOIN Templates AS t ON r.Template_Type_Code = t.Template_Type_Code GROUP BY r.Template_Type_Code",
        "SELECT Template_Type_Code, COUNT(*) FROM Templates GROUP BY Template_Type_Code",
        "SELECT r.Template_Type_Code, COUNT(t.Template_ID) FROM Ref_Template_Types r LEFT JOIN Templates t ON r.Template_Type_Code = t.Template_Type_Code GROUP BY r.Template_Type_Code",
        "SELECT DISTINCT r.Template_Type_Code, COUNT(t.Template_ID) OVER (PARTITION BY r.Template_Type_Code) FROM Ref_Template_Types r JOIN Templates t ON r.Template_Type_Code = t.Template_Type_Code",
        "SELECT r.Template_Type_Code, COUNT(t.Template_ID) AS Total_Templates FROM Ref_Template_Types r JOIN Templates t ON r.Template_Type_Code = t.Template_Type_Code GROUP BY r.Template_Type_Code ORDER BY r.Template_Type_Code",
        "SELECT Template_Type_Code, COUNT(Template_ID) AS CountOfTemplates FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) > 0"
      ]
    ]
  },
  {
    "id": 331,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) = (SELECT MAX(template_count) FROM (SELECT COUNT(*) AS template_count FROM Templates GROUP BY Template_Type_Code) AS subquery)",
        "SELECT T1.Template_Type_Code FROM Templates AS T1 GROUP BY T1.Template_Type_Code HAVING COUNT(T1.Template_ID) = (SELECT MAX(COUNT(T2.Template_ID)) FROM Templates AS T2 GROUP BY T2.Template_Type_Code)",
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "WITH TemplateCounts AS (SELECT Template_Type_Code, COUNT(*) AS Count FROM Templates GROUP BY Template_Type_Code) SELECT Template_Type_Code FROM TemplateCounts WHERE Count = (SELECT MAX(Count) FROM TemplateCounts)",
        "SELECT Template_Type_Code FROM (SELECT Template_Type_Code, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank FROM Templates GROUP BY Template_Type_Code) sub WHERE rank = 1",
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM Templates GROUP BY Template_Type_Code)",
        "SELECT TOP 1 WITH TIES Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC",
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) = (SELECT COUNT(*) FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT Template_Type_Code, COUNT(*) AS NumTemplates FROM Templates GROUP BY Template_Type_Code HAVING NumTemplates = (SELECT MAX(NumTemplates) FROM (SELECT COUNT(*) AS NumTemplates FROM Templates GROUP BY Template_Type_Code) AS Counts)",
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) = (SELECT MAX(template_count) FROM (SELECT COUNT(Template_ID) AS template_count FROM Templates GROUP BY Template_Type_Code) AS subquery)"
      ]
    ]
  },
  {
    "id": 332,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code HAVING COUNT(T2.Template_ID) = (SELECT MAX(template_count) FROM (SELECT COUNT(Template_ID) AS template_count FROM Templates GROUP BY Template_Type_Code) AS subquery)",
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT TOP 1 Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC",
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) = (SELECT MAX(COUNT(Template_ID)) FROM Templates GROUP BY Template_Type_Code)",
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Code IN (SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Templates GROUP BY Template_Type_Code))",
        "SELECT Template_Type_Code FROM (SELECT Template_Type_Code, COUNT(*) AS Count FROM Templates GROUP BY Template_Type_Code) AS Temp WHERE Count = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM Templates GROUP BY Template_Type_Code) AS Temp2)",
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM Templates GROUP BY Template_Type_Code)",
        "WITH CTE AS (SELECT Template_Type_Code, COUNT(*) AS NumTemplates FROM Templates GROUP BY Template_Type_Code) SELECT Template_Type_Code FROM CTE WHERE NumTemplates = (SELECT MAX(NumTemplates) FROM CTE)",
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) = (SELECT MAX(template_count) FROM (SELECT Template_Type_Code, COUNT(Template_ID) AS template_count FROM Templates GROUP BY Template_Type_Code) AS subquery)",
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(Template_ID) DESC FETCH FIRST 1 ROWS ONLY"
      ]
    ]
  },
  {
    "id": 333,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3",
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code HAVING COUNT(T2.Template_ID) < 3",
        "SELECT DISTINCT T1.Template_Type_Code FROM Ref_Template_Types AS T1 INNER JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code HAVING COUNT(T2.Template_ID) < 3",
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Code IN (SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < 3)",
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 LEFT JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code HAVING COUNT(T2.Template_ID) < 3",
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1, Templates AS T2 WHERE T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code HAVING COUNT(T2.Template_ID) < 3",
        "SELECT Template_Type_Code FROM (SELECT Template_Type_Code, COUNT(*) AS Template_Count FROM Templates GROUP BY Template_Type_Code) AS SubQuery WHERE Template_Count < 3",
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code HAVING COUNT(DISTINCT T2.Template_ID) < 3",
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 WHERE EXISTS (SELECT Template_Type_Code FROM Templates WHERE Template_Type_Code = T1.Template_Type_Code GROUP BY Template_Type_Code HAVING COUNT(*) < 3)",
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Code IN (SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3)"
      ]
    ]
  },
  {
    "id": 334,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < 3)",
        "SELECT R.Template_Type_Code FROM Ref_Template_Types R JOIN Templates T ON R.Template_Type_Code = T.Template_Type_Code GROUP BY R.Template_Type_Code HAVING COUNT(T.Template_ID) < 3",
        "SELECT DISTINCT R.Template_Type_Code FROM Ref_Template_Types R INNER JOIN Templates T ON R.Template_Type_Code = T.Template_Type_Code GROUP BY R.Template_Type_Code HAVING COUNT(T.Template_ID) < 3",
        "SELECT R.Template_Type_Code FROM Ref_Template_Types R WHERE (SELECT COUNT(*) FROM Templates T WHERE T.Template_Type_Code = R.Template_Type_Code) < 3",
        "SELECT Template_Type_Code FROM (SELECT Template_Type_Code, COUNT(*) AS Template_Count FROM Templates GROUP BY Template_Type_Code) AS SubQuery WHERE Template_Count < 3",
        "SELECT R.Template_Type_Code FROM Ref_Template_Types R LEFT JOIN Templates T ON R.Template_Type_Code = T.Template_Type_Code GROUP BY R.Template_Type_Code HAVING COUNT(T.Template_ID) < 3",
        "SELECT R.Template_Type_Code FROM Ref_Template_Types R WHERE EXISTS (SELECT Template_Type_Code FROM Templates T WHERE R.Template_Type_Code = T.Template_Type_Code GROUP BY T.Template_Type_Code HAVING COUNT(T.Template_ID) < 3)",
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < 3",
        "SELECT R.Template_Type_Code FROM Ref_Template_Types R, Templates T WHERE R.Template_Type_Code = T.Template_Type_Code GROUP BY R.Template_Type_Code HAVING COUNT(T.Template_ID) < 3",
        "SELECT Template_Type_Code FROM Templates T GROUP BY Template_Type_Code HAVING COUNT(*) < 3"
      ]
    ]
  },
  {
    "id": 335,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT MIN(Version_Number) AS MinVersion, Template_Type_Code FROM Templates GROUP BY Template_Type_Code",
        "SELECT Template_Type_Code, MIN(Version_Number) FROM Templates GROUP BY Template_Type_Code",
        "SELECT T1.Template_Type_Code, MIN(T1.Version_Number) AS MinVersion FROM Templates AS T1 GROUP BY T1.Template_Type_Code",
        "SELECT a.Template_Type_Code, a.MinVersion FROM (SELECT Template_Type_Code, MIN(Version_Number) AS MinVersion FROM Templates GROUP BY Template_Type_Code) a",
        "SELECT Template_Type_Code, Version_Number FROM Templates WHERE Version_Number IN (SELECT MIN(Version_Number) FROM Templates GROUP BY Template_Type_Code)",
        "SELECT DISTINCT Template_Type_Code, MIN(Version_Number) OVER (PARTITION BY Template_Type_Code) AS MinVersion FROM Templates",
        "SELECT Template_Type_Code, MIN(Version_Number) AS SmallestVersion FROM Templates GROUP BY Template_Type_Code ORDER BY SmallestVersion",
        "WITH MinVersions AS (SELECT Template_Type_Code, MIN(Version_Number) AS MinVersion FROM Templates GROUP BY Template_Type_Code) SELECT Template_Type_Code, MinVersion FROM MinVersions",
        "SELECT Template_Type_Code, Version_Number AS MinVersion FROM Templates WHERE (Template_Type_Code, Version_Number) IN (SELECT Template_Type_Code, MIN(Version_Number) FROM Templates GROUP BY Template_Type_Code)",
        "SELECT t.Template_Type_Code, MIN(t.Version_Number) FROM Templates t GROUP BY t.Template_Type_Code HAVING MIN(t.Version_Number) = (SELECT MIN(Version_Number) FROM Templates WHERE Template_Type_Code = t.Template_Type_Code)"
      ]
    ]
  },
  {
    "id": 336,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT MIN(Version_Number) AS Lowest_Version, Template_Type_Code FROM Templates GROUP BY Template_Type_Code",
        "SELECT Template_Type_Code, MIN(Version_Number) AS Min_Version FROM Templates GROUP BY Template_Type_Code",
        "SELECT t.Template_Type_Code, MIN(t.Version_Number) AS MinVersion FROM Templates t GROUP BY t.Template_Type_Code",
        "SELECT Template_Type_Code, MIN(Version_Number) FROM Templates GROUP BY Template_Type_Code",
        "SELECT a.Template_Type_Code, MIN(a.Version_Number) FROM Templates AS a GROUP BY a.Template_Type_Code",
        "SELECT MIN(Version_Number), Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Template_Type_Code",
        "SELECT Template_Type_Code, MIN(Version_Number) FROM Templates GROUP BY Template_Type_Code ORDER BY MIN(Version_Number)",
        "SELECT DISTINCT Template_Type_Code, MIN(Version_Number) OVER (PARTITION BY Template_Type_Code) AS MinVersion FROM Templates",
        "SELECT Template_Type_Code, Version_Number FROM (SELECT Template_Type_Code, Version_Number, RANK() OVER (PARTITION BY Template_Type_Code ORDER BY Version_Number ASC) AS rk FROM Templates) sub WHERE sub.rk = 1",
        "SELECT Template_Type_Code, MIN(Version_Number) AS MinimumVersion FROM Templates GROUP BY Template_Type_Code HAVING MIN(Version_Number) IS NOT NULL"
      ]
    ]
  },
  {
    "id": 337,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT T.Template_Type_Code FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID WHERE D.Document_Name = 'Data base'",
        "SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents WHERE Document_Name = 'Data base')",
        "SELECT t.Template_Type_Code FROM Templates t, Documents d WHERE t.Template_ID = d.Template_ID AND d.Document_Name = 'Data base'",
        "SELECT Templates.Template_Type_Code FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = 'Data base'",
        "SELECT Template_Type_Code FROM Templates WHERE Template_ID = (SELECT Template_ID FROM Documents WHERE Document_Name = 'Data base')",
        "SELECT T.Template_Type_Code FROM Templates AS T JOIN Documents AS D ON T.Template_ID = D.Template_ID WHERE D.Document_Name = 'Data base'",
        "SELECT Template_Type_Code FROM Templates, Documents WHERE Templates.Template_ID = Documents.Template_ID AND Documents.Document_Name = 'Data base'",
        "SELECT DISTINCT T.Template_Type_Code FROM Templates T INNER JOIN Documents D ON T.Template_ID = D.Template_ID WHERE D.Document_Name = 'Data base'",
        "SELECT T.Template_Type_Code FROM Templates T, Documents D WHERE T.Template_ID = D.Template_ID AND D.Document_Name = 'Data base'",
        "SELECT Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = 'Data base'"
      ]
    ]
  },
  {
    "id": 338,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT T.Template_Type_Code FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID WHERE D.Document_Name = 'Data base'",
        "SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents WHERE Document_Name = 'Data base')",
        "SELECT DISTINCT T.Template_Type_Code FROM Templates AS T, Documents AS D WHERE T.Template_ID = D.Template_ID AND D.Document_Name = 'Data base'",
        "SELECT T.Template_Type_Code FROM Templates T INNER JOIN Documents D ON T.Template_ID = D.Template_ID AND D.Document_Name = 'Data base'",
        "SELECT Template_Type_Code FROM Templates WHERE Template_ID = (SELECT Template_ID FROM Documents WHERE Document_Name = 'Data base')",
        "SELECT T.Template_Type_Code FROM Templates T, Documents D WHERE T.Template_ID = D.Template_ID AND D.Document_Name LIKE 'Data base'",
        "SELECT T.Template_Type_Code FROM Templates T WHERE EXISTS (SELECT 1 FROM Documents D WHERE D.Template_ID = T.Template_ID AND D.Document_Name = 'Data base')",
        "SELECT Template_Type_Code FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = 'Data base'",
        "SELECT T.Template_Type_Code FROM Templates T WHERE T.Template_ID IN (SELECT D.Template_ID FROM Documents D WHERE D.Document_Name = 'Data base')",
        "SELECT T.Template_Type_Code FROM Templates T LEFT JOIN Documents D ON T.Template_ID = D.Template_ID WHERE D.Document_Name = 'Data base'"
      ]
    ]
  },
  {
    "id": 339,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT D.Document_Name FROM Documents D JOIN Templates T ON D.Template_ID = T.Template_ID WHERE T.Template_Type_Code = 'BK'",
        "SELECT Document_Name FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK'",
        "SELECT doc.Document_Name FROM Documents doc, Templates temp WHERE doc.Template_ID = temp.Template_ID AND temp.Template_Type_Code = 'BK'",
        "SELECT Document_Name FROM Documents, Templates WHERE Documents.Template_ID = Templates.Template_ID AND Templates.Template_Type_Code = 'BK'",
        "SELECT D.Document_Name FROM Documents AS D INNER JOIN Templates AS T ON D.Template_ID = T.Template_ID WHERE T.Template_Type_Code = 'BK'",
        "SELECT Document_Name FROM Documents JOIN Templates USING (Template_ID) WHERE Template_Type_Code = 'BK'",
        "SELECT DISTINCT Document_Name FROM Documents D JOIN Templates T ON D.Template_ID = T.Template_ID WHERE T.Template_Type_Code = 'BK'",
        "SELECT D.Document_Name FROM Documents D, Templates T WHERE D.Template_ID = T.Template_ID AND T.Template_Type_Code = 'BK'",
        "SELECT Document_Name FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'BK')",
        "SELECT D.Document_Name FROM Documents D LEFT JOIN Templates T ON D.Template_ID = T.Template_ID WHERE T.Template_Type_Code = 'BK'"
      ]
    ]
  },
  {
    "id": 340,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT D.Document_Name FROM Documents D JOIN Templates T ON D.Template_ID = T.Template_ID WHERE T.Template_Type_Code = 'BK'",
        "SELECT Document_Name FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'BK')",
        "SELECT doc.Document_Name FROM Documents doc INNER JOIN Templates temp ON doc.Template_ID = temp.Template_ID WHERE temp.Template_Type_Code = 'BK'",
        "SELECT Document_Name FROM Documents, Templates WHERE Documents.Template_ID = Templates.Template_ID AND Templates.Template_Type_Code = 'BK'",
        "SELECT D.Document_Name FROM Documents AS D, Templates AS T WHERE D.Template_ID = T.Template_ID AND T.Template_Type_Code = 'BK'",
        "SELECT Document_Name FROM Documents D INNER JOIN Templates T ON D.Template_ID = T.Template_ID AND T.Template_Type_Code = 'BK'",
        "SELECT DISTINCT Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK'",
        "SELECT D.Document_Name FROM Documents D, Templates T WHERE D.Template_ID = T.Template_ID AND T.Template_Type_Code = 'BK'",
        "SELECT Document_Name FROM Documents WHERE EXISTS (SELECT 1 FROM Templates WHERE Templates.Template_ID = Documents.Template_ID AND Templates.Template_Type_Code = 'BK')",
        "SELECT D.Document_Name FROM Documents D JOIN Templates T ON D.Template_ID = T.Template_ID AND T.Template_Type_Code = 'BK' ORDER BY D.Document_Name"
      ]
    ]
  },
  {
    "id": 341,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT T.Template_Type_Code, COUNT(D.Document_ID) AS NumberOfDocuments FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_Type_Code",
        "SELECT Template_Type_Code, COUNT(Document_ID) AS DocumentCount FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Template_Type_Code",
        "SELECT ref.Template_Type_Code, COUNT(doc.Document_ID) FROM Templates tpl INNER JOIN Documents doc ON tpl.Template_ID = doc.Template_ID JOIN Ref_Template_Types ref ON tpl.Template_Type_Code = ref.Template_Type_Code GROUP BY ref.Template_Type_Code",
        "SELECT T.Template_Type_Code, COUNT(*) AS DocCount FROM Templates AS T LEFT JOIN Documents AS D ON T.Template_ID = D.Template_ID GROUP BY T.Template_Type_Code",
        "SELECT Template_Type_Code, COUNT(Documents.Template_ID) FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_Type_Code",
        "SELECT T.Template_Type_Code, COUNT(D.Document_ID) FROM Templates T, Documents D WHERE T.Template_ID = D.Template_ID GROUP BY T.Template_Type_Code",
        "SELECT T.Template_Type_Code, COUNT(D.Document_ID) AS TotalDocuments FROM Templates T LEFT OUTER JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_Type_Code",
        "SELECT Template_Type_Code, COUNT(Document_ID) AS NumberOfDocs FROM Templates JOIN Documents USING (Template_ID) GROUP BY Template_Type_Code",
        "SELECT T.Template_Type_Code, COUNT(D.Document_ID) AS Document_Count FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_Type_Code ORDER BY T.Template_Type_Code",
        "SELECT T.Template_Type_Code, COUNT(D.Document_ID) AS CountOfDocuments FROM Templates T INNER JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_Type_Code HAVING COUNT(D.Document_ID) > 0"
      ]
    ]
  },
  {
    "id": 342,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT R.Template_Type_Code, COUNT(D.Document_ID) AS Document_Count FROM Ref_Template_Types R JOIN Templates T ON R.Template_Type_Code = T.Template_Type_Code JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY R.Template_Type_Code",
        "SELECT Ref_Template_Types.Template_Type_Code, COUNT(Documents.Document_ID) AS Num_Documents FROM Ref_Template_Types INNER JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code",
        "SELECT rtt.Template_Type_Code, COUNT(doc.Document_ID) FROM Ref_Template_Types rtt JOIN Templates tpl ON rtt.Template_Type_Code = tpl.Template_Type_Code JOIN Documents doc ON tpl.Template_ID = doc.Template_ID GROUP BY rtt.Template_Type_Code",
        "SELECT t.Template_Type_Code, COUNT(*) AS Document_Count FROM Templates t LEFT JOIN Documents d ON t.Template_ID = d.Template_ID JOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code GROUP BY t.Template_Type_Code",
        "SELECT r.Template_Type_Code, COUNT(d.Document_ID) FROM Ref_Template_Types AS r LEFT JOIN Templates AS t ON r.Template_Type_Code = t.Template_Type_Code LEFT JOIN Documents AS d ON t.Template_ID = d.Template_ID GROUP BY r.Template_Type_Code",
        "SELECT Template_Type_Code, COUNT(Document_ID) AS Total_Documents FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Template_Type_Code",
        "SELECT rtt.Template_Type_Code, COUNT(doc.Document_ID) AS Document_Count FROM Ref_Template_Types rtt, Templates tpl, Documents doc WHERE rtt.Template_Type_Code = tpl.Template_Type_Code AND tpl.Template_ID = doc.Template_ID GROUP BY rtt.Template_Type_Code",
        "SELECT DISTINCT r.Template_Type_Code, (SELECT COUNT(*) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = r.Template_Type_Code) AS Document_Count FROM Ref_Template_Types r",
        "SELECT r.Template_Type_Code, IFNULL(COUNT(d.Document_ID), 0) AS Document_Count FROM Ref_Template_Types r LEFT JOIN Templates t ON r.Template_Type_Code = t.Template_Type_Code LEFT JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY r.Template_Type_Code",
        "SELECT Template_Type_Code, COUNT(Document_ID) FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Template_Type_Code"
      ]
    ]
  },
  {
    "id": 343,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code HAVING COUNT(*) = (SELECT MAX(doc_count) FROM (SELECT COUNT(*) AS doc_count FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_Type_Code) AS subquery)",
        "SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Documents GROUP BY Template_ID) AS counts))",
        "SELECT T.Template_Type_Code FROM Templates T INNER JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_Type_Code HAVING COUNT(D.Document_ID) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Documents GROUP BY Template_ID) AS Sub)",
        "SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents GROUP BY Template_ID ORDER BY COUNT(*) DESC LIMIT 1)",
        "WITH CTE AS (SELECT Template_Type_Code, COUNT(*) AS NumDocs FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Template_Type_Code) SELECT Template_Type_Code FROM CTE WHERE NumDocs = (SELECT MAX(NumDocs) FROM CTE)",
        "SELECT TOP 1 WITH TIES Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC",
        "SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(Document_ID) = (SELECT MAX(Cnt) FROM (SELECT COUNT(Document_ID) AS Cnt FROM Documents GROUP BY Template_ID) T))",
        "SELECT Template_Type_Code FROM (SELECT Template_Type_Code, COUNT(*) AS Count FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Template_Type_Code) AS SubQuery WHERE Count = (SELECT MAX(Count) FROM SubQuery)",
        "SELECT Template_Type_Code FROM Templates JOIN (SELECT Template_ID, COUNT(*) AS Count FROM Documents GROUP BY Template_ID) AS DocCounts ON Templates.Template_ID = DocCounts.Template_ID WHERE Count = (SELECT MAX(Count) FROM DocCounts)",
        "SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM Documents GROUP BY Template_ID))"
      ]
    ]
  },
  {
    "id": 344,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT T2.Template_Type_Code FROM Templates AS T2 JOIN Documents AS T1 ON T2.Template_ID = T1.Template_ID GROUP BY T2.Template_Type_Code HAVING COUNT(*) = (SELECT MAX(usage_count) FROM (SELECT COUNT(*) AS usage_count FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T2.Template_Type_Code) AS subquery)",
        "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Documents GROUP BY Template_ID) AS counts)))",
        "SELECT R.Template_Type_Code FROM Ref_Template_Types R JOIN Templates T ON R.Template_Type_Code = T.Template_Type_Code WHERE T.Template_ID IN (SELECT D.Template_ID FROM Documents D GROUP BY D.Template_ID HAVING COUNT(D.Document_ID) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Documents GROUP BY Template_ID) AS Sub))",
        "SELECT Template_Type_Code FROM (SELECT T.Template_Type_Code, COUNT(*) AS Count FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_Type_Code) AS Sub WHERE Count = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM Documents D JOIN Templates T ON D.Template_ID = T.Template_ID GROUP BY T.Template_Type_Code) AS Sub2)",
        "WITH CTE AS (SELECT T.Template_Type_Code, COUNT(*) AS NumDocs FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_Type_Code) SELECT Template_Type_Code FROM CTE WHERE NumDocs = (SELECT MAX(NumDocs) FROM CTE)",
        "SELECT TOP 1 WITH TIES T.Template_Type_Code FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_Type_Code ORDER BY COUNT(*) DESC",
        "SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents GROUP BY Template_ID ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT T.Template_Type_Code FROM Templates T INNER JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_Type_Code HAVING COUNT(D.Document_ID) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM Documents GROUP BY Template_ID) AS SubQuery)",
        "SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(Document_ID) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Documents GROUP BY Template_ID) AS SubQuery))",
        "SELECT DISTINCT T.Template_Type_Code FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID WHERE (SELECT COUNT(*) FROM Documents WHERE Template_ID = T.Template_ID) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Documents GROUP BY Template_ID) AS SubQuery)"
      ]
    ]
  },
  {
    "id": 345,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT DISTINCT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents))",
        "SELECT rtt.Template_Type_Code FROM Ref_Template_Types rtt LEFT JOIN Templates t ON rtt.Template_Type_Code = t.Template_Type_Code LEFT JOIN Documents d ON t.Template_ID = d.Template_ID WHERE d.Document_ID IS NULL",
        "SELECT rtt.Template_Type_Code FROM Ref_Template_Types rtt WHERE NOT EXISTS (SELECT 1 FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID WHERE t.Template_Type_Code = rtt.Template_Type_Code)",
        "SELECT Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT DISTINCT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents)",
        "SELECT DISTINCT rtt.Template_Type_Code FROM Ref_Template_Types rtt WHERE rtt.Template_Type_Code NOT IN (SELECT t.Template_Type_Code FROM Templates t INNER JOIN Documents d ON t.Template_ID = d.Template_ID)",
        "SELECT rtt.Template_Type_Code FROM Ref_Template_Types rtt WHERE rtt.Template_Type_Code NOT IN (SELECT t.Template_Type_Code FROM Templates t, Documents d WHERE t.Template_ID = d.Template_ID)",
        "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID)",
        "SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID)",
        "SELECT r.Template_Type_Code FROM Ref_Template_Types r WHERE NOT EXISTS (SELECT NULL FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID WHERE t.Template_Type_Code = r.Template_Type_Code)",
        "SELECT Template_Type_Code FROM Ref_Template_Types rtt WHERE NOT EXISTS (SELECT NULL FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = rtt.Template_Type_Code)"
      ]
    ]
  },
  {
    "id": 346,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT DISTINCT Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID)",
        "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates WHERE EXISTS (SELECT 1 FROM Documents WHERE Templates.Template_ID = Documents.Template_ID))",
        "SELECT Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents)",
        "SELECT rtt.Template_Type_Code FROM Ref_Template_Types rtt LEFT JOIN Templates t ON rtt.Template_Type_Code = t.Template_Type_Code LEFT JOIN Documents d ON t.Template_ID = d.Template_ID WHERE d.Document_ID IS NULL",
        "SELECT Template_Type_Code FROM Ref_Template_Types WHERE NOT EXISTS (SELECT 1 FROM Templates WHERE Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code AND Template_ID IN (SELECT Template_ID FROM Documents))",
        "SELECT DISTINCT rtt.Template_Type_Code FROM Ref_Template_Types rtt WHERE NOT EXISTS (SELECT 1 FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID WHERE t.Template_Type_Code = rtt.Template_Type_Code)",
        "SELECT Template_Type_Code FROM Ref_Template_Types rtt WHERE Template_Type_Code NOT IN (SELECT t.Template_Type_Code FROM Templates t INNER JOIN Documents d ON t.Template_ID = d.Template_ID)",
        "SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates t WHERE EXISTS (SELECT * FROM Documents d WHERE d.Template_ID = t.Template_ID))",
        "SELECT rtt.Template_Type_Code FROM Ref_Template_Types rtt WHERE NOT EXISTS (SELECT NULL FROM Templates t INNER JOIN Documents d ON t.Template_ID = d.Template_ID WHERE t.Template_Type_Code = rtt.Template_Type_Code)",
        "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates t WHERE t.Template_ID IN (SELECT Template_ID FROM Documents))"
      ]
    ]
  },
  {
    "id": 347,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types",
        "SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types",
        "SELECT r.Template_Type_Code, r.Template_Type_Description FROM Ref_Template_Types r",
        "SELECT Template_Type_Code AS Code, Template_Type_Description AS Description FROM Ref_Template_Types",
        "SELECT * FROM Ref_Template_Types",
        "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types ORDER BY Template_Type_Code",
        "SELECT DISTINCT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types",
        "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code IS NOT NULL",
        "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types GROUP BY Template_Type_Code, Template_Type_Description",
        "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types LIMIT 100"
      ]
    ]
  },
  {
    "id": 348,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types",
        "SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types",
        "SELECT Template_Type_Code AS Code, Template_Type_Description AS Description FROM Ref_Template_Types",
        "SELECT * FROM Ref_Template_Types",
        "SELECT r.Template_Type_Code, r.Template_Type_Description FROM Ref_Template_Types r",
        "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types ORDER BY Template_Type_Code",
        "SELECT DISTINCT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types",
        "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code IS NOT NULL",
        "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types GROUP BY Template_Type_Code, Template_Type_Description",
        "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types ORDER BY Template_Type_Description ASC"
      ]
    ]
  },
  {
    "id": 349,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'",
        "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code LIKE 'AD'",
        "SELECT r.Template_Type_Description FROM Ref_Template_Types r WHERE r.Template_Type_Code = 'AD'",
        "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD' LIMIT 1",
        "SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'",
        "SELECT Template_Type_Description AS Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'",
        "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code IN ('AD')",
        "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD' AND Template_Type_Description IS NOT NULL",
        "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD' ORDER BY Template_Type_Description",
        "SELECT TOP 1 Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'"
      ]
    ]
  },
  {
    "id": 350,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'",
        "SELECT rtt.Template_Type_Description FROM Ref_Template_Types rtt WHERE rtt.Template_Type_Code = 'AD'",
        "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code LIKE 'AD'",
        "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD' LIMIT 1",
        "SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'",
        "SELECT TOP 1 Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'",
        "SELECT Template_Type_Description FROM Ref_Template_Types r WHERE r.Template_Type_Code = 'AD'",
        "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code IN ('AD')",
        "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD' FETCH FIRST 1 ROWS ONLY",
        "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD' AND Template_Type_Description IS NOT NULL"
      ]
    ]
  },
  {
    "id": 351,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'",
        "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description LIKE 'Book'",
        "SELECT rtt.Template_Type_Code FROM Ref_Template_Types rtt WHERE rtt.Template_Type_Description = 'Book'",
        "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book' LIMIT 1",
        "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description LIKE '%Book%'",
        "SELECT rtt.Template_Type_Code FROM Ref_Template_Types rtt WHERE rtt.Template_Type_Description LIKE 'Book'",
        "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description IN ('Book')",
        "SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'",
        "SELECT TOP 1 Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'",
        "SELECT Template_Type_Code FROM Ref_Template_Types WHERE UPPER(Template_Type_Description) = UPPER('Book')"
      ]
    ]
  },
  {
    "id": 352,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'",
        "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description LIKE 'Book'",
        "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book' LIMIT 1",
        "SELECT r.Template_Type_Code FROM Ref_Template_Types r WHERE r.Template_Type_Description = 'Book'",
        "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description IN ('Book')",
        "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book' AND Template_Type_Code IS NOT NULL",
        "SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'",
        "SELECT TOP 1 Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'",
        "SELECT Template_Type_Code FROM Ref_Template_Types WHERE LOWER(Template_Type_Description) = 'book'",
        "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description COLLATE UTF8_GENERAL_CI = 'Book'"
      ]
    ]
  },
  {
    "id": 353,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT DISTINCT R.Template_Type_Description FROM Ref_Template_Types R JOIN Templates T ON R.Template_Type_Code = T.Template_Type_Code JOIN Documents D ON T.Template_ID = D.Template_ID",
        "SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents))",
        "SELECT DISTINCT rtt.Template_Type_Description FROM Ref_Template_Types rtt, Templates t, Documents d WHERE rtt.Template_Type_Code = t.Template_Type_Code AND t.Template_ID = d.Template_ID",
        "SELECT DISTINCT description.Template_Type_Description FROM Ref_Template_Types AS description INNER JOIN Templates AS temp ON description.Template_Type_Code = temp.Template_Type_Code INNER JOIN Documents AS doc ON temp.Template_ID = doc.Template_ID",
        "SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code IN (SELECT T.Template_Type_Code FROM Templates T INNER JOIN Documents D ON T.Template_ID = D.Template_ID)",
        "SELECT DISTINCT tt.Template_Type_Description FROM Ref_Template_Types tt INNER JOIN Templates t ON tt.Template_Type_Code = t.Template_Type_Code INNER JOIN Documents d ON t.Template_ID = d.Template_ID",
        "SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types RTT JOIN Templates T ON RTT.Template_Type_Code = T.Template_Type_Code WHERE EXISTS (SELECT 1 FROM Documents D WHERE D.Template_ID = T.Template_ID)",
        "SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types RTT WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents))",
        "SELECT DISTINCT tt.Template_Type_Description FROM Ref_Template_Types tt JOIN Templates t ON tt.Template_Type_Code = t.Template_Type_Code JOIN Documents d ON t.Template_ID = d.Template_ID",
        "SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types INNER JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID"
      ]
    ]
  },
  {
    "id": 354,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT DISTINCT T.Template_Details FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID",
        "SELECT DISTINCT Template_Details FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents)",
        "SELECT DISTINCT Template_Details FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID",
        "SELECT DISTINCT T1.Template_Details FROM Templates AS T1, Documents AS T2 WHERE T1.Template_ID = T2.Template_ID",
        "SELECT DISTINCT T.Template_Details FROM Templates T WHERE EXISTS (SELECT 1 FROM Documents D WHERE D.Template_ID = T.Template_ID)",
        "SELECT DISTINCT Template_Details FROM Templates WHERE Template_ID IN (SELECT DISTINCT Template_ID FROM Documents)",
        "SELECT DISTINCT T.Template_Details FROM Templates T INNER JOIN Documents D ON T.Template_ID = D.Template_ID",
        "SELECT DISTINCT Template_Details FROM Templates T1 WHERE T1.Template_ID IN (SELECT D.Template_ID FROM Documents D)",
        "SELECT DISTINCT T.Template_Details FROM Templates AS T JOIN Documents AS D ON T.Template_ID = D.Template_ID",
        "SELECT DISTINCT Template_Details FROM Templates WHERE EXISTS (SELECT * FROM Documents WHERE Documents.Template_ID = Templates.Template_ID)"
      ]
    ]
  },
  {
    "id": 355,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation'",
        "SELECT T.Template_ID FROM Templates AS T INNER JOIN Ref_Template_Types AS R ON T.Template_Type_Code = R.Template_Type_Code WHERE R.Template_Type_Description = 'Presentation'",
        "SELECT Template_ID FROM Templates, Ref_Template_Types WHERE Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code AND Ref_Template_Types.Template_Type_Description = 'Presentation'",
        "SELECT DISTINCT T.Template_ID FROM Templates T JOIN Ref_Template_Types R ON T.Template_Type_Code = R.Template_Type_Code WHERE R.Template_Type_Description = 'Presentation'",
        "SELECT T.Template_ID FROM Templates T, Ref_Template_Types R WHERE T.Template_Type_Code = R.Template_Type_Code AND R.Template_Type_Description = 'Presentation'",
        "SELECT Template_ID FROM Templates WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation')",
        "SELECT T.Template_ID FROM Templates T WHERE EXISTS (SELECT 1 FROM Ref_Template_Types R WHERE T.Template_Type_Code = R.Template_Type_Code AND R.Template_Type_Description = 'Presentation')",
        "SELECT T.Template_ID FROM Templates T WHERE T.Template_Type_Code = ANY (SELECT R.Template_Type_Code FROM Ref_Template_Types R WHERE R.Template_Type_Description = 'Presentation')",
        "SELECT T.Template_ID FROM Templates T LEFT JOIN Ref_Template_Types R ON T.Template_Type_Code = R.Template_Type_Code WHERE R.Template_Type_Description = 'Presentation'",
        "SELECT Template_ID FROM Templates INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code AND Ref_Template_Types.Template_Type_Description = 'Presentation'"
      ]
    ]
  },
  {
    "id": 356,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Template_ID FROM Templates WHERE Template_Details LIKE '%Presentation%'",
        "SELECT Template_ID FROM Templates WHERE Template_Details = 'Presentation'",
        "SELECT T.Template_ID FROM Templates T WHERE T.Template_Details LIKE '%Presentation%'",
        "SELECT Template_ID FROM Templates WHERE INSTR(Template_Details, 'Presentation') > 0",
        "SELECT Template_ID FROM Templates WHERE Template_Details CONTAINS 'Presentation'",
        "SELECT DISTINCT Template_ID FROM Templates WHERE Template_Details LIKE '%Presentation%'",
        "SELECT Template_ID FROM Templates WHERE CHARINDEX('Presentation', Template_Details) > 0",
        "SELECT Template_ID FROM Templates WHERE Template_Details LIKE 'Presentation%'",
        "SELECT Template_ID FROM Templates WHERE Template_Details LIKE '%Presentation%' AND Template_Details NOT LIKE '%Not Presentation%'",
        "SELECT Template_ID FROM Templates WHERE LOWER(Template_Details) LIKE '%presentation%'"
      ]
    ]
  },
  {
    "id": 357,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Paragraphs",
        "SELECT COUNT(Paragraph_ID) FROM Paragraphs",
        "SELECT COUNT(Paragraph_ID) AS TotalParagraphs FROM Paragraphs",
        "SELECT COUNT(*) AS Total FROM Paragraphs",
        "SELECT COUNT(1) FROM Paragraphs",
        "SELECT COUNT(Paragraph_Text) FROM Paragraphs",
        "SELECT COUNT(*) AS ParagraphCount FROM Paragraphs",
        "SELECT COUNT(Paragraph_ID) FROM Paragraphs WHERE Paragraph_ID IS NOT NULL",
        "SELECT COUNT(DISTINCT Paragraph_ID) FROM Paragraphs",
        "SELECT COUNT(*) FROM Paragraphs WHERE Paragraph_Text IS NOT NULL"
      ]
    ]
  },
  {
    "id": 358,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Paragraphs",
        "SELECT COUNT(Paragraph_ID) FROM Paragraphs",
        "SELECT COUNT(1) FROM Paragraphs",
        "SELECT COUNT(Paragraph_ID) AS NumberOfParagraphs FROM Paragraphs",
        "SELECT COUNT(*) AS TotalParagraphs FROM Paragraphs",
        "SELECT COUNT(Paragraph_ID) FROM Paragraphs WHERE Paragraph_ID IS NOT NULL",
        "SELECT COUNT(*) FROM Paragraphs WHERE Paragraph_ID > 0",
        "SELECT COUNT(DISTINCT Paragraph_ID) FROM Paragraphs",
        "SELECT COUNT(Paragraph_Text) FROM Paragraphs",
        "SELECT COUNT(*) FROM Paragraphs GROUP BY Document_ID"
      ]
    ]
  },
  {
    "id": 359,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Paragraphs WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show')",
        "SELECT COUNT(Paragraph_ID) AS NumberOfParagraphs FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show'",
        "SELECT COUNT(P.Paragraph_ID) FROM Paragraphs P INNER JOIN Documents D ON P.Document_ID = D.Document_ID WHERE D.Document_Name = 'Summer Show'",
        "SELECT COUNT(*) FROM Paragraphs P, Documents D WHERE P.Document_ID = D.Document_ID AND D.Document_Name = 'Summer Show'",
        "SELECT COUNT(1) FROM Paragraphs INNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show'",
        "SELECT COUNT(DISTINCT Paragraphs.Paragraph_ID) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show'",
        "SELECT COUNT(*) FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show')",
        "SELECT COUNT(*) AS TotalParagraphs FROM Paragraphs P JOIN Documents D ON P.Document_ID = D.Document_ID WHERE D.Document_Name = 'Summer Show'",
        "SELECT COUNT(Paragraph_ID) FROM Paragraphs WHERE EXISTS (SELECT 1 FROM Documents WHERE Documents.Document_ID = Paragraphs.Document_ID AND Documents.Document_Name = 'Summer Show')",
        "SELECT COUNT(*) FROM Paragraphs P LEFT JOIN Documents D ON P.Document_ID = D.Document_ID WHERE D.Document_Name = 'Summer Show'"
      ]
    ]
  },
  {
    "id": 360,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Paragraphs WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show')",
        "SELECT COUNT(Paragraph_ID) AS NumberOfParagraphs FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show'",
        "SELECT COUNT(P.Paragraph_ID) FROM Paragraphs P INNER JOIN Documents D ON P.Document_ID = D.Document_ID WHERE D.Document_Name = 'Summer Show'",
        "SELECT COUNT(*) FROM Paragraphs P, Documents D WHERE P.Document_ID = D.Document_ID AND D.Document_Name = 'Summer Show'",
        "SELECT COUNT(1) FROM Paragraphs INNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show'",
        "SELECT COUNT(DISTINCT Paragraphs.Paragraph_ID) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show'",
        "SELECT COUNT(*) FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show')",
        "SELECT COUNT(Paragraph_ID) FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show'",
        "SELECT COUNT(*) FROM Paragraphs p INNER JOIN Documents d ON p.Document_ID = d.Document_ID AND d.Document_Name = 'Summer Show'",
        "SELECT COUNT(*) FROM (SELECT Paragraph_ID FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show') AS SubQuery"
      ]
    ]
  },
  {
    "id": 361,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea'",
        "SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details FROM Paragraphs WHERE Paragraph_Text = 'Korea'",
        "SELECT Paragraphs.* FROM Paragraphs WHERE Paragraph_Text LIKE 'Korea'",
        "SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'",
        "SELECT Paragraph_ID, Document_ID, Paragraph_Text FROM Paragraphs WHERE Paragraph_Text = 'Korea'",
        "SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'",
        "SELECT * FROM Paragraphs WHERE Paragraph_Text IN ('Korea')",
        "SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea '",
        "SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details FROM Paragraphs WHERE Paragraph_Text = 'Korea '",
        "SELECT * FROM Paragraphs WHERE TRIM(Paragraph_Text) = 'Korea'"
      ]
    ]
  },
  {
    "id": 362,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'",
        "SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'",
        "SELECT Paragraphs.* FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'",
        "SELECT * FROM Paragraphs WHERE INSTR(Paragraph_Text, 'Korea') > 0",
        "SELECT * FROM Paragraphs WHERE Paragraph_Text CONTAINS 'Korea'",
        "SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details FROM Paragraphs WHERE CONTAINS(Paragraph_Text, 'Korea')",
        "SELECT * FROM Paragraphs WHERE Paragraph_Text MATCH 'Korea'",
        "SELECT * FROM Paragraphs WHERE Paragraph_Text REGEXP '.*Korea.*'",
        "SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details FROM Paragraphs WHERE Paragraph_Text REGEXP 'Korea'",
        "SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%' ESCAPE '\\'"
      ]
    ]
  },
  {
    "id": 363,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT P.Paragraph_ID, P.Paragraph_Text FROM Paragraphs P JOIN Documents D ON P.Document_ID = D.Document_ID WHERE D.Document_Name = 'Welcome to NY'",
        "SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs INNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Welcome to NY'",
        "SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p, Documents d WHERE p.Document_ID = d.Document_ID AND d.Document_Name = 'Welcome to NY'",
        "SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs, Documents WHERE Paragraphs.Document_ID = Documents.Document_ID AND Documents.Document_Name = 'Welcome to NY'",
        "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs INNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Welcome to NY'",
        "SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs AS p JOIN Documents AS d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY'",
        "SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Welcome to NY'",
        "SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p INNER JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY'",
        "SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs JOIN Documents USING(Document_ID) WHERE Document_Name = 'Welcome to NY'",
        "SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs p LEFT JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY'"
      ]
    ]
  },
  {
    "id": 364,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT P.Paragraph_ID, P.Paragraph_Text FROM Paragraphs P JOIN Documents D ON P.Document_ID = D.Document_ID WHERE D.Document_Name = 'Welcome to NY'",
        "SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs INNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Welcome to NY'",
        "SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p, Documents d WHERE p.Document_ID = d.Document_ID AND d.Document_Name = 'Welcome to NY'",
        "SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs, Documents WHERE Paragraphs.Document_ID = Documents.Document_ID AND Documents.Document_Name = 'Welcome to NY'",
        "SELECT p.Paragraph_ID AS ID, p.Paragraph_Text AS Text FROM Paragraphs p INNER JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY'",
        "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Welcome to NY'",
        "SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID AND Documents.Document_Name = 'Welcome to NY'",
        "SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID AND d.Document_Name = 'Welcome to NY'",
        "SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs INNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID AND Documents.Document_Name = 'Welcome to NY'",
        "SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p INNER JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY'"
      ]
    ]
  },
  {
    "id": 365,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT P.Paragraph_Text FROM Paragraphs P JOIN Documents D ON P.Document_ID = D.Document_ID WHERE D.Document_Name = 'Customer reviews'",
        "SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name = 'Customer reviews')",
        "SELECT p.Paragraph_Text FROM Paragraphs p INNER JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Customer reviews'",
        "SELECT Paragraph_Text FROM Paragraphs, Documents WHERE Paragraphs.Document_ID = Documents.Document_ID AND Documents.Document_Name = 'Customer reviews'",
        "SELECT para.Paragraph_Text FROM Paragraphs AS para JOIN Documents AS doc ON para.Document_ID = doc.Document_ID WHERE doc.Document_Name = 'Customer reviews'",
        "SELECT Paragraph_Text FROM Paragraphs WHERE EXISTS (SELECT 1 FROM Documents WHERE Documents.Document_ID = Paragraphs.Document_ID AND Documents.Document_Name = 'Customer reviews')",
        "SELECT Paragraph_Text FROM Paragraphs INNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews'",
        "SELECT p.Paragraph_Text FROM Paragraphs p, Documents d WHERE p.Document_ID = d.Document_ID AND d.Document_Name = 'Customer reviews'",
        "SELECT Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID AND d.Document_Name = 'Customer reviews'",
        "SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Customer reviews')"
      ]
    ]
  },
  {
    "id": 366,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT P.Paragraph_Text FROM Paragraphs P JOIN Documents D ON P.Document_ID = D.Document_ID WHERE D.Document_Name = 'Customer reviews'",
        "SELECT Paragraph_Text FROM Paragraphs INNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews'",
        "SELECT p.Paragraph_Text FROM Paragraphs p, Documents d WHERE p.Document_ID = d.Document_ID AND d.Document_Name = 'Customer reviews'",
        "SELECT Paragraph_Text FROM Paragraphs, Documents WHERE Paragraphs.Document_ID = Documents.Document_ID AND Documents.Document_Name = 'Customer reviews'",
        "SELECT Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID AND Documents.Document_Name = 'Customer reviews'",
        "SELECT p.Paragraph_Text FROM Paragraphs AS p INNER JOIN Documents AS d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Customer reviews'",
        "SELECT Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Customer reviews'",
        "SELECT p.Paragraph_Text FROM Paragraphs p INNER JOIN Documents d ON p.Document_ID = d.Document_ID AND d.Document_Name = 'Customer reviews'",
        "SELECT Paragraph_Text FROM Paragraphs INNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID AND Documents.Document_Name = 'Customer reviews'",
        "SELECT Paragraph_Text FROM Paragraphs p, Documents d WHERE p.Document_ID = d.Document_ID AND d.Document_Name = 'Customer reviews'"
      ]
    ]
  },
  {
    "id": 367,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT D.Document_ID, COUNT(P.Paragraph_ID) AS NumberOfParagraphs FROM Documents D LEFT JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID ORDER BY D.Document_ID",
        "SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS ParagraphCount FROM Documents INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID ASC",
        "SELECT doc.Document_ID, COUNT(para.Paragraph_ID) AS TotalParagraphs FROM Documents doc JOIN Paragraphs para ON doc.Document_ID = para.Document_ID GROUP BY doc.Document_ID ORDER BY doc.Document_ID",
        "SELECT d.Document_ID, COUNT(p.Paragraph_ID) FROM Documents d, Paragraphs p WHERE d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY d.Document_ID",
        "SELECT Document_ID, COUNT(Paragraph_ID) AS NumParagraphs FROM Documents JOIN Paragraphs USING (Document_ID) GROUP BY Document_ID ORDER BY Document_ID",
        "SELECT a.Document_ID, COUNT(b.Paragraph_ID) AS ParagraphsCount FROM Documents a LEFT JOIN Paragraphs b ON a.Document_ID = b.Document_ID GROUP BY a.Document_ID ORDER BY a.Document_ID ASC",
        "SELECT `Document_ID`, COUNT(`Paragraph_ID`) AS `CountOfParagraphs` FROM `Documents` LEFT JOIN `Paragraphs` ON `Documents`.`Document_ID` = `Paragraphs`.`Document_ID` GROUP BY `Document_ID` ORDER BY `Document_ID`",
        "SELECT Document_ID, COUNT(Paragraph_ID) AS ParagraphsTotal FROM Documents LEFT OUTER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Document_ID ORDER BY Document_ID",
        "SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Total_Paragraphs FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID",
        "SELECT D.Document_ID, COUNT(P.Paragraph_ID) AS Paragraphs_Number FROM Documents AS D JOIN Paragraphs AS P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID ORDER BY D.Document_ID"
      ]
    ]
  },
  {
    "id": 368,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT D.Document_ID, COUNT(P.Paragraph_ID) AS Paragraph_Count FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID ORDER BY D.Document_ID",
        "SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS NumParagraphs FROM Documents INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID ASC",
        "SELECT doc.Document_ID, COUNT(para.Paragraph_ID) AS TotalParagraphs FROM Documents doc, Paragraphs para WHERE doc.Document_ID = para.Document_ID GROUP BY doc.Document_ID ORDER BY doc.Document_ID",
        "SELECT a.Document_ID, COUNT(b.Paragraph_ID) AS ParagraphsCount FROM Documents a LEFT JOIN Paragraphs b ON a.Document_ID = b.Document_ID GROUP BY a.Document_ID ORDER BY a.Document_ID",
        "SELECT Document_ID, COUNT(Paragraph_ID) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Document_ID ORDER BY Document_ID",
        "SELECT d.Document_ID, COUNT(p.Paragraph_ID) FROM Documents d LEFT OUTER JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY d.Document_ID",
        "SELECT `Document_ID`, COUNT(`Paragraph_ID`) AS `Count` FROM `Documents` JOIN `Paragraphs` ON `Documents`.`Document_ID` = `Paragraphs`.`Document_ID` GROUP BY `Document_ID` ORDER BY `Document_ID`",
        "SELECT Document_ID, COUNT(Paragraph_ID) AS ParagraphCount FROM Documents INNER JOIN Paragraphs USING(Document_ID) GROUP BY Document_ID ORDER BY Document_ID",
        "SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS ParagraphCount FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID",
        "SELECT D.Document_ID, COUNT(P.Paragraph_ID) AS ParagraphCount FROM Documents AS D INNER JOIN Paragraphs AS P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID ORDER BY D.Document_ID"
      ]
    ]
  },
  {
    "id": 369,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT D.Document_ID, D.Document_Name, COUNT(P.Paragraph_ID) AS NumberOfParagraphs FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID, D.Document_Name",
        "SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS ParagraphCount FROM Documents INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name",
        "SELECT doc.Document_ID, doc.Document_Name, COUNT(para.Paragraph_ID) AS TotalParagraphs FROM Documents doc LEFT JOIN Paragraphs para ON doc.Document_ID = para.Document_ID GROUP BY doc.Document_ID, doc.Document_Name",
        "SELECT D.Document_ID, D.Document_Name, (SELECT COUNT(*) FROM Paragraphs WHERE Document_ID = D.Document_ID) AS NumParagraphs FROM Documents D",
        "SELECT Documents.Document_ID, Documents.Document_Name, COUNT(*) AS ParagraphsCount FROM Documents, Paragraphs WHERE Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name",
        "SELECT doc_id, doc_name, COUNT(par_id) AS num_paragraphs FROM (SELECT D.Document_ID AS doc_id, D.Document_Name AS doc_name, P.Paragraph_ID AS par_id FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID) GROUP BY doc_id, doc_name",
        "SELECT D.Document_ID, D.Document_Name, COUNT(P.Paragraph_ID) AS ParagraphsTotal FROM Documents D, Paragraphs P WHERE D.Document_ID = P.Document_ID GROUP BY D.Document_ID, D.Document_Name",
        "SELECT D.Document_ID, D.Document_Name, COUNT(P.Paragraph_ID) AS TotalParagraphs FROM Documents D LEFT OUTER JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID, D.Document_Name",
        "SELECT Document_ID, Document_Name, COUNT(Paragraph_ID) AS ParagraphCount FROM Documents JOIN Paragraphs ON Document_ID = Paragraphs.Document_ID GROUP BY Document_ID, Document_Name",
        "SELECT D.Document_ID, D.Document_Name, COUNT(P.Paragraph_ID) FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID, D.Document_Name"
      ]
    ]
  },
  {
    "id": 370,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS Num_Paragraphs FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name",
        "SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS ParagraphCount FROM Documents INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name",
        "SELECT doc.Document_ID, doc.Document_Name, (SELECT COUNT(*) FROM Paragraphs WHERE Document_ID = doc.Document_ID) AS ParagraphsCount FROM Documents doc",
        "SELECT Document_ID, Document_Name, COUNT(Paragraph_ID) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Document_ID, Document_Name",
        "SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) FROM Documents d, Paragraphs p WHERE d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name",
        "SELECT Document_ID AS ID, Document_Name AS Name, (SELECT COUNT(Paragraph_ID) FROM Paragraphs WHERE Document_ID = Documents.Document_ID) AS TotalParagraphs FROM Documents",
        "SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS Paragraphs_Total FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name ORDER BY d.Document_ID",
        "SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraph_ID) AS NumOfParagraphs FROM Documents LEFT OUTER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name",
        "SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS ParagraphCount FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name HAVING COUNT(p.Paragraph_ID) > 0",
        "SELECT Document_ID, Document_Name, COUNT(Paragraph_ID) AS ParagraphsNumber FROM Documents LEFT JOIN Paragraphs ON Document_ID = Paragraphs.Document_ID GROUP BY Document_ID, Document_Name ORDER BY Document_Name ASC"
      ]
    ]
  },
  {
    "id": 371,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2",
        "SELECT p.Document_ID FROM Paragraphs p GROUP BY p.Document_ID HAVING COUNT(p.Paragraph_ID) >= 2",
        "SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(p.Paragraph_ID) >= 2",
        "SELECT Document_ID FROM (SELECT Document_ID, COUNT(*) AS para_count FROM Paragraphs GROUP BY Document_ID) AS subquery WHERE para_count >= 2",
        "SELECT DISTINCT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2",
        "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) > 1",
        "SELECT d.Document_ID FROM Documents d WHERE EXISTS (SELECT 1 FROM Paragraphs p WHERE p.Document_ID = d.Document_ID GROUP BY p.Document_ID HAVING COUNT(p.Paragraph_ID) >= 2)",
        "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) > 1",
        "SELECT Document_ID FROM Paragraphs p GROUP BY p.Document_ID HAVING COUNT(*) >= 2",
        "SELECT d.Document_ID FROM Documents d INNER JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(p.Paragraph_ID) >= 2"
      ]
    ]
  },
  {
    "id": 372,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2",
        "SELECT p.Document_ID FROM Paragraphs p GROUP BY p.Document_ID HAVING COUNT(p.Paragraph_ID) >= 2",
        "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2",
        "SELECT d.Document_ID FROM Documents d WHERE d.Document_ID IN (SELECT p.Document_ID FROM Paragraphs p GROUP BY p.Document_ID HAVING COUNT(p.Paragraph_ID) >= 2)",
        "SELECT DISTINCT p.Document_ID FROM Paragraphs p GROUP BY p.Document_ID HAVING COUNT(*) > 1",
        "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) > 1",
        "SELECT p.Document_ID FROM Paragraphs p GROUP BY p.Document_ID HAVING COUNT(*) > 1",
        "SELECT Document_ID FROM (SELECT Document_ID, COUNT(*) AS para_count FROM Paragraphs GROUP BY Document_ID) AS subquery WHERE para_count >= 2",
        "SELECT DISTINCT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2",
        "SELECT p.Document_ID FROM Paragraphs p GROUP BY p.Document_ID HAVING COUNT(p.Paragraph_ID) >= 2"
      ]
    ]
  },
  {
    "id": 373,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT D.Document_ID, D.Document_Name FROM Documents D JOIN (SELECT Document_ID, COUNT(Paragraph_ID) AS NumParagraphs FROM Paragraphs GROUP BY Document_ID) AS P ON D.Document_ID = P.Document_ID WHERE P.NumParagraphs = (SELECT MAX(NumParagraphs) FROM (SELECT COUNT(Paragraph_ID) AS NumParagraphs FROM Paragraphs GROUP BY Document_ID) AS Temp)",
        "SELECT Document_ID, Document_Name FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) = (SELECT MAX(Cnt) FROM (SELECT COUNT(Paragraph_ID) AS Cnt FROM Paragraphs GROUP BY Document_ID) AS Sub))",
        "SELECT D.Document_ID, D.Document_Name FROM Documents D WHERE D.Document_ID IN (SELECT P.Document_ID FROM Paragraphs P GROUP BY P.Document_ID HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Paragraphs GROUP BY Document_ID) AS Subquery))",
        "SELECT D.Document_ID, D.Document_Name FROM Documents D INNER JOIN (SELECT Document_ID, COUNT(*) AS ParagraphCount FROM Paragraphs GROUP BY Document_ID) AS P ON D.Document_ID = P.Document_ID WHERE P.ParagraphCount = (SELECT MAX(ParagraphCount) FROM (SELECT COUNT(*) AS ParagraphCount FROM Paragraphs GROUP BY Document_ID) AS Subquery)",
        "SELECT Document_ID, Document_Name FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(Paragraph_ID) DESC LIMIT 1)",
        "SELECT D.Document_ID, D.Document_Name FROM Documents D, (SELECT Document_ID, COUNT(Paragraph_ID) AS ParagraphCount FROM Paragraphs GROUP BY Document_ID) AS P WHERE D.Document_ID = P.Document_ID AND P.ParagraphCount = (SELECT MAX(ParagraphCount) FROM (SELECT COUNT(Paragraph_ID) AS ParagraphCount FROM Paragraphs GROUP BY Document_ID) AS Subquery)",
        "SELECT D.Document_ID, D.Document_Name FROM Documents D WHERE EXISTS (SELECT 1 FROM Paragraphs P WHERE D.Document_ID = P.Document_ID GROUP BY P.Document_ID HAVING COUNT(P.Paragraph_ID) = (SELECT MAX(Cnt) FROM (SELECT COUNT(Paragraph_ID) AS Cnt FROM Paragraphs GROUP BY Document_ID) AS Subquery))",
        "SELECT D.Document_ID, D.Document_Name FROM Documents D WHERE D.Document_ID IN (SELECT P.Document_ID FROM Paragraphs P GROUP BY P.Document_ID HAVING COUNT(P.Paragraph_ID) = (SELECT MAX(Counted.NumParagraphs) FROM (SELECT COUNT(Paragraph_ID) AS NumParagraphs FROM Paragraphs GROUP BY Document_ID) AS Counted))",
        "SELECT TOP 1 WITH TIES D.Document_ID, D.Document_Name FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID, D.Document_Name ORDER BY COUNT(P.Paragraph_ID) DESC",
        "SELECT D.Document_ID, D.Document_Name FROM Documents D WHERE D.Document_ID IN (SELECT P.Document_ID FROM Paragraphs P GROUP BY P.Document_ID HAVING COUNT(P.Paragraph_ID) >= ALL (SELECT COUNT(Paragraph_ID) FROM Paragraphs GROUP BY Document_ID))"
      ]
    ]
  },
  {
    "id": 374,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT D.Document_ID, D.Document_Name FROM Documents D JOIN (SELECT Document_ID, COUNT(*) AS Count FROM Paragraphs GROUP BY Document_ID) AS P ON D.Document_ID = P.Document_ID WHERE P.Count = (SELECT MAX(Count) FROM (SELECT Document_ID, COUNT(*) AS Count FROM Paragraphs GROUP BY Document_ID) AS subquery)",
        "SELECT D.Document_ID, D.Document_Name FROM Documents D WHERE D.Document_ID IN (SELECT P.Document_ID FROM Paragraphs P GROUP BY P.Document_ID HAVING COUNT(P.Paragraph_ID) = (SELECT MAX(Cnt) FROM (SELECT COUNT(Paragraph_ID) AS Cnt FROM Paragraphs GROUP BY Document_ID) AS subquery))",
        "SELECT Documents.Document_ID, Documents.Document_Name FROM Documents INNER JOIN (SELECT Document_ID, COUNT(*) AS TotalParagraphs FROM Paragraphs GROUP BY Document_ID) AS ParagraphCount ON Documents.Document_ID = ParagraphCount.Document_ID WHERE ParagraphCount.TotalParagraphs = (SELECT MAX(TotalParagraphs) FROM (SELECT COUNT(*) AS TotalParagraphs FROM Paragraphs GROUP BY Document_ID) AS MaxParagraphs)",
        "SELECT Document_ID, Document_Name FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM Paragraphs GROUP BY Document_ID) AS Counts))",
        "SELECT D.Document_ID, D.Document_Name FROM Documents D WHERE EXISTS (SELECT 1 FROM Paragraphs P WHERE D.Document_ID = P.Document_ID GROUP BY P.Document_ID HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Paragraphs GROUP BY Document_ID) AS MaxCount))",
        "SELECT D.Document_ID, D.Document_Name FROM Documents D, (SELECT Document_ID, COUNT(*) AS NumParagraphs FROM Paragraphs GROUP BY Document_ID) AS P WHERE D.Document_ID = P.Document_ID AND P.NumParagraphs = (SELECT MAX(NumParagraphs) FROM (SELECT COUNT(*) AS NumParagraphs FROM Paragraphs GROUP BY Document_ID) AS MaxParagraphs)",
        "SELECT D.Document_ID, D.Document_Name FROM Documents D WHERE D.Document_ID IN (SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT D.Document_ID, D.Document_Name FROM Documents D JOIN (SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM Paragraphs GROUP BY Document_ID) AS Counts)) AS P ON D.Document_ID = P.Document_ID",
        "SELECT D.Document_ID, D.Document_Name FROM Documents D WHERE D.Document_ID IN (SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) = (SELECT MAX(Count) FROM (SELECT COUNT(Paragraph_ID) AS Count FROM Paragraphs GROUP BY Document_ID) AS Counts))",
        "SELECT Document_ID, Document_Name FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM Paragraphs GROUP BY Document_ID))"
      ]
    ]
  },
  {
    "id": 375,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) = (SELECT MIN(ParagraphCount) FROM (SELECT Document_ID, COUNT(Paragraph_ID) AS ParagraphCount FROM Paragraphs GROUP BY Document_ID) AS SubQuery)",
        "SELECT D.Document_ID FROM Documents D JOIN (SELECT Document_ID, COUNT(*) AS Count FROM Paragraphs GROUP BY Document_ID) P ON D.Document_ID = P.Document_ID WHERE P.Count = (SELECT MIN(Count) FROM (SELECT COUNT(*) AS Count FROM Paragraphs GROUP BY Document_ID) AS SubQuery)",
        "SELECT Document_ID FROM (SELECT Document_ID, COUNT(Paragraph_ID) AS NumParagraphs FROM Paragraphs GROUP BY Document_ID) AS Counts WHERE NumParagraphs = (SELECT MIN(NumParagraphs) FROM (SELECT COUNT(Paragraph_ID) AS NumParagraphs FROM Paragraphs GROUP BY Document_ID) AS SubQuery)",
        "WITH ParagraphCounts AS (SELECT Document_ID, COUNT(*) AS Count FROM Paragraphs GROUP BY Document_ID) SELECT Document_ID FROM ParagraphCounts WHERE Count = (SELECT MIN(Count) FROM ParagraphCounts)",
        "SELECT P.Document_ID FROM Paragraphs P GROUP BY P.Document_ID HAVING COUNT(P.Paragraph_ID) = (SELECT MIN(Cnt) FROM (SELECT COUNT(Paragraph_ID) AS Cnt FROM Paragraphs GROUP BY Document_ID) AS SubQuery)",
        "SELECT TOP 1 WITH TIES Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(Paragraph_ID) ASC",
        "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(Paragraph_ID) ASC LIMIT 1",
        "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) = (SELECT MIN(COUNT(Paragraph_ID)) FROM Paragraphs GROUP BY Document_ID)",
        "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(*) FETCH FIRST ROW WITH TIES",
        "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) = (SELECT MIN(Count) FROM (SELECT COUNT(*) AS Count FROM Paragraphs GROUP BY Document_ID) Temp)"
      ]
    ]
  },
  {
    "id": 376,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) = (SELECT MIN(ParagraphCount) FROM (SELECT Document_ID, COUNT(Paragraph_ID) AS ParagraphCount FROM Paragraphs GROUP BY Document_ID) AS SubQuery)",
        "SELECT D.Document_ID FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID ORDER BY COUNT(P.Paragraph_ID) ASC LIMIT 1",
        "SELECT Document_ID FROM (SELECT Document_ID, COUNT(*) AS NumParagraphs FROM Paragraphs GROUP BY Document_ID) AS T WHERE NumParagraphs = (SELECT MIN(NumParagraphs) FROM (SELECT COUNT(*) AS NumParagraphs FROM Paragraphs GROUP BY Document_ID) AS Sub)",
        "WITH ParagraphCounts AS (SELECT Document_ID, COUNT(*) AS Count FROM Paragraphs GROUP BY Document_ID) SELECT Document_ID FROM ParagraphCounts WHERE Count = (SELECT MIN(Count) FROM ParagraphCounts)",
        "SELECT TOP 1 Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(*)",
        "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) = (SELECT MIN(COUNT(Paragraph_ID)) FROM Paragraphs GROUP BY Document_ID)",
        "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(Paragraph_ID) ASC FETCH FIRST 1 ROWS ONLY",
        "SELECT Document_ID FROM Paragraphs P GROUP BY P.Document_ID HAVING COUNT(P.Paragraph_ID) = (SELECT MIN(C) FROM (SELECT COUNT(Paragraph_ID) AS C FROM Paragraphs GROUP BY Document_ID) AS Counts)",
        "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) = (SELECT MIN(Count) FROM (SELECT COUNT(*) AS Count FROM Paragraphs GROUP BY Document_ID) AS CountsTable)",
        "SELECT Document_ID FROM (SELECT Document_ID, COUNT(Paragraph_ID) AS ParagraphCount FROM Paragraphs GROUP BY Document_ID ORDER BY ParagraphCount ASC) WHERE ROWNUM = 1"
      ]
    ]
  },
  {
    "id": 377,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT D.Document_ID FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID HAVING COUNT(P.Paragraph_ID) BETWEEN 1 AND 2",
        "SELECT Document_ID FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 1 AND COUNT(Paragraph_ID) <= 2)",
        "SELECT distinct D.Document_ID FROM Documents D, Paragraphs P WHERE D.Document_ID = P.Document_ID GROUP BY D.Document_ID HAVING COUNT(P.Paragraph_ID) >= 1 AND COUNT(P.Paragraph_ID) <= 2",
        "SELECT D.Document_ID FROM Documents D INNER JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID HAVING COUNT(*) BETWEEN 1 AND 2",
        "SELECT Document_ID FROM (SELECT Document_ID, COUNT(Paragraph_ID) AS ParaCount FROM Paragraphs GROUP BY Document_ID) AS SubQuery WHERE ParaCount BETWEEN 1 AND 2",
        "SELECT D.Document_ID FROM Documents D WHERE EXISTS (SELECT 1 FROM Paragraphs P WHERE P.Document_ID = D.Document_ID GROUP BY P.Document_ID HAVING COUNT(P.Paragraph_ID) BETWEEN 1 AND 2)",
        "SELECT D.Document_ID FROM Documents D LEFT JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID HAVING COUNT(P.Paragraph_ID) IN (1, 2)",
        "SELECT D.Document_ID FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID HAVING COUNT(DISTINCT P.Paragraph_ID) = 1 OR COUNT(DISTINCT P.Paragraph_ID) = 2",
        "SELECT Document_ID FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) = 1 OR COUNT(*) = 2)",
        "SELECT D.Document_ID FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID HAVING COUNT(P.Paragraph_ID) = 1 OR COUNT(P.Paragraph_ID) = 2"
      ]
    ]
  },
  {
    "id": 378,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) BETWEEN 1 AND 2",
        "SELECT p.Document_ID FROM Paragraphs p GROUP BY p.Document_ID HAVING COUNT(p.Paragraph_ID) BETWEEN 1 AND 2",
        "SELECT Document_ID FROM (SELECT Document_ID, COUNT(*) AS num_paragraphs FROM Paragraphs GROUP BY Document_ID) AS subquery WHERE num_paragraphs BETWEEN 1 AND 2",
        "SELECT d.Document_ID FROM Documents d WHERE d.Document_ID IN (SELECT p.Document_ID FROM Paragraphs p GROUP BY p.Document_ID HAVING COUNT(p.Paragraph_ID) BETWEEN 1 AND 2)",
        "SELECT DISTINCT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 1 AND COUNT(Paragraph_ID) <= 2",
        "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) = 1 OR COUNT(Paragraph_ID) = 2",
        "SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(p.Paragraph_ID) BETWEEN 1 AND 2",
        "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) = 1 OR COUNT(*) = 2",
        "SELECT Document_ID FROM Paragraphs WHERE Document_ID IN (SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) IN (1, 2))",
        "SELECT d.Document_ID FROM Documents d WHERE EXISTS (SELECT 1 FROM Paragraphs p WHERE p.Document_ID = d.Document_ID GROUP BY p.Document_ID HAVING COUNT(p.Paragraph_ID) BETWEEN 1 AND 2)"
      ]
    ]
  },
  {
    "id": 379,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Document_ID FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Brazil') INTERSECT SELECT Document_ID FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Ireland')",
        "SELECT D.Document_ID FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID WHERE P.Paragraph_Text IN ('Brazil', 'Ireland') GROUP BY D.Document_ID HAVING COUNT(DISTINCT P.Paragraph_Text) = 2",
        "SELECT DISTINCT D.Document_ID FROM Documents D, Paragraphs P WHERE D.Document_ID = P.Document_ID AND P.Paragraph_Text = 'Brazil' AND D.Document_ID IN (SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Ireland')",
        "SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Brazil' UNION SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Ireland'",
        "SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text IN ('Brazil', 'Ireland') GROUP BY Document_ID HAVING COUNT(*) = 2",
        "SELECT DISTINCT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Brazil' OR Paragraph_Text = 'Ireland' HAVING COUNT(DISTINCT Paragraph_Text) = 2",
        "WITH BrazilDocs AS (SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Brazil'), IrelandDocs AS (SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Ireland') SELECT BrazilDocs.Document_ID FROM BrazilDocs JOIN IrelandDocs ON BrazilDocs.Document_ID = IrelandDocs.Document_ID",
        "SELECT Document_ID FROM Documents WHERE EXISTS (SELECT 1 FROM Paragraphs WHERE Paragraph_Text = 'Brazil' AND Documents.Document_ID = Paragraphs.Document_ID) AND EXISTS (SELECT 1 FROM Paragraphs WHERE Paragraph_Text = 'Ireland' AND Documents.Document_ID = Paragraphs.Document_ID)",
        "SELECT Document_ID FROM Paragraphs P1 WHERE P1.Paragraph_Text = 'Brazil' AND EXISTS (SELECT 1 FROM Paragraphs P2 WHERE P2.Document_ID = P1.Document_ID AND P2.Paragraph_Text = 'Ireland')",
        "SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Brazil' INTERSECT SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Ireland'"
      ]
    ]
  },
  {
    "id": 380,
    "db_id": "cre_Doc_Template_Mgt",
    "infer_predictions": [
      [
        "SELECT Document_ID FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text LIKE '%Brazil%') AND Document_ID IN (SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text LIKE '%Ireland%')",
        "SELECT D.Document_ID FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID WHERE P.Paragraph_Text LIKE '%Brazil%' INTERSECT SELECT D.Document_ID FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID WHERE P.Paragraph_Text LIKE '%Ireland%'",
        "SELECT DISTINCT Document_ID FROM Paragraphs WHERE Paragraph_Text LIKE '%Brazil%' AND Document_ID IN (SELECT DISTINCT Document_ID FROM Paragraphs WHERE Paragraph_Text LIKE '%Ireland%')",
        "SELECT D.Document_ID FROM Documents D WHERE EXISTS (SELECT 1 FROM Paragraphs P WHERE P.Document_ID = D.Document_ID AND P.Paragraph_Text LIKE '%Brazil%') AND EXISTS (SELECT 1 FROM Paragraphs P WHERE P.Document_ID = D.Document_ID AND P.Paragraph_Text LIKE '%Ireland%')",
        "SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text LIKE '%Brazil%' INTERSECT SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text LIKE '%Ireland%'",
        "WITH BrazilDocs AS (SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text LIKE '%Brazil%'), IrelandDocs AS (SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text LIKE '%Ireland%') SELECT BrazilDocs.Document_ID FROM BrazilDocs JOIN IrelandDocs ON BrazilDocs.Document_ID = IrelandDocs.Document_ID",
        "SELECT Document_ID FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text LIKE '%Brazil%' UNION SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text LIKE '%Ireland%')",
        "SELECT DISTINCT p1.Document_ID FROM Paragraphs p1, Paragraphs p2 WHERE p1.Document_ID = p2.Document_ID AND p1.Paragraph_Text LIKE '%Brazil%' AND p2.Paragraph_Text LIKE '%Ireland%'",
        "SELECT Document_ID FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text LIKE '%Brazil%' UNION ALL SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text LIKE '%Ireland%') HAVING COUNT(*) > 1",
        "SELECT DISTINCT Document_ID FROM Paragraphs p1 WHERE EXISTS (SELECT 1 FROM Paragraphs p2 WHERE p1.Document_ID = p2.Document_ID AND p2.Paragraph_Text LIKE '%Ireland%') AND p1.Paragraph_Text LIKE '%Brazil%'"
      ]
    ]
  },
  {
    "id": 381,
    "db_id": "course_teach",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM teacher",
        "SELECT COUNT(Teacher_ID) FROM teacher",
        "SELECT COUNT(DISTINCT Teacher_ID) FROM teacher",
        "SELECT COUNT(Teacher_ID) AS NumberOfTeachers FROM teacher",
        "SELECT COUNT(*) AS TotalTeachers FROM teacher",
        "SELECT COUNT(DISTINCT Name) FROM teacher",
        "SELECT COUNT(*) FROM teacher WHERE Teacher_ID IS NOT NULL",
        "SELECT COUNT(*) FROM teacher GROUP BY Teacher_ID",
        "SELECT COUNT(Teacher_ID) FROM teacher WHERE Teacher_ID > 0",
        "SELECT COUNT(*) FROM teacher WHERE Name IS NOT NULL"
      ]
    ]
  },
  {
    "id": 382,
    "db_id": "course_teach",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM teacher",
        "SELECT COUNT(Teacher_ID) FROM teacher",
        "SELECT COUNT(1) FROM teacher",
        "SELECT COUNT(Teacher_ID) AS TotalTeachers FROM teacher",
        "SELECT COUNT(*) AS TotalCount FROM teacher",
        "SELECT COUNT(DISTINCT Teacher_ID) FROM teacher",
        "SELECT COUNT(DISTINCT Name) FROM teacher",
        "SELECT COUNT(*) FROM teacher WHERE Teacher_ID IS NOT NULL",
        "SELECT COUNT(*) AS NumberOfTeachers FROM teacher",
        "SELECT COUNT(Teacher_ID) FROM teacher WHERE Teacher_ID > 0"
      ]
    ]
  },
  {
    "id": 383,
    "db_id": "course_teach",
    "infer_predictions": [
      [
        "SELECT Name FROM teacher ORDER BY Age ASC, Teacher_ID ASC",
        "SELECT Name FROM teacher ORDER BY Age, Teacher_ID",
        "SELECT Name FROM teacher ORDER BY Age ASC, Teacher_ID",
        "SELECT Name FROM teacher ORDER BY Age, Teacher_ID ASC",
        "SELECT t.Name FROM teacher t ORDER BY t.Age ASC, t.Teacher_ID ASC",
        "SELECT t.Name FROM teacher t ORDER BY t.Age, t.Teacher_ID",
        "SELECT t.Name FROM teacher t ORDER BY t.Age ASC, t.Teacher_ID",
        "SELECT t.Name FROM teacher t ORDER BY t.Age, t.Teacher_ID ASC",
        "SELECT Name FROM teacher SORT BY Age ASCENDING, Teacher_ID ASCENDING",
        "SELECT Name FROM teacher SORT BY Age ASC, Teacher_ID ASC"
      ]
    ]
  },
  {
    "id": 384,
    "db_id": "course_teach",
    "infer_predictions": [
      [
        "SELECT Name FROM teacher ORDER BY Age ASC, Teacher_ID ASC",
        "SELECT Name FROM teacher ORDER BY Age, Teacher_ID",
        "SELECT Name FROM teacher SORT BY Age ASCENDING, Teacher_ID ASCENDING",
        "SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC, teacher.Teacher_ID ASC",
        "SELECT t.Name FROM teacher t ORDER BY t.Age ASC, t.Teacher_ID ASC",
        "SELECT Name FROM teacher ORDER BY Age ASCENDING, Teacher_ID ASCENDING",
        "SELECT Name FROM teacher ORDER BY Age, Teacher_ID ASC",
        "SELECT Name FROM teacher ORDER BY Age ASC, Teacher_ID",
        "SELECT Name FROM teacher ORDER BY Age, Teacher_ID ASCENDING",
        "SELECT Name FROM teacher ORDER BY Age ASCENDING, Teacher_ID"
      ]
    ]
  },
  {
    "id": 385,
    "db_id": "course_teach",
    "infer_predictions": [
      [
        "SELECT Age, Hometown FROM teacher",
        "SELECT teacher.Age, teacher.Hometown FROM teacher",
        "SELECT t.Age, t.Hometown FROM teacher t",
        "SELECT Age AS TeacherAge, Hometown AS TeacherHometown FROM teacher",
        "SELECT DISTINCT Age, Hometown FROM teacher",
        "SELECT teacher.Age AS Age, teacher.Hometown AS Hometown FROM teacher",
        "SELECT Age, Hometown FROM teacher GROUP BY Age, Hometown",
        "SELECT * FROM (SELECT Age, Hometown FROM teacher) AS subquery",
        "SELECT Age, Hometown FROM teacher ORDER BY Age",
        "SELECT Age, Hometown FROM teacher WHERE Age IS NOT NULL AND Hometown IS NOT NULL"
      ]
    ]
  },
  {
    "id": 386,
    "db_id": "course_teach",
    "infer_predictions": [
      [
        "SELECT Age, Hometown FROM teacher",
        "SELECT teacher.Age, teacher.Hometown FROM teacher",
        "SELECT t.Age, t.Hometown FROM teacher t",
        "SELECT Age AS TeacherAge, Hometown AS TeacherHometown FROM teacher",
        "SELECT `Age`, `Hometown` FROM `teacher`",
        "SELECT teacher.Age AS Age, teacher.Hometown AS Hometown FROM teacher",
        "SELECT * FROM teacher SELECT Age, Hometown",
        "SELECT Age, Hometown FROM teacher ORDER BY Age",
        "SELECT DISTINCT Age, Hometown FROM teacher",
        "SELECT Age, Hometown FROM teacher WHERE Age IS NOT NULL AND Hometown IS NOT NULL"
      ]
    ]
  },
  {
    "id": 387,
    "db_id": "course_teach",
    "infer_predictions": [
      [
        "SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District'",
        "SELECT Name FROM teacher WHERE NOT Hometown = 'Little Lever Urban District'",
        "SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'",
        "SELECT Name FROM teacher WHERE Hometown NOT LIKE 'Little Lever Urban District'",
        "SELECT Name FROM teacher WHERE Hometown NOT IN ('Little Lever Urban District')",
        "SELECT teacher.Name FROM teacher WHERE teacher.Hometown <> 'Little Lever Urban District'",
        "SELECT t.Name FROM teacher t WHERE t.Hometown <> 'Little Lever Urban District'",
        "SELECT Name FROM teacher WHERE Hometown IS NOT 'Little Lever Urban District'",
        "SELECT Name FROM teacher WHERE NOT (Hometown = 'Little Lever Urban District')",
        "SELECT Name FROM teacher WHERE Hometown NOT EQUALS 'Little Lever Urban District'"
      ]
    ]
  },
  {
    "id": 388,
    "db_id": "course_teach",
    "infer_predictions": [
      [
        "SELECT DISTINCT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District'",
        "SELECT DISTINCT Name FROM teacher WHERE NOT Hometown = 'Little Lever Urban District'",
        "SELECT DISTINCT Name FROM teacher WHERE Hometown NOT LIKE 'Little Lever Urban District'",
        "SELECT DISTINCT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'",
        "SELECT DISTINCT Name FROM teacher WHERE Hometown NOT IN ('Little Lever Urban District')",
        "SELECT DISTINCT Name FROM teacher WHERE Hometown IS NOT 'Little Lever Urban District'",
        "SELECT DISTINCT Name FROM teacher WHERE NOT (Hometown = 'Little Lever Urban District')",
        "SELECT DISTINCT Name FROM teacher WHERE Hometown NOT EQUALS 'Little Lever Urban District'",
        "SELECT DISTINCT Name FROM teacher WHERE 'Little Lever Urban District' <> Hometown",
        "SELECT DISTINCT Name FROM teacher WHERE 'Little Lever Urban District' NOT IN (Hometown)"
      ]
    ]
  },
  {
    "id": 389,
    "db_id": "course_teach",
    "infer_predictions": [
      [
        "SELECT Name FROM teacher WHERE Age IN (32, 33)",
        "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
        "SELECT t.Name FROM teacher t WHERE t.Age = 32 OR t.Age = 33",
        "SELECT Name FROM teacher WHERE Age BETWEEN 32 AND 33",
        "SELECT teacher.Name FROM teacher WHERE teacher.Age = 32 OR teacher.Age = 33",
        "SELECT Name FROM teacher WHERE (Age = 32) OR (Age = 33)",
        "SELECT Name FROM teacher WHERE Age = ANY (ARRAY[32, 33])",
        "SELECT Name FROM teacher WHERE Age IN (SELECT 32 UNION SELECT 33)",
        "SELECT Name FROM teacher WHERE Age IN (SELECT Age FROM teacher WHERE Age = 32 OR Age = 33)",
        "SELECT Name FROM teacher WHERE Age IN (SELECT DISTINCT Age FROM teacher WHERE Age = 32 OR Age = 33)"
      ]
    ]
  },
  {
    "id": 390,
    "db_id": "course_teach",
    "infer_predictions": [
      [
        "SELECT Name FROM teacher WHERE Age IN (32, 33)",
        "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
        "SELECT teacher.Name FROM teacher WHERE teacher.Age = 32 OR teacher.Age = 33",
        "SELECT t.Name FROM teacher t WHERE t.Age = 32 OR t.Age = 33",
        "SELECT Name FROM teacher WHERE Age BETWEEN 32 AND 33",
        "SELECT DISTINCT Name FROM teacher WHERE Age = 32 OR Age = 33",
        "SELECT Name FROM teacher WHERE Age >= 32 AND Age <= 33",
        "SELECT Name FROM teacher WHERE Age IN (SELECT Age FROM teacher WHERE Age = 32 OR Age = 33)",
        "SELECT Name FROM teacher WHERE (Age = 32) OR (Age = 33)",
        "SELECT teacher.Name FROM teacher WHERE teacher.Age IN (32, 33)"
      ]
    ]
  },
  {
    "id": 391,
    "db_id": "course_teach",
    "infer_predictions": [
      [
        "SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)",
        "SELECT Hometown FROM teacher WHERE Age IN (SELECT MIN(Age) FROM teacher)",
        "SELECT t.Hometown FROM teacher t WHERE t.Age = (SELECT MIN(Age) FROM teacher)",
        "SELECT DISTINCT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)",
        "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "SELECT Hometown FROM teacher GROUP BY Hometown HAVING Age = MIN(Age)",
        "SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher GROUP BY Hometown)",
        "SELECT Hometown FROM teacher AS t WHERE t.Age = (SELECT MIN(Age) FROM teacher AS sub_t)",
        "SELECT t.Hometown FROM teacher t WHERE t.Age = (SELECT MIN(t2.Age) FROM teacher t2)",
        "SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher) GROUP BY Hometown"
      ]
    ]
  },
  {
    "id": 392,
    "db_id": "course_teach",
    "infer_predictions": [
      [
        "SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)",
        "SELECT t.Hometown FROM teacher t WHERE t.Age = (SELECT MIN(Age) FROM teacher)",
        "SELECT Hometown FROM teacher WHERE Age IN (SELECT MIN(Age) FROM teacher)",
        "SELECT Hometown FROM teacher t1 WHERE t1.Age = (SELECT MIN(t2.Age) FROM teacher t2)",
        "SELECT teacher.Hometown FROM teacher WHERE teacher.Age = (SELECT MIN(teacher.Age) FROM teacher)",
        "SELECT Hometown FROM teacher t WHERE t.Age = (SELECT MIN(Age) FROM teacher t)",
        "SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher GROUP BY Age)",
        "SELECT Hometown FROM teacher t WHERE t.Age = (SELECT MIN(Age) FROM teacher AS t2)",
        "SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher t GROUP BY t.Age)",
        "SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher t WHERE t.Age IS NOT NULL)"
      ]
    ]
  },
  {
    "id": 393,
    "db_id": "course_teach",
    "infer_predictions": [
      [
        "SELECT Hometown, COUNT(Teacher_ID) AS NumberOfTeachers FROM teacher GROUP BY Hometown",
        "SELECT Hometown, COUNT(*) AS TeacherCount FROM teacher GROUP BY Hometown",
        "SELECT t.Hometown, COUNT(t.Teacher_ID) AS TotalTeachers FROM teacher t GROUP BY t.Hometown",
        "SELECT Hometown, COUNT(Teacher_ID) FROM teacher GROUP BY Hometown",
        "SELECT teacher.Hometown, COUNT(teacher.Teacher_ID) FROM teacher GROUP BY teacher.Hometown",
        "SELECT Hometown, COUNT(DISTINCT Teacher_ID) AS Teachers FROM teacher GROUP BY Hometown",
        "SELECT Hometown, COUNT(Teacher_ID) AS CountOfTeachers FROM teacher GROUP BY Hometown ORDER BY Hometown",
        "SELECT COUNT(Teacher_ID), Hometown FROM teacher GROUP BY Hometown",
        "SELECT Hometown, COUNT(Teacher_ID) AS NumOfTeachers FROM teacher GROUP BY Hometown ORDER BY NumOfTeachers DESC",
        "SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC"
      ]
    ]
  },
  {
    "id": 394,
    "db_id": "course_teach",
    "infer_predictions": [
      [
        "SELECT Hometown, COUNT(Teacher_ID) AS NumberOfTeachers FROM teacher GROUP BY Hometown",
        "SELECT Hometown, COUNT(*) AS TeacherCount FROM teacher GROUP BY Hometown",
        "SELECT t.Hometown, COUNT(t.Teacher_ID) AS TotalTeachers FROM teacher t GROUP BY t.Hometown",
        "SELECT Hometown, COUNT(Teacher_ID) FROM teacher GROUP BY Hometown",
        "SELECT COUNT(Teacher_ID), Hometown FROM teacher GROUP BY Hometown",
        "SELECT Hometown, COUNT(DISTINCT Teacher_ID) AS Teachers FROM teacher GROUP BY Hometown",
        "SELECT Hometown, COUNT(Teacher_ID) AS TeacherTotal FROM teacher GROUP BY Hometown ORDER BY Hometown",
        "SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC",
        "SELECT Hometown, COUNT(Teacher_ID) FROM teacher GROUP BY Hometown ORDER BY Hometown ASC",
        "SELECT Hometown, COUNT(Teacher_ID) AS Total FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) > 0"
      ]
    ]
  },
  {
    "id": 395,
    "db_id": "course_teach",
    "infer_predictions": [
      [
        "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) = (SELECT MAX(frequency) FROM (SELECT COUNT(*) AS frequency FROM teacher GROUP BY Hometown) AS subquery)",
        "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT T.Hometown FROM (SELECT Hometown, COUNT(*) AS freq FROM teacher GROUP BY Hometown) AS T WHERE T.freq = (SELECT MAX(freq) FROM (SELECT COUNT(*) AS freq FROM teacher GROUP BY Hometown) AS subquery)",
        "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Hometown) = (SELECT MAX(freq) FROM (SELECT COUNT(Hometown) AS freq FROM teacher GROUP BY Hometown) AS subquery)",
        "WITH HometownFrequency AS (SELECT Hometown, COUNT(*) AS Frequency FROM teacher GROUP BY Hometown) SELECT Hometown FROM HometownFrequency WHERE Frequency = (SELECT MAX(Frequency) FROM HometownFrequency)",
        "SELECT Hometown FROM (SELECT Hometown, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank FROM teacher GROUP BY Hometown) sub WHERE rank = 1",
        "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM teacher GROUP BY Hometown)",
        "SELECT TOP 1 WITH TIES Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC",
        "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) = (SELECT COUNT(*) FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT Hometown FROM teacher WHERE Hometown IN (SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT Hometown, COUNT(*) AS Count FROM teacher GROUP BY Hometown) AS Counts))"
      ]
    ]
  },
  {
    "id": 396,
    "db_id": "course_teach",
    "infer_predictions": [
      [
        "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) = (SELECT MAX(frequency) FROM (SELECT COUNT(*) AS frequency FROM teacher GROUP BY Hometown) AS subquery)",
        "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT TOP 1 Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC",
        "SELECT Hometown FROM (SELECT Hometown, COUNT(*) AS freq FROM teacher GROUP BY Hometown) AS T WHERE freq = (SELECT MAX(freq) FROM (SELECT COUNT(*) AS freq FROM teacher GROUP BY Hometown) AS subquery)",
        "WITH HometownFrequency AS (SELECT Hometown, COUNT(*) AS Frequency FROM teacher GROUP BY Hometown) SELECT Hometown FROM HometownFrequency WHERE Frequency = (SELECT MAX(Frequency) FROM HometownFrequency)",
        "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Hometown) = (SELECT COUNT(Hometown) FROM teacher GROUP BY Hometown ORDER BY COUNT(Hometown) DESC LIMIT 1)",
        "SELECT Hometown, COUNT(*) AS Count FROM teacher GROUP BY Hometown ORDER BY Count DESC FETCH FIRST 1 ROWS ONLY",
        "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM teacher GROUP BY Hometown)",
        "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) = (SELECT COUNT(*) FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT Hometown, COUNT(*) AS Count FROM teacher GROUP BY Hometown) AS Counts)"
      ]
    ]
  },
  {
    "id": 397,
    "db_id": "course_teach",
    "infer_predictions": [
      [
        "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
        "SELECT Hometown, COUNT(*) AS num_teachers FROM teacher GROUP BY Hometown HAVING num_teachers >= 2",
        "SELECT t.Hometown FROM teacher t GROUP BY t.Hometown HAVING COUNT(t.Teacher_ID) > 1",
        "SELECT DISTINCT Hometown FROM teacher WHERE Hometown IN (SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) > 1)",
        "SELECT Hometown FROM (SELECT Hometown, COUNT(*) as Count FROM teacher GROUP BY Hometown) as subquery WHERE Count > 1",
        "SELECT Hometown, COUNT(Teacher_ID) as TeacherCount FROM teacher GROUP BY Hometown HAVING TeacherCount > 1",
        "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(DISTINCT Teacher_ID) > 1",
        "SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown HAVING COUNT(*) > 1",
        "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2",
        "SELECT Hometown, COUNT(*) AS NumberOfTeachers FROM teacher GROUP BY Hometown HAVING NumberOfTeachers >= 2"
      ]
    ]
  },
  {
    "id": 398,
    "db_id": "course_teach",
    "infer_predictions": [
      [
        "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
        "SELECT Hometown, COUNT(*) AS NumTeachers FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) > 1",
        "SELECT t.Hometown FROM teacher t GROUP BY t.Hometown HAVING COUNT(t.Teacher_ID) > 1",
        "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2",
        "SELECT DISTINCT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) > 1",
        "SELECT Hometown, COUNT(Teacher_ID) AS NumberOfTeachers FROM teacher GROUP BY Hometown HAVING NumberOfTeachers >= 2",
        "SELECT Hometown FROM (SELECT Hometown, COUNT(*) AS TeacherCount FROM teacher GROUP BY Hometown) AS subquery WHERE TeacherCount > 1",
        "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) > 1",
        "SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown HAVING COUNT(*) > 1",
        "SELECT Hometown, COUNT(Teacher_ID) FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2"
      ]
    ]
  },
  {
    "id": 399,
    "db_id": "course_teach",
    "infer_predictions": [
      [
        "SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID",
        "SELECT T.Name AS TeacherName, C.Course AS CourseName FROM teacher T INNER JOIN course_arrange CA ON T.Teacher_ID = CA.Teacher_ID INNER JOIN course C ON CA.Course_ID = C.Course_ID",
        "SELECT Name, Course FROM teacher, course, course_arrange WHERE teacher.Teacher_ID = course_arrange.Teacher_ID AND course.Course_ID = course_arrange.Course_ID",
        "SELECT t.Name, c.Course FROM teacher t, course c, course_arrange ca WHERE t.Teacher_ID = ca.Teacher_ID AND c.Course_ID = ca.Course_ID",
        "SELECT t.Name AS Teacher, c.Course AS Course FROM teacher t CROSS JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID CROSS JOIN course c ON ca.Course_ID = c.Course_ID",
        "SELECT DISTINCT teacher.Name, course.Course FROM teacher, course_arrange, course WHERE teacher.Teacher_ID = course_arrange.Teacher_ID AND course.Course_ID = course_arrange.Course_ID",
        "SELECT teacher.Name AS 'Teacher Name', course.Course AS 'Course Title' FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID",
        "SELECT t.Name, c.Course FROM teacher AS t JOIN course_arrange AS ca ON t.Teacher_ID = ca.Teacher_ID JOIN course AS c ON ca.Course_ID = c.Course_ID ORDER BY t.Name",
        "SELECT Name, Course FROM teacher JOIN course_arrange USING (Teacher_ID) JOIN course USING (Course_ID)",
        "SELECT t.Name AS 'Instructor Name', c.Course AS 'Course Taught' FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID LEFT JOIN course c ON ca.Course_ID = c.Course_ID"
      ]
    ]
  },
  {
    "id": 400,
    "db_id": "course_teach",
    "infer_predictions": [
      [
        "SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID",
        "SELECT T.Name AS TeacherName, C.Course AS CourseName FROM teacher T INNER JOIN course_arrange CA ON T.Teacher_ID = CA.Teacher_ID INNER JOIN course C ON CA.Course_ID = C.Course_ID",
        "SELECT Name, Course FROM teacher, course, course_arrange WHERE teacher.Teacher_ID = course_arrange.Teacher_ID AND course.Course_ID = course_arrange.Course_ID",
        "SELECT t.Name, c.Course FROM teacher t, course c, course_arrange ca WHERE t.Teacher_ID = ca.Teacher_ID AND c.Course_ID = ca.Course_ID",
        "SELECT t.Name AS 'Teacher Name', c.Course AS 'Course Taught' FROM teacher t CROSS JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID CROSS JOIN course c ON ca.Course_ID = c.Course_ID",
        "SELECT DISTINCT teacher.Name, course.Course FROM teacher, course, course_arrange WHERE teacher.Teacher_ID = course_arrange.Teacher_ID AND course.Course_ID = course_arrange.Course_ID",
        "SELECT teacher.Name AS 'Teacher', course.Course AS 'Course' FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID",
        "SELECT Name, Course FROM teacher JOIN course_arrange ON Teacher_ID = course_arrange.Teacher_ID JOIN course ON Course_ID = course_arrange.Course_ID",
        "SELECT t.Name, c.Course FROM teacher AS t JOIN course_arrange AS ca ON t.Teacher_ID = ca.Teacher_ID JOIN course AS c ON ca.Course_ID = c.Course_ID ORDER BY t.Name",
        "SELECT teacher.Name, course.Course FROM teacher LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID LEFT JOIN course ON course_arrange.Course_ID = course.Course_ID"
      ]
    ]
  },
  {
    "id": 401,
    "db_id": "course_teach",
    "infer_predictions": [
      [
        "SELECT T.Name, C.Course FROM teacher T JOIN course_arrange CA ON T.Teacher_ID = CA.Teacher_ID JOIN course C ON CA.Course_ID = C.Course_ID ORDER BY T.Name ASC, C.Course ASC",
        "SELECT teacher.Name, course.Course FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC, course.Course ASC",
        "SELECT Name, Course FROM teacher, course, course_arrange WHERE teacher.Teacher_ID = course_arrange.Teacher_ID AND course.Course_ID = course_arrange.Course_ID ORDER BY Name ASC, Course ASC",
        "SELECT t.Name AS TeacherName, c.Course AS CourseName FROM teacher t, course_arrange ca, course c WHERE t.Teacher_ID = ca.Teacher_ID AND ca.Course_ID = c.Course_ID ORDER BY t.Name ASC, c.Course ASC",
        "SELECT t.Name, c.Course FROM teacher t CROSS JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID CROSS JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC, c.Course ASC",
        "SELECT t.Name, c.Course FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID LEFT JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC, c.Course ASC",
        "SELECT t.Name, c.Course FROM teacher t RIGHT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID RIGHT JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC, c.Course ASC",
        "SELECT DISTINCT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC, c.Course ASC",
        "SELECT t.Name AS 'Teacher Name', c.Course AS 'Course Title' FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name, c.Course",
        "SELECT t.Name, c.Course FROM teacher AS t JOIN course_arrange AS ca ON t.Teacher_ID = ca.Teacher_ID JOIN course AS c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC, c.Course ASC"
      ]
    ]
  },
  {
    "id": 402,
    "db_id": "course_teach",
    "infer_predictions": [
      [
        "SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course.Course_ID = course_arrange.Course_ID ORDER BY teacher.Name ASC, course.Course ASC",
        "SELECT T.Name AS TeacherName, C.Course AS CourseName FROM teacher T INNER JOIN course_arrange CA ON T.Teacher_ID = CA.Teacher_ID INNER JOIN course C ON CA.Course_ID = C.Course_ID ORDER BY T.Name, C.Course",
        "SELECT Name, Course FROM teacher, course, course_arrange WHERE teacher.Teacher_ID = course_arrange.Teacher_ID AND course.Course_ID = course_arrange.Course_ID ORDER BY Name ASC, Course ASC",
        "SELECT t.Name, c.Course FROM teacher t, course c, course_arrange ca WHERE t.Teacher_ID = ca.Teacher_ID AND c.Course_ID = ca.Course_ID ORDER BY t.Name ASC, c.Course ASC",
        "SELECT t.Name AS Teacher, c.Course AS CourseTitle FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name, c.Course",
        "SELECT DISTINCT teacher.Name, course.Course FROM teacher, course_arrange, course WHERE teacher.Teacher_ID = course_arrange.Teacher_ID AND course.Course_ID = course_arrange.Course_ID ORDER BY teacher.Name ASC, course.Course ASC",
        "SELECT t.Name, c.Course FROM teacher AS t JOIN course_arrange AS ca ON t.Teacher_ID = ca.Teacher_ID JOIN course AS c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC, c.Course ASC",
        "SELECT teacher.Name AS 'Teacher Name', course.Course AS 'Course Name' FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID INNER JOIN course ON course.Course_ID = course_arrange.Course_ID ORDER BY teacher.Name, course.Course",
        "SELECT t.Name AS 'Instructor', c.Course AS 'Subject' FROM teacher t CROSS JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID CROSS JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC, c.Course ASC",
        "SELECT Name, Course FROM teacher JOIN course_arrange USING (Teacher_ID) JOIN course USING (Course_ID) ORDER BY Name, Course"
      ]
    ]
  },
  {
    "id": 403,
    "db_id": "course_teach",
    "infer_predictions": [
      [
        "SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'math'",
        "SELECT Name FROM teacher WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange WHERE Course_ID IN (SELECT Course_ID FROM course WHERE Course = 'math'))",
        "SELECT teacher.Name FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'math'",
        "SELECT t.Name FROM teacher t, course_arrange ca, course c WHERE t.Teacher_ID = ca.Teacher_ID AND ca.Course_ID = c.Course_ID AND c.Course = 'math'",
        "SELECT Name FROM teacher WHERE Teacher_ID = (SELECT Teacher_ID FROM course_arrange WHERE Course_ID = (SELECT Course_ID FROM course WHERE Course = 'math'))",
        "SELECT DISTINCT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course LIKE 'math'",
        "SELECT t.Name FROM teacher t WHERE EXISTS (SELECT 1 FROM course_arrange ca JOIN course c ON ca.Course_ID = c.Course_ID WHERE ca.Teacher_ID = t.Teacher_ID AND c.Course = 'math')",
        "SELECT t.Name FROM teacher t WHERE t.Teacher_ID IN (SELECT ca.Teacher_ID FROM course_arrange ca JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'math')",
        "SELECT Name FROM teacher WHERE Teacher_ID = (SELECT ca.Teacher_ID FROM course_arrange ca JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'math' LIMIT 1)",
        "SELECT t.Name FROM teacher t, course_arrange ca, course c WHERE t.Teacher_ID = ca.Teacher_ID AND ca.Course_ID = c.Course_ID AND UPPER(c.Course) = UPPER('math')"
      ]
    ]
  },
  {
    "id": 404,
    "db_id": "course_teach",
    "infer_predictions": [
      [
        "SELECT DISTINCT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'math'",
        "SELECT t.Name FROM teacher t, course_arrange ca, course c WHERE t.Teacher_ID = ca.Teacher_ID AND ca.Course_ID = c.Course_ID AND c.Course = 'math'",
        "SELECT teacher.Name FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'math'",
        "SELECT DISTINCT Name FROM teacher WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange WHERE Course_ID IN (SELECT Course_ID FROM course WHERE Course = 'math'))",
        "SELECT t.Name FROM teacher AS t JOIN course_arrange AS ca ON t.Teacher_ID = ca.Teacher_ID JOIN course AS c ON ca.Course_ID = c.Course_ID WHERE c.Course LIKE 'math'",
        "SELECT Name FROM teacher WHERE EXISTS (SELECT 1 FROM course_arrange JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'math' AND course_arrange.Teacher_ID = teacher.Teacher_ID)",
        "SELECT DISTINCT t.Name FROM teacher t, course_arrange ca, course c WHERE t.Teacher_ID = ca.Teacher_ID AND ca.Course_ID = c.Course_ID AND UPPER(c.Course) = UPPER('math')",
        "SELECT t.Name FROM teacher t WHERE t.Teacher_ID IN (SELECT ca.Teacher_ID FROM course_arrange ca JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'math')",
        "SELECT DISTINCT t.Name FROM teacher t INNER JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID INNER JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'math' ORDER BY t.Name",
        "SELECT t.Name FROM teacher t WHERE EXISTS (SELECT * FROM course_arrange ca INNER JOIN course c ON ca.Course_ID = c.Course_ID WHERE ca.Teacher_ID = t.Teacher_ID AND c.Course = 'math')"
      ]
    ]
  },
  {
    "id": 405,
    "db_id": "course_teach",
    "infer_predictions": [
      [
        "SELECT t.Name, COUNT(DISTINCT ca.Course_ID) AS Num_Courses FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name",
        "SELECT Name, COUNT(DISTINCT Course_ID) AS Courses_Taught FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY Name",
        "SELECT teacher.Name, COUNT(DISTINCT course_arrange.Course_ID) FROM teacher, course_arrange WHERE teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name",
        "SELECT t.Name AS Teacher_Name, COUNT(DISTINCT ca.Course_ID) AS Course_Count FROM teacher AS t LEFT JOIN course_arrange AS ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name",
        "SELECT Name, COUNT(DISTINCT Course_ID) FROM teacher JOIN course_arrange ON Teacher_ID = course_arrange.Teacher_ID GROUP BY Name ORDER BY Name",
        "SELECT t.Name, COUNT(DISTINCT ca.Course_ID) AS Total_Courses FROM teacher t, course_arrange ca WHERE t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name",
        "SELECT Name, COUNT(DISTINCT Course_ID) AS Num_Of_Courses FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name ORDER BY Num_Of_Courses DESC",
        "SELECT t.Name AS Instructor_Name, COUNT(DISTINCT ca.Course_ID) AS Courses_Taught FROM teacher t INNER JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name",
        "SELECT Name, COUNT(DISTINCT Course_ID) AS Course_Total FROM teacher JOIN course_arrange ON Teacher_ID = Teacher_ID GROUP BY Name HAVING COUNT(DISTINCT Course_ID) > 0",
        "SELECT t.Name, COUNT(DISTINCT ca.Course_ID) AS Courses FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name ORDER BY t.Name ASC"
      ]
    ]
  },
  {
    "id": 406,
    "db_id": "course_teach",
    "infer_predictions": [
      [
        "SELECT T.Name, COUNT(DISTINCT C.Course_ID) AS NumCourses FROM teacher T JOIN course_arrange C ON T.Teacher_ID = C.Teacher_ID GROUP BY T.Teacher_ID, T.Name",
        "SELECT teacher.Name, COUNT(course_arrange.Course_ID) AS CoursesTaught FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name",
        "SELECT Name, COUNT(*) AS CourseCount FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID",
        "SELECT t.Name, COUNT(c.Course_ID) AS TotalCourses FROM teacher t, course_arrange c WHERE t.Teacher_ID = c.Teacher_ID GROUP BY t.Name",
        "SELECT Name, COUNT(Course_ID) FROM teacher LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID, teacher.Name",
        "SELECT teacher.Name AS TeacherName, COUNT(course_arrange.Course_ID) AS CourseCount FROM teacher LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name",
        "SELECT t.Name, COUNT(DISTINCT c.Course_ID) FROM teacher t LEFT JOIN course_arrange c ON t.Teacher_ID = c.Teacher_ID GROUP BY t.Name ORDER BY t.Name",
        "SELECT Name, COUNT(Course_ID) AS NumberOfCourses FROM teacher JOIN course_arrange ON Teacher_ID = Teacher_ID GROUP BY Name ORDER BY Name",
        "SELECT t.Name AS TeacherName, COUNT(*) AS CoursesTaught FROM teacher t JOIN course_arrange c ON t.Teacher_ID = c.Teacher_ID GROUP BY t.Name ORDER BY CoursesTaught DESC",
        "SELECT Name, COUNT(Course_ID) AS Courses FROM teacher INNER JOIN course_arrange ON Teacher_ID = Teacher_ID GROUP BY Name HAVING COUNT(Course_ID) > 0"
      ]
    ]
  },
  {
    "id": 407,
    "db_id": "course_teach",
    "infer_predictions": [
      [
        "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Teacher_ID HAVING COUNT(DISTINCT T2.Course_ID) >= 2",
        "SELECT Name FROM teacher WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange GROUP BY Teacher_ID HAVING COUNT(DISTINCT Course_ID) >= 2)",
        "SELECT teacher.Name FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2",
        "SELECT DISTINCT Name FROM teacher WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange GROUP BY Teacher_ID HAVING COUNT(Course_ID) > 1)",
        "SELECT Name FROM teacher t WHERE EXISTS (SELECT 1 FROM course_arrange c WHERE c.Teacher_ID = t.Teacher_ID GROUP BY c.Teacher_ID HAVING COUNT(DISTINCT c.Course_ID) >= 2)",
        "SELECT t.Name FROM teacher t JOIN (SELECT Teacher_ID FROM course_arrange GROUP BY Teacher_ID HAVING COUNT(DISTINCT Course_ID) >= 2) c ON t.Teacher_ID = c.Teacher_ID",
        "SELECT Name FROM teacher WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange GROUP BY Teacher_ID HAVING COUNT(*) > 1)",
        "SELECT t.Name FROM teacher t WHERE (SELECT COUNT(DISTINCT c.Course_ID) FROM course_arrange c WHERE c.Teacher_ID = t.Teacher_ID) >= 2",
        "SELECT Name FROM teacher t JOIN course_arrange c ON t.Teacher_ID = c.Teacher_ID GROUP BY t.Teacher_ID, t.Name HAVING COUNT(DISTINCT c.Course_ID) >= 2",
        "SELECT Name FROM teacher WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange GROUP BY Teacher_ID HAVING COUNT(DISTINCT Course_ID) >= 2)"
      ]
    ]
  },
  {
    "id": 408,
    "db_id": "course_teach",
    "infer_predictions": [
      [
        "SELECT T.Name FROM teacher T JOIN course_arrange C ON T.Teacher_ID = C.Teacher_ID GROUP BY T.Teacher_ID HAVING COUNT(C.Course_ID) >= 2",
        "SELECT Name FROM teacher WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange GROUP BY Teacher_ID HAVING COUNT(Course_ID) >= 2)",
        "SELECT teacher.Name FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID HAVING COUNT(course_arrange.Course_ID) >= 2",
        "SELECT DISTINCT T.Name FROM teacher T, course_arrange C WHERE T.Teacher_ID = C.Teacher_ID GROUP BY T.Teacher_ID HAVING COUNT(C.Course_ID) >= 2",
        "SELECT T.Name FROM teacher T WHERE EXISTS (SELECT 1 FROM course_arrange C WHERE T.Teacher_ID = C.Teacher_ID GROUP BY C.Teacher_ID HAVING COUNT(C.Course_ID) >= 2)",
        "SELECT T.Name FROM teacher T WHERE T.Teacher_ID IN (SELECT Teacher_ID FROM course_arrange GROUP BY Teacher_ID HAVING COUNT(*) >= 2)",
        "SELECT T.Name FROM teacher AS T JOIN (SELECT Teacher_ID FROM course_arrange GROUP BY Teacher_ID HAVING COUNT(Course_ID) >= 2) AS C ON T.Teacher_ID = C.Teacher_ID",
        "SELECT Name FROM teacher WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange GROUP BY Teacher_ID HAVING COUNT(DISTINCT Course_ID) >= 2)",
        "SELECT T.Name FROM teacher T JOIN course_arrange C ON T.Teacher_ID = C.Teacher_ID GROUP BY T.Teacher_ID, T.Name HAVING COUNT(*) >= 2",
        "SELECT T.Name FROM teacher T WHERE (SELECT COUNT(*) FROM course_arrange C WHERE C.Teacher_ID = T.Teacher_ID) >= 2"
      ]
    ]
  },
  {
    "id": 409,
    "db_id": "course_teach",
    "infer_predictions": [
      [
        "SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)",
        "SELECT t.Name FROM teacher t WHERE t.Teacher_ID NOT IN (SELECT c.Teacher_ID FROM course_arrange c)",
        "SELECT Name FROM teacher WHERE NOT EXISTS (SELECT 1 FROM course_arrange WHERE Teacher_ID = teacher.Teacher_ID)",
        "SELECT t.Name FROM teacher t LEFT JOIN course_arrange c ON t.Teacher_ID = c.Teacher_ID WHERE c.Teacher_ID IS NULL",
        "SELECT Name FROM teacher t WHERE t.Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)",
        "SELECT DISTINCT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT DISTINCT Teacher_ID FROM course_arrange)",
        "SELECT Name FROM teacher EXCEPT SELECT Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID",
        "SELECT Name FROM teacher t1 WHERE NOT EXISTS (SELECT NULL FROM course_arrange t2 WHERE t2.Teacher_ID = t1.Teacher_ID)",
        "SELECT t.Name FROM teacher t WHERE t.Teacher_ID NOT IN (SELECT DISTINCT c.Teacher_ID FROM course_arrange c)",
        "SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange WHERE Teacher_ID IS NOT NULL)"
      ]
    ]
  },
  {
    "id": 410,
    "db_id": "course_teach",
    "infer_predictions": [
      [
        "SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)",
        "SELECT t.Name FROM teacher t LEFT JOIN course_arrange c ON t.Teacher_ID = c.Teacher_ID WHERE c.Teacher_ID IS NULL",
        "SELECT Name FROM teacher WHERE NOT EXISTS (SELECT 1 FROM course_arrange WHERE Teacher_ID = teacher.Teacher_ID)",
        "SELECT t.Name FROM teacher t WHERE t.Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)",
        "SELECT Name FROM teacher t WHERE t.Teacher_ID NOT IN (SELECT DISTINCT Teacher_ID FROM course_arrange)",
        "SELECT Name FROM teacher AS t WHERE NOT EXISTS (SELECT NULL FROM course_arrange AS c WHERE c.Teacher_ID = t.Teacher_ID)",
        "SELECT t.Name FROM teacher t WHERE NOT EXISTS (SELECT * FROM course_arrange c WHERE c.Teacher_ID = t.Teacher_ID)",
        "SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT DISTINCT Teacher_ID FROM course_arrange WHERE Teacher_ID IS NOT NULL)",
        "SELECT t.Name FROM teacher t LEFT OUTER JOIN course_arrange c ON t.Teacher_ID = c.Teacher_ID WHERE c.Teacher_ID IS NULL",
        "SELECT Name FROM teacher t WHERE t.Teacher_ID NOT EXISTS IN (SELECT Teacher_ID FROM course_arrange)"
      ]
    ]
  },
  {
    "id": 411,
    "db_id": "museum_visit",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM visitor WHERE Age < 30",
        "SELECT COUNT(ID) FROM visitor WHERE Age < 30",
        "SELECT COUNT(*) AS NumberOfVisitors FROM visitor WHERE Age < 30",
        "SELECT COUNT(visitor.ID) FROM visitor WHERE visitor.Age < 30",
        "SELECT COUNT(*) FROM visitor WHERE Age BETWEEN 0 AND 29",
        "SELECT COUNT(*) FROM visitor WHERE Age <= 29",
        "SELECT COUNT(ID) AS TotalYoungVisitors FROM visitor WHERE Age < 30",
        "SELECT COUNT(*) FROM visitor WHERE Age < 30 GROUP BY Age",
        "SELECT COUNT(DISTINCT ID) FROM visitor WHERE Age < 30",
        "SELECT COUNT(*) FROM visitor v WHERE v.Age < 30"
      ]
    ]
  },
  {
    "id": 412,
    "db_id": "museum_visit",
    "infer_predictions": [
      [
        "SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC",
        "SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Level_of_membership DESC",
        "SELECT v.Name FROM visitor v WHERE v.Level_of_membership > 4 ORDER BY v.Level_of_membership DESC",
        "SELECT Name FROM visitor WHERE Level_of_membership > '4' ORDER BY Level_of_membership DESC",
        "SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESCENDING",
        "SELECT visitor.Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESCENDING",
        "SELECT Name FROM visitor WHERE Level_of_membership > 4 DESCENDING ORDER BY Level_of_membership",
        "SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC",
        "SELECT Name FROM visitor WHERE CAST(Level_of_membership AS INT) > 4 ORDER BY Level_of_membership DESC",
        "SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC, Name ASC"
      ]
    ]
  },
  {
    "id": 413,
    "db_id": "museum_visit",
    "infer_predictions": [
      [
        "SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4",
        "SELECT AVG(visitor.Age) AS Average_Age FROM visitor WHERE visitor.Level_of_membership <= 4",
        "SELECT AVG(Age) AS AverageAge FROM visitor WHERE Level_of_membership <= '4'",
        "SELECT AVG(Age) FROM visitor WHERE CAST(Level_of_membership AS INT) <= 4",
        "SELECT AVG(Age) FROM visitor WHERE Level_of_membership NOT > 4",
        "SELECT AVG(Age) FROM visitor WHERE Level_of_membership IN ('1', '2', '3', '4')",
        "SELECT AVG(Age) FROM visitor WHERE Level_of_membership BETWEEN 1 AND 4",
        "SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4.0",
        "SELECT AVG(visitor.Age) FROM visitor WHERE visitor.Level_of_membership <= 4 GROUP BY Level_of_membership",
        "SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= '4'"
      ]
    ]
  },
  {
    "id": 414,
    "db_id": "museum_visit",
    "infer_predictions": [
      [
        "SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC",
        "SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Age DESC",
        "SELECT v.Name, v.Level_of_membership FROM visitor v WHERE v.Level_of_membership > 4 ORDER BY v.Age DESC",
        "SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 SORT BY Age DESCENDING",
        "SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > '4' ORDER BY Age DESC",
        "SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESCENDING",
        "SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC, Name ASC",
        "SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC, Level_of_membership DESC",
        "SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC, Level_of_membership ASC",
        "SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC LIMIT 100"
      ]
    ]
  },
  {
    "id": 415,
    "db_id": "museum_visit",
    "infer_predictions": [
      [
        "SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)",
        "SELECT m.Museum_ID, m.Name FROM museum m WHERE m.Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)",
        "SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff IN (SELECT MAX(Num_of_Staff) FROM museum)",
        "SELECT m.Museum_ID, m.Name FROM museum m WHERE m.Num_of_Staff = (SELECT MAX(n.Num_of_Staff) FROM museum n)",
        "SELECT Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1",
        "SELECT m.Museum_ID, m.Name FROM museum m ORDER BY m.Num_of_Staff DESC FETCH FIRST 1 ROWS ONLY",
        "SELECT TOP 1 Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC",
        "SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT TOP 1 Num_of_Staff FROM museum ORDER BY Num_of_Staff DESC)",
        "SELECT m.Museum_ID, m.Name FROM museum m WHERE m.Num_of_Staff >= ALL (SELECT Num_of_Staff FROM museum)",
        "SELECT Museum_ID, Name FROM museum m1 WHERE NOT EXISTS (SELECT 1 FROM museum m2 WHERE m2.Num_of_Staff > m1.Num_of_Staff)"
      ]
    ]
  },
  {
    "id": 416,
    "db_id": "museum_visit",
    "infer_predictions": [
      [
        "SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009",
        "SELECT AVG(Num_of_Staff) AS Average_Staff FROM museum WHERE Open_Year < 2009",
        "SELECT AVG(museum.Num_of_Staff) FROM museum WHERE museum.Open_Year < 2009",
        "SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < '2009'",
        "SELECT AVG(Num_of_Staff) AS AverageStaff FROM museum WHERE Open_Year < 2009 GROUP BY Open_Year",
        "SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009 GROUP BY Open_Year HAVING Open_Year < 2009",
        "SELECT AVG(Num_of_Staff) FROM museum m WHERE m.Open_Year < 2009",
        "SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009 AND Num_of_Staff IS NOT NULL",
        "SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009 ORDER BY Open_Year",
        "SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009 LIMIT 1"
      ]
    ]
  },
  {
    "id": 417,
    "db_id": "museum_visit",
    "infer_predictions": [
      [
        "SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'",
        "SELECT museum.Open_Year, museum.Num_of_Staff FROM museum WHERE museum.Name = 'Plaza Museum'",
        "SELECT m.Open_Year, m.Num_of_Staff FROM museum m WHERE m.Name = 'Plaza Museum'",
        "SELECT Open_Year AS OpeningYear, Num_of_Staff AS StaffNumber FROM museum WHERE Name = 'Plaza Museum'",
        "SELECT Open_Year, Num_of_Staff FROM museum WHERE Name LIKE 'Plaza Museum'",
        "SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum' LIMIT 1",
        "SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum' AND Open_Year IS NOT NULL",
        "SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum' ORDER BY Open_Year DESC LIMIT 1",
        "SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum' ORDER BY Num_of_Staff DESC",
        "SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum' AND Num_of_Staff > 0"
      ]
    ]
  },
  {
    "id": 418,
    "db_id": "museum_visit",
    "infer_predictions": [
      [
        "SELECT Name FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > 2010)",
        "SELECT m.Name FROM museum m WHERE m.Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > 2010)",
        "SELECT Name FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum m WHERE m.Open_Year > 2010)",
        "SELECT m.Name FROM museum m WHERE m.Num_of_Staff > (SELECT MIN(m2.Num_of_Staff) FROM museum m2 WHERE m2.Open_Year > 2010)",
        "SELECT Name FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum m WHERE m.Open_Year > '2010')",
        "SELECT Name FROM museum m WHERE m.Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > '2010')",
        "SELECT Name FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum m WHERE m.Open_Year > 2010 AND m.Num_of_Staff IS NOT NULL)",
        "SELECT Name FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > 2010 AND Num_of_Staff IS NOT NULL)",
        "SELECT Name FROM museum m WHERE m.Num_of_Staff > (SELECT MIN(m2.Num_of_Staff) FROM museum m2 WHERE m2.Open_Year > 2010 AND m2.Num_of_Staff IS NOT NULL)",
        "SELECT m.Name FROM museum m WHERE m.Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > 2010) AND m.Open_Year > 2010"
      ]
    ]
  },
  {
    "id": 419,
    "db_id": "museum_visit",
    "infer_predictions": [
      [
        "SELECT v.ID, v.Name, v.Age FROM visitor v WHERE v.ID IN (SELECT visitor_ID FROM visit GROUP BY visitor_ID, Museum_ID HAVING COUNT(*) > 1)",
        "SELECT visitor.ID, visitor.Name, visitor.Age FROM visitor WHERE visitor.ID IN (SELECT visitor_ID FROM visit GROUP BY visitor_ID, Museum_ID HAVING COUNT(Museum_ID) > 1)",
        "SELECT ID, Name, Age FROM visitor WHERE ID IN (SELECT visitor_ID FROM visit GROUP BY visitor_ID, Museum_ID HAVING COUNT(visitor_ID) > 1)",
        "SELECT v.ID, v.Name, v.Age FROM visitor v JOIN (SELECT visitor_ID FROM visit GROUP BY visitor_ID, Museum_ID HAVING COUNT(*) > 1) AS sub ON v.ID = sub.visitor_ID",
        "SELECT DISTINCT v.ID, v.Name, v.Age FROM visitor v, visit vi WHERE v.ID = vi.visitor_ID GROUP BY vi.visitor_ID, vi.Museum_ID HAVING COUNT(vi.visitor_ID) > 1",
        "SELECT visitor.ID, visitor.Name, visitor.Age FROM visitor INNER JOIN (SELECT visitor_ID FROM visit GROUP BY visitor_ID, Museum_ID HAVING COUNT(*) > 1) subquery ON visitor.ID = subquery.visitor_ID",
        "SELECT ID, Name, Age FROM visitor WHERE EXISTS (SELECT 1 FROM visit WHERE visitor.ID = visit.visitor_ID GROUP BY visitor_ID, Museum_ID HAVING COUNT(*) > 1)",
        "SELECT v.ID, v.Name, v.Age FROM visitor v WHERE v.ID IN (SELECT visitor_ID FROM visit vi GROUP BY vi.visitor_ID, vi.Museum_ID HAVING COUNT(vi.visitor_ID) > 1)",
        "SELECT ID, Name, Age FROM visitor WHERE ID IN (SELECT visitor_ID FROM visit GROUP BY visitor_ID, Museum_ID HAVING COUNT(visitor_ID) > 1 AND COUNT(Museum_ID) > 1)",
        "SELECT v.ID, v.Name, v.Age FROM visitor v WHERE EXISTS (SELECT NULL FROM visit vi WHERE v.ID = vi.visitor_ID GROUP BY vi.visitor_ID, vi.Museum_ID HAVING COUNT(*) > 1)"
      ]
    ]
  },
  {
    "id": 420,
    "db_id": "museum_visit",
    "infer_predictions": [
      [
        "SELECT v.ID, v.Name, v.Level_of_membership FROM visitor v JOIN (SELECT visitor_ID, SUM(Total_spent) AS TotalSpent FROM visit GROUP BY visitor_ID) s ON v.ID = s.visitor_ID WHERE s.TotalSpent = (SELECT MAX(TotalSpent) FROM (SELECT SUM(Total_spent) AS TotalSpent FROM visit GROUP BY visitor_ID) t)",
        "SELECT v.ID, v.Name, v.Level_of_membership FROM visitor v, (SELECT visitor_ID, SUM(Total_spent) AS TotalSpent FROM visit GROUP BY visitor_ID) s WHERE v.ID = s.visitor_ID AND s.TotalSpent = (SELECT MAX(TotalSpent) FROM (SELECT SUM(Total_spent) AS TotalSpent FROM visit GROUP BY visitor_ID) t)",
        "SELECT ID, Name, Level_of_membership FROM visitor WHERE ID IN (SELECT visitor_ID FROM visit GROUP BY visitor_ID HAVING SUM(Total_spent) = (SELECT MAX(TotalSpent) FROM (SELECT SUM(Total_spent) AS TotalSpent FROM visit GROUP BY visitor_ID) t))",
        "SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor INNER JOIN (SELECT visitor_ID, SUM(Total_spent) AS TotalSpent FROM visit GROUP BY visitor_ID) visit_summary ON visitor.ID = visit_summary.visitor_ID WHERE visit_summary.TotalSpent = (SELECT MAX(TotalSpent) FROM (SELECT SUM(Total_spent) AS TotalSpent FROM visit GROUP BY visitor_ID) t)",
        "SELECT ID, Name, Level_of_membership FROM visitor WHERE ID = (SELECT visitor_ID FROM visit GROUP BY visitor_ID ORDER BY SUM(Total_spent) DESC LIMIT 1)",
        "SELECT v.ID, v.Name, v.Level_of_membership FROM visitor v WHERE EXISTS (SELECT 1 FROM visit vi WHERE vi.visitor_ID = v.ID GROUP BY vi.visitor_ID HAVING SUM(vi.Total_spent) = (SELECT MAX(TotalSpent) FROM (SELECT SUM(Total_spent) AS TotalSpent FROM visit GROUP BY visitor_ID) t))",
        "SELECT v.ID, v.Name, v.Level_of_membership FROM visitor v WHERE v.ID = (SELECT visitor_ID FROM visit GROUP BY visitor_ID HAVING SUM(Total_spent) = (SELECT MAX(TotalSpent) FROM (SELECT SUM(Total_spent) AS TotalSpent FROM visit GROUP BY visitor_ID) t))",
        "SELECT v.ID, v.Name, v.Level_of_membership FROM visitor v JOIN (SELECT visitor_ID, SUM(Total_spent) AS TotalSpent FROM visit GROUP BY visitor_ID HAVING SUM(Total_spent) = (SELECT MAX(TotalSpent) FROM (SELECT SUM(Total_spent) AS TotalSpent FROM visit GROUP BY visitor_ID) t)) s ON v.ID = s.visitor_ID",
        "SELECT v.ID, v.Name, v.Level_of_membership FROM visitor v WHERE v.ID IN (SELECT visitor_ID FROM visit GROUP BY visitor_ID HAVING SUM(Total_spent) = (SELECT MAX(TotalSpent) FROM (SELECT SUM(Total_spent) AS TotalSpent FROM visit GROUP BY visitor_ID) t))",
        "SELECT v.ID, v.Name, v.Level_of_membership FROM visitor v JOIN (SELECT visitor_ID, SUM(Total_spent) AS TotalSpent FROM visit GROUP BY visitor_ID) s ON v.ID = s.visitor_ID ORDER BY s.TotalSpent DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 421,
    "db_id": "museum_visit",
    "infer_predictions": [
      [
        "SELECT M.Museum_ID, M.Name FROM museum M WHERE M.Museum_ID = (SELECT V.Museum_ID FROM visit V GROUP BY V.Museum_ID ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT museum.Museum_ID, museum.Name FROM museum JOIN (SELECT Museum_ID, COUNT(*) AS visits FROM visit GROUP BY Museum_ID ORDER BY visits DESC LIMIT 1) AS MostVisited ON museum.Museum_ID = MostVisited.Museum_ID",
        "SELECT M.Museum_ID, M.Name FROM museum M INNER JOIN (SELECT Museum_ID FROM visit GROUP BY Museum_ID HAVING COUNT(*) = (SELECT MAX(visit_count) FROM (SELECT COUNT(*) AS visit_count FROM visit GROUP BY Museum_ID) AS Counts)) AS V ON M.Museum_ID = V.Museum_ID",
        "SELECT M.Museum_ID, M.Name FROM museum M, (SELECT Museum_ID FROM visit GROUP BY Museum_ID ORDER BY COUNT(*) DESC LIMIT 1) AS V WHERE M.Museum_ID = V.Museum_ID",
        "SELECT M.Museum_ID, M.Name FROM museum M WHERE EXISTS (SELECT 1 FROM visit V WHERE V.Museum_ID = M.Museum_ID GROUP BY V.Museum_ID HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM visit GROUP BY Museum_ID))",
        "SELECT M.Museum_ID, M.Name FROM museum M WHERE M.Museum_ID IN (SELECT TOP 1 Museum_ID FROM visit GROUP BY Museum_ID ORDER BY COUNT(*) DESC)",
        "SELECT M.Museum_ID, M.Name FROM museum M WHERE M.Museum_ID = (SELECT Museum_ID FROM visit GROUP BY Museum_ID ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY)",
        "SELECT M.Museum_ID, M.Name FROM museum M WHERE M.Museum_ID = (SELECT Museum_ID FROM visit GROUP BY Museum_ID ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT museum.Museum_ID, museum.Name FROM museum WHERE museum.Museum_ID = (SELECT Museum_ID FROM visit GROUP BY Museum_ID ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT M.Museum_ID, M.Name FROM museum M WHERE M.Museum_ID = (SELECT Museum_ID FROM (SELECT Museum_ID, COUNT(*) AS TotalVisits FROM visit GROUP BY Museum_ID ORDER BY TotalVisits DESC) AS Sub WHERE ROWNUM = 1)"
      ]
    ]
  },
  {
    "id": 422,
    "db_id": "museum_visit",
    "infer_predictions": [
      [
        "SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)",
        "SELECT m.Name FROM museum m LEFT JOIN visit v ON m.Museum_ID = v.Museum_ID WHERE v.Museum_ID IS NULL",
        "SELECT Name FROM museum WHERE NOT EXISTS (SELECT 1 FROM visit WHERE Museum_ID = museum.Museum_ID)",
        "SELECT m.Name FROM museum m WHERE NOT EXISTS (SELECT NULL FROM visit v WHERE v.Museum_ID = m.Museum_ID)",
        "SELECT Name FROM museum m WHERE m.Museum_ID NOT IN (SELECT Museum_ID FROM visit)",
        "SELECT DISTINCT Name FROM museum WHERE Museum_ID NOT IN (SELECT DISTINCT Museum_ID FROM visit)",
        "SELECT Name FROM museum AS m WHERE m.Museum_ID NOT IN (SELECT Museum_ID FROM visit AS v)",
        "SELECT Name FROM museum m WHERE m.Museum_ID NOT IN (SELECT v.Museum_ID FROM visit v)",
        "SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT DISTINCT Museum_ID FROM visit)",
        "SELECT Name FROM museum m LEFT OUTER JOIN visit v ON m.Museum_ID = v.Museum_ID WHERE v.Museum_ID IS NULL"
      ]
    ]
  },
  {
    "id": 423,
    "db_id": "museum_visit",
    "infer_predictions": [
      [
        "SELECT v.Name, v.Age FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID WHERE vi.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit)",
        "SELECT Name, Age FROM visitor WHERE ID IN (SELECT visitor_ID FROM visit WHERE Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit))",
        "SELECT visitor.Name, visitor.Age FROM visitor INNER JOIN visit ON visitor.ID = visit.visitor_ID WHERE visit.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit)",
        "SELECT Name, Age FROM visitor WHERE ID = ANY (SELECT visitor_ID FROM visit WHERE Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit))",
        "SELECT Name, Age FROM visitor v WHERE EXISTS (SELECT 1 FROM visit vi WHERE vi.visitor_ID = v.ID AND vi.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit))",
        "SELECT v.Name, v.Age FROM visitor v, visit vi WHERE v.ID = vi.visitor_ID AND vi.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit GROUP BY visitor_ID)",
        "SELECT Name, Age FROM visitor WHERE ID IN (SELECT visitor_ID FROM visit GROUP BY visitor_ID HAVING Num_of_Ticket = MAX(Num_of_Ticket))",
        "SELECT DISTINCT v.Name, v.Age FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID WHERE vi.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit)",
        "SELECT Name, Age FROM visitor WHERE ID IN (SELECT visitor_ID FROM visit vi WHERE vi.Num_of_Ticket = (SELECT MAX(vi.Num_of_Ticket) FROM visit))",
        "SELECT v.Name, v.Age FROM visitor v WHERE EXISTS (SELECT NULL FROM visit vi WHERE vi.visitor_ID = v.ID GROUP BY vi.visitor_ID HAVING MAX(vi.Num_of_Ticket) = (SELECT MAX(Num_of_Ticket) FROM visit))"
      ]
    ]
  },
  {
    "id": 424,
    "db_id": "museum_visit",
    "infer_predictions": [
      [
        "SELECT AVG(Num_of_Ticket) AS Average_Tickets, MAX(Num_of_Ticket) AS Maximum_Tickets FROM visit",
        "SELECT AVG(Num_of_Ticket) AS Average, MAX(Num_of_Ticket) AS Maximum FROM visit",
        "SELECT AVG(Num_of_Ticket) Average_Tickets, MAX(Num_of_Ticket) Maximum_Tickets FROM visit",
        "SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit",
        "SELECT AVG(visit.Num_of_Ticket) AS Average_Tickets, MAX(visit.Num_of_Ticket) AS Maximum_Tickets FROM visit",
        "SELECT AVG(visit.Num_of_Ticket) Average, MAX(visit.Num_of_Ticket) Maximum FROM visit",
        "SELECT AVG(visit.Num_of_Ticket) AS Average_Tickets, MAX(visit.Num_of_Ticket) AS Maximum_Tickets FROM visit",
        "SELECT AVG(Num_of_Ticket) AS Avg_Tickets, MAX(Num_of_Ticket) AS Max_Tickets FROM visit",
        "SELECT AVG(Num_of_Ticket) AS Average_Tickets, MAX(Num_of_Ticket) AS Max_Tickets FROM visit",
        "SELECT AVG(Num_of_Ticket) AS Avg_Tickets, MAX(Num_of_Ticket) AS Max_Tickets FROM visit"
      ]
    ]
  },
  {
    "id": 425,
    "db_id": "museum_visit",
    "infer_predictions": [
      [
        "SELECT SUM(Total_spent) FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Level_of_membership = 1",
        "SELECT SUM(visit.Total_spent) AS Total_Expense FROM visit INNER JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Level_of_membership = '1'",
        "SELECT SUM(v.Total_spent) FROM visit v, visitor vr WHERE v.visitor_ID = vr.ID AND vr.Level_of_membership = 1",
        "SELECT SUM(Total_spent) FROM visit, visitor WHERE visit.visitor_ID = visitor.ID AND visitor.Level_of_membership = 1",
        "SELECT SUM(Total_spent) AS TotalTicketExpense FROM visit INNER JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Level_of_membership = 1",
        "SELECT SUM(Total_spent) FROM visit v JOIN visitor vr ON v.visitor_ID = vr.ID WHERE vr.Level_of_membership = 1",
        "SELECT SUM(v.Total_spent) FROM visit v INNER JOIN visitor vr ON v.visitor_ID = vr.ID WHERE vr.Level_of_membership = 1",
        "SELECT SUM(Total_spent) FROM visit LEFT JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Level_of_membership = 1",
        "SELECT SUM(visit.Total_spent) FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Level_of_membership = '1'",
        "SELECT SUM(Total_spent) FROM visit v JOIN visitor vr ON v.visitor_ID = vr.ID WHERE vr.Level_of_membership = 1 GROUP BY vr.Level_of_membership HAVING vr.Level_of_membership = 1"
      ]
    ]
  },
  {
    "id": 426,
    "db_id": "museum_visit",
    "infer_predictions": [
      [
        "SELECT Name FROM visitor WHERE ID IN (SELECT visitor_ID FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year < 2009) INTERSECT SELECT Name FROM visitor WHERE ID IN (SELECT visitor_ID FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year > 2011)",
        "SELECT v.Name FROM visitor v WHERE EXISTS (SELECT 1 FROM visit vi JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year < 2009 AND vi.visitor_ID = v.ID) AND EXISTS (SELECT 1 FROM visit vi JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year > 2011 AND vi.visitor_ID = v.ID)",
        "SELECT DISTINCT v.Name FROM visitor v, visit vi, museum m WHERE v.ID = vi.visitor_ID AND vi.Museum_ID = m.Museum_ID AND m.Open_Year < 2009 AND v.ID IN (SELECT visitor_ID FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year > 2011)",
        "SELECT v.Name FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year < 2009 GROUP BY v.ID HAVING COUNT(DISTINCT CASE WHEN m.Open_Year > 2011 THEN m.Museum_ID ELSE NULL END) > 0",
        "WITH EarlyVisits AS (SELECT visitor_ID FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year < 2009), LateVisits AS (SELECT visitor_ID FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year > 2011) SELECT Name FROM visitor WHERE ID IN (SELECT visitor_ID FROM EarlyVisits) AND ID IN (SELECT visitor_ID FROM LateVisits)",
        "SELECT Name FROM visitor WHERE ID IN (SELECT visitor_ID FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year < 2009) AND ID IN (SELECT visitor_ID FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year > 2011)",
        "SELECT Name FROM visitor v WHERE EXISTS (SELECT 1 FROM visit vi JOIN museum m ON vi.Museum_ID = m.Museum_ID AND m.Open_Year < 2009 WHERE vi.visitor_ID = v.ID) AND EXISTS (SELECT 1 FROM visit vi JOIN museum m ON vi.Museum_ID = m.Museum_ID AND m.Open_Year > 2011 WHERE vi.visitor_ID = v.ID)",
        "SELECT v.Name FROM visitor v WHERE v.ID IN (SELECT vi.visitor_ID FROM visit vi INNER JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year < 2009) AND v.ID IN (SELECT vi.visitor_ID FROM visit vi INNER JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year > 2011)",
        "SELECT DISTINCT v.Name FROM visitor v INNER JOIN visit vi ON v.ID = vi.visitor_ID INNER JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year < 2009 AND v.ID IN (SELECT visitor_ID FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year > 2011)",
        "SELECT v.Name FROM visitor v WHERE v.ID IN (SELECT vi.visitor_ID FROM visit vi JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year < 2009) INTERSECT SELECT v.Name FROM visitor v WHERE v.ID IN (SELECT vi.visitor_ID FROM visit vi JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year > 2011)"
      ]
    ]
  },
  {
    "id": 427,
    "db_id": "museum_visit",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT visitor.ID) FROM visitor WHERE visitor.ID NOT IN (SELECT visit.visitor_ID FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year > 2010)",
        "SELECT COUNT(DISTINCT v.ID) FROM visitor v WHERE NOT EXISTS (SELECT 1 FROM visit vi JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year > 2010 AND vi.visitor_ID = v.ID)",
        "SELECT COUNT(*) FROM (SELECT DISTINCT visitor.ID FROM visitor LEFT JOIN visit ON visitor.ID = visit.visitor_ID LEFT JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year > 2010 OR museum.Museum_ID IS NULL) AS subquery",
        "SELECT COUNT(DISTINCT ID) FROM visitor WHERE ID NOT IN (SELECT visitor_ID FROM visit WHERE Museum_ID IN (SELECT Museum_ID FROM museum WHERE Open_Year > 2010))",
        "WITH RecentMuseums AS (SELECT Museum_ID FROM museum WHERE Open_Year > 2010) SELECT COUNT(DISTINCT visitor.ID) FROM visitor LEFT JOIN visit ON visitor.ID = visit.visitor_ID WHERE visit.Museum_ID NOT IN (SELECT Museum_ID FROM RecentMuseums)",
        "SELECT COUNT(DISTINCT visitor.ID) FROM visitor EXCEPT SELECT DISTINCT visit.visitor_ID FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year > 2010",
        "SELECT COUNT(DISTINCT visitor.ID) FROM visitor WHERE NOT EXISTS (SELECT NULL FROM visit INNER JOIN museum ON visit.Museum_ID = museum.Museum_ID AND museum.Open_Year > 2010 AND visit.visitor_ID = visitor.ID)",
        "SELECT COUNT(DISTINCT v.ID) FROM visitor v LEFT JOIN (SELECT visitor_ID FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE Open_Year > 2010) vm ON v.ID = vm.visitor_ID WHERE vm.visitor_ID IS NULL",
        "SELECT COUNT(DISTINCT v.ID) FROM visitor v WHERE v.ID NOT IN (SELECT DISTINCT vi.visitor_ID FROM visit vi INNER JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year > 2010)",
        "SELECT COUNT(DISTINCT visitor.ID) FROM visitor LEFT JOIN (SELECT DISTINCT visitor_ID FROM visit, museum WHERE visit.Museum_ID = museum.Museum_ID AND museum.Open_Year > 2010) AS RecentVisitors ON visitor.ID = RecentVisitors.visitor_ID WHERE RecentVisitors.visitor_ID IS NULL"
      ]
    ]
  },
  {
    "id": 428,
    "db_id": "museum_visit",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008",
        "SELECT COUNT(Museum_ID) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008",
        "SELECT COUNT(*) AS NumberOfMuseums FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008",
        "SELECT COUNT(*) FROM museum WHERE Open_Year NOT BETWEEN 2008 AND 2013",
        "SELECT COUNT(Museum_ID) AS MuseumsCount FROM museum WHERE Open_Year < 2008 OR Open_Year > 2013",
        "SELECT COUNT(*) FROM museum WHERE Open_Year < 2008 UNION SELECT COUNT(*) FROM museum WHERE Open_Year > 2013",
        "SELECT SUM(CASE WHEN Open_Year < 2008 OR Open_Year > 2013 THEN 1 ELSE 0 END) FROM museum",
        "SELECT COUNT(*) FROM museum WHERE Open_Year < 2008 OR Open_Year > 2013",
        "SELECT COUNT(Museum_ID) FROM museum WHERE Open_Year NOT IN (2008, 2009, 2010, 2011, 2012, 2013)",
        "SELECT COUNT(*) FROM museum WHERE Open_Year <= 2008 OR Open_Year >= 2013"
      ]
    ]
  },
  {
    "id": 429,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM players",
        "SELECT COUNT(player_id) FROM players",
        "SELECT COUNT(DISTINCT player_id) FROM players",
        "SELECT COUNT(ALL player_id) FROM players",
        "SELECT COUNT(player_id) AS total_players FROM players",
        "SELECT COUNT(DISTINCT player_id) AS total_players FROM players",
        "SELECT COUNT(*) AS TotalNumberOfPlayers FROM players",
        "SELECT COUNT(1) FROM players",
        "SELECT COUNT(*) FROM (SELECT DISTINCT player_id FROM players) AS unique_players",
        "SELECT COUNT(player_id) FROM players WHERE player_id IS NOT NULL"
      ]
    ]
  },
  {
    "id": 430,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM players",
        "SELECT COUNT(player_id) FROM players",
        "SELECT COUNT(DISTINCT player_id) FROM players",
        "SELECT COUNT(1) FROM players",
        "SELECT COUNT(players.player_id) FROM players",
        "SELECT COUNT(DISTINCT players.player_id) FROM players",
        "SELECT COUNT(*) AS total_players FROM players",
        "SELECT COUNT(player_id) AS player_count FROM players",
        "SELECT COUNT(DISTINCT player_id) AS unique_player_count FROM players",
        "SELECT COUNT(*) FROM players WHERE player_id IS NOT NULL"
      ]
    ]
  },
  {
    "id": 431,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT (SELECT COUNT(*) FROM matches) + (SELECT COUNT(*) FROM qualifying_matches) AS total_matches;",
        "SELECT COUNT(*) FROM matches UNION ALL SELECT COUNT(*) FROM qualifying_matches;",
        "SELECT SUM(count) FROM (SELECT COUNT(*) AS count FROM matches UNION ALL SELECT COUNT(*) AS count FROM qualifying_matches) AS subquery;",
        "SELECT COUNT(*) FROM (SELECT * FROM matches UNION ALL SELECT * FROM qualifying_matches) AS combined;",
        "SELECT (SELECT COUNT(*) FROM matches) AS match_count, (SELECT COUNT(*) FROM qualifying_matches) AS qualifying_match_count;",
        "SELECT COUNT(match_num) FROM matches UNION ALL SELECT COUNT(match_num) FROM qualifying_matches;",
        "SELECT COUNT(*) FROM matches UNION SELECT COUNT(*) FROM qualifying_matches;",
        "SELECT COUNT(*) FROM (SELECT match_num FROM matches UNION ALL SELECT match_num FROM qualifying_matches) AS total;",
        "SELECT COUNT(*) FROM matches + SELECT COUNT(*) FROM qualifying_matches;",
        "SELECT COUNT(*) FROM matches, qualifying_matches;"
      ]
    ]
  },
  {
    "id": 432,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM matches",
        "SELECT COUNT(match_num) FROM matches",
        "SELECT COUNT(1) FROM matches",
        "SELECT COUNT(*) AS total_matches FROM matches",
        "SELECT COUNT(match_num) AS match_count FROM matches",
        "SELECT COUNT(*) FROM matches WHERE match_num IS NOT NULL",
        "SELECT COUNT(DISTINCT match_num) FROM matches",
        "SELECT COUNT(DISTINCT match_num) AS unique_matches FROM matches",
        "SELECT COUNT(*) FROM matches WHERE match_num > 0",
        "SELECT COUNT(*) FROM matches WHERE match_num >= 1"
      ]
    ]
  },
  {
    "id": 433,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT first_name, birth_date FROM players WHERE country_code = 'USA'",
        "SELECT p.first_name, p.birth_date FROM players p WHERE p.country_code = 'USA'",
        "SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA'",
        "SELECT first_name AS FirstName, birth_date AS BirthDate FROM players WHERE country_code = 'USA'",
        "SELECT first_name, birth_date FROM players WHERE country_code LIKE 'USA'",
        "SELECT first_name, birth_date FROM players WHERE country_code = 'USA' ORDER BY first_name",
        "SELECT first_name, birth_date FROM players WHERE country_code = 'USA' ORDER BY birth_date",
        "SELECT first_name, birth_date FROM players WHERE country_code = 'USA' AND birth_date IS NOT NULL",
        "SELECT DISTINCT first_name, birth_date FROM players WHERE country_code = 'USA'",
        "SELECT first_name, birth_date FROM players WHERE country_code = 'USA' GROUP BY first_name, birth_date"
      ]
    ]
  },
  {
    "id": 434,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT first_name, birth_date FROM players WHERE country_code = 'USA'",
        "SELECT p.first_name, p.birth_date FROM players p WHERE p.country_code = 'USA'",
        "SELECT players.first_name AS FirstName, players.birth_date AS BirthDate FROM players WHERE players.country_code = 'USA'",
        "SELECT first_name, birth_date FROM players WHERE country_code LIKE 'USA'",
        "SELECT first_name, birth_date FROM players WHERE country_code = 'USA' ORDER BY first_name",
        "SELECT first_name, birth_date FROM players WHERE country_code = 'USA' ORDER BY birth_date",
        "SELECT DISTINCT first_name, birth_date FROM players WHERE country_code = 'USA'",
        "SELECT first_name AS 'First Name', birth_date AS 'Birth Date' FROM players WHERE country_code = 'USA'",
        "SELECT first_name, birth_date FROM players WHERE country_code = 'USA' AND first_name IS NOT NULL",
        "SELECT first_name, birth_date FROM players WHERE country_code = 'USA' AND birth_date IS NOT NULL"
      ]
    ]
  },
  {
    "id": 435,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches",
        "SELECT AVG(matches.loser_age) AS average_loser_age, AVG(matches.winner_age) AS average_winner_age FROM matches",
        "SELECT (SELECT AVG(loser_age) FROM matches) AS avg_loser_age, (SELECT AVG(winner_age) FROM matches) AS avg_winner_age",
        "SELECT AVG(loser_age) AS AverageLoserAge, AVG(winner_age) AS AverageWinnerAge FROM matches",
        "SELECT AVG(loser_age), AVG(winner_age) FROM matches",
        "SELECT AVG(m.loser_age) AS avg_loser_age, AVG(m.winner_age) AS avg_winner_age FROM matches m",
        "SELECT AVG(loser_age) AS 'Average Age of Losers', AVG(winner_age) AS 'Average Age of Winners' FROM matches",
        "SELECT AVG(loser_age) AS loser_average_age, AVG(winner_age) AS winner_average_age FROM matches",
        "SELECT AVG(loser_age) AS AvgLoserAge, AVG(winner_age) AS AvgWinnerAge FROM matches",
        "SELECT AVG(loser_age) AS 'Avg Age of Losers', AVG(winner_age) AS 'Avg Age of Winners' FROM matches"
      ]
    ]
  },
  {
    "id": 436,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches",
        "SELECT AVG(matches.loser_age) AS average_loser_age, AVG(matches.winner_age) AS average_winner_age FROM matches",
        "SELECT AVG(loser_age) AS AverageLoserAge, AVG(winner_age) AS AverageWinnerAge FROM matches",
        "SELECT AVG(loser_age) AS 'Average Age of Losers', AVG(winner_age) AS 'Average Age of Winners' FROM matches",
        "SELECT AVG(loser_age) AS loser_average_age, AVG(winner_age) AS winner_average_age FROM matches",
        "SELECT AVG(loser_age), AVG(winner_age) FROM matches",
        "SELECT AVG(loser_age) loser_avg_age, AVG(winner_age) winner_avg_age FROM matches",
        "SELECT AVG(loser_age) AS AvgLoserAge, AVG(winner_age) AS AvgWinnerAge FROM matches",
        "SELECT AVG(loser_age) AS 'Avg Age of Losers', AVG(winner_age) AS 'Avg Age of Winners' FROM matches",
        "SELECT AVG(loser_age) AS 'Average Age Losers', AVG(winner_age) AS 'Average Age Winners' FROM matches"
      ]
    ]
  },
  {
    "id": 437,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT AVG(winner_rank) AS average_winner_rank FROM matches",
        "SELECT AVG(winner_rank) FROM matches",
        "SELECT AVG(matches.winner_rank) FROM matches",
        "SELECT AVG(matches.winner_rank) AS avg_rank FROM matches",
        "SELECT AVG(winner_rank) AS avg_winner_rank FROM matches WHERE winner_rank IS NOT NULL",
        "SELECT AVG(winner_rank) FROM matches WHERE winner_rank > 0",
        "SELECT AVG(winner_rank) AS AverageRank FROM matches",
        "SELECT AVG(winner_rank) FROM matches WHERE winner_rank IS NOT NULL",
        "SELECT AVG(winner_rank) AS AverageWinnerRank FROM matches WHERE winner_rank > 0",
        "SELECT AVG(winner_rank) FROM matches WHERE winner_rank IS NOT NULL AND winner_rank > 0"
      ]
    ]
  },
  {
    "id": 438,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT AVG(rankings.ranking) AS average_rank FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id",
        "SELECT AVG(ranking) FROM rankings WHERE player_id IN (SELECT winner_id FROM matches)",
        "SELECT AVG(r.ranking) FROM rankings r INNER JOIN matches m ON r.player_id = m.winner_id",
        "SELECT AVG(ranking) AS avg_winner_rank FROM rankings WHERE player_id IN (SELECT DISTINCT winner_id FROM matches)",
        "SELECT AVG(ranking) FROM rankings JOIN (SELECT winner_id FROM matches) AS winners ON rankings.player_id = winners.winner_id",
        "SELECT AVG(ranking) FROM rankings, matches WHERE rankings.player_id = matches.winner_id",
        "SELECT AVG(ranking) FROM rankings r, matches m WHERE r.player_id = m.winner_id",
        "SELECT AVG(ranking) FROM rankings INNER JOIN matches ON rankings.player_id = matches.winner_id",
        "SELECT AVG(r.ranking) FROM rankings r JOIN matches m ON r.player_id = m.winner_id",
        "SELECT AVG(ranking) FROM (SELECT ranking FROM rankings WHERE player_id IN (SELECT winner_id FROM matches)) AS winner_ranks"
      ]
    ]
  },
  {
    "id": 439,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT MAX(loser_rank) FROM matches",
        "SELECT MAX(loser_rank) AS highest_loser_rank FROM matches",
        "SELECT TOP 1 loser_rank FROM matches ORDER BY loser_rank DESC",
        "SELECT loser_rank FROM matches ORDER BY loser_rank DESC LIMIT 1",
        "SELECT MAX(loser_rank) FROM matches WHERE loser_rank IS NOT NULL",
        "SELECT MAX(loser_rank) AS MaxRank FROM matches",
        "SELECT * FROM (SELECT MAX(loser_rank) FROM matches) AS HighestRank",
        "SELECT MAX(loser_rank) FROM matches WHERE loser_rank > 0",
        "SELECT MAX(loser_rank) FROM matches GROUP BY loser_rank ORDER BY loser_rank DESC LIMIT 1",
        "SELECT MAX(loser_rank) FROM matches WHERE loser_rank <> 'NULL'"
      ]
    ]
  },
  {
    "id": 440,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT MIN(loser_rank) FROM matches WHERE loser_rank IS NOT NULL",
        "SELECT MIN(loser_rank) AS BestLoserRank FROM matches",
        "SELECT MIN(loser_rank) FROM matches",
        "SELECT loser_rank FROM matches ORDER BY loser_rank ASC LIMIT 1",
        "SELECT TOP 1 loser_rank FROM matches ORDER BY loser_rank",
        "SELECT * FROM (SELECT loser_rank FROM matches ORDER BY loser_rank ASC) WHERE ROWNUM = 1",
        "SELECT loser_rank FROM matches WHERE loser_rank = (SELECT MIN(loser_rank) FROM matches)",
        "SELECT MIN(loser_rank) FROM matches GROUP BY loser_rank ORDER BY loser_rank ASC LIMIT 1",
        "SELECT MIN(loser_rank) AS LowestRank FROM matches WHERE loser_rank IS NOT NULL",
        "SELECT MIN(loser_rank) FROM matches WHERE loser_rank > 0"
      ]
    ]
  },
  {
    "id": 441,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT country_code) FROM players",
        "SELECT COUNT(UNIQUE country_code) FROM players",
        "SELECT COUNT(*) FROM (SELECT DISTINCT country_code FROM players) AS unique_countries",
        "SELECT COUNT(DISTINCT country_code) AS distinct_countries FROM players",
        "SELECT DISTINCT COUNT(country_code) FROM players",
        "SELECT COUNT(country_code) FROM (SELECT DISTINCT country_code FROM players) temp",
        "SELECT COUNT(DISTINCT players.country_code) FROM players",
        "SELECT COUNT(*) FROM (SELECT country_code FROM players GROUP BY country_code) AS distinct_codes",
        "SELECT COUNT(DISTINCT country_code) FROM players WHERE country_code IS NOT NULL",
        "SELECT DISTINCT COUNT(country_code) FROM players WHERE country_code IS NOT NULL"
      ]
    ]
  },
  {
    "id": 442,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT country_code) FROM players",
        "SELECT COUNT(UNIQUE country_code) FROM players",
        "SELECT COUNT(*) FROM (SELECT DISTINCT country_code FROM players) AS unique_countries",
        "SELECT COUNT(DISTINCT country_code) AS distinct_countries FROM players",
        "SELECT DISTINCT COUNT(country_code) FROM players",
        "SELECT COUNT(country_code) FROM (SELECT DISTINCT country_code FROM players) temp",
        "SELECT COUNT(*) FROM (SELECT country_code FROM players GROUP BY country_code) AS distinct_countries",
        "SELECT COUNT(DISTINCT country_code) FROM players WHERE country_code IS NOT NULL",
        "SELECT COUNT(DISTINCT country_code) FROM players GROUP BY country_code HAVING country_code IS NOT NULL",
        "SELECT DISTINCT COUNT(country_code) FROM players WHERE country_code IS NOT NULL"
      ]
    ]
  },
  {
    "id": 443,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT loser_name) FROM matches",
        "SELECT COUNT(UNIQUE loser_name) FROM matches",
        "SELECT COUNT(*) FROM (SELECT DISTINCT loser_name FROM matches)",
        "SELECT DISTINCT COUNT(loser_name) FROM matches",
        "SELECT COUNT(DISTINCT loser_name) AS distinct_losers FROM matches",
        "SELECT COUNT(DISTINCT loser_name) FROM matches WHERE loser_name IS NOT NULL",
        "SELECT COUNT(DISTINCT loser_name) FROM matches GROUP BY loser_name",
        "SELECT COUNT(DISTINCT loser_name) FROM matches WHERE loser_name <> ''",
        "SELECT COUNT(DISTINCT loser_name) FROM matches WHERE loser_name != ''",
        "SELECT DISTINCT COUNT(loser_name) FROM matches WHERE loser_name IS NOT NULL"
      ]
    ]
  },
  {
    "id": 444,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT loser_name) FROM matches",
        "SELECT COUNT(UNIQUE loser_name) FROM matches",
        "SELECT COUNT(*) FROM (SELECT DISTINCT loser_name FROM matches)",
        "SELECT COUNT(DISTINCT loser_name) AS total_losers FROM matches",
        "SELECT COUNT(DISTINCT matches.loser_name) FROM matches",
        "SELECT DISTINCT COUNT(loser_name) FROM matches",
        "SELECT COUNT(DISTINCT loser_name) FROM matches GROUP BY loser_name",
        "SELECT COUNT(*) FROM (SELECT loser_name FROM matches GROUP BY loser_name)",
        "SELECT COUNT(DISTINCT loser_name) FROM matches WHERE loser_name IS NOT NULL",
        "SELECT DISTINCT COUNT(loser_name) FROM matches WHERE loser_name IS NOT NULL"
      ]
    ]
  },
  {
    "id": 445,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(tourney_name) > 10",
        "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
        "SELECT m.tourney_name FROM matches m GROUP BY m.tourney_name HAVING COUNT(m.tourney_name) > 10",
        "SELECT m.tourney_name FROM matches m GROUP BY m.tourney_name HAVING COUNT(*) > 10",
        "SELECT DISTINCT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(tourney_name) > 10",
        "SELECT DISTINCT m.tourney_name FROM matches m GROUP BY m.tourney_name HAVING COUNT(*) > 10",
        "SELECT tourney_name, COUNT(tourney_name) AS match_count FROM matches GROUP BY tourney_name HAVING match_count > 10",
        "SELECT m.tourney_name, COUNT(m.tourney_name) AS match_count FROM matches m GROUP BY m.tourney_name HAVING match_count > 10",
        "SELECT tourney_name FROM (SELECT tourney_name, COUNT(*) AS num_matches FROM matches GROUP BY tourney_name) AS subquery WHERE num_matches > 10",
        "SELECT m.tourney_name FROM (SELECT tourney_name, COUNT(*) AS num_matches FROM matches GROUP BY tourney_name) AS m WHERE m.num_matches > 10"
      ]
    ]
  },
  {
    "id": 446,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
        "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(tourney_name) > 10",
        "SELECT m.tourney_name FROM matches m GROUP BY m.tourney_name HAVING COUNT(m.tourney_name) > 10",
        "SELECT DISTINCT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(tourney_name) > 10",
        "SELECT tourney_name, COUNT(*) AS match_count FROM matches GROUP BY tourney_name HAVING match_count > 10",
        "SELECT tourney_name FROM (SELECT tourney_name, COUNT(*) AS num_matches FROM matches GROUP BY tourney_name) AS subquery WHERE num_matches > 10",
        "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(match_num) > 10",
        "SELECT DISTINCT m.tourney_name FROM matches m GROUP BY m.tourney_name HAVING COUNT(*) > 10",
        "SELECT tourney_name, COUNT(match_num) AS total_matches FROM matches GROUP BY tourney_name HAVING total_matches > 10",
        "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(DISTINCT match_num) > 10"
      ]
    ]
  },
  {
    "id": 447,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT P.first_name, P.last_name FROM players P WHERE P.player_id IN (SELECT M.winner_id FROM matches M WHERE M.year = 2013) INTERSECT SELECT P.first_name, P.last_name FROM players P WHERE P.player_id IN (SELECT M.winner_id FROM matches M WHERE M.year = 2016)",
        "SELECT first_name, last_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE year = 2013 INTERSECT SELECT winner_id FROM matches WHERE year = 2016)",
        "SELECT DISTINCT P.first_name, P.last_name FROM players P JOIN matches M1 ON P.player_id = M1.winner_id WHERE M1.year = 2013 AND P.player_id IN (SELECT M2.winner_id FROM matches M2 WHERE M2.year = 2016)",
        "SELECT first_name, last_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE year IN (2013, 2016) GROUP BY winner_id HAVING COUNT(DISTINCT year) = 2)",
        "WITH Winners2013 AS (SELECT winner_id FROM matches WHERE year = 2013), Winners2016 AS (SELECT winner_id FROM matches WHERE year = 2016) SELECT P.first_name, P.last_name FROM players P WHERE P.player_id IN (SELECT winner_id FROM Winners2013 INTERSECT SELECT winner_id FROM Winners2016)",
        "SELECT P.first_name, P.last_name FROM players P WHERE EXISTS (SELECT 1 FROM matches M WHERE M.winner_id = P.player_id AND M.year = 2013) AND EXISTS (SELECT 1 FROM matches M WHERE M.winner_id = P.player_id AND M.year = 2016)",
        "SELECT first_name, last_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE year = 2013) AND player_id IN (SELECT winner_id FROM matches WHERE year = 2016)",
        "SELECT P.first_name, P.last_name FROM players P INNER JOIN matches M ON P.player_id = M.winner_id WHERE M.year = 2013 AND P.player_id IN (SELECT winner_id FROM matches WHERE year = 2016)",
        "SELECT first_name, last_name FROM players WHERE player_id IN (SELECT winner_id FROM matches M1 WHERE M1.year = 2013) AND player_id IN (SELECT winner_id FROM matches M2 WHERE M2.year = 2016)",
        "SELECT P.first_name, P.last_name FROM players P, matches M1, matches M2 WHERE P.player_id = M1.winner_id AND M1.year = 2013 AND P.player_id = M2.winner_id AND M2.year = 2016"
      ]
    ]
  },
  {
    "id": 448,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT P.first_name, P.last_name FROM players P WHERE P.player_id IN (SELECT M.winner_id FROM matches M WHERE M.year = 2013) INTERSECT SELECT P.first_name, P.last_name FROM players P WHERE P.player_id IN (SELECT M.winner_id FROM matches M WHERE M.year = 2016)",
        "SELECT first_name, last_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE year = 2013) AND player_id IN (SELECT winner_id FROM matches WHERE year = 2016)",
        "SELECT P.first_name, P.last_name FROM players P JOIN matches M1 ON P.player_id = M1.winner_id WHERE M1.year = 2013 JOIN matches M2 ON P.player_id = M2.winner_id WHERE M2.year = 2016",
        "SELECT DISTINCT P.first_name, P.last_name FROM players P, matches M WHERE P.player_id = M.winner_id AND M.year IN (2013, 2016) GROUP BY P.player_id HAVING COUNT(DISTINCT M.year) = 2",
        "WITH Winners2013 AS (SELECT winner_id FROM matches WHERE year = 2013), Winners2016 AS (SELECT winner_id FROM matches WHERE year = 2016) SELECT P.first_name, P.last_name FROM players P WHERE P.player_id IN (SELECT winner_id FROM Winners2013 INTERSECT SELECT winner_id FROM Winners2016)",
        "SELECT first_name, last_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE year = 2013 INTERSECT SELECT winner_id FROM matches WHERE year = 2016)",
        "SELECT P.first_name, P.last_name FROM players P WHERE EXISTS (SELECT 1 FROM matches M WHERE M.winner_id = P.player_id AND M.year = 2013) AND EXISTS (SELECT 1 FROM matches M WHERE M.winner_id = P.player_id AND M.year = 2016)",
        "SELECT first_name, last_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE year = 2013 UNION SELECT winner_id FROM matches WHERE year = 2016 HAVING COUNT(*) > 1)",
        "SELECT P.first_name, P.last_name FROM players P WHERE P.player_id IN (SELECT M.winner_id FROM matches M GROUP BY M.winner_id HAVING SUM(CASE WHEN M.year IN (2013, 2016) THEN 1 ELSE 0 END) = 2)",
        "SELECT first_name, last_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE year = 2013) AND player_id IN (SELECT winner_id FROM matches WHERE year = 2016) GROUP BY player_id HAVING COUNT(*) = 2"
      ]
    ]
  },
  {
    "id": 449,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016)",
        "SELECT COUNT(match_num) FROM matches WHERE year = 2013 OR year = 2016",
        "SELECT COUNT(*) AS total_matches FROM matches WHERE year = 2013 OR year = 2016",
        "SELECT COUNT(1) FROM matches WHERE year IN (2013, 2016)",
        "SELECT COUNT(*) FROM matches WHERE year = '2013' OR year = '2016'",
        "SELECT COUNT(*) FROM matches WHERE year BETWEEN 2013 AND 2016 AND year != 2014 AND year != 2015",
        "SELECT COUNT(*) FROM matches WHERE year = 2013 UNION ALL SELECT COUNT(*) FROM matches WHERE year = 2016",
        "SELECT SUM(CASE WHEN year IN (2013, 2016) THEN 1 ELSE 0 END) FROM matches",
        "SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016) GROUP BY year",
        "SELECT COUNT(*) FROM matches WHERE year = 2013 UNION SELECT COUNT(*) FROM matches WHERE year = 2016"
      ]
    ]
  },
  {
    "id": 450,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016)",
        "SELECT COUNT(match_num) FROM matches WHERE year = 2013 OR year = 2016",
        "SELECT COUNT(*) AS total_matches FROM matches WHERE year = 2013 OR year = 2016",
        "SELECT COUNT(1) FROM matches WHERE year IN (2013, 2016)",
        "SELECT COUNT(*) FROM matches WHERE year = '2013' OR year = '2016'",
        "SELECT COUNT(*) FROM matches WHERE matches.year = 2013 OR matches.year = 2016",
        "SELECT COUNT(*) FROM matches WHERE (year = 2013 OR year = 2016)",
        "SELECT COUNT(*) FROM matches WHERE year BETWEEN 2013 AND 2016 AND year IN (2013, 2016)",
        "SELECT COUNT(*) FROM matches WHERE year IN ('2013', '2016')",
        "SELECT COUNT(*) FROM matches WHERE year = 2013 UNION ALL SELECT COUNT(*) FROM matches WHERE year = 2016"
      ]
    ]
  },
  {
    "id": 451,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT P.country_code, P.first_name FROM players P JOIN matches M1 ON P.player_id = M1.winner_id JOIN matches M2 ON P.player_id = M2.winner_id WHERE M1.tourney_name = 'WTA Championships' AND M2.tourney_name = 'Australian Open'",
        "SELECT country_code, first_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships') INTERSECT SELECT country_code, first_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open')",
        "SELECT DISTINCT P.country_code, P.first_name FROM players P, matches M WHERE P.player_id = M.winner_id AND M.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY P.player_id HAVING COUNT(DISTINCT M.tourney_name) = 2",
        "SELECT country_code, first_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships' INTERSECT SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open')",
        "SELECT P.country_code, P.first_name FROM players P WHERE EXISTS (SELECT 1 FROM matches M WHERE M.winner_id = P.player_id AND M.tourney_name = 'WTA Championships') AND EXISTS (SELECT 1 FROM matches M WHERE M.winner_id = P.player_id AND M.tourney_name = 'Australian Open')",
        "SELECT P.country_code, P.first_name FROM players P WHERE P.player_id IN (SELECT M.winner_id FROM matches M WHERE M.tourney_name = 'WTA Championships' UNION ALL SELECT M.winner_id FROM matches M WHERE M.tourney_name = 'Australian Open') GROUP BY P.player_id HAVING COUNT(*) > 1",
        "WITH Winners AS (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships' UNION SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open') SELECT P.country_code, P.first_name FROM players P JOIN Winners W ON P.player_id = W.winner_id GROUP BY P.player_id HAVING COUNT(*) = 2",
        "SELECT P.country_code, P.first_name FROM players P INNER JOIN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships') AS WC ON P.player_id = WC.winner_id INNER JOIN (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open') AS AO ON P.player_id = AO.winner_id",
        "SELECT country_code, first_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships') AND player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open')",
        "SELECT P.country_code, P.first_name FROM players P WHERE P.player_id IN (SELECT M.winner_id FROM matches M WHERE M.tourney_name = 'WTA Championships') AND P.player_id IN (SELECT M.winner_id FROM matches M WHERE M.tourney_name = 'Australian Open')"
      ]
    ]
  },
  {
    "id": 452,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT P.first_name, P.country_code FROM players P JOIN matches M ON P.player_id = M.winner_id WHERE M.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY P.player_id HAVING COUNT(DISTINCT M.tourney_name) = 2",
        "SELECT first_name, country_code FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships' INTERSECT SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open')",
        "SELECT DISTINCT P.first_name, P.country_code FROM players P, matches M WHERE P.player_id = M.winner_id AND M.tourney_name = 'WTA Championships' AND P.player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open')",
        "SELECT first_name, country_code FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships') AND player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open')",
        "SELECT P.first_name, P.country_code FROM players P INNER JOIN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships') AS T1 ON P.player_id = T1.winner_id INNER JOIN (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open') AS T2 ON P.player_id = T2.winner_id",
        "WITH Winners AS (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships' UNION ALL SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open') SELECT P.first_name, P.country_code FROM players P JOIN Winners W ON P.player_id = W.winner_id GROUP BY P.player_id HAVING COUNT(*) = 2",
        "SELECT P.first_name, P.country_code FROM players P WHERE EXISTS (SELECT 1 FROM matches M WHERE M.winner_id = P.player_id AND M.tourney_name = 'WTA Championships') AND EXISTS (SELECT 1 FROM matches M WHERE M.winner_id = P.player_id AND M.tourney_name = 'Australian Open')",
        "SELECT P.first_name, P.country_code FROM players P JOIN matches M1 ON P.player_id = M1.winner_id JOIN matches M2 ON P.player_id = M2.winner_id WHERE M1.tourney_name = 'WTA Championships' AND M2.tourney_name = 'Australian Open'",
        "SELECT first_name, country_code FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships') INTERSECT SELECT first_name, country_code FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open')",
        "SELECT P.first_name, P.country_code FROM players P WHERE P.player_id IN (SELECT M.winner_id FROM matches M WHERE M.tourney_name = 'WTA Championships' AND M.winner_id IN (SELECT M.winner_id FROM matches M WHERE M.tourney_name = 'Australian Open'))"
      ]
    ]
  },
  {
    "id": 453,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players)",
        "SELECT P.first_name, P.country_code FROM players P WHERE P.birth_date = (SELECT MIN(birth_date) FROM players)",
        "SELECT first_name, country_code FROM players WHERE birth_date IN (SELECT MIN(birth_date) FROM players)",
        "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT birth_date FROM players ORDER BY birth_date ASC LIMIT 1)",
        "SELECT P.first_name, P.country_code FROM players P INNER JOIN (SELECT MIN(birth_date) AS MinBirthDate FROM players) AS MinP ON P.birth_date = MinP.MinBirthDate",
        "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT birth_date FROM players ORDER BY birth_date LIMIT 1)",
        "SELECT TOP 1 first_name, country_code FROM players ORDER BY birth_date",
        "SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1",
        "WITH Oldest AS (SELECT MIN(birth_date) AS OldestDate FROM players) SELECT first_name, country_code FROM players, Oldest WHERE players.birth_date = Oldest.OldestDate",
        "SELECT first_name, country_code FROM (SELECT first_name, country_code, RANK() OVER (ORDER BY birth_date) AS rank FROM players) AS Ranked WHERE rank = 1"
      ]
    ]
  },
  {
    "id": 454,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players)",
        "SELECT P.first_name, P.country_code FROM players P WHERE P.birth_date = (SELECT MIN(birth_date) FROM players)",
        "SELECT first_name, country_code FROM players WHERE birth_date IN (SELECT MIN(birth_date) FROM players)",
        "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT birth_date FROM players ORDER BY birth_date ASC LIMIT 1)",
        "SELECT P.first_name, P.country_code FROM players P WHERE P.birth_date = (SELECT birth_date FROM players ORDER BY birth_date LIMIT 1)",
        "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(P.birth_date) FROM players P)",
        "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT birth_date FROM players ORDER BY birth_date FETCH FIRST ROW ONLY)",
        "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT TOP 1 birth_date FROM players ORDER BY birth_date)",
        "SELECT P.first_name, P.country_code FROM players P WHERE P.birth_date = (SELECT MIN(birth_date) FROM players AS P)",
        "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players GROUP BY birth_date HAVING COUNT(*) >= 1)"
      ]
    ]
  },
  {
    "id": 455,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT first_name, last_name FROM players ORDER BY birth_date, last_name, player_id",
        "SELECT first_name, last_name FROM players ORDER BY birth_date ASC, last_name ASC, player_id ASC",
        "SELECT first_name, last_name FROM players ORDER BY birth_date, last_name ASC, player_id ASC",
        "SELECT first_name, last_name FROM players ORDER BY birth_date ASC, last_name, player_id",
        "SELECT P.first_name, P.last_name FROM players P ORDER BY P.birth_date, P.last_name, P.player_id",
        "SELECT P.first_name, P.last_name FROM players P ORDER BY P.birth_date ASC, P.last_name ASC, P.player_id ASC",
        "SELECT first_name, last_name FROM players ORDER BY birth_date ASC, last_name ASC, player_id ASCENDING",
        "SELECT first_name, last_name FROM players ORDER BY birth_date, last_name ASCENDING, player_id ASCENDING",
        "SELECT first_name, last_name FROM players ORDER BY birth_date ASC, last_name COLLATE NOCASE, player_id",
        "SELECT first_name, last_name FROM players ORDER BY birth_date, last_name COLLATE NOCASE, player_id ASC"
      ]
    ]
  },
  {
    "id": 456,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY birth_date, player_id ASC",
        "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players ORDER BY birth_date ASC, player_id ASC",
        "SELECT first_name + ' ' + last_name AS full_name FROM players ORDER BY birth_date ASC, player_id ASC",
        "SELECT first_name, last_name FROM players ORDER BY birth_date, player_id",
        "SELECT first_name || ' ' || last_name FROM players ORDER BY birth_date ASC, player_id ASC",
        "SELECT CONCAT_WS(' ', first_name, last_name) AS full_name FROM players ORDER BY birth_date, player_id",
        "SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY birth_date, player_id ASC",
        "SELECT first_name + ' ' + last_name FROM players ORDER BY birth_date, player_id",
        "SELECT first_name, last_name FROM players ORDER BY birth_date ASC, player_id ASC",
        "SELECT CONCAT(first_name, ' ', last_name) FROM players ORDER BY birth_date, player_id ASC"
      ]
    ]
  },
  {
    "id": 457,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
        "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC",
        "SELECT p.first_name, p.last_name FROM players p WHERE p.hand = 'L' ORDER BY p.birth_date",
        "SELECT first_name, last_name FROM players WHERE hand = 'Left' ORDER BY birth_date",
        "SELECT first_name, last_name FROM players WHERE hand LIKE 'L%' ORDER BY birth_date",
        "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date ASCENDING",
        "SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date",
        "SELECT first_name, last_name FROM players WHERE hand IN ('L') ORDER BY birth_date",
        "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date, first_name",
        "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date, last_name ASC"
      ]
    ]
  },
  {
    "id": 458,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT first_name || ' ' || last_name AS full_name FROM players WHERE hand = 'L' ORDER BY birth_date",
        "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players WHERE hand = 'L' ORDER BY birth_date",
        "SELECT first_name + ' ' + last_name AS full_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC",
        "SELECT first_name, last_name FROM players WHERE hand = 'left' ORDER BY birth_date",
        "SELECT first_name || ' ' || last_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC",
        "SELECT CONCAT(first_name, ' ', last_name) FROM players WHERE hand = 'left' ORDER BY birth_date ASC",
        "SELECT first_name + ' ' + last_name FROM players WHERE hand = 'left' ORDER BY birth_date ASC",
        "SELECT first_name || ' ' || last_name AS full_name FROM players WHERE hand = 'left' ORDER BY birth_date ASC",
        "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC",
        "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC"
      ]
    ]
  },
  {
    "id": 459,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT first_name, country_code FROM players WHERE player_id IN (SELECT player_id FROM rankings WHERE tours = (SELECT MAX(tours) FROM rankings))",
        "SELECT P.first_name, P.country_code FROM players P JOIN rankings R ON P.player_id = R.player_id WHERE R.tours = (SELECT MAX(tours) FROM rankings)",
        "SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings ORDER BY tours DESC LIMIT 1)",
        "SELECT P.first_name, P.country_code FROM players P WHERE EXISTS (SELECT 1 FROM rankings R WHERE R.player_id = P.player_id AND R.tours = (SELECT MAX(tours) FROM rankings))",
        "SELECT first_name, country_code FROM players WHERE player_id IN (SELECT player_id FROM rankings GROUP BY player_id HAVING tours = MAX(tours))",
        "SELECT P.first_name, P.country_code FROM players P INNER JOIN (SELECT player_id FROM rankings WHERE tours = (SELECT MAX(tours) FROM rankings)) AS MaxTours ON P.player_id = MaxTours.player_id",
        "SELECT first_name, country_code FROM players WHERE player_id IN (SELECT player_id FROM rankings WHERE tours >= ALL (SELECT tours FROM rankings))",
        "SELECT P.first_name, P.country_code FROM players P, (SELECT player_id FROM rankings WHERE tours = (SELECT MAX(tours) FROM rankings)) AS MaxTourPlayers WHERE P.player_id = MaxTourPlayers.player_id",
        "SELECT first_name, country_code FROM players WHERE player_id IN (SELECT player_id FROM rankings HAVING MAX(tours))",
        "SELECT P.first_name, P.country_code FROM players P WHERE P.player_id IN (SELECT R.player_id FROM rankings R WHERE R.tours = (SELECT MAX(R2.tours) FROM rankings R2))"
      ]
    ]
  },
  {
    "id": 460,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT P.first_name, P.country_code FROM players P JOIN rankings R ON P.player_id = R.player_id WHERE R.tours = (SELECT MAX(tours) FROM rankings)",
        "SELECT first_name, country_code FROM players WHERE player_id IN (SELECT player_id FROM rankings WHERE tours = (SELECT MAX(tours) FROM rankings))",
        "SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings ORDER BY tours DESC LIMIT 1)",
        "SELECT P.first_name, P.country_code FROM players P, rankings R WHERE P.player_id = R.player_id AND R.tours = (SELECT MAX(tours) FROM rankings)",
        "SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings WHERE tours >= ALL (SELECT tours FROM rankings))",
        "SELECT P.first_name, P.country_code FROM players P INNER JOIN rankings R ON P.player_id = R.player_id WHERE R.tours = (SELECT MAX(tours) FROM rankings)",
        "SELECT first_name, country_code FROM players WHERE player_id IN (SELECT player_id FROM rankings GROUP BY player_id HAVING tours = MAX(tours))",
        "SELECT P.first_name, P.country_code FROM players P WHERE EXISTS (SELECT 1 FROM rankings R WHERE R.player_id = P.player_id AND R.tours = (SELECT MAX(tours) FROM rankings))",
        "SELECT first_name, country_code FROM players WHERE player_id = (SELECT TOP 1 player_id FROM rankings ORDER BY tours DESC)",
        "SELECT P.first_name, P.country_code FROM players P WHERE P.player_id = (SELECT player_id FROM rankings WHERE tours = (SELECT MAX(tours) FROM rankings) LIMIT 1)"
      ]
    ]
  },
  {
    "id": 461,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC, year ASC LIMIT 1",
        "SELECT year FROM (SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year) AS yearly_matches ORDER BY match_count DESC, year ASC LIMIT 1",
        "SELECT TOP 1 year FROM matches GROUP BY year ORDER BY COUNT(*) DESC, year",
        "SELECT year FROM matches GROUP BY year HAVING COUNT(*) = (SELECT MAX(match_count) FROM (SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year) AS subquery) ORDER BY year ASC LIMIT 1",
        "SELECT MIN(year) FROM (SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC) AS subquery",
        "SELECT year FROM matches GROUP BY year ORDER BY COUNT(year) DESC, year LIMIT 1",
        "SELECT year, COUNT(*) AS total_matches FROM matches GROUP BY year ORDER BY total_matches DESC, year ASC LIMIT 1",
        "WITH YearlyMatchCount AS (SELECT year, COUNT(*) AS MatchCount FROM matches GROUP BY year) SELECT year FROM YearlyMatchCount ORDER BY MatchCount DESC, year ASC LIMIT 1",
        "SELECT year FROM matches GROUP BY year ORDER BY COUNT(year) DESC, MIN(year) ASC LIMIT 1",
        "SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC, year LIMIT 1"
      ]
    ]
  },
  {
    "id": 462,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC, year ASC LIMIT 1",
        "SELECT year FROM (SELECT year, COUNT(*) AS total_matches FROM matches GROUP BY year) AS yearly_matches ORDER BY total_matches DESC, year ASC LIMIT 1",
        "SELECT TOP 1 year FROM matches GROUP BY year ORDER BY COUNT(*) DESC, year",
        "SELECT year FROM matches GROUP BY year HAVING COUNT(*) = (SELECT MAX(total) FROM (SELECT COUNT(*) AS total FROM matches GROUP BY year) AS subquery) ORDER BY year ASC LIMIT 1",
        "WITH YearlyCount AS (SELECT year, COUNT(*) AS MatchCount FROM matches GROUP BY year) SELECT year FROM YearlyCount WHERE MatchCount = (SELECT MAX(MatchCount) FROM YearlyCount) ORDER BY year ASC LIMIT 1",
        "SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year ORDER BY match_count DESC, year ASC FETCH FIRST 1 ROW ONLY",
        "SELECT year FROM matches GROUP BY year ORDER BY COUNT(year) DESC, year ASC LIMIT 1",
        "SELECT M.year FROM matches M GROUP BY M.year ORDER BY COUNT(M.year) DESC, M.year ASC LIMIT 1",
        "SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC, year LIMIT 1",
        "SELECT year FROM matches GROUP BY year ORDER BY COUNT(year) DESC, year ASC FETCH FIRST ROW ONLY"
      ]
    ]
  },
  {
    "id": 463,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT P.first_name, P.last_name, SUM(R.ranking_points) FROM players P JOIN matches M ON P.player_id = M.winner_id JOIN rankings R ON P.player_id = R.player_id GROUP BY P.player_id HAVING COUNT(M.winner_id) = (SELECT MAX(win_count) FROM (SELECT winner_id, COUNT(*) AS win_count FROM matches GROUP BY winner_id) AS subquery)",
        "SELECT first_name, last_name, SUM(ranking_points) FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id HAVING COUNT(matches.winner_id) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM matches GROUP BY winner_id) AS win_counts)",
        "SELECT first_name, last_name, TOTAL(ranking_points) FROM players INNER JOIN matches ON players.player_id = matches.winner_id INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id HAVING COUNT(matches.winner_id) = (SELECT MAX(win_count) FROM (SELECT winner_id, COUNT(*) AS win_count FROM matches GROUP BY winner_id) AS subquery)",
        "SELECT first_name, last_name, SUM(ranking_points) AS total_points FROM players, matches, rankings WHERE players.player_id = matches.winner_id AND players.player_id = rankings.player_id GROUP BY players.player_id HAVING COUNT(matches.winner_id) = (SELECT MAX(win_count) FROM (SELECT winner_id, COUNT(*) AS win_count FROM matches GROUP BY winner_id) AS subquery)",
        "SELECT P.first_name, P.last_name, SUM(R.ranking_points) FROM players P, matches M, rankings R WHERE P.player_id = M.winner_id AND P.player_id = R.player_id GROUP BY P.player_id HAVING COUNT(M.winner_id) = (SELECT MAX(win_count) FROM (SELECT winner_id, COUNT(*) AS win_count FROM matches GROUP BY winner_id) AS subquery)",
        "SELECT first_name, last_name, SUM(ranking_points) FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id HAVING COUNT(matches.winner_id) = (SELECT MAX(win_count) FROM (SELECT winner_id, COUNT(*) AS win_count FROM matches GROUP BY winner_id) AS subquery)",
        "SELECT first_name, last_name, SUM(ranking_points) FROM players INNER JOIN matches ON players.player_id = matches.winner_id INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id HAVING COUNT(matches.winner_id) = (SELECT MAX(win_count) FROM (SELECT winner_id, COUNT(*) AS win_count FROM matches GROUP BY winner_id) AS subquery)",
        "SELECT first_name, last_name, SUM(ranking_points) FROM players, matches, rankings WHERE players.player_id = matches.winner_id AND players.player_id = rankings.player_id GROUP BY players.player_id HAVING COUNT(matches.winner_id) = (SELECT MAX(win_count) FROM (SELECT winner_id, COUNT(*) AS win_count FROM matches GROUP BY winner_id) AS subquery)",
        "SELECT P.first_name, P.last_name, SUM(R.ranking_points) FROM players P, matches M, rankings R WHERE P.player_id = M.winner_id AND P.player_id = R.player_id GROUP BY P.player_id HAVING COUNT(M.winner_id) = (SELECT MAX(win_count) FROM (SELECT winner_id, COUNT(*) AS win_count FROM matches GROUP BY winner_id) AS subquery)",
        "SELECT first_name, last_name, SUM(ranking_points) FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id HAVING COUNT(matches.winner_id) = (SELECT MAX(win_count) FROM (SELECT winner_id, COUNT(*) AS win_count FROM matches GROUP BY winner_id) AS subquery)"
      ]
    ]
  },
  {
    "id": 464,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT P.first_name, P.last_name, SUM(R.ranking_points) FROM players P JOIN matches M ON P.player_id = M.winner_id JOIN rankings R ON P.player_id = R.player_id WHERE P.player_id = (SELECT winner_id FROM matches GROUP BY winner_id ORDER BY COUNT(*) DESC LIMIT 1) GROUP BY P.player_id",
        "SELECT first_name, last_name, SUM(ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE players.player_id = (SELECT winner_id FROM matches GROUP BY winner_id ORDER BY COUNT(winner_id) DESC LIMIT 1) GROUP BY players.player_id",
        "SELECT players.first_name, players.last_name, total_rank_points FROM players JOIN (SELECT winner_id, SUM(ranking_points) AS total_rank_points FROM rankings GROUP BY player_id) AS rank_points ON players.player_id = rank_points.winner_id WHERE players.player_id IN (SELECT winner_id FROM matches GROUP BY winner_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT first_name, last_name, total_points FROM players, (SELECT winner_id, SUM(ranking_points) AS total_points FROM rankings GROUP BY player_id) AS ranking WHERE players.player_id = ranking.winner_id AND players.player_id = (SELECT winner_id FROM matches GROUP BY winner_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT P.first_name, P.last_name, SUM(R.ranking_points) AS total_points FROM players P INNER JOIN rankings R ON P.player_id = R.player_id WHERE P.player_id = (SELECT M.winner_id FROM matches M GROUP BY M.winner_id ORDER BY COUNT(*) DESC LIMIT 1) GROUP BY P.player_id",
        "SELECT first_name, last_name, SUM(ranking_points) AS total_rank_points FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE players.player_id = (SELECT winner_id FROM matches GROUP BY winner_id ORDER BY COUNT(*) DESC LIMIT 1) GROUP BY players.player_id",
        "SELECT P.first_name, P.last_name, R.total_points FROM players P JOIN (SELECT player_id, SUM(ranking_points) AS total_points FROM rankings GROUP BY player_id) R ON P.player_id = R.player_id WHERE P.player_id = (SELECT winner_id FROM matches GROUP BY winner_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT first_name, last_name, total_rank_points FROM (SELECT player_id, SUM(ranking_points) AS total_rank_points FROM rankings GROUP BY player_id) AS total_ranks JOIN players ON players.player_id = total_ranks.player_id WHERE players.player_id = (SELECT winner_id FROM matches GROUP BY winner_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT P.first_name, P.last_name, SUM(R.ranking_points) FROM players P, matches M, rankings R WHERE P.player_id = M.winner_id AND P.player_id = R.player_id AND P.player_id = (SELECT winner_id FROM matches GROUP BY winner_id ORDER BY COUNT(*) DESC LIMIT 1) GROUP BY P.player_id",
        "SELECT first_name, last_name, total_points FROM players JOIN (SELECT player_id, SUM(ranking_points) AS total_points FROM rankings GROUP BY player_id) AS rank_totals ON players.player_id = rank_totals.player_id WHERE players.player_id = (SELECT winner_id FROM matches GROUP BY winner_id ORDER BY COUNT(*) DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 465,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT P.first_name, P.last_name FROM players P JOIN matches M ON P.player_id = M.winner_id WHERE M.tourney_name = 'Australian Open' ORDER BY M.winner_rank_points DESC LIMIT 1",
        "SELECT first_name, last_name FROM players WHERE player_id = (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1)",
        "SELECT players.first_name, players.last_name FROM players INNER JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'Australian Open' ORDER BY matches.winner_rank_points DESC FETCH FIRST 1 ROW ONLY",
        "SELECT TOP 1 players.first_name, players.last_name FROM players, matches WHERE players.player_id = matches.winner_id AND matches.tourney_name = 'Australian Open' ORDER BY matches.winner_rank_points DESC",
        "SELECT first_name, last_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC) LIMIT 1",
        "SELECT P.first_name, P.last_name FROM players P, matches M WHERE P.player_id = M.winner_id AND M.tourney_name = 'Australian Open' ORDER BY M.winner_rank_points DESC LIMIT 1",
        "SELECT first_name, last_name FROM players JOIN matches ON player_id = winner_id WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "SELECT first_name, last_name FROM players WHERE player_id = (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1)",
        "SELECT P.first_name, P.last_name FROM players P INNER JOIN matches M ON P.player_id = M.winner_id WHERE M.tourney_name = 'Australian Open' ORDER BY M.winner_rank_points DESC LIMIT 1",
        "SELECT first_name, last_name FROM players WHERE player_id = (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC FETCH FIRST ROW ONLY)"
      ]
    ]
  },
  {
    "id": 466,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id WHERE m.tourney_name = 'Australian Open' ORDER BY r.ranking_points DESC LIMIT 1",
        "SELECT first_name, last_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open') AND player_id IN (SELECT player_id FROM rankings ORDER BY ranking_points DESC LIMIT 1)",
        "SELECT TOP 1 p.first_name, p.last_name FROM players p INNER JOIN matches m ON p.player_id = m.winner_id INNER JOIN rankings r ON p.player_id = r.player_id WHERE m.tourney_name = 'Australian Open' ORDER BY r.ranking_points DESC",
        "SELECT p.first_name, p.last_name FROM players p, matches m, rankings r WHERE p.player_id = m.winner_id AND p.player_id = r.player_id AND m.tourney_name = 'Australian Open' ORDER BY r.ranking_points DESC FETCH FIRST 1 ROW ONLY",
        "SELECT p.first_name, p.last_name FROM players p WHERE EXISTS (SELECT 1 FROM matches m WHERE m.winner_id = p.player_id AND m.tourney_name = 'Australian Open') AND p.player_id = (SELECT player_id FROM rankings ORDER BY ranking_points DESC LIMIT 1)",
        "SELECT p.first_name, p.last_name FROM players p JOIN (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open') m ON p.player_id = m.winner_id JOIN (SELECT player_id FROM rankings ORDER BY ranking_points DESC LIMIT 1) r ON p.player_id = r.player_id",
        "SELECT p.first_name, p.last_name FROM players p WHERE p.player_id = (SELECT m.winner_id FROM matches m JOIN rankings r ON m.winner_id = r.player_id WHERE m.tourney_name = 'Australian Open' ORDER BY r.ranking_points DESC LIMIT 1)",
        "SELECT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id AND m.tourney_name = 'Australian Open' JOIN rankings r ON p.player_id = r.player_id ORDER BY r.ranking_points DESC LIMIT 1",
        "SELECT first_name, last_name FROM players WHERE player_id = (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open' AND winner_id IN (SELECT player_id FROM rankings ORDER BY ranking_points DESC LIMIT 1))",
        "SELECT p.first_name, p.last_name FROM players p INNER JOIN matches m ON p.player_id = m.winner_id AND m.tourney_name = 'Australian Open' INNER JOIN rankings r ON p.player_id = r.player_id WHERE r.ranking_points = (SELECT MAX(ranking_points) FROM rankings)"
      ]
    ]
  },
  {
    "id": 467,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT m.loser_name, m.winner_name FROM matches m WHERE m.minutes = (SELECT MAX(minutes) FROM matches)",
        "SELECT loser_name, winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
        "SELECT m.loser_name, m.winner_name FROM matches m ORDER BY m.minutes DESC LIMIT 1",
        "SELECT matches.loser_name, matches.winner_name FROM matches WHERE matches.minutes = (SELECT MAX(minutes) FROM matches)",
        "SELECT m1.loser_name, m1.winner_name FROM matches m1 WHERE m1.minutes = (SELECT MAX(m2.minutes) FROM matches m2)",
        "SELECT m.loser_name, m.winner_name FROM matches m JOIN (SELECT MAX(minutes) AS max_minutes FROM matches) max ON m.minutes = max.max_minutes",
        "SELECT m.loser_name, m.winner_name FROM matches m WHERE m.minutes >= ALL (SELECT minutes FROM matches)",
        "SELECT m.loser_name, m.winner_name FROM matches m WHERE m.minutes = (SELECT MAX(minutes) FROM matches m2)",
        "SELECT m.loser_name, m.winner_name FROM matches m WHERE m.minutes IN (SELECT MAX(minutes) FROM matches GROUP BY minutes)",
        "SELECT m.loser_name, m.winner_name FROM matches m WHERE m.minutes = (SELECT MAX(minutes) FROM matches WHERE minutes = m.minutes)"
      ]
    ]
  },
  {
    "id": 468,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
        "SELECT m.winner_name, m.loser_name FROM matches m ORDER BY m.minutes DESC LIMIT 1",
        "SELECT TOP 1 winner_name, loser_name FROM matches ORDER BY minutes DESC",
        "SELECT m1.winner_name, m1.loser_name FROM matches m1 WHERE m1.minutes = (SELECT MAX(m2.minutes) FROM matches m2)",
        "SELECT winner_name, loser_name FROM matches WHERE minutes IN (SELECT MAX(minutes) FROM matches)",
        "SELECT m.winner_name, m.loser_name FROM matches m WHERE m.minutes >= ALL (SELECT minutes FROM matches)",
        "SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC FETCH FIRST ROW ONLY",
        "SELECT m.winner_name, m.loser_name FROM matches m WHERE m.minutes = (SELECT MAX(minutes) FROM matches)",
        "SELECT m.winner_name, m.loser_name FROM matches m JOIN (SELECT MAX(minutes) AS max_minutes FROM matches) max ON m.minutes = max.max_minutes",
        "SELECT m.winner_name, m.loser_name FROM matches m WHERE m.minutes = (SELECT MAX(minutes) FROM matches WHERE minutes = m.minutes)"
      ]
    ]
  },
  {
    "id": 469,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT p.first_name, p.player_id, AVG(r.ranking) AS avg_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name",
        "SELECT first_name, player_id, AVG(ranking) AS average_rank FROM players INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY player_id, first_name",
        "SELECT players.first_name, players.player_id, AVG(rankings.ranking) FROM players, rankings WHERE players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name",
        "SELECT p.first_name AS FirstName, p.player_id AS PlayerID, AVG(r.ranking) AS AverageRanking FROM players p, rankings r WHERE p.player_id = r.player_id GROUP BY p.player_id, p.first_name",
        "SELECT first_name, player_id, AVG(ranking) FROM players JOIN rankings USING(player_id) GROUP BY player_id, first_name",
        "SELECT p.first_name, p.player_id, AVG(r.ranking) FROM players p INNER JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name ORDER BY p.first_name",
        "SELECT first_name, player_id, AVG(ranking) AS avg_rank FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id GROUP BY player_id, first_name",
        "SELECT p.first_name, p.player_id, AVG(r.ranking) AS average_ranking FROM players p RIGHT JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name",
        "SELECT DISTINCT p.first_name, p.player_id, AVG(r.ranking) OVER (PARTITION BY p.player_id) AS avg_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id",
        "SELECT p.first_name, p.player_id, AVG(r.ranking) FROM players p CROSS JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name"
      ]
    ]
  },
  {
    "id": 470,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT p.first_name, p.player_id, COALESCE(AVG(r.ranking), 0) AS avg_ranking FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id",
        "SELECT p.first_name, p.player_id, IFNULL(AVG(r.ranking), 0) AS avg_ranking FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id",
        "SELECT p.first_name, p.player_id, NVL(AVG(r.ranking), 0) AS avg_ranking FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id",
        "SELECT p.first_name, p.player_id, AVG(ISNULL(r.ranking, 0)) AS avg_ranking FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id",
        "SELECT p.first_name, p.player_id, AVG(COALESCE(r.ranking, 0)) AS avg_ranking FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id",
        "SELECT first_name, player_id, AVG(ranking) AS avg_ranking FROM (SELECT p.first_name, p.player_id, COALESCE(r.ranking, 0) AS ranking FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id) GROUP BY player_id",
        "SELECT p.first_name, p.player_id, AVG(r.ranking) AS avg_ranking FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id HAVING r.ranking IS NOT NULL",
        "SELECT p.first_name, p.player_id, AVG(r.ranking) AS avg_ranking FROM players p LEFT OUTER JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id",
        "SELECT p.first_name, p.player_id, CASE WHEN AVG(r.ranking) IS NULL THEN 0 ELSE AVG(r.ranking) END AS avg_ranking FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id",
        "SELECT p.first_name, p.player_id, AVG(r.ranking) AS avg_ranking FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name"
      ]
    ]
  },
  {
    "id": 471,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT p.first_name, p.player_id, SUM(r.ranking_points) AS total_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name",
        "SELECT first_name, player_id, SUM(ranking_points) AS total_points FROM players INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY player_id, first_name",
        "SELECT players.first_name, players.player_id, SUM(rankings.ranking_points) FROM players, rankings WHERE players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name",
        "SELECT p.first_name AS FirstName, p.player_id AS PlayerID, SUM(r.ranking_points) AS TotalRankingPoints FROM players p, rankings r WHERE p.player_id = r.player_id GROUP BY p.player_id, p.first_name",
        "SELECT first_name, player_id, total_ranking_points FROM (SELECT players.first_name, players.player_id, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name) AS subquery",
        "SELECT p.first_name, p.player_id, SUM(r.ranking_points) AS total_points FROM players p INNER JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name ORDER BY p.first_name",
        "SELECT DISTINCT p.first_name, p.player_id, (SELECT SUM(ranking_points) FROM rankings WHERE player_id = p.player_id) AS total_points FROM players p",
        "SELECT p.first_name, p.player_id, total_points FROM players p JOIN (SELECT player_id, SUM(ranking_points) AS total_points FROM rankings GROUP BY player_id) r ON p.player_id = r.player_id",
        "SELECT p.first_name, p.player_id, SUM(r.ranking_points) FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name HAVING SUM(r.ranking_points) IS NOT NULL",
        "SELECT p.first_name, p.player_id, SUM(r.ranking_points) AS TotalPoints FROM players p RIGHT JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name ORDER BY TotalPoints DESC"
      ]
    ]
  },
  {
    "id": 472,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT p.first_name, COALESCE(r.ranking_points, 0) AS points FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id",
        "SELECT first_name, IFNULL(ranking_points, 0) AS total_points FROM players LEFT JOIN rankings ON players.player_id = rankings.player_id",
        "SELECT players.first_name, COALESCE(rankings.ranking_points, 0) AS total_points FROM players LEFT JOIN rankings ON players.player_id = rankings.player_id",
        "SELECT p.first_name, IFNULL(r.ranking_points, 0) FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id",
        "SELECT first_name, NVL(ranking_points, 0) FROM players LEFT OUTER JOIN rankings ON players.player_id = rankings.player_id",
        "SELECT p.first_name, COALESCE(r.ranking_points, 0) FROM players p LEFT OUTER JOIN rankings r ON p.player_id = r.player_id",
        "SELECT first_name, ISNULL(ranking_points, 0) AS points FROM players LEFT JOIN rankings ON players.player_id = rankings.player_id",
        "SELECT p.first_name, COALESCE(r.ranking_points, 0) AS ranking_points FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id",
        "SELECT p.first_name, CASE WHEN r.ranking_points IS NULL THEN 0 ELSE r.ranking_points END AS points FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id",
        "SELECT first_name, COALESCE(ranking_points, 0) AS points FROM players LEFT JOIN rankings ON players.player_id = rankings.player_id ORDER BY first_name"
      ]
    ]
  },
  {
    "id": 473,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT country_code, COUNT(player_id) AS number_of_players FROM players GROUP BY country_code",
        "SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code",
        "SELECT p.country_code, COUNT(p.player_id) AS total_players FROM players p GROUP BY p.country_code",
        "SELECT country_code, COUNT(player_id) FROM players GROUP BY country_code",
        "SELECT COUNT(player_id), country_code FROM players GROUP BY country_code",
        "SELECT country_code, COUNT(DISTINCT player_id) AS player_count FROM players GROUP BY country_code",
        "SELECT country_code, COUNT(player_id) AS count_of_players FROM players GROUP BY country_code ORDER BY country_code",
        "SELECT country_code, COUNT(*) FROM players GROUP BY country_code ORDER BY COUNT(*) DESC",
        "SELECT country_code, COUNT(player_id) AS total FROM players GROUP BY country_code ORDER BY total DESC",
        "SELECT country_code, COUNT(player_id) AS player_total FROM players GROUP BY country_code HAVING COUNT(player_id) > 0"
      ]
    ]
  },
  {
    "id": 474,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code",
        "SELECT country_code, COUNT(player_id) AS num_players FROM players GROUP BY country_code",
        "SELECT country_code, COUNT(*) FROM players GROUP BY country_code",
        "SELECT p.country_code, COUNT(p.player_id) FROM players p GROUP BY p.country_code",
        "SELECT COUNT(*) AS num_players, country_code FROM players GROUP BY country_code",
        "SELECT country_code, COUNT(player_id) FROM players GROUP BY country_code",
        "SELECT COUNT(player_id), country_code FROM players GROUP BY country_code",
        "SELECT p.country_code, COUNT(*) AS num_players FROM players p GROUP BY p.country_code",
        "SELECT country_code, COUNT(*) AS total_players FROM players GROUP BY country_code ORDER BY country_code",
        "SELECT country_code, COUNT(player_id) AS total_players FROM players GROUP BY country_code ORDER BY country_code"
      ]
    ]
  },
  {
    "id": 475,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) = (SELECT MAX(player_count) FROM (SELECT COUNT(*) AS player_count FROM players GROUP BY country_code) AS counts)",
        "SELECT P.country_code FROM players P GROUP BY P.country_code HAVING COUNT(P.player_id) = (SELECT MAX(C.cnt) FROM (SELECT COUNT(*) AS cnt FROM players GROUP BY country_code) C)",
        "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) = (SELECT MAX(count) FROM (SELECT COUNT(player_id) AS count FROM players GROUP BY country_code) sub)",
        "SELECT country_code FROM (SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code) AS grouped WHERE num_players = (SELECT MAX(num_players) FROM (SELECT COUNT(*) AS num_players FROM players GROUP BY country_code) subquery)",
        "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1",
        "WITH PlayerCounts AS (SELECT country_code, COUNT(*) AS TotalPlayers FROM players GROUP BY country_code) SELECT country_code FROM PlayerCounts WHERE TotalPlayers = (SELECT MAX(TotalPlayers) FROM PlayerCounts)",
        "SELECT TOP 1 WITH TIES country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC",
        "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM players GROUP BY country_code)",
        "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) = (SELECT COUNT(*) FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) = (SELECT MAX(Total) FROM (SELECT COUNT(*) AS Total FROM players GROUP BY country_code) TempTable)"
      ]
    ]
  },
  {
    "id": 476,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(player_id) AS cnt FROM players GROUP BY country_code) AS subquery)",
        "SELECT P.country_code FROM players P GROUP BY P.country_code HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM players GROUP BY country_code)",
        "SELECT country_code FROM (SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code) AS T WHERE num_players = (SELECT MAX(num_players) FROM (SELECT COUNT(*) AS num_players FROM players GROUP BY country_code) AS subquery)",
        "WITH PlayerCounts AS (SELECT country_code, COUNT(*) AS total FROM players GROUP BY country_code) SELECT country_code FROM PlayerCounts WHERE total = (SELECT MAX(total) FROM PlayerCounts)",
        "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT TOP 1 WITH TIES country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC",
        "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) = (SELECT MAX(total_players) FROM (SELECT COUNT(player_id) AS total_players FROM players GROUP BY country_code) sub)",
        "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) = (SELECT MAX(total) FROM (SELECT COUNT(*) AS total FROM players GROUP BY country_code) tmp)",
        "SELECT A.country_code FROM (SELECT country_code, COUNT(*) AS player_count FROM players GROUP BY country_code) A WHERE A.player_count = (SELECT MAX(player_count) FROM (SELECT COUNT(*) AS player_count FROM players GROUP BY country_code) B)",
        "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM players GROUP BY country_code)"
      ]
    ]
  },
  {
    "id": 477,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50",
        "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
        "SELECT p.country_code FROM players p GROUP BY p.country_code HAVING COUNT(p.player_id) > 50",
        "SELECT country_code FROM (SELECT country_code, COUNT(player_id) AS num_players FROM players GROUP BY country_code) AS subquery WHERE num_players > 50",
        "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(DISTINCT player_id) > 50",
        "SELECT DISTINCT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50",
        "SELECT country_code, COUNT(player_id) AS player_count FROM players GROUP BY country_code HAVING player_count > 50",
        "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50 ORDER BY country_code",
        "SELECT country_code, COUNT(*) AS total_players FROM players GROUP BY country_code HAVING total_players > 50",
        "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50 ORDER BY COUNT(player_id) DESC"
      ]
    ]
  },
  {
    "id": 478,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50",
        "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
        "SELECT p.country_code FROM players p GROUP BY p.country_code HAVING COUNT(p.player_id) > 50",
        "SELECT country_code FROM (SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code) AS subquery WHERE num_players > 50",
        "SELECT country_code, COUNT(*) AS player_count FROM players GROUP BY country_code HAVING player_count > 50",
        "SELECT DISTINCT country_code FROM players WHERE (SELECT COUNT(*) FROM players AS p WHERE p.country_code = players.country_code) > 50",
        "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50 ORDER BY country_code",
        "SELECT country_code, COUNT(player_id) AS total_players FROM players GROUP BY country_code HAVING total_players > 50",
        "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(DISTINCT player_id) > 50",
        "SELECT country_code, COUNT(player_id) FROM players GROUP BY country_code HAVING COUNT(player_id) > 50"
      ]
    ]
  },
  {
    "id": 479,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date",
        "SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date",
        "SELECT ranking_date, TOTAL(tours) FROM rankings GROUP BY ranking_date",
        "SELECT r.ranking_date, SUM(r.tours) AS total_tours FROM rankings r GROUP BY r.ranking_date",
        "SELECT r.ranking_date, SUM(r.tours) FROM rankings r GROUP BY r.ranking_date",
        "SELECT ranking_date, COUNT(tours) FROM rankings GROUP BY ranking_date",
        "SELECT ranking_date, COUNT(*) FROM rankings GROUP BY ranking_date",
        "SELECT r.ranking_date, COUNT(r.tours) FROM rankings r GROUP BY r.ranking_date",
        "SELECT r.ranking_date, COUNT(*) FROM rankings r GROUP BY r.ranking_date",
        "SELECT ranking_date, SUM(tours) AS TotalTours FROM rankings GROUP BY ranking_date ORDER BY ranking_date"
      ]
    ]
  },
  {
    "id": 480,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date",
        "SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date",
        "SELECT ranking_date, TOTAL(tours) FROM rankings GROUP BY ranking_date",
        "SELECT ranking_date, COUNT(tours) FROM rankings GROUP BY ranking_date",
        "SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date ORDER BY ranking_date",
        "SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date ORDER BY total_tours DESC",
        "SELECT r.ranking_date, SUM(r.tours) AS total_tours FROM rankings r GROUP BY r.ranking_date",
        "SELECT r.ranking_date, SUM(r.tours) FROM rankings r GROUP BY r.ranking_date",
        "SELECT r.ranking_date, TOTAL(r.tours) FROM rankings r GROUP BY r.ranking_date",
        "SELECT r.ranking_date, COUNT(r.tours) FROM rankings r GROUP BY r.ranking_date"
      ]
    ]
  },
  {
    "id": 481,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year",
        "SELECT year, COUNT(match_num) AS total_matches FROM matches GROUP BY year",
        "SELECT year, COUNT(1) AS num_matches FROM matches GROUP BY year",
        "SELECT year, COUNT(year) AS matches_per_year FROM matches GROUP BY year",
        "SELECT matches.year, COUNT(matches.year) AS total_matches FROM matches GROUP BY matches.year",
        "SELECT COUNT(*) AS count_of_matches, year FROM matches GROUP BY year ORDER BY year",
        "SELECT year, COUNT(*) FROM matches GROUP BY year ORDER BY year DESC",
        "SELECT year, COUNT(matches.match_num) FROM matches GROUP BY year",
        "SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year ORDER BY match_count DESC",
        "SELECT year, COUNT(*) AS total_matches FROM matches GROUP BY year ORDER BY total_matches ASC"
      ]
    ]
  },
  {
    "id": 482,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT year, COUNT(*) AS total_matches FROM matches GROUP BY year",
        "SELECT year, COUNT(match_num) AS total_matches FROM matches GROUP BY year",
        "SELECT COUNT(*), year FROM matches GROUP BY year",
        "SELECT year, COUNT(year) FROM matches GROUP BY year",
        "SELECT year, COUNT(*) FROM matches GROUP BY year ORDER BY year",
        "SELECT year, COUNT(match_num) FROM matches GROUP BY year ORDER BY year",
        "SELECT COUNT(match_num), year FROM matches GROUP BY year ORDER BY year",
        "SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year ORDER BY year",
        "SELECT year, COUNT(match_num) AS match_count FROM matches GROUP BY year ORDER BY year",
        "SELECT COUNT(*), year FROM matches GROUP BY year ORDER BY year"
      ]
    ]
  },
  {
    "id": 483,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT P.first_name, P.last_name, R.ranking FROM players AS P JOIN rankings AS R ON P.player_id = R.player_id WHERE P.player_id IN (SELECT winner_id FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY players.birth_date DESC LIMIT 3)",
        "SELECT first_name, last_name, ranking FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE players.player_id IN (SELECT winner_id FROM matches ORDER BY (SELECT birth_date FROM players WHERE players.player_id = matches.winner_id) DESC LIMIT 3)",
        "SELECT first_name, last_name, ranking FROM players, rankings WHERE players.player_id = rankings.player_id AND players.player_id IN (SELECT winner_id FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY players.birth_date DESC LIMIT 3)",
        "SELECT P.first_name, P.last_name, R.ranking FROM players P INNER JOIN rankings R ON P.player_id = R.player_id WHERE P.player_id IN (SELECT M.winner_id FROM matches M JOIN players PL ON M.winner_id = PL.player_id ORDER BY PL.birth_date DESC LIMIT 3)",
        "SELECT first_name, last_name, ranking FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE players.player_id IN (SELECT winner_id FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY players.birth_date DESC FETCH FIRST 3 ROWS ONLY)",
        "SELECT first_name, last_name, ranking FROM players INNER JOIN rankings ON players.player_id = rankings.player_id WHERE players.player_id IN (SELECT TOP 3 winner_id FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY players.birth_date DESC)",
        "SELECT first_name, last_name, ranking FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE players.player_id IN (SELECT winner_id FROM matches ORDER BY (SELECT MAX(birth_date) FROM players WHERE players.player_id = matches.winner_id) DESC LIMIT 3)",
        "SELECT P.first_name, P.last_name, R.ranking FROM players P, rankings R WHERE P.player_id = R.player_id AND P.player_id IN (SELECT winner_id FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY players.birth_date DESC LIMIT 3)",
        "SELECT first_name, last_name, ranking FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE players.player_id IN (SELECT winner_id FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY players.birth_date DESC LIMIT 3)",
        "SELECT P.first_name, P.last_name, R.ranking FROM players P JOIN rankings R ON P.player_id = R.player_id WHERE P.player_id IN (SELECT winner_id FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY players.birth_date DESC LIMIT 3)"
      ]
    ]
  },
  {
    "id": 484,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT p.first_name, p.last_name, r.ranking FROM players p JOIN rankings r ON p.player_id = r.player_id JOIN matches m ON m.winner_id = p.player_id ORDER BY p.birth_date DESC LIMIT 3",
        "SELECT first_name, last_name, ranking FROM players INNER JOIN rankings USING(player_id) INNER JOIN matches ON matches.winner_id = players.player_id ORDER BY birth_date DESC LIMIT 3",
        "SELECT TOP 3 players.first_name, players.last_name, rankings.ranking FROM players, rankings, matches WHERE players.player_id = rankings.player_id AND matches.winner_id = players.player_id ORDER BY players.birth_date DESC",
        "SELECT first_name, last_name, ranking FROM (SELECT * FROM players JOIN matches ON players.player_id = matches.winner_id) AS winners JOIN rankings ON winners.player_id = rankings.player_id ORDER BY winners.birth_date DESC FETCH FIRST 3 ROWS ONLY",
        "SELECT p.first_name, p.last_name, r.ranking FROM players p, rankings r, matches m WHERE p.player_id = r.player_id AND m.winner_id = p.player_id ORDER BY p.birth_date DESC LIMIT 3",
        "SELECT first_name, last_name, ranking FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON matches.winner_id = players.player_id ORDER BY birth_date DESC LIMIT 3",
        "SELECT p.first_name, p.last_name, r.ranking FROM players p INNER JOIN rankings r ON p.player_id = r.player_id INNER JOIN matches m ON m.winner_id = p.player_id ORDER BY p.birth_date DESC LIMIT 3",
        "SELECT first_name, last_name, ranking FROM players p JOIN rankings r ON p.player_id = r.player_id JOIN matches m ON m.winner_id = p.player_id ORDER BY p.birth_date DESC LIMIT 3",
        "SELECT DISTINCT p.first_name, p.last_name, r.ranking FROM players p JOIN rankings r ON p.player_id = r.player_id JOIN matches m ON m.winner_id = p.player_id ORDER BY p.birth_date DESC LIMIT 3",
        "SELECT first_name, last_name, ranking FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE players.player_id IN (SELECT winner_id FROM matches) ORDER BY birth_date DESC LIMIT 3"
      ]
    ]
  },
  {
    "id": 485,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT matches.winner_id) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND players.hand = 'L'",
        "SELECT COUNT(DISTINCT winner_id) FROM matches INNER JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = 'WTA Championships' AND hand = 'L'",
        "SELECT COUNT(UNIQUE matches.winner_id) FROM matches, players WHERE matches.winner_id = players.player_id AND matches.tourney_name = 'WTA Championships' AND players.hand = 'L'",
        "SELECT COUNT(*) FROM (SELECT DISTINCT matches.winner_id FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND players.hand = 'L') AS unique_winners",
        "SELECT COUNT(DISTINCT p.player_id) FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name = 'WTA Championships' AND p.hand = 'L'",
        "SELECT DISTINCT COUNT(winner_id) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = 'WTA Championships' AND hand = 'L'",
        "SELECT COUNT(DISTINCT matches.winner_id) FROM matches, players WHERE matches.winner_id = players.player_id AND matches.tourney_name LIKE 'WTA Championships' AND players.hand = 'L'",
        "SELECT COUNT(DISTINCT winner_id) FROM matches m INNER JOIN players p ON m.winner_id = p.player_id WHERE m.tourney_name = 'WTA Championships' AND p.hand = 'L'",
        "SELECT COUNT(DISTINCT winner_id) FROM matches LEFT JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND players.hand = 'L'",
        "SELECT COUNT(DISTINCT winner_id) FROM matches m, players p WHERE m.winner_id = p.player_id AND m.tourney_name = 'WTA Championships' AND p.hand = 'L'"
      ]
    ]
  },
  {
    "id": 486,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT winner_id) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE players.hand = 'L' AND matches.tourney_name = 'WTA Championships'",
        "SELECT COUNT(DISTINCT p.player_id) FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE p.hand = 'L' AND m.tourney_name = 'WTA Championships'",
        "SELECT COUNT(*) FROM (SELECT DISTINCT matches.winner_id FROM matches INNER JOIN players ON matches.winner_id = players.player_id WHERE players.hand = 'L' AND matches.tourney_name = 'WTA Championships') AS left_handed_winners",
        "SELECT COUNT(DISTINCT players.player_id) FROM players, matches WHERE players.player_id = matches.winner_id AND players.hand = 'L' AND matches.tourney_name = 'WTA Championships'",
        "SELECT COUNT(DISTINCT winner_id) FROM matches m INNER JOIN players p ON m.winner_id = p.player_id WHERE p.hand = 'L' AND m.tourney_name LIKE 'WTA Championships'",
        "SELECT COUNT(DISTINCT p.player_id) FROM players p, matches m WHERE p.player_id = m.winner_id AND p.hand = 'L' AND m.tourney_name = 'WTA Championships'",
        "SELECT COUNT(DISTINCT winner_id) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE players.hand = 'L' AND matches.tourney_name LIKE '%WTA Championships%'",
        "SELECT COUNT(DISTINCT p.player_id) FROM players p INNER JOIN matches m ON p.player_id = m.winner_id WHERE p.hand = 'L' AND m.tourney_name = 'WTA Championships'",
        "SELECT COUNT(DISTINCT winner_id) FROM matches, players WHERE matches.winner_id = players.player_id AND players.hand = 'L' AND matches.tourney_name = 'WTA Championships'",
        "SELECT COUNT(DISTINCT p.player_id) FROM players p LEFT JOIN matches m ON p.player_id = m.winner_id WHERE p.hand = 'L' AND m.tourney_name = 'WTA Championships'"
      ]
    ]
  },
  {
    "id": 487,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON m.winner_id = r.player_id ORDER BY r.ranking_points DESC LIMIT 1",
        "SELECT first_name, country_code, birth_date FROM players WHERE player_id IN (SELECT winner_id FROM matches JOIN rankings ON matches.winner_id = rankings.player_id ORDER BY ranking_points DESC LIMIT 1)",
        "SELECT first_name, country_code, birth_date FROM players WHERE player_id = (SELECT winner_id FROM matches JOIN rankings ON matches.winner_id = rankings.player_id ORDER BY ranking_points DESC FETCH FIRST ROW ONLY)",
        "SELECT TOP 1 p.first_name, p.country_code, p.birth_date FROM players p INNER JOIN matches m ON p.player_id = m.winner_id INNER JOIN rankings r ON m.winner_id = r.player_id ORDER BY r.ranking_points DESC",
        "SELECT p.first_name, p.country_code, p.birth_date FROM players p WHERE p.player_id = (SELECT TOP 1 m.winner_id FROM matches m JOIN rankings r ON m.winner_id = r.player_id ORDER BY r.ranking_points DESC)",
        "SELECT p.first_name, p.country_code, p.birth_date FROM players p, matches m, rankings r WHERE p.player_id = m.winner_id AND m.winner_id = r.player_id AND r.ranking_points = (SELECT MAX(ranking_points) FROM rankings)",
        "SELECT p.first_name, p.country_code, p.birth_date FROM players p WHERE EXISTS (SELECT 1 FROM matches m JOIN rankings r ON m.winner_id = r.player_id WHERE p.player_id = m.winner_id ORDER BY r.ranking_points DESC LIMIT 1)",
        "SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN (SELECT winner_id FROM matches JOIN rankings ON matches.winner_id = rankings.player_id ORDER BY ranking_points DESC LIMIT 1) AS sub ON p.player_id = sub.winner_id",
        "SELECT p.first_name, p.country_code, p.birth_date FROM players p WHERE p.player_id = (SELECT m.winner_id FROM matches m INNER JOIN rankings r ON m.winner_id = r.player_id ORDER BY r.ranking_points DESC LIMIT 1)",
        "SELECT p.first_name, p.country_code, p.birth_date FROM players p INNER JOIN (SELECT winner_id, MAX(ranking_points) AS max_rank FROM matches JOIN rankings ON matches.winner_id = rankings.player_id GROUP BY winner_id ORDER BY max_rank DESC LIMIT 1) sub ON p.player_id = sub.winner_id"
      ]
    ]
  },
  {
    "id": 488,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT first_name, country_code, birth_date FROM players WHERE player_id = (SELECT player_id FROM rankings ORDER BY ranking_points DESC LIMIT 1)",
        "SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN rankings r ON p.player_id = r.player_id ORDER BY r.ranking_points DESC LIMIT 1",
        "SELECT first_name, country_code, birth_date FROM players WHERE player_id IN (SELECT player_id FROM rankings ORDER BY ranking_points DESC LIMIT 1)",
        "SELECT p.first_name, p.country_code, p.birth_date FROM players p WHERE p.player_id = (SELECT player_id FROM rankings ORDER BY ranking_points DESC FETCH FIRST 1 ROW ONLY)",
        "SELECT TOP 1 p.first_name, p.country_code, p.birth_date FROM players p INNER JOIN rankings r ON p.player_id = r.player_id ORDER BY r.ranking_points DESC",
        "SELECT first_name, country_code, birth_date FROM players WHERE player_id = (SELECT TOP 1 player_id FROM rankings ORDER BY ranking_points DESC)",
        "SELECT p.first_name, p.country_code, p.birth_date FROM players p WHERE EXISTS (SELECT 1 FROM rankings r WHERE r.player_id = p.player_id AND r.ranking_points = (SELECT MAX(ranking_points) FROM rankings))",
        "SELECT first_name, country_code, birth_date FROM players WHERE player_id = (SELECT player_id FROM rankings WHERE ranking_points = (SELECT MAX(ranking_points) FROM rankings))",
        "SELECT p.first_name, p.country_code, p.birth_date FROM players p, (SELECT player_id FROM rankings ORDER BY ranking_points DESC LIMIT 1) AS max_rank WHERE p.player_id = max_rank.player_id",
        "SELECT first_name, country_code, birth_date FROM players WHERE player_id = (SELECT player_id FROM rankings WHERE ranking_points >= ALL (SELECT ranking_points FROM rankings))"
      ]
    ]
  },
  {
    "id": 489,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT hand, COUNT(player_id) AS num_players FROM players GROUP BY hand",
        "SELECT hand, COUNT(*) AS num_players FROM players GROUP BY hand",
        "SELECT hand, COUNT(player_id) FROM players GROUP BY hand",
        "SELECT p.hand, COUNT(p.player_id) AS num_players FROM players p GROUP BY p.hand",
        "SELECT p.hand, COUNT(*) FROM players p GROUP BY p.hand",
        "SELECT COUNT(player_id) AS num_players, hand FROM players GROUP BY hand",
        "SELECT COUNT(*) AS num_players, hand FROM players GROUP BY hand",
        "SELECT hand, COUNT(player_id) AS count_of_players FROM players GROUP BY hand",
        "SELECT players.hand, COUNT(players.player_id) AS num_players FROM players GROUP BY players.hand",
        "SELECT players.hand, COUNT(*) AS num_players FROM players GROUP BY players.hand"
      ]
    ]
  },
  {
    "id": 490,
    "db_id": "wta_1",
    "infer_predictions": [
      [
        "SELECT hand, COUNT(*) AS num_players FROM players GROUP BY hand",
        "SELECT hand, COUNT(player_id) AS num_players FROM players GROUP BY hand",
        "SELECT p.hand, COUNT(p.player_id) AS num_players FROM players p GROUP BY p.hand",
        "SELECT COUNT(player_id), hand FROM players GROUP BY hand",
        "SELECT hand, COUNT(*) FROM players GROUP BY hand",
        "SELECT COUNT(*), hand FROM players GROUP BY hand",
        "SELECT hand, COUNT(player_id) FROM players GROUP BY hand",
        "SELECT p.hand, COUNT(*) FROM players p GROUP BY p.hand",
        "SELECT COUNT(player_id), hand FROM players p GROUP BY p.hand",
        "SELECT hand, COUNT(player_id) FROM players GROUP BY hand ORDER BY hand"
      ]
    ]
  },
  {
    "id": 491,
    "db_id": "battle_death",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'",
        "SELECT COUNT(id) FROM ship WHERE disposition_of_ship = 'Captured'",
        "SELECT COUNT(*) AS CapturedShips FROM ship WHERE disposition_of_ship = 'Captured'",
        "SELECT COUNT(ship.id) AS TotalCaptured FROM ship WHERE ship.disposition_of_ship = 'Captured'",
        "SELECT COUNT(DISTINCT id) FROM ship WHERE disposition_of_ship = 'Captured'",
        "SELECT COUNT(DISTINCT ship.id) FROM ship WHERE ship.disposition_of_ship = 'Captured'",
        "SELECT COUNT(*) FROM ship WHERE disposition_of_ship LIKE 'Captured'",
        "SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured' GROUP BY disposition_of_ship",
        "SELECT COUNT(*) FROM ship s WHERE s.disposition_of_ship = 'Captured'",
        "SELECT COUNT(ship.id) FROM ship WHERE ship.disposition_of_ship LIKE 'Captured'"
      ]
    ]
  },
  {
    "id": 492,
    "db_id": "battle_death",
    "infer_predictions": [
      [
        "SELECT name, tonnage FROM ship ORDER BY name DESC, tonnage ASC",
        "SELECT ship.name, ship.tonnage FROM ship ORDER BY ship.name DESC, ship.tonnage ASC",
        "SELECT s.name, s.tonnage FROM ship s ORDER BY s.name DESC, s.tonnage ASC",
        "SELECT name AS ShipName, tonnage AS ShipTonnage FROM ship ORDER BY ShipName DESC, ShipTonnage ASC",
        "SELECT ship.name, ship.tonnage FROM ship ORDER BY ship.name DESCENDING, ship.tonnage ASCENDING",
        "SELECT name, tonnage FROM ship ORDER BY name DESCENDING, tonnage ASCENDING",
        "SELECT name, tonnage FROM ship ORDER BY name DESC, tonnage",
        "SELECT ship.name, ship.tonnage FROM ship ORDER BY UPPER(ship.name) DESC, ship.tonnage ASC",
        "SELECT name, tonnage FROM ship ORDER BY name DESC, tonnage ASCENDING",
        "SELECT name, tonnage FROM ship ORDER BY name DESCENDING, tonnage"
      ]
    ]
  },
  {
    "id": 493,
    "db_id": "battle_death",
    "infer_predictions": [
      [
        "SELECT name, date, result FROM battle",
        "SELECT battle.name, battle.date, battle.result FROM battle",
        "SELECT b.name, b.date, b.result FROM battle b",
        "SELECT `name`, `date`, `result` FROM `battle`",
        "SELECT battle.name AS BattleName, battle.date AS BattleDate, battle.result AS BattleResult FROM battle",
        "SELECT name AS 'Battle Name', date AS 'Date', result AS 'Result' FROM battle",
        "SELECT * FROM battle SELECT name, date, result",
        "SELECT battle.name, battle.date, battle.result FROM battle ORDER BY date",
        "SELECT name, date, result FROM battle WHERE name IS NOT NULL",
        "SELECT DISTINCT name, date, result FROM battle"
      ]
    ]
  },
  {
    "id": 494,
    "db_id": "battle_death",
    "infer_predictions": [
      [
        "SELECT MAX(death.killed) AS Max_Death_Toll, MIN(death.killed) AS Min_Death_Toll FROM death",
        "SELECT MAX(killed) AS Maximum_Deaths, MIN(killed) AS Minimum_Deaths FROM death",
        "SELECT battle.id, MAX(death.killed) AS Max_Deaths, MIN(death.killed) AS Min_Deaths FROM death JOIN ship ON death.caused_by_ship_id = ship.id JOIN battle ON ship.lost_in_battle = battle.id GROUP BY battle.id",
        "SELECT ship.id, MAX(death.killed) AS Maximum_Death_Toll, MIN(death.killed) AS Minimum_Death_Toll FROM death JOIN ship ON death.caused_by_ship_id = ship.id GROUP BY ship.id",
        "SELECT battle.id AS Battle_ID, MAX(death.killed) AS 'Max Death Toll', MIN(death.killed) AS 'Min Death Toll' FROM death INNER JOIN ship ON death.caused_by_ship_id = ship.id INNER JOIN battle ON ship.lost_in_battle = battle.id GROUP BY battle.id",
        "SELECT ship.id AS Ship_ID, MAX(death.killed) AS 'Maximum Death Toll', MIN(death.killed) AS 'Minimum Death Toll' FROM death INNER JOIN ship ON death.caused_by_ship_id = ship.id GROUP BY ship.id",
        "SELECT battle.id, MAX(death.killed) AS 'Max Death', MIN(death.killed) AS 'Min Death' FROM death, ship, battle WHERE death.caused_by_ship_id = ship.id AND ship.lost_in_battle = battle.id GROUP BY battle.id",
        "SELECT ship.id, MAX(death.killed) AS 'Max Death Toll', MIN(death.killed) AS 'Min Death Toll' FROM death, ship WHERE death.caused_by_ship_id = ship.id GROUP BY ship.id",
        "SELECT battle.id AS BattleID, MAX(death.killed) AS MaxDeathToll, MIN(death.killed) AS MinDeathToll FROM death LEFT JOIN ship ON death.caused_by_ship_id = ship.id LEFT JOIN battle ON ship.lost_in_battle = battle.id GROUP BY battle.id",
        "SELECT ship.id AS ShipID, MAX(death.killed) AS MaxDeathToll, MIN(death.killed) AS MinDeathToll FROM death LEFT JOIN ship ON death.caused_by_ship_id = ship.id GROUP BY ship.id"
      ]
    ]
  },
  {
    "id": 495,
    "db_id": "battle_death",
    "infer_predictions": [
      [
        "SELECT AVG(injured) FROM death",
        "SELECT AVG(injured) AS average_injuries FROM death",
        "SELECT AVG(death.injured) AS AverageInjuries FROM death",
        "SELECT AVG(death.injured) FROM death",
        "SELECT AVG(injured) AS Average_Number_of_Injuries FROM death",
        "SELECT AVG(injured) FROM death WHERE injured IS NOT NULL",
        "SELECT AVG(injured) AS avg_injuries FROM death WHERE injured > 0",
        "SELECT AVG(CAST(injured AS FLOAT)) FROM death",
        "SELECT AVG(injured) AS AverageInjuries FROM death WHERE injured > 0",
        "SELECT AVG(injured) AS AverageInjuries FROM death GROUP BY caused_by_ship_id"
      ]
    ]
  },
  {
    "id": 496,
    "db_id": "battle_death",
    "infer_predictions": [
      [
        "SELECT death.killed, death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't'",
        "SELECT d.killed, d.injured FROM death d INNER JOIN ship s ON d.caused_by_ship_id = s.id WHERE s.tonnage = 't'",
        "SELECT killed, injured FROM death, ship WHERE death.caused_by_ship_id = ship.id AND ship.tonnage = 't'",
        "SELECT killed AS deaths, injured AS injuries FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't'",
        "SELECT d.killed, d.injured FROM death d, ship s WHERE d.caused_by_ship_id = s.id AND s.tonnage = 't'",
        "SELECT death.killed, death.injured FROM death INNER JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't'",
        "SELECT killed, injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't'",
        "SELECT d.killed AS Death_Count, d.injured AS Injury_Count FROM death d JOIN ship s ON d.caused_by_ship_id = s.id WHERE s.tonnage = 't'",
        "SELECT death.killed, death.injured FROM death, ship WHERE death.caused_by_ship_id = ship.id AND ship.tonnage = 't'",
        "SELECT d.killed, d.injured FROM death d JOIN ship s ON d.caused_by_ship_id = s.id WHERE s.tonnage = 't'"
      ]
    ]
  },
  {
    "id": 497,
    "db_id": "battle_death",
    "infer_predictions": [
      [
        "SELECT name, result FROM battle WHERE bulgarian_commander <> 'Boril'",
        "SELECT name, result FROM battle WHERE NOT bulgarian_commander = 'Boril'",
        "SELECT battle.name, battle.result FROM battle WHERE battle.bulgarian_commander != 'Boril'",
        "SELECT b.name, b.result FROM battle b WHERE b.bulgarian_commander NOT LIKE 'Boril'",
        "SELECT name, result FROM battle WHERE bulgarian_commander NOT IN ('Boril')",
        "SELECT name, result FROM battle WHERE bulgarian_commander IS NOT 'Boril'",
        "SELECT name, result FROM battle WHERE bulgarian_commander <> 'Boril' AND bulgarian_commander IS NOT NULL",
        "SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril' AND bulgarian_commander IS NOT NULL",
        "SELECT name, result FROM battle WHERE bulgarian_commander NOT LIKE 'Boril'",
        "SELECT name, result FROM battle WHERE bulgarian_commander NOT EQUAL TO 'Boril'"
      ]
    ]
  },
  {
    "id": 498,
    "db_id": "battle_death",
    "infer_predictions": [
      [
        "SELECT DISTINCT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig'",
        "SELECT b.id, b.name FROM battle b, ship s WHERE b.id = s.lost_in_battle AND s.ship_type = 'Brig' GROUP BY b.id, b.name",
        "SELECT DISTINCT battle.id, battle.name FROM battle INNER JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig'",
        "SELECT battle.id AS BattleID, battle.name AS BattleName FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig' GROUP BY BattleID, BattleName",
        "SELECT DISTINCT b.id, b.name FROM battle b, ship s WHERE b.id = s.lost_in_battle AND s.ship_type LIKE 'Brig'",
        "SELECT battle.id, battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle AND ship.ship_type = 'Brig' GROUP BY battle.id, battle.name",
        "SELECT DISTINCT b.id, b.name FROM battle b INNER JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig'",
        "SELECT b.id, b.name FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig' GROUP BY b.id, b.name",
        "SELECT DISTINCT battle.id, battle.name FROM battle, ship WHERE battle.id = ship.lost_in_battle AND ship.ship_type = 'Brig'",
        "SELECT battle.id, battle.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig' ORDER BY b.id"
      ]
    ]
  },
  {
    "id": 499,
    "db_id": "battle_death",
    "infer_predictions": [
      [
        "SELECT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle JOIN death d ON s.id = d.caused_by_ship_id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10",
        "SELECT battle.id, battle.name FROM battle INNER JOIN ship ON battle.id = ship.lost_in_battle INNER JOIN death ON ship.id = death.caused_by_ship_id GROUP BY battle.id, battle.name HAVING SUM(death.killed) > 10",
        "SELECT b.id, b.name FROM battle b, ship s, death d WHERE b.id = s.lost_in_battle AND s.id = d.caused_by_ship_id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10",
        "SELECT id, name FROM battle WHERE id IN (SELECT lost_in_battle FROM ship WHERE id IN (SELECT caused_by_ship_id FROM death GROUP BY caused_by_ship_id HAVING SUM(killed) > 10))",
        "SELECT DISTINCT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle JOIN death d ON s.id = d.caused_by_ship_id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10",
        "SELECT battle.id, battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN death ON ship.id = death.caused_by_ship_id GROUP BY battle.id, battle.name HAVING SUM(death.killed) > 10",
        "SELECT b.id, b.name FROM battle b WHERE EXISTS (SELECT 1 FROM ship s JOIN death d ON s.id = d.caused_by_ship_id WHERE s.lost_in_battle = b.id GROUP BY s.lost_in_battle HAVING SUM(d.killed) > 10)",
        "SELECT b.id, b.name FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle LEFT JOIN death d ON s.id = d.caused_by_ship_id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10",
        "SELECT b.id, b.name FROM battle b WHERE b.id IN (SELECT s.lost_in_battle FROM ship s JOIN death d ON s.id = d.caused_by_ship_id GROUP BY s.lost_in_battle HAVING SUM(d.killed) > 10)",
        "SELECT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle JOIN death d ON s.id = d.caused_by_ship_id WHERE SUM(d.killed) > 10 GROUP BY b.id, b.name"
      ]
    ]
  },
  {
    "id": 500,
    "db_id": "battle_death",
    "infer_predictions": [
      [
        "SELECT T1.id, T1.name FROM ship AS T1 JOIN (SELECT caused_by_ship_id, SUM(injured) AS total_injuries FROM death GROUP BY caused_by_ship_id) AS T2 ON T1.id = T2.caused_by_ship_id WHERE T2.total_injuries = (SELECT MAX(total_injuries) FROM (SELECT SUM(injured) AS total_injuries FROM death GROUP BY caused_by_ship_id) AS T3)",
        "SELECT id, name FROM ship WHERE id IN (SELECT caused_by_ship_id FROM death GROUP BY caused_by_ship_id ORDER BY SUM(injured) DESC LIMIT 1)",
        "SELECT ship.id, ship.name FROM ship INNER JOIN (SELECT caused_by_ship_id, SUM(injured) AS total_injuries FROM death GROUP BY caused_by_ship_id) subquery ON ship.id = subquery.caused_by_ship_id WHERE subquery.total_injuries = (SELECT MAX(total_injuries) FROM (SELECT SUM(injured) AS total_injuries FROM death GROUP BY caused_by_ship_id) subquery2)",
        "SELECT s.id, s.name FROM ship s JOIN death d ON s.id = d.caused_by_ship_id GROUP BY s.id, s.name HAVING SUM(d.injured) = (SELECT MAX(total_injuries) FROM (SELECT SUM(injured) AS total_injuries FROM death GROUP BY caused_by_ship_id) sub)",
        "SELECT id, name FROM ship WHERE id = (SELECT caused_by_ship_id FROM death GROUP BY caused_by_ship_id HAVING SUM(injured) = (SELECT MAX(total_injuries) FROM (SELECT SUM(injured) AS total_injuries FROM death GROUP BY caused_by_ship_id) sub))",
        "SELECT s.id, s.name FROM ship s WHERE (SELECT SUM(injured) FROM death WHERE caused_by_ship_id = s.id) = (SELECT MAX(total_injuries) FROM (SELECT SUM(injured) AS total_injuries FROM death GROUP BY caused_by_ship_id) sub)",
        "SELECT id, name FROM ship WHERE id IN (SELECT caused_by_ship_id FROM death GROUP BY caused_by_ship_id HAVING SUM(injured) >= ALL (SELECT SUM(injured) FROM death GROUP BY caused_by_ship_id))",
        "SELECT ship.id, ship.name FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name HAVING SUM(death.injured) = (SELECT MAX(total_injuries) FROM (SELECT SUM(injured) AS total_injuries FROM death GROUP BY caused_by_ship_id) sub)",
        "SELECT id, name FROM ship WHERE id IN (SELECT caused_by_ship_id FROM death GROUP BY caused_by_ship_id ORDER BY SUM(injured) DESC FETCH FIRST 1 ROWS ONLY)",
        "SELECT s.id, s.name FROM ship s, death d WHERE s.id = d.caused_by_ship_id GROUP BY s.id, s.name HAVING SUM(d.injured) = (SELECT MAX(total_injuries) FROM (SELECT SUM(injured) AS total_injuries FROM death GROUP BY caused_by_ship_id) sub)"
      ]
    ]
  },
  {
    "id": 501,
    "db_id": "battle_death",
    "infer_predictions": [
      [
        "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
        "SELECT DISTINCT name FROM battle WHERE bulgarian_commander LIKE 'Kaloyan' AND latin_commander LIKE 'Baldwin I'",
        "SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I' GROUP BY name",
        "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I' ORDER BY name",
        "SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I' AND name IS NOT NULL",
        "SELECT DISTINCT b.name FROM battle b WHERE b.bulgarian_commander = 'Kaloyan' AND b.latin_commander = 'Baldwin I'",
        "SELECT DISTINCT battle.name FROM battle WHERE battle.bulgarian_commander = 'Kaloyan' AND battle.latin_commander = 'Baldwin I'",
        "SELECT DISTINCT name FROM battle WHERE bulgarian_commander IN ('Kaloyan') AND latin_commander IN ('Baldwin I')",
        "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I' AND name IS DISTINCT FROM NULL",
        "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I' LIMIT 100"
      ]
    ]
  },
  {
    "id": 502,
    "db_id": "battle_death",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT result) FROM battle",
        "SELECT COUNT(UNIQUE result) FROM battle",
        "SELECT COUNT(*) FROM (SELECT DISTINCT result FROM battle) AS unique_results",
        "SELECT COUNT(result) FROM (SELECT DISTINCT result FROM battle) AS distinct_results",
        "SELECT COUNT(DISTINCT battle.result) FROM battle",
        "SELECT DISTINCT COUNT(result) FROM battle",
        "SELECT COUNT(*) FROM (SELECT result FROM battle GROUP BY result) AS grouped_results",
        "SELECT COUNT(DISTINCT result) AS NumberOfUniqueResults FROM battle",
        "SELECT COUNT(*) FROM (SELECT DISTINCT result FROM battle) result_table",
        "SELECT COUNT(result) FROM (SELECT DISTINCT result FROM battle) AS results"
      ]
    ]
  },
  {
    "id": 503,
    "db_id": "battle_death",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = 225)",
        "SELECT COUNT(b.id) FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle AND s.tonnage = 225 WHERE s.id IS NULL",
        "SELECT COUNT(DISTINCT b.id) FROM battle b WHERE NOT EXISTS (SELECT 1 FROM ship s WHERE s.lost_in_battle = b.id AND s.tonnage = 225)",
        "SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225')",
        "SELECT COUNT(battle.id) FROM battle WHERE battle.id NOT IN (SELECT ship.lost_in_battle FROM ship WHERE ship.tonnage = 225)",
        "SELECT COUNT(*) FROM battle b WHERE NOT EXISTS (SELECT NULL FROM ship s WHERE s.lost_in_battle = b.id AND s.tonnage = 225)",
        "SELECT COUNT(*) FROM (SELECT b.id FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle WHERE s.tonnage <> 225 OR s.tonnage IS NULL GROUP BY b.id) AS subquery",
        "SELECT COUNT(*) FROM battle b WHERE b.id NOT IN (SELECT s.lost_in_battle FROM ship s WHERE s.tonnage = 225)",
        "SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT DISTINCT lost_in_battle FROM ship WHERE tonnage = 225)",
        "SELECT COUNT(b.id) FROM battle b WHERE NOT EXISTS (SELECT 1 FROM ship s WHERE s.lost_in_battle = b.id AND s.tonnage = '225')"
      ]
    ]
  },
  {
    "id": 504,
    "db_id": "battle_death",
    "infer_predictions": [
      [
        "SELECT b.name, b.date FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.name IN ('Lettice', 'HMS Atalanta')",
        "SELECT battle.name, battle.date FROM battle INNER JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta'",
        "SELECT name, date FROM battle WHERE id IN (SELECT lost_in_battle FROM ship WHERE name = 'Lettice' UNION SELECT lost_in_battle FROM ship WHERE name = 'HMS Atalanta')",
        "SELECT b.name, b.date FROM battle b, ship s WHERE b.id = s.lost_in_battle AND (s.name = 'Lettice' OR s.name = 'HMS Atalanta')",
        "SELECT DISTINCT battle.name, battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name IN ('Lettice', 'HMS Atalanta')",
        "SELECT name, date FROM battle WHERE id IN (SELECT lost_in_battle FROM ship WHERE name = 'Lettice' INTERSECT SELECT lost_in_battle FROM ship WHERE name = 'HMS Atalanta')",
        "SELECT battle.name, battle.date FROM battle WHERE EXISTS (SELECT 1 FROM ship WHERE ship.lost_in_battle = battle.id AND ship.name IN ('Lettice', 'HMS Atalanta'))",
        "SELECT b.name, b.date FROM battle b WHERE b.id IN (SELECT s.lost_in_battle FROM ship s WHERE s.name = 'Lettice' OR s.name = 'HMS Atalanta')",
        "SELECT name, date FROM battle WHERE id IN (SELECT lost_in_battle FROM ship WHERE name = 'Lettice' OR name = 'HMS Atalanta') GROUP BY id HAVING COUNT(*) > 1",
        "SELECT b.name, b.date FROM battle b WHERE EXISTS (SELECT NULL FROM ship s WHERE s.lost_in_battle = b.id AND s.name = 'Lettice') AND EXISTS (SELECT NULL FROM ship s WHERE s.lost_in_battle = b.id AND s.name = 'HMS Atalanta')"
      ]
    ]
  },
  {
    "id": 505,
    "db_id": "battle_death",
    "infer_predictions": [
      [
        "SELECT b.name, b.result, b.bulgarian_commander FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle WHERE s.location = 'English Channel' AND s.id IS NULL",
        "SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel')",
        "SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT DISTINCT lost_in_battle FROM ship WHERE location = 'English Channel')",
        "SELECT b.name, b.result, b.bulgarian_commander FROM battle b WHERE NOT EXISTS (SELECT 1 FROM ship s WHERE s.lost_in_battle = b.id AND s.location = 'English Channel')",
        "SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle LEFT JOIN ship ON battle.id = ship.lost_in_battle AND ship.location = 'English Channel' WHERE ship.id IS NULL",
        "SELECT b.name, b.result, b.bulgarian_commander FROM battle b WHERE b.id NOT IN (SELECT s.lost_in_battle FROM ship s WHERE s.location = 'English Channel')",
        "SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel') GROUP BY id",
        "SELECT DISTINCT b.name, b.result, b.bulgarian_commander FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle AND s.location = 'English Channel' WHERE s.id IS NULL",
        "SELECT b.name, b.result, b.bulgarian_commander FROM battle b LEFT OUTER JOIN ship s ON b.id = s.lost_in_battle WHERE s.location = 'English Channel' AND s.id IS NULL",
        "SELECT b.name, b.result, b.bulgarian_commander FROM battle b WHERE b.id NOT IN (SELECT s.lost_in_battle FROM ship s WHERE s.location = 'English Channel')"
      ]
    ]
  },
  {
    "id": 506,
    "db_id": "battle_death",
    "infer_predictions": [
      [
        "SELECT note FROM death WHERE note LIKE '%East%'",
        "SELECT note FROM death WHERE note CONTAINS 'East'",
        "SELECT note FROM death WHERE INSTR(note, 'East') > 0",
        "SELECT note FROM death WHERE POSITION('East' IN note) > 0",
        "SELECT note FROM death WHERE CHARINDEX('East', note) > 0",
        "SELECT note FROM death WHERE note REGEXP 'East'",
        "SELECT note FROM death WHERE note ILIKE '%East%'",
        "SELECT note FROM death WHERE note LIKE '%East%' ESCAPE '\\'",
        "SELECT note FROM death WHERE note SIMILAR TO '%East%'",
        "SELECT note FROM death WHERE note LIKE '%East%' COLLATE utf8_general_ci"
      ]
    ]
  },
  {
    "id": 507,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT line_1, line_2 FROM Addresses",
        "SELECT Addresses.line_1, Addresses.line_2 FROM Addresses",
        "SELECT a.line_1, a.line_2 FROM Addresses AS a",
        "SELECT line_1 AS 'Address Line 1', line_2 AS 'Address Line 2' FROM Addresses",
        "SELECT Addresses.line_1, Addresses.line_2 FROM Addresses WHERE line_1 IS NOT NULL OR line_2 IS NOT NULL",
        "SELECT DISTINCT line_1, line_2 FROM Addresses",
        "SELECT line_1, line_2 FROM Addresses ORDER BY line_1, line_2",
        "SELECT * FROM Addresses WHERE line_1 IS NOT NULL AND line_2 IS NOT NULL",
        "SELECT line_1, line_2 FROM Addresses WHERE line_1 <> '' OR line_2 <> ''",
        "SELECT line_1, line_2 FROM Addresses LIMIT 100"
      ]
    ]
  },
  {
    "id": 508,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT line_1, line_2 FROM Addresses",
        "SELECT Addresses.line_1, Addresses.line_2 FROM Addresses",
        "SELECT a.line_1, a.line_2 FROM Addresses AS a",
        "SELECT line_1 AS FirstLine, line_2 AS SecondLine FROM Addresses",
        "SELECT `line_1`, `line_2` FROM `Addresses`",
        "SELECT Addresses.line_1 AS 'First Line', Addresses.line_2 AS 'Second Line' FROM Addresses",
        "SELECT line_1, line_2 FROM Addresses WHERE line_1 IS NOT NULL AND line_2 IS NOT NULL",
        "SELECT DISTINCT line_1, line_2 FROM Addresses",
        "SELECT line_1, line_2 FROM Addresses ORDER BY line_1, line_2",
        "SELECT first.line_1, second.line_2 FROM Addresses first, Addresses second WHERE first.address_id = second.address_id"
      ]
    ]
  },
  {
    "id": 509,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Courses",
        "SELECT COUNT(course_id) FROM Courses",
        "SELECT COUNT(course_id) AS TotalCourses FROM Courses",
        "SELECT COUNT(*) AS TotalNumberOfCourses FROM Courses",
        "SELECT COUNT(DISTINCT course_id) FROM Courses",
        "SELECT COUNT(DISTINCT course_id) AS TotalUniqueCourses FROM Courses",
        "SELECT COUNT(*) FROM Courses WHERE course_id IS NOT NULL",
        "SELECT COUNT(course_id) FROM Courses WHERE course_id IS NOT NULL",
        "SELECT COUNT(*) AS CourseCount FROM Courses",
        "SELECT COUNT(DISTINCT course_id) AS CountOfCourses FROM Courses"
      ]
    ]
  },
  {
    "id": 510,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Courses",
        "SELECT COUNT(course_id) FROM Courses",
        "SELECT COUNT(course_id) AS TotalCourses FROM Courses",
        "SELECT COUNT(*) AS CourseCount FROM Courses",
        "SELECT COUNT(DISTINCT course_id) FROM Courses",
        "SELECT COUNT(DISTINCT course_id) AS NumberOfCourses FROM Courses",
        "SELECT COUNT(*) FROM Courses WHERE course_id IS NOT NULL",
        "SELECT COUNT(course_id) FROM Courses WHERE course_id IS NOT NULL",
        "SELECT COUNT(*) AS TotalNumberOfCourses FROM Courses WHERE course_id IS NOT NULL",
        "SELECT COUNT(DISTINCT course_id) FROM Courses WHERE course_id IS NOT NULL"
      ]
    ]
  },
  {
    "id": 511,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT course_description FROM Courses WHERE course_name = 'math'",
        "SELECT course_description FROM Courses WHERE course_name LIKE '%math%'",
        "SELECT course_description FROM Courses WHERE course_name ILIKE 'math'",
        "SELECT course_description FROM Courses WHERE LOWER(course_name) = 'math'",
        "SELECT Courses.course_description FROM Courses WHERE Courses.course_name = 'math'",
        "SELECT c.course_description FROM Courses c WHERE c.course_name = 'math'",
        "SELECT course_description FROM Courses WHERE course_name = 'math' LIMIT 1",
        "SELECT course_description FROM Courses WHERE course_name IN ('math')",
        "SELECT course_description FROM Courses WHERE course_name = 'math' AND course_description IS NOT NULL",
        "SELECT course_description FROM Courses WHERE course_name COLLATE UTF8_GENERAL_CI = 'math'"
      ]
    ]
  },
  {
    "id": 512,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT course_description FROM Courses WHERE course_name LIKE '%math%'",
        "SELECT course_description FROM Courses WHERE course_name ILIKE '%math%'",
        "SELECT course_description FROM Courses WHERE LOWER(course_name) LIKE '%math%'",
        "SELECT course_description FROM Courses WHERE course_name LIKE 'math%'",
        "SELECT course_description FROM Courses WHERE course_name LIKE '%math'",
        "SELECT course_description FROM Courses WHERE course_name LIKE '%math%' OR course_name LIKE '%Mathematics%'",
        "SELECT course_description FROM Courses WHERE course_name LIKE '%math%' AND course_description IS NOT NULL",
        "SELECT course_description FROM Courses WHERE course_name SIMILAR TO '%(math|Mathematics)%'",
        "SELECT course_description FROM Courses WHERE POSITION('math' IN LOWER(course_name)) > 0",
        "SELECT course_description FROM Courses WHERE course_name REGEXP 'math'"
      ]
    ]
  },
  {
    "id": 513,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
        "SELECT zip_postcode FROM Addresses WHERE city LIKE 'Port Chelsea'",
        "SELECT Addresses.zip_postcode FROM Addresses WHERE Addresses.city = 'Port Chelsea'",
        "SELECT a.zip_postcode FROM Addresses a WHERE a.city = 'Port Chelsea'",
        "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea' LIMIT 1",
        "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea' ORDER BY address_id ASC LIMIT 1",
        "SELECT DISTINCT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
        "SELECT TOP 1 zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
        "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea' AND address_id = (SELECT MIN(address_id) FROM Addresses WHERE city = 'Port Chelsea')",
        "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea' FETCH FIRST 1 ROWS ONLY"
      ]
    ]
  },
  {
    "id": 514,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
        "SELECT zip_postcode FROM Addresses WHERE city LIKE 'Port Chelsea'",
        "SELECT Addresses.zip_postcode FROM Addresses WHERE Addresses.city = 'Port Chelsea'",
        "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea' LIMIT 1",
        "SELECT A.zip_postcode FROM Addresses A WHERE A.city = 'Port Chelsea'",
        "SELECT zip_postcode FROM Addresses WHERE city IN ('Port Chelsea')",
        "SELECT zip_postcode FROM Addresses WHERE LOWER(city) = LOWER('Port Chelsea')",
        "SELECT DISTINCT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
        "SELECT zip_postcode FROM Addresses WHERE TRIM(city) = 'Port Chelsea'",
        "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea' AND zip_postcode IS NOT NULL"
      ]
    ]
  },
  {
    "id": 515,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT D.department_id, D.department_name FROM Departments D JOIN Degree_Programs DP ON D.department_id = DP.department_id GROUP BY D.department_id, D.department_name HAVING COUNT(DP.degree_program_id) = (SELECT MAX(degree_count) FROM (SELECT COUNT(degree_program_id) AS degree_count FROM Degree_Programs GROUP BY department_id) AS subquery)",
        "SELECT department_id, department_name FROM Departments WHERE department_id IN (SELECT department_id FROM Degree_Programs GROUP BY department_id HAVING COUNT(degree_program_id) = (SELECT MAX(count) FROM (SELECT COUNT(degree_program_id) AS count FROM Degree_Programs GROUP BY department_id) AS counts))",
        "SELECT D.department_id, D.department_name FROM Departments D WHERE EXISTS (SELECT 1 FROM Degree_Programs DP WHERE DP.department_id = D.department_id GROUP BY DP.department_id HAVING COUNT(*) = (SELECT MAX(counts) FROM (SELECT COUNT(*) AS counts FROM Degree_Programs GROUP BY department_id) AS sub))",
        "SELECT D.department_id, D.department_name FROM Departments D, (SELECT department_id, COUNT(*) AS num_degrees FROM Degree_Programs GROUP BY department_id) AS DP WHERE D.department_id = DP.department_id AND DP.num_degrees = (SELECT MAX(num_degrees) FROM (SELECT COUNT(*) AS num_degrees FROM Degree_Programs GROUP BY department_id) AS subquery)",
        "SELECT D.department_id, D.department_name FROM Departments D INNER JOIN (SELECT department_id, COUNT(*) AS degree_count FROM Degree_Programs GROUP BY department_id) DP ON D.department_id = DP.department_id WHERE DP.degree_count = (SELECT MAX(degree_count) FROM (SELECT COUNT(*) AS degree_count FROM Degree_Programs GROUP BY department_id) sub)",
        "SELECT department_id, department_name FROM Departments WHERE department_id IN (SELECT department_id FROM Degree_Programs GROUP BY department_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "WITH DegreeCounts AS (SELECT department_id, COUNT(*) AS count FROM Degree_Programs GROUP BY department_id) SELECT D.department_id, D.department_name FROM Departments D JOIN DegreeCounts DC ON D.department_id = DC.department_id WHERE DC.count = (SELECT MAX(count) FROM DegreeCounts)",
        "SELECT D.department_id, D.department_name FROM Departments D WHERE D.department_id IN (SELECT department_id FROM Degree_Programs GROUP BY department_id HAVING COUNT(degree_program_id) = (SELECT MAX(count) FROM (SELECT COUNT(degree_program_id) AS count FROM Degree_Programs GROUP BY department_id) sub))",
        "SELECT department_id, department_name FROM Departments WHERE department_id IN (SELECT department_id FROM Degree_Programs GROUP BY department_id HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Degree_Programs GROUP BY department_id) sub))",
        "SELECT D.department_id, D.department_name FROM Departments D WHERE (SELECT COUNT(*) FROM Degree_Programs DP WHERE DP.department_id = D.department_id) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Degree_Programs GROUP BY department_id) sub)"
      ]
    ]
  },
  {
    "id": 516,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT D.department_id, D.department_name FROM Departments D JOIN Degree_Programs DP ON D.department_id = DP.department_id GROUP BY D.department_id, D.department_name HAVING COUNT(*) = (SELECT MAX(degree_count) FROM (SELECT COUNT(*) AS degree_count FROM Degree_Programs GROUP BY department_id) AS subquery)",
        "SELECT department_id, department_name FROM Departments WHERE department_id IN (SELECT department_id FROM Degree_Programs GROUP BY department_id HAVING COUNT(degree_program_id) = (SELECT MAX(count) FROM (SELECT COUNT(degree_program_id) AS count FROM Degree_Programs GROUP BY department_id) AS counts))",
        "SELECT D.department_id, D.department_name FROM Departments D WHERE D.department_id IN (SELECT DP.department_id FROM Degree_Programs DP GROUP BY DP.department_id HAVING COUNT(DP.degree_program_id) = (SELECT MAX(C) FROM (SELECT COUNT(degree_program_id) AS C FROM Degree_Programs GROUP BY department_id) T))",
        "SELECT D.department_id, D.department_name FROM Departments D INNER JOIN (SELECT department_id, COUNT(*) AS cnt FROM Degree_Programs GROUP BY department_id) DP ON D.department_id = DP.department_id WHERE DP.cnt = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Degree_Programs GROUP BY department_id) T)",
        "SELECT department_id, department_name FROM Departments WHERE department_id IN (SELECT department_id FROM Degree_Programs GROUP BY department_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "WITH DegreeCounts AS (SELECT department_id, COUNT(*) AS TotalDegrees FROM Degree_Programs GROUP BY department_id) SELECT D.department_id, D.department_name FROM Departments D JOIN DegreeCounts DC ON D.department_id = DC.department_id WHERE DC.TotalDegrees = (SELECT MAX(TotalDegrees) FROM DegreeCounts)",
        "SELECT D.department_id, D.department_name FROM Departments D, (SELECT department_id, COUNT(*) AS degree_count FROM Degree_Programs GROUP BY department_id) DP WHERE D.department_id = DP.department_id AND DP.degree_count = (SELECT MAX(degree_count) FROM (SELECT COUNT(*) AS degree_count FROM Degree_Programs GROUP BY department_id) T)",
        "SELECT D.department_id, D.department_name FROM Departments D JOIN Degree_Programs DP ON D.department_id = DP.department_id GROUP BY D.department_id, D.department_name ORDER BY COUNT(DP.degree_program_id) DESC LIMIT 1",
        "SELECT department_id, department_name FROM Departments WHERE department_id = (SELECT department_id FROM Degree_Programs GROUP BY department_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "WITH RankedDepartments AS (SELECT department_id, RANK() OVER (ORDER BY COUNT(degree_program_id) DESC) AS rank FROM Degree_Programs GROUP BY department_id) SELECT D.department_id, D.department_name FROM Departments D JOIN RankedDepartments RD ON D.department_id = RD.department_id WHERE RD.rank = 1"
      ]
    ]
  },
  {
    "id": 517,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT department_id) FROM Departments WHERE department_id IN (SELECT department_id FROM Degree_Programs)",
        "SELECT COUNT(DISTINCT D.department_id) FROM Departments D JOIN Degree_Programs DP ON D.department_id = DP.department_id",
        "SELECT COUNT(UNIQUE Departments.department_id) FROM Departments INNER JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id",
        "SELECT COUNT(*) FROM (SELECT DISTINCT department_id FROM Degree_Programs) AS unique_departments",
        "SELECT COUNT(DISTINCT department_id) FROM Departments WHERE EXISTS (SELECT 1 FROM Degree_Programs WHERE Degree_Programs.department_id = Departments.department_id)",
        "SELECT COUNT(DISTINCT D.department_id) FROM Departments D, Degree_Programs DP WHERE D.department_id = DP.department_id",
        "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs",
        "SELECT COUNT(*) FROM (SELECT department_id FROM Departments INTERSECT SELECT department_id FROM Degree_Programs) AS dept_offering_degrees",
        "SELECT COUNT(DISTINCT department_id) FROM Departments D WHERE D.department_id IN (SELECT department_id FROM Degree_Programs)",
        "SELECT COUNT(DISTINCT D.department_id) FROM Departments D WHERE EXISTS (SELECT department_id FROM Degree_Programs DP WHERE DP.department_id = D.department_id)"
      ]
    ]
  },
  {
    "id": 518,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT department_id) FROM Departments WHERE department_id IN (SELECT department_id FROM Degree_Programs)",
        "SELECT COUNT(DISTINCT D.department_id) FROM Departments D JOIN Degree_Programs DP ON D.department_id = DP.department_id",
        "SELECT COUNT(UNIQUE Departments.department_id) FROM Departments INNER JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id",
        "SELECT COUNT(*) FROM (SELECT DISTINCT department_id FROM Degree_Programs) AS unique_departments",
        "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs",
        "SELECT COUNT(*) FROM (SELECT DISTINCT D.department_id FROM Departments D, Degree_Programs DP WHERE D.department_id = DP.department_id) AS dept_count",
        "SELECT COUNT(DISTINCT D.department_id) FROM Departments D WHERE EXISTS (SELECT 1 FROM Degree_Programs DP WHERE DP.department_id = D.department_id)",
        "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs GROUP BY department_id",
        "SELECT COUNT(DISTINCT department_id) FROM (SELECT department_id FROM Degree_Programs UNION SELECT department_id FROM Departments) AS all_departments",
        "SELECT DISTINCT COUNT(department_id) FROM Degree_Programs"
      ]
    ]
  },
  {
    "id": 519,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs",
        "SELECT COUNT(UNIQUE degree_summary_name) FROM Degree_Programs",
        "SELECT COUNT(*) FROM (SELECT DISTINCT degree_summary_name FROM Degree_Programs) AS unique_degrees",
        "SELECT COUNT(degree_summary_name) FROM (SELECT DISTINCT degree_summary_name FROM Degree_Programs) AS temp_table",
        "SELECT COUNT(DISTINCT degree_summary_name) AS total_unique_degrees FROM Degree_Programs",
        "SELECT DISTINCT COUNT(degree_summary_name) FROM Degree_Programs",
        "SELECT COUNT(*) FROM (SELECT degree_summary_name FROM Degree_Programs GROUP BY degree_summary_name) AS degree_counts",
        "SELECT COUNT(degree_summary_name) FROM Degree_Programs GROUP BY degree_summary_name",
        "SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs WHERE degree_summary_name IS NOT NULL",
        "SELECT DISTINCT COUNT(*) OVER (PARTITION BY degree_summary_name) FROM Degree_Programs"
      ]
    ]
  },
  {
    "id": 520,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs",
        "SELECT COUNT(UNIQUE degree_summary_name) FROM Degree_Programs",
        "SELECT COUNT(*) FROM (SELECT DISTINCT degree_summary_name FROM Degree_Programs)",
        "SELECT COUNT(degree_summary_name) FROM (SELECT DISTINCT degree_summary_name FROM Degree_Programs) AS unique_degrees",
        "SELECT COUNT(DISTINCT degree_summary_name) AS total_unique_degrees FROM Degree_Programs",
        "SELECT DISTINCT COUNT(degree_summary_name) FROM Degree_Programs",
        "SELECT COUNT(*) FROM (SELECT degree_summary_name FROM Degree_Programs GROUP BY degree_summary_name)",
        "SELECT COUNT(degree_summary_name) FROM Degree_Programs GROUP BY degree_summary_name HAVING COUNT(*) >= 1",
        "SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs WHERE degree_summary_name IS NOT NULL",
        "SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs GROUP BY degree_summary_name"
      ]
    ]
  },
  {
    "id": 521,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = 'engineering'",
        "SELECT COUNT(degree_program_id) AS NumberOfDegrees FROM Degree_Programs INNER JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = 'engineering'",
        "SELECT COUNT(DISTINCT Degree_Programs.degree_program_id) FROM Degree_Programs, Departments WHERE Degree_Programs.department_id = Departments.department_id AND Departments.department_name = 'engineering'",
        "SELECT COUNT(*) FROM Degree_Programs d JOIN Departments dp ON d.department_id = dp.department_id WHERE dp.department_name = 'engineering'",
        "SELECT COUNT(degree_program_id) FROM Degree_Programs d INNER JOIN Departments dp ON d.department_id = dp.department_id WHERE dp.department_name = 'engineering'",
        "SELECT COUNT(*) FROM Degree_Programs d, Departments dp WHERE d.department_id = dp.department_id AND dp.department_name = 'engineering'",
        "SELECT COUNT(DISTINCT d.degree_program_id) FROM Degree_Programs d JOIN Departments dp ON d.department_id = dp.department_id WHERE dp.department_name = 'engineering'",
        "SELECT COUNT(*) FROM Degree_Programs WHERE department_id IN (SELECT department_id FROM Departments WHERE department_name = 'engineering')",
        "SELECT COUNT(degree_program_id) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering')",
        "SELECT COUNT(*) FROM Degree_Programs d INNER JOIN Departments dp ON d.department_id = dp.department_id AND dp.department_name = 'engineering'"
      ]
    ]
  },
  {
    "id": 522,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = 'engineering'",
        "SELECT COUNT(degree_program_id) AS TotalDegrees FROM Degree_Programs INNER JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = 'engineering'",
        "SELECT COUNT(DISTINCT Degree_Programs.degree_program_id) FROM Degree_Programs, Departments WHERE Degree_Programs.department_id = Departments.department_id AND Departments.department_name = 'engineering'",
        "SELECT COUNT(*) FROM Degree_Programs d JOIN Departments dp ON d.department_id = dp.department_id WHERE dp.department_name = 'engineering'",
        "SELECT COUNT(1) FROM Degree_Programs d INNER JOIN Departments dp ON d.department_id = dp.department_id WHERE dp.department_name = 'engineering'",
        "SELECT COUNT(degree_program_id) FROM Degree_Programs d, Departments dp WHERE d.department_id = dp.department_id AND dp.department_name = 'engineering'",
        "SELECT COUNT(*) FROM Degree_Programs WHERE department_id IN (SELECT department_id FROM Departments WHERE department_name = 'engineering')",
        "SELECT COUNT(*) AS NumberOfDegrees FROM Degree_Programs d JOIN Departments dp ON d.department_id = dp.department_id WHERE dp.department_name = 'engineering'",
        "SELECT COUNT(degree_program_id) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering')",
        "SELECT COUNT(*) FROM Degree_Programs d INNER JOIN Departments dp ON d.department_id = dp.department_id AND dp.department_name = 'engineering'"
      ]
    ]
  },
  {
    "id": 523,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT section_name, section_description FROM Sections",
        "SELECT Sections.section_name, Sections.section_description FROM Sections",
        "SELECT s.section_name, s.section_description FROM Sections s",
        "SELECT section_name AS 'Section Name', section_description AS 'Description' FROM Sections",
        "SELECT * FROM Sections SELECT section_name, section_description",
        "SELECT section_name, section_description FROM Sections ORDER BY section_name",
        "SELECT section_name, section_description FROM Sections WHERE section_description IS NOT NULL",
        "SELECT DISTINCT section_name, section_description FROM Sections",
        "SELECT section_name, section_description FROM Sections GROUP BY section_name, section_description",
        "SELECT section_name, section_description FROM Sections WHERE section_name IS NOT NULL AND section_description IS NOT NULL"
      ]
    ]
  },
  {
    "id": 524,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT section_name, section_description FROM Sections",
        "SELECT Sections.section_name, Sections.section_description FROM Sections",
        "SELECT s.section_name, s.section_description FROM Sections s",
        "SELECT section_name AS 'Section Name', section_description AS 'Description' FROM Sections",
        "SELECT section_name, section_description FROM Sections ORDER BY section_name",
        "SELECT * FROM Sections SELECT section_name, section_description",
        "SELECT section_name, section_description FROM Sections WHERE section_name IS NOT NULL",
        "SELECT section_name, section_description FROM Sections GROUP BY section_name, section_description",
        "SELECT DISTINCT section_name, section_description FROM Sections",
        "SELECT section_name, section_description FROM Sections LIMIT ALL"
      ]
    ]
  },
  {
    "id": 525,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT C.course_name, C.course_id FROM Courses C JOIN Sections S ON C.course_id = S.course_id GROUP BY C.course_id HAVING COUNT(S.section_id) <= 2",
        "SELECT course_name, course_id FROM Courses WHERE course_id IN (SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(section_id) <= 2)",
        "SELECT course_name, course_id FROM Courses WHERE (SELECT COUNT(*) FROM Sections WHERE Sections.course_id = Courses.course_id) <= 2",
        "SELECT C.course_name, C.course_id FROM Courses C WHERE EXISTS (SELECT 1 FROM Sections S WHERE S.course_id = C.course_id GROUP BY S.course_id HAVING COUNT(*) <= 2)",
        "SELECT course_name, course_id FROM Courses WHERE course_id IN (SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(*) <= 2)",
        "SELECT C.course_name, C.course_id FROM Courses C LEFT JOIN Sections S ON C.course_id = S.course_id GROUP BY C.course_id HAVING COUNT(S.section_id) <= 2 OR COUNT(S.section_id) IS NULL",
        "SELECT DISTINCT C.course_name, C.course_id FROM Courses C, Sections S WHERE C.course_id = S.course_id GROUP BY C.course_id, C.course_name HAVING COUNT(S.section_id) <= 2",
        "SELECT C.course_name, C.course_id FROM Courses C WHERE (SELECT COUNT(S.section_id) FROM Sections S WHERE S.course_id = C.course_id) <= 2",
        "SELECT course_name, course_id FROM Courses WHERE course_id IN (SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(section_id) <= 2)",
        "SELECT C.course_name, C.course_id FROM Courses C LEFT JOIN Sections S ON C.course_id = S.course_id GROUP BY C.course_id HAVING COUNT(S.section_id) <= 2"
      ]
    ]
  },
  {
    "id": 526,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT course_id, course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(*) < 2)",
        "SELECT C.course_id, C.course_name FROM Courses C WHERE (SELECT COUNT(*) FROM Sections S WHERE S.course_id = C.course_id) < 2",
        "SELECT course_id, course_name FROM Courses WHERE course_id NOT IN (SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(*) >= 2)",
        "SELECT C.course_id, C.course_name FROM Courses C LEFT JOIN Sections S ON C.course_id = S.course_id GROUP BY C.course_id, C.course_name HAVING COUNT(S.course_id) < 2",
        "SELECT course_id, course_name FROM Courses WHERE (SELECT COUNT(section_id) FROM Sections WHERE course_id = Courses.course_id) < 2",
        "SELECT C.course_id, C.course_name FROM Courses C JOIN Sections S ON C.course_id = S.course_id GROUP BY C.course_id, C.course_name HAVING COUNT(S.section_id) < 2",
        "SELECT course_id, course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(section_id) < 2)",
        "SELECT C.course_id, C.course_name FROM Courses C WHERE NOT EXISTS (SELECT 1 FROM Sections S WHERE S.course_id = C.course_id GROUP BY S.course_id HAVING COUNT(*) >= 2)",
        "SELECT course_id, course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(*) = 1)",
        "SELECT C.course_id, C.course_name FROM Courses C LEFT JOIN Sections S ON C.course_id = S.course_id GROUP BY C.course_id HAVING COUNT(S.section_id) < 2"
      ]
    ]
  },
  {
    "id": 527,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "SELECT section_name FROM Sections ORDER BY section_name DESCENDING",
        "SELECT * FROM Sections ORDER BY section_name DESC",
        "SELECT section_name FROM Sections ORDER BY section_name DESC, section_id ASC",
        "SELECT section_name FROM Sections ORDER BY section_name DESC LIMIT ALL",
        "SELECT section_name FROM Sections ORDER BY section_name DESC, section_id DESC",
        "SELECT section_name FROM Sections ORDER BY section_name DESC, section_id",
        "SELECT section_name FROM Sections ORDER BY section_name DESC, section_id DESCENDING",
        "SELECT section_name FROM Sections ORDER BY section_name DESC, section_id ASCENDING",
        "SELECT section_name FROM Sections ORDER BY section_name DESC, section_id DESCENDING LIMIT ALL"
      ]
    ]
  },
  {
    "id": 528,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "SELECT section_name FROM Sections ORDER BY section_name DESC;",
        "SELECT Sections.section_name FROM Sections ORDER BY Sections.section_name DESC",
        "SELECT s.section_name FROM Sections s ORDER BY s.section_name DESC",
        "SELECT section_name FROM Sections ORDER BY section_name DESCENDING",
        "SELECT section_name FROM Sections ORDER BY section_name DESC LIMIT ALL",
        "SELECT * FROM Sections ORDER BY section_name DESC",
        "SELECT section_name AS SectionNames FROM Sections ORDER BY SectionNames DESC",
        "SELECT section_name FROM Sections ORDER BY section_name DESCENDING;",
        "SELECT section_name FROM Sections ORDER BY section_name DESC, section_id ASC"
      ]
    ]
  },
  {
    "id": 529,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT S.semester_name, S.semester_id, COUNT(*) AS total_enrollments FROM Semesters S JOIN Student_Enrolment SE ON S.semester_id = SE.semester_id GROUP BY S.semester_id, S.semester_name ORDER BY total_enrollments DESC LIMIT 1",
        "SELECT semester_name, semester_id FROM Semesters WHERE semester_id IN (SELECT semester_id FROM Student_Enrolment GROUP BY semester_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT S.semester_name, S.semester_id FROM Semesters S INNER JOIN (SELECT semester_id, COUNT(*) AS cnt FROM Student_Enrolment GROUP BY semester_id) AS SE ON S.semester_id = SE.semester_id ORDER BY SE.cnt DESC LIMIT 1",
        "SELECT TOP 1 S.semester_name, S.semester_id, COUNT(SE.semester_id) AS EnrollmentCount FROM Semesters S LEFT JOIN Student_Enrolment SE ON S.semester_id = SE.semester_id GROUP BY S.semester_id, S.semester_name ORDER BY EnrollmentCount DESC",
        "SELECT S.semester_name, S.semester_id FROM Semesters S, Student_Enrolment SE WHERE S.semester_id = SE.semester_id GROUP BY S.semester_id, S.semester_name HAVING COUNT(SE.student_id) = (SELECT MAX(total) FROM (SELECT COUNT(student_id) AS total FROM Student_Enrolment GROUP BY semester_id) AS MaxEnrollments)",
        "SELECT S.semester_name, S.semester_id FROM Semesters S JOIN Student_Enrolment SE ON S.semester_id = SE.semester_id GROUP BY S.semester_id, S.semester_name HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Student_Enrolment GROUP BY semester_id)",
        "SELECT S.semester_name, S.semester_id, COUNT(SE.student_id) AS TotalRegistrations FROM Semesters S LEFT JOIN Student_Enrolment SE ON S.semester_id = SE.semester_id GROUP BY S.semester_id, S.semester_name ORDER BY TotalRegistrations DESC FETCH FIRST 1 ROWS ONLY",
        "SELECT semester_name, semester_id FROM Semesters WHERE semester_id = (SELECT semester_id FROM Student_Enrolment GROUP BY semester_id ORDER BY COUNT(student_id) DESC LIMIT 1)",
        "SELECT S.semester_name, S.semester_id, COUNT(*) AS registration_count FROM Semesters S LEFT JOIN Student_Enrolment SE ON S.semester_id = SE.semester_id GROUP BY S.semester_id, S.semester_name ORDER BY registration_count DESC LIMIT 1",
        "SELECT S.semester_name, S.semester_id FROM Semesters S WHERE EXISTS (SELECT NULL FROM Student_Enrolment SE WHERE S.semester_id = SE.semester_id GROUP BY SE.semester_id HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM Student_Enrolment GROUP BY semester_id))"
      ]
    ]
  },
  {
    "id": 530,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT S.semester_name, S.semester_id FROM Semesters S JOIN (SELECT semester_id, COUNT(*) AS total FROM Student_Enrolment GROUP BY semester_id) AS SE ON S.semester_id = SE.semester_id WHERE SE.total = (SELECT MAX(total) FROM (SELECT COUNT(*) AS total FROM Student_Enrolment GROUP BY semester_id) AS subquery)",
        "SELECT semester_name, semester_id FROM Semesters WHERE semester_id IN (SELECT semester_id FROM Student_Enrolment GROUP BY semester_id HAVING COUNT(student_id) = (SELECT MAX(c) FROM (SELECT COUNT(student_id) AS c FROM Student_Enrolment GROUP BY semester_id) AS counts))",
        "SELECT S.semester_name, S.semester_id FROM Semesters S WHERE S.semester_id IN (SELECT semester_id FROM Student_Enrolment GROUP BY semester_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT S.semester_name, S.semester_id FROM Semesters S INNER JOIN (SELECT semester_id FROM Student_Enrolment GROUP BY semester_id HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM Student_Enrolment GROUP BY semester_id)) AS MaxReg ON S.semester_id = MaxReg.semester_id",
        "SELECT S.semester_name, S.semester_id FROM Semesters S WHERE EXISTS (SELECT 1 FROM Student_Enrolment SE WHERE SE.semester_id = S.semester_id GROUP BY SE.semester_id HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Student_Enrolment GROUP BY semester_id))",
        "SELECT S.semester_name, S.semester_id FROM Semesters S, (SELECT semester_id, COUNT(*) AS cnt FROM Student_Enrolment GROUP BY semester_id) AS SE WHERE S.semester_id = SE.semester_id AND SE.cnt = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Student_Enrolment GROUP BY semester_id) AS subquery)",
        "SELECT S.semester_name, S.semester_id FROM Semesters S WHERE S.semester_id IN (SELECT semester_id FROM Student_Enrolment GROUP BY semester_id HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Student_Enrolment GROUP BY semester_id) AS counts))",
        "SELECT semester_name, semester_id FROM Semesters WHERE semester_id IN (SELECT semester_id FROM Student_Enrolment GROUP BY semester_id HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Student_Enrolment GROUP BY semester_id) AS subquery))",
        "SELECT S.semester_name, S.semester_id FROM Semesters S JOIN (SELECT semester_id, COUNT(*) AS registration_count FROM Student_Enrolment GROUP BY semester_id HAVING registration_count = (SELECT MAX(registration_count) FROM (SELECT COUNT(*) AS registration_count FROM Student_Enrolment GROUP BY semester_id) AS subquery)) AS SE ON S.semester_id = SE.semester_id",
        "SELECT S.semester_name, S.semester_id FROM Semesters S WHERE S.semester_id IN (SELECT semester_id FROM Student_Enrolment GROUP BY semester_id HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Student_Enrolment GROUP BY semester_id))"
      ]
    ]
  },
  {
    "id": 531,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT department_description FROM Departments WHERE department_name LIKE '%the computer%'",
        "SELECT department_description FROM Departments WHERE department_name CONTAINS 'the computer'",
        "SELECT department_description FROM Departments WHERE INSTR(department_name, 'the computer') > 0",
        "SELECT department_description FROM Departments WHERE department_name ILIKE '%the computer%'",
        "SELECT department_description FROM Departments WHERE department_name REGEXP 'the computer'",
        "SELECT department_description FROM Departments WHERE department_name SIMILAR TO '%the computer%'",
        "SELECT department_description FROM Departments WHERE POSITION('the computer' IN department_name) > 0",
        "SELECT department_description FROM Departments WHERE CHARINDEX('the computer', department_name) > 0",
        "SELECT department_description FROM Departments WHERE department_name LIKE '%the%computer%'",
        "SELECT department_description FROM Departments WHERE department_name LIKE '%the% %computer%'"
      ]
    ]
  },
  {
    "id": 532,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "SELECT department_description FROM Departments WHERE department_name ILIKE '%computer%'",
        "SELECT department_description FROM Departments WHERE department_name LIKE 'computer%'",
        "SELECT department_description FROM Departments WHERE department_name LIKE '%computer'",
        "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%' COLLATE NOCASE",
        "SELECT department_description FROM Departments WHERE LOWER(department_name) LIKE '%computer%'",
        "SELECT department_description FROM Departments WHERE UPPER(department_name) LIKE UPPER('%computer%')",
        "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%' ESCAPE '\\'",
        "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%' AND department_name IS NOT NULL",
        "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%' ORDER BY department_name"
      ]
    ]
  },
  {
    "id": 533,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT S.first_name, S.middle_name, S.last_name, S.student_id FROM Students S JOIN Student_Enrolment SE ON S.student_id = SE.student_id GROUP BY SE.student_id, SE.semester_id HAVING COUNT(DISTINCT SE.degree_program_id) = 2",
        "SELECT first_name, middle_name, last_name, student_id FROM Students WHERE student_id IN (SELECT student_id FROM Student_Enrolment GROUP BY student_id, semester_id HAVING COUNT(degree_program_id) = 2)",
        "SELECT DISTINCT S.first_name, S.middle_name, S.last_name, S.student_id FROM Students S, Student_Enrolment SE WHERE S.student_id = SE.student_id AND (SELECT COUNT(*) FROM Student_Enrolment WHERE student_id = S.student_id GROUP BY semester_id HAVING COUNT(degree_program_id) = 2) > 0",
        "SELECT first_name, middle_name, last_name, student_id FROM Students WHERE student_id IN (SELECT student_id FROM Student_Enrolment GROUP BY student_id, semester_id HAVING COUNT(degree_program_id) = 2)",
        "SELECT S.first_name, S.middle_name, S.last_name, S.student_id FROM Students S INNER JOIN (SELECT student_id FROM Student_Enrolment GROUP BY student_id, semester_id HAVING COUNT(degree_program_id) = 2) AS SE ON S.student_id = SE.student_id",
        "SELECT first_name, middle_name, last_name, student_id FROM Students WHERE EXISTS (SELECT 1 FROM Student_Enrolment WHERE Students.student_id = Student_Enrolment.student_id GROUP BY semester_id HAVING COUNT(degree_program_id) = 2)",
        "SELECT S.first_name, S.middle_name, S.last_name, S.student_id FROM Students S WHERE (SELECT COUNT(*) FROM Student_Enrolment WHERE student_id = S.student_id GROUP BY semester_id HAVING COUNT(degree_program_id) = 2) >= 1",
        "SELECT first_name, middle_name, last_name, student_id FROM Students JOIN (SELECT student_id FROM Student_Enrolment GROUP BY student_id, semester_id HAVING COUNT(degree_program_id) = 2) AS SE ON Students.student_id = SE.student_id",
        "SELECT S.first_name, S.middle_name, S.last_name, S.student_id FROM Students S JOIN Student_Enrolment SE ON S.student_id = SE.student_id GROUP BY SE.student_id, SE.semester_id HAVING COUNT(SE.degree_program_id) = 2",
        "SELECT first_name, middle_name, last_name, student_id FROM Students WHERE student_id IN (SELECT student_id FROM Student_Enrolment GROUP BY student_id, semester_id HAVING COUNT(degree_program_id) = 2)"
      ]
    ]
  },
  {
    "id": 534,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT S.student_id, S.first_name, S.middle_name, S.last_name FROM Students S JOIN Student_Enrolment SE ON S.student_id = SE.student_id GROUP BY S.student_id, SE.semester_id HAVING COUNT(DISTINCT SE.degree_program_id) = 2",
        "SELECT student_id, first_name, middle_name, last_name FROM Students WHERE student_id IN (SELECT student_id FROM Student_Enrolment GROUP BY student_id, semester_id HAVING COUNT(degree_program_id) = 2)",
        "SELECT S.student_id, S.first_name, S.middle_name, S.last_name FROM Students S INNER JOIN (SELECT student_id FROM Student_Enrolment GROUP BY student_id, semester_id HAVING COUNT(degree_program_id) = 2) AS SE ON S.student_id = SE.student_id",
        "SELECT DISTINCT S.student_id, S.first_name, S.middle_name, S.last_name FROM Students S, Student_Enrolment SE WHERE S.student_id = SE.student_id GROUP BY SE.student_id, SE.semester_id HAVING COUNT(SE.degree_program_id) = 2",
        "SELECT S.student_id, S.first_name, S.middle_name, S.last_name FROM Students S WHERE EXISTS (SELECT 1 FROM Student_Enrolment SE WHERE S.student_id = SE.student_id GROUP BY SE.semester_id HAVING COUNT(SE.degree_program_id) = 2)",
        "SELECT S.student_id, S.first_name, S.middle_name, S.last_name FROM Students S WHERE S.student_id IN (SELECT SE.student_id FROM Student_Enrolment SE GROUP BY SE.student_id, SE.semester_id HAVING COUNT(DISTINCT SE.degree_program_id) = 2)",
        "SELECT student_id, first_name, middle_name, last_name FROM Students WHERE student_id IN (SELECT student_id FROM Student_Enrolment GROUP BY student_id, semester_id HAVING COUNT(DISTINCT degree_program_id) = 2)",
        "SELECT S.student_id, S.first_name, S.middle_name, S.last_name FROM Students S JOIN (SELECT student_id FROM Student_Enrolment GROUP BY student_id, semester_id HAVING COUNT(degree_program_id) = 2) SE ON S.student_id = SE.student_id",
        "SELECT S.student_id, S.first_name, S.middle_name, S.last_name FROM Students S WHERE S.student_id IN (SELECT student_id FROM Student_Enrolment GROUP BY student_id, semester_id HAVING COUNT(*) = 2)",
        "SELECT S.student_id, S.first_name, S.middle_name, S.last_name FROM Students S INNER JOIN Student_Enrolment SE ON S.student_id = SE.student_id GROUP BY S.student_id, SE.semester_id HAVING COUNT(DISTINCT SE.degree_program_id) = 2"
      ]
    ]
  },
  {
    "id": 535,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT S.first_name, S.middle_name, S.last_name FROM Students S JOIN Student_Enrolment SE ON S.student_id = SE.student_id JOIN Degree_Programs DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name = 'Bachelor'",
        "SELECT first_name, middle_name, last_name FROM Students WHERE student_id IN (SELECT student_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelor'))",
        "SELECT first_name, middle_name, last_name FROM Students INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name LIKE 'Bachelor'",
        "SELECT DISTINCT first_name, middle_name, last_name FROM Students, Student_Enrolment, Degree_Programs WHERE Students.student_id = Student_Enrolment.student_id AND Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id AND Degree_Programs.degree_summary_name = 'Bachelor'",
        "SELECT first_name, middle_name, last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelor'",
        "SELECT S.first_name, S.middle_name, S.last_name FROM Students AS S, Student_Enrolment AS SE, Degree_Programs AS DP WHERE S.student_id = SE.student_id AND SE.degree_program_id = DP.degree_program_id AND DP.degree_summary_name = 'Bachelor'",
        "SELECT first_name, middle_name, last_name FROM Students WHERE EXISTS (SELECT 1 FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Students.student_id = Student_Enrolment.student_id AND Degree_Programs.degree_summary_name = 'Bachelor')",
        "SELECT first_name, middle_name, last_name FROM Students WHERE student_id IN (SELECT student_id FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelor')",
        "SELECT S.first_name, S.middle_name, S.last_name FROM Students S INNER JOIN Student_Enrolment SE ON S.student_id = SE.student_id INNER JOIN Degree_Programs DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name = 'Bachelor'",
        "SELECT first_name, middle_name, last_name FROM Students WHERE student_id IN (SELECT Student_Enrolment.student_id FROM Student_Enrolment INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelor')"
      ]
    ]
  },
  {
    "id": 536,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT S.first_name, S.middle_name, S.last_name FROM Students S JOIN Student_Enrolment SE ON S.student_id = SE.student_id JOIN Degree_Programs DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name = 'Bachelors'",
        "SELECT first_name, middle_name, last_name FROM Students WHERE student_id IN (SELECT student_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelors'))",
        "SELECT first_name, middle_name, last_name FROM Students INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelors'",
        "SELECT DISTINCT first_name, middle_name, last_name FROM Students, Student_Enrolment, Degree_Programs WHERE Students.student_id = Student_Enrolment.student_id AND Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id AND Degree_Programs.degree_summary_name = 'Bachelors'",
        "SELECT first_name, middle_name, last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id AND Degree_Programs.degree_summary_name = 'Bachelors'",
        "SELECT first_name, middle_name, last_name FROM Students WHERE EXISTS (SELECT 1 FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Students.student_id = Student_Enrolment.student_id AND Degree_Programs.degree_summary_name = 'Bachelors')",
        "SELECT first_name, middle_name, last_name FROM Students AS S JOIN Student_Enrolment AS SE ON S.student_id = SE.student_id JOIN Degree_Programs AS DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name = 'Bachelors'",
        "SELECT S.first_name, S.middle_name, S.last_name FROM Students S, Student_Enrolment SE, Degree_Programs DP WHERE S.student_id = SE.student_id AND SE.degree_program_id = DP.degree_program_id AND DP.degree_summary_name = 'Bachelors'",
        "SELECT first_name, middle_name, last_name FROM Students WHERE student_id IN (SELECT student_id FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelors')",
        "SELECT S.first_name, S.middle_name, S.last_name FROM Students S INNER JOIN Student_Enrolment SE ON S.student_id = SE.student_id INNER JOIN Degree_Programs DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name = 'Bachelors'"
      ]
    ]
  },
  {
    "id": 537,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT DP.degree_summary_name FROM Degree_Programs DP JOIN Student_Enrolment SE ON DP.degree_program_id = SE.degree_program_id GROUP BY DP.degree_summary_name ORDER BY COUNT(SE.student_id) DESC LIMIT 1",
        "SELECT degree_summary_name FROM Degree_Programs WHERE degree_program_id IN (SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT TOP 1 DP.degree_summary_name, COUNT(SE.student_id) AS StudentCount FROM Degree_Programs DP INNER JOIN Student_Enrolment SE ON DP.degree_program_id = SE.degree_program_id GROUP BY DP.degree_summary_name ORDER BY StudentCount DESC",
        "SELECT degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_summary_name HAVING COUNT(Student_Enrolment.student_id) = (SELECT MAX(Count) FROM (SELECT COUNT(student_id) AS Count FROM Student_Enrolment GROUP BY degree_program_id) AS MaxCount)",
        "SELECT DP.degree_summary_name FROM Degree_Programs AS DP JOIN (SELECT degree_program_id, COUNT(student_id) AS total_students FROM Student_Enrolment GROUP BY degree_program_id) AS SE ON DP.degree_program_id = SE.degree_program_id ORDER BY SE.total_students DESC FETCH FIRST ROW ONLY",
        "SELECT degree_summary_name FROM Degree_Programs WHERE degree_program_id = (SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id ORDER BY COUNT(student_id) DESC FETCH FIRST 1 ROWS ONLY)",
        "SELECT degree_summary_name FROM Degree_Programs DP JOIN Student_Enrolment SE ON DP.degree_program_id = SE.degree_program_id GROUP BY degree_summary_name ORDER BY COUNT(SE.student_id) DESC FETCH FIRST 1 ROWS ONLY",
        "SELECT DP.degree_summary_name, COUNT(*) AS NumStudents FROM Degree_Programs DP LEFT JOIN Student_Enrolment SE ON DP.degree_program_id = SE.degree_program_id GROUP BY DP.degree_summary_name ORDER BY NumStudents DESC LIMIT 1",
        "SELECT degree_summary_name FROM Degree_Programs WHERE degree_program_id IN (SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id ORDER BY COUNT(student_id) DESC LIMIT 1)",
        "SELECT DP.degree_summary_name FROM Degree_Programs DP, Student_Enrolment SE WHERE DP.degree_program_id = SE.degree_program_id GROUP BY DP.degree_summary_name HAVING COUNT(SE.student_id) = (SELECT MAX(Cnt) FROM (SELECT COUNT(student_id) AS Cnt FROM Student_Enrolment GROUP BY degree_program_id) T)"
      ]
    ]
  },
  {
    "id": 538,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT D.degree_summary_name FROM Degree_Programs D JOIN Student_Enrolment S ON D.degree_program_id = S.degree_program_id GROUP BY D.degree_summary_name HAVING COUNT(S.student_id) = (SELECT MAX(Cnt) FROM (SELECT COUNT(student_id) AS Cnt FROM Student_Enrolment GROUP BY degree_program_id) T)",
        "SELECT degree_summary_name FROM Degree_Programs WHERE degree_program_id IN (SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id ORDER BY COUNT(student_id) DESC LIMIT 1)",
        "SELECT D.degree_summary_name FROM Degree_Programs D WHERE EXISTS (SELECT 1 FROM Student_Enrolment S WHERE S.degree_program_id = D.degree_program_id GROUP BY S.degree_program_id HAVING COUNT(S.student_id) >= ALL (SELECT COUNT(student_id) FROM Student_Enrolment GROUP BY degree_program_id))",
        "WITH StudentCounts AS (SELECT degree_program_id, COUNT(student_id) AS TotalStudents FROM Student_Enrolment GROUP BY degree_program_id) SELECT D.degree_summary_name FROM Degree_Programs D JOIN StudentCounts S ON D.degree_program_id = S.degree_program_id WHERE S.TotalStudents = (SELECT MAX(TotalStudents) FROM StudentCounts)",
        "SELECT TOP 1 WITH TIES D.degree_summary_name FROM Degree_Programs D JOIN Student_Enrolment S ON D.degree_program_id = S.degree_program_id GROUP BY D.degree_summary_name ORDER BY COUNT(S.student_id) DESC",
        "SELECT degree_summary_name FROM Degree_Programs WHERE degree_program_id = (SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id ORDER BY COUNT(student_id) DESC FETCH FIRST ROW ONLY)",
        "SELECT degree_summary_name FROM Degree_Programs D INNER JOIN (SELECT degree_program_id, COUNT(student_id) AS student_count FROM Student_Enrolment GROUP BY degree_program_id) AS S ON D.degree_program_id = S.degree_program_id WHERE S.student_count = (SELECT MAX(student_count) FROM (SELECT COUNT(student_id) AS student_count FROM Student_Enrolment GROUP BY degree_program_id) T)",
        "SELECT D.degree_summary_name FROM Degree_Programs D, (SELECT degree_program_id, COUNT(student_id) AS student_count FROM Student_Enrolment GROUP BY degree_program_id) S WHERE D.degree_program_id = S.degree_program_id AND S.student_count = (SELECT MAX(student_count) FROM Student_Enrolment GROUP BY degree_program_id)",
        "SELECT degree_summary_name FROM Degree_Programs WHERE degree_program_id IN (SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id HAVING COUNT(student_id) = (SELECT MAX(Cnt) FROM (SELECT COUNT(student_id) AS Cnt FROM Student_Enrolment GROUP BY degree_program_id) T))",
        "SELECT D.degree_summary_name FROM Degree_Programs D WHERE D.degree_program_id IN (SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id HAVING COUNT(student_id) = (SELECT MAX(student_count) FROM (SELECT degree_program_id, COUNT(student_id) AS student_count FROM Student_Enrolment GROUP BY degree_program_id) AS Counts))"
      ]
    ]
  },
  {
    "id": 539,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT D.degree_program_id, D.degree_summary_name FROM Degree_Programs D JOIN Student_Enrolment S ON D.degree_program_id = S.degree_program_id GROUP BY D.degree_program_id, D.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT degree_program_id, degree_summary_name FROM Degree_Programs WHERE degree_program_id IN (SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id ORDER BY COUNT(degree_program_id) DESC LIMIT 1)",
        "SELECT TOP 1 D.degree_program_id, D.degree_summary_name FROM Degree_Programs D INNER JOIN Student_Enrolment S ON D.degree_program_id = S.degree_program_id GROUP BY D.degree_program_id, D.degree_summary_name ORDER BY COUNT(S.student_id) DESC",
        "SELECT D.degree_program_id, D.degree_summary_name FROM Degree_Programs D, Student_Enrolment S WHERE D.degree_program_id = S.degree_program_id GROUP BY D.degree_program_id, D.degree_summary_name HAVING COUNT(S.student_id) = (SELECT MAX(COUNT(student_id)) FROM Student_Enrolment GROUP BY degree_program_id)",
        "SELECT degree_program_id, degree_summary_name FROM Degree_Programs WHERE degree_program_id = (SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY)",
        "SELECT D.degree_program_id, D.degree_summary_name, COUNT(*) AS EnrollmentCount FROM Degree_Programs D LEFT JOIN Student_Enrolment S ON D.degree_program_id = S.degree_program_id GROUP BY D.degree_program_id, D.degree_summary_name ORDER BY EnrollmentCount DESC LIMIT 1",
        "SELECT degree_program_id, degree_summary_name FROM Degree_Programs WHERE degree_program_id = (SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id HAVING COUNT(student_id) = (SELECT MAX(Cnt) FROM (SELECT COUNT(student_id) AS Cnt FROM Student_Enrolment GROUP BY degree_program_id)))",
        "SELECT D.degree_program_id, D.degree_summary_name FROM Degree_Programs D JOIN (SELECT degree_program_id, COUNT(*) AS total FROM Student_Enrolment GROUP BY degree_program_id) AS S ON D.degree_program_id = S.degree_program_id ORDER BY S.total DESC LIMIT 1",
        "SELECT D.degree_program_id, D.degree_summary_name FROM Degree_Programs D WHERE EXISTS (SELECT 1 FROM Student_Enrolment S WHERE S.degree_program_id = D.degree_program_id GROUP BY S.degree_program_id HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Student_Enrolment GROUP BY degree_program_id))",
        "SELECT D.degree_program_id, D.degree_summary_name FROM Degree_Programs D INNER JOIN (SELECT degree_program_id, COUNT(student_id) AS student_count FROM Student_Enrolment GROUP BY degree_program_id) S ON D.degree_program_id = S.degree_program_id ORDER BY S.student_count DESC FETCH FIRST ROW ONLY"
      ]
    ]
  },
  {
    "id": 540,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT T1.degree_program_id, T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id HAVING COUNT(T2.student_id) = (SELECT MAX(student_count) FROM (SELECT COUNT(*) AS student_count FROM Student_Enrolment GROUP BY degree_program_id) AS subquery)",
        "SELECT degree_program_id, degree_summary_name FROM Degree_Programs WHERE degree_program_id IN (SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT dp.degree_program_id, dp.degree_summary_name FROM Degree_Programs dp INNER JOIN (SELECT degree_program_id, COUNT(*) AS cnt FROM Student_Enrolment GROUP BY degree_program_id) se ON dp.degree_program_id = se.degree_program_id WHERE se.cnt = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Student_Enrolment GROUP BY degree_program_id) tmp)",
        "SELECT d.degree_program_id, d.degree_summary_name FROM Degree_Programs d WHERE d.degree_program_id = (SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id ORDER BY COUNT(student_id) DESC LIMIT 1)",
        "SELECT d.degree_program_id, d.degree_summary_name FROM Degree_Programs d JOIN (SELECT degree_program_id, COUNT(*) AS total FROM Student_Enrolment GROUP BY degree_program_id HAVING total = (SELECT MAX(total) FROM (SELECT COUNT(*) AS total FROM Student_Enrolment GROUP BY degree_program_id) t)) e ON d.degree_program_id = e.degree_program_id",
        "SELECT degree_program_id, degree_summary_name FROM Degree_Programs WHERE degree_program_id = (SELECT TOP 1 degree_program_id FROM Student_Enrolment GROUP BY degree_program_id ORDER BY COUNT(*) DESC)",
        "SELECT dp.degree_program_id, dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name HAVING COUNT(se.student_id) = (SELECT MAX(count) FROM (SELECT COUNT(student_id) AS count FROM Student_Enrolment GROUP BY degree_program_id) AS counts)",
        "SELECT degree_program_id, degree_summary_name FROM Degree_Programs WHERE degree_program_id IN (SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id HAVING COUNT(student_id) = (SELECT MAX(count) FROM (SELECT COUNT(student_id) AS count FROM Student_Enrolment GROUP BY degree_program_id) AS counts))",
        "SELECT dp.degree_program_id, dp.degree_summary_name FROM Degree_Programs dp WHERE EXISTS (SELECT 1 FROM Student_Enrolment se WHERE se.degree_program_id = dp.degree_program_id GROUP BY se.degree_program_id HAVING COUNT(se.student_id) = (SELECT MAX(count) FROM (SELECT COUNT(student_id) AS count FROM Student_Enrolment GROUP BY degree_program_id) AS counts))",
        "SELECT dp.degree_program_id, dp.degree_summary_name FROM Degree_Programs dp WHERE dp.degree_program_id = (SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id ORDER BY COUNT(student_id) DESC FETCH FIRST 1 ROWS ONLY)"
      ]
    ]
  },
  {
    "id": 541,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT S.student_id, S.first_name, S.middle_name, S.last_name, COUNT(SE.student_id) AS num_enrollments FROM Students S JOIN Student_Enrolment SE ON S.student_id = SE.student_id GROUP BY S.student_id HAVING COUNT(SE.student_id) = (SELECT MAX(enrollment_count) FROM (SELECT COUNT(student_id) AS enrollment_count FROM Student_Enrolment GROUP BY student_id) AS subquery)",
        "SELECT student_id, first_name, middle_name, last_name, COUNT(student_id) AS enrollments FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY student_id HAVING enrollments = (SELECT MAX(enrollments) FROM (SELECT student_id, COUNT(student_id) AS enrollments FROM Student_Enrolment GROUP BY student_id) AS counts)",
        "SELECT A.student_id, A.first_name, A.middle_name, A.last_name, B.max_enrollments FROM Students A JOIN (SELECT student_id, COUNT(*) AS max_enrollments FROM Student_Enrolment GROUP BY student_id ORDER BY max_enrollments DESC LIMIT 1) B ON A.student_id = B.student_id",
        "SELECT student_id, first_name, middle_name, last_name, num_enrollments FROM (SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(Student_Enrolment.student_id) AS num_enrollments, RANK() OVER (ORDER BY COUNT(Student_Enrolment.student_id) DESC) AS rank FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id) WHERE rank = 1",
        "SELECT student_id, first_name, middle_name, last_name, COUNT(student_id) AS enrollments FROM Students INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY student_id ORDER BY enrollments DESC LIMIT 1",
        "SELECT TOP 1 WITH TIES student_id, first_name, middle_name, last_name, COUNT(student_id) AS enrollments FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY student_id ORDER BY enrollments DESC",
        "SELECT student_id, first_name, middle_name, last_name, num_enrollments FROM (SELECT student_id, first_name, middle_name, last_name, COUNT(student_id) AS num_enrollments FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY student_id) AS SubQuery WHERE num_enrollments = (SELECT MAX(num_enrollments) FROM (SELECT COUNT(student_id) AS num_enrollments FROM Student_Enrolment GROUP BY student_id) AS SubQuery2)",
        "SELECT student_id, first_name, middle_name, last_name, enrollments FROM (SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(Student_Enrolment.student_id) AS enrollments FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id) AS DerivedTable WHERE enrollments = (SELECT MAX(enrollments) FROM (SELECT COUNT(student_id) AS enrollments FROM Student_Enrolment GROUP BY student_id) AS MaxEnrollments)",
        "SELECT student_id, first_name, middle_name, last_name, COUNT(student_id) AS enrollments FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY student_id HAVING COUNT(student_id) = (SELECT MAX(enrollments) FROM (SELECT COUNT(student_id) AS enrollments FROM Student_Enrolment GROUP BY student_id) AS TotalEnrollments)",
        "SELECT student_id, first_name, middle_name, last_name, num_enrollments FROM Students JOIN (SELECT student_id, COUNT(*) AS num_enrollments FROM Student_Enrolment GROUP BY student_id HAVING COUNT(*) = (SELECT MAX(counts) FROM (SELECT COUNT(*) AS counts FROM Student_Enrolment GROUP BY student_id) AS Sub)) AS Enrollments ON Students.student_id = Enrollments.student_id"
      ]
    ]
  },
  {
    "id": 542,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT first_name, middle_name, last_name, student_id, COUNT(*) AS num_enrollments FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY student_id ORDER BY num_enrollments DESC LIMIT 1",
        "SELECT S.first_name, S.middle_name, S.last_name, S.student_id, COUNT(SE.student_id) AS total_enrollments FROM Students S JOIN Student_Enrolment SE ON S.student_id = SE.student_id GROUP BY S.student_id ORDER BY total_enrollments DESC LIMIT 1",
        "SELECT first_name, middle_name, last_name, student_id, COUNT(student_id) AS enrollment_count FROM Students INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY student_id ORDER BY enrollment_count DESC FETCH FIRST 1 ROW ONLY",
        "SELECT TOP 1 first_name, middle_name, last_name, student_id, COUNT(*) AS num_enrollments FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY student_id ORDER BY num_enrollments DESC",
        "SELECT first_name, middle_name, last_name, student_id, COUNT(student_id) AS enrollments FROM Students, Student_Enrolment WHERE Students.student_id = Student_Enrolment.student_id GROUP BY student_id HAVING COUNT(student_id) = (SELECT MAX(enrollment_count) FROM (SELECT student_id, COUNT(student_id) AS enrollment_count FROM Student_Enrolment GROUP BY student_id) AS subquery)",
        "SELECT first_name, middle_name, last_name, student_id, COUNT(student_id) AS num_enrollments FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY student_id ORDER BY num_enrollments DESC LIMIT 1",
        "SELECT first_name, middle_name, last_name, Students.student_id, COUNT(Student_Enrolment.student_id) AS enrollments FROM Students LEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY enrollments DESC LIMIT 1",
        "SELECT first_name, middle_name, last_name, student_id, COUNT(*) AS num_enrollments FROM Students INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY student_id ORDER BY num_enrollments DESC LIMIT 1",
        "SELECT first_name, middle_name, last_name, student_id, COUNT(student_id) AS num_enrollments FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY student_id HAVING COUNT(student_id) = (SELECT MAX(enrollment_count) FROM (SELECT student_id, COUNT(student_id) AS enrollment_count FROM Student_Enrolment GROUP BY student_id) AS subquery)",
        "SELECT first_name, middle_name, last_name, student_id, COUNT(student_id) AS num_enrollments FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY student_id ORDER BY num_enrollments DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 543,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT DISTINCT semester_id FROM Student_Enrolment)",
        "SELECT S.semester_name FROM Semesters S LEFT JOIN Student_Enrolment SE ON S.semester_id = SE.semester_id WHERE SE.semester_id IS NULL",
        "SELECT semester_name FROM Semesters WHERE NOT EXISTS (SELECT 1 FROM Student_Enrolment WHERE Semesters.semester_id = Student_Enrolment.semester_id)",
        "SELECT S.semester_name FROM Semesters S WHERE S.semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)",
        "SELECT semester_name FROM Semesters EXCEPT SELECT semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id",
        "SELECT S.semester_name FROM Semesters S WHERE NOT EXISTS (SELECT NULL FROM Student_Enrolment SE WHERE SE.semester_id = S.semester_id)",
        "SELECT DISTINCT S.semester_name FROM Semesters S WHERE S.semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)",
        "SELECT semester_name FROM Semesters AS S WHERE S.semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)",
        "SELECT S.semester_name FROM Semesters S LEFT OUTER JOIN Student_Enrolment SE ON S.semester_id = SE.semester_id WHERE SE.student_id IS NULL",
        "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment WHERE semester_id IS NOT NULL)"
      ]
    ]
  },
  {
    "id": 544,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT DISTINCT semester_id FROM Student_Enrolment)",
        "SELECT S.semester_name FROM Semesters S LEFT JOIN Student_Enrolment SE ON S.semester_id = SE.semester_id WHERE SE.semester_id IS NULL",
        "SELECT name FROM Semesters WHERE NOT EXISTS (SELECT 1 FROM Student_Enrolment WHERE semester_id = Semesters.semester_id)",
        "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment WHERE semester_id IS NOT NULL)",
        "SELECT S.semester_name FROM Semesters S WHERE NOT EXISTS (SELECT NULL FROM Student_Enrolment SE WHERE SE.semester_id = S.semester_id)",
        "SELECT semester_name FROM Semesters EXCEPT SELECT semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id",
        "SELECT semester_name FROM Semesters AS S WHERE NOT EXISTS (SELECT * FROM Student_Enrolment AS SE WHERE SE.semester_id = S.semester_id)",
        "SELECT S.semester_name FROM Semesters S WHERE S.semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)",
        "SELECT DISTINCT S.semester_name FROM Semesters S LEFT OUTER JOIN Student_Enrolment SE ON S.semester_id = SE.semester_id WHERE SE.student_id IS NULL",
        "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment GROUP BY semester_id)"
      ]
    ]
  },
  {
    "id": 545,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT DISTINCT C.course_name FROM Courses C JOIN Student_Enrolment_Courses SEC ON C.course_id = SEC.course_id",
        "SELECT course_name FROM Courses WHERE course_id IN (SELECT DISTINCT course_id FROM Student_Enrolment_Courses)",
        "SELECT DISTINCT course_name FROM Courses WHERE EXISTS (SELECT 1 FROM Student_Enrolment_Courses WHERE Courses.course_id = Student_Enrolment_Courses.course_id)",
        "SELECT DISTINCT C.course_name FROM Courses C, Student_Enrolment_Courses SEC WHERE C.course_id = SEC.course_id",
        "SELECT course_name FROM Courses C WHERE C.course_id IN (SELECT course_id FROM Student_Enrolment_Courses GROUP BY course_id)",
        "SELECT DISTINCT course_name FROM Courses INNER JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id",
        "SELECT DISTINCT C.course_name FROM Courses C WHERE EXISTS (SELECT NULL FROM Student_Enrolment_Courses SEC WHERE SEC.course_id = C.course_id)",
        "SELECT DISTINCT C.course_name FROM Courses C LEFT JOIN Student_Enrolment_Courses SEC ON C.course_id = SEC.course_id WHERE SEC.course_id IS NOT NULL",
        "SELECT course_name FROM (SELECT DISTINCT course_id FROM Student_Enrolment_Courses) SEC JOIN Courses C ON SEC.course_id = C.course_id",
        "SELECT DISTINCT C.course_name FROM Courses C WHERE C.course_id IN (SELECT course_id FROM Student_Enrolment_Courses)"
      ]
    ]
  },
  {
    "id": 546,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT DISTINCT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id",
        "SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses)",
        "SELECT DISTINCT course_name FROM Courses WHERE EXISTS (SELECT 1 FROM Student_Enrolment_Courses WHERE Courses.course_id = Student_Enrolment_Courses.course_id)",
        "SELECT DISTINCT Courses.course_name FROM Courses INNER JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id",
        "SELECT course_name FROM Courses c WHERE EXISTS (SELECT NULL FROM Student_Enrolment_Courses sec WHERE sec.course_id = c.course_id)",
        "SELECT DISTINCT c.course_name FROM Courses c, Student_Enrolment_Courses sec WHERE c.course_id = sec.course_id",
        "SELECT DISTINCT course_name FROM Courses WHERE course_id IN (SELECT DISTINCT course_id FROM Student_Enrolment_Courses)",
        "SELECT course_name FROM Courses c WHERE c.course_id IN (SELECT sec.course_id FROM Student_Enrolment_Courses sec)",
        "SELECT DISTINCT c.course_name FROM Courses c WHERE EXISTS (SELECT * FROM Student_Enrolment_Courses sec WHERE sec.course_id = c.course_id)",
        "SELECT DISTINCT course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id WHERE sec.student_enrolment_id IS NOT NULL"
      ]
    ]
  },
  {
    "id": 547,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses GROUP BY course_id HAVING COUNT(*) = (SELECT MAX(enrollment_count) FROM (SELECT course_id, COUNT(*) AS enrollment_count FROM Student_Enrolment_Courses GROUP BY course_id) AS subquery))",
        "SELECT C.course_name FROM Courses C JOIN (SELECT course_id, COUNT(*) AS cnt FROM Student_Enrolment_Courses GROUP BY course_id) AS EC ON C.course_id = EC.course_id WHERE EC.cnt = (SELECT MAX(cnt) FROM (SELECT course_id, COUNT(*) AS cnt FROM Student_Enrolment_Courses GROUP BY course_id) AS subquery)",
        "SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses GROUP BY course_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT C.course_name FROM Courses C WHERE EXISTS (SELECT 1 FROM Student_Enrolment_Courses SEC WHERE SEC.course_id = C.course_id GROUP BY SEC.course_id HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Student_Enrolment_Courses GROUP BY course_id) AS subquery))",
        "SELECT C.course_name FROM Courses C INNER JOIN (SELECT course_id FROM Student_Enrolment_Courses GROUP BY course_id HAVING COUNT(student_enrolment_id) = (SELECT MAX(total_enrollments) FROM (SELECT COUNT(student_enrolment_id) AS total_enrollments FROM Student_Enrolment_Courses GROUP BY course_id) AS subquery)) AS MostEnrolled ON C.course_id = MostEnrolled.course_id",
        "SELECT course_name FROM Courses WHERE course_id = (SELECT course_id FROM Student_Enrolment_Courses GROUP BY course_id ORDER BY COUNT(*) DESC FETCH FIRST 1 ROW ONLY)",
        "SELECT C.course_name FROM Courses C, (SELECT course_id, COUNT(*) AS total FROM Student_Enrolment_Courses GROUP BY course_id HAVING COUNT(*) = (SELECT MAX(total) FROM (SELECT COUNT(*) AS total FROM Student_Enrolment_Courses GROUP BY course_id) AS subquery)) AS MaxEnrolled WHERE C.course_id = MaxEnrolled.course_id",
        "SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses GROUP BY course_id HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM Student_Enrolment_Courses GROUP BY course_id))",
        "SELECT TOP 1 WITH TIES course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_id, Courses.course_name ORDER BY COUNT(Student_Enrolment_Courses.student_enrolment_id) DESC",
        "SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses GROUP BY course_id HAVING COUNT(*) = (SELECT MAX(enrollment_count) FROM (SELECT COUNT(*) AS enrollment_count FROM Student_Enrolment_Courses GROUP BY course_id) AS subquery))"
      ]
    ]
  },
  {
    "id": 548,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses GROUP BY course_id HAVING COUNT(student_enrolment_id) = (SELECT MAX(student_count) FROM (SELECT course_id, COUNT(student_enrolment_id) AS student_count FROM Student_Enrolment_Courses GROUP BY course_id) AS counts))",
        "SELECT C.course_name FROM Courses C JOIN (SELECT course_id, COUNT(*) AS total FROM Student_Enrolment_Courses GROUP BY course_id) AS S ON C.course_id = S.course_id WHERE S.total = (SELECT MAX(total) FROM (SELECT COUNT(*) AS total FROM Student_Enrolment_Courses GROUP BY course_id) AS T)",
        "SELECT course_name FROM Courses WHERE course_id = (SELECT course_id FROM Student_Enrolment_Courses GROUP BY course_id ORDER BY COUNT(student_enrolment_id) DESC LIMIT 1)",
        "SELECT C.course_name FROM Courses C WHERE EXISTS (SELECT 1 FROM Student_Enrolment_Courses S WHERE S.course_id = C.course_id GROUP BY S.course_id HAVING COUNT(S.student_enrolment_id) = (SELECT MAX(count) FROM (SELECT COUNT(student_enrolment_id) AS count FROM Student_Enrolment_Courses GROUP BY course_id) AS counts))",
        "SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses GROUP BY course_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT C.course_name FROM Courses C INNER JOIN (SELECT course_id FROM Student_Enrolment_Courses GROUP BY course_id HAVING COUNT(student_enrolment_id) = (SELECT MAX(count) FROM (SELECT COUNT(student_enrolment_id) AS count FROM Student_Enrolment_Courses GROUP BY course_id) AS sub)) AS MaxEnrolled ON C.course_id = MaxEnrolled.course_id",
        "SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses GROUP BY course_id HAVING COUNT(student_enrolment_id) >= ALL (SELECT COUNT(student_enrolment_id) FROM Student_Enrolment_Courses GROUP BY course_id))",
        "SELECT C.course_name FROM Courses C WHERE C.course_id IN (SELECT course_id FROM Student_Enrolment_Courses GROUP BY course_id HAVING COUNT(student_enrolment_id) = (SELECT MAX(student_count) FROM (SELECT COUNT(student_enrolment_id) AS student_count FROM Student_Enrolment_Courses GROUP BY course_id) AS counts))",
        "SELECT TOP 1 WITH TIES C.course_name FROM Courses C JOIN Student_Enrolment_Courses S ON C.course_id = S.course_id GROUP BY C.course_id, C.course_name ORDER BY COUNT(S.student_enrolment_id) DESC",
        "SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM (SELECT course_id, RANK() OVER (ORDER BY COUNT(student_enrolment_id) DESC) AS rank FROM Student_Enrolment_Courses GROUP BY course_id) AS Ranked WHERE rank = 1)"
      ]
    ]
  },
  {
    "id": 549,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT S.last_name FROM Students S JOIN Addresses A ON S.current_address_id = A.address_id WHERE A.state_province_county = 'North Carolina' AND S.student_id NOT IN (SELECT student_id FROM Student_Enrolment)",
        "SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM Student_Enrolment)",
        "SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') EXCEPT SELECT S.last_name FROM Students S JOIN Student_Enrolment SE ON S.student_id = SE.student_id",
        "SELECT S.last_name FROM Students S, Addresses A WHERE S.current_address_id = A.address_id AND A.state_province_county = 'North Carolina' AND NOT EXISTS (SELECT 1 FROM Student_Enrolment SE WHERE SE.student_id = S.student_id)",
        "SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT DISTINCT student_id FROM Student_Enrolment)",
        "SELECT S.last_name FROM Students S INNER JOIN Addresses A ON S.current_address_id = A.address_id LEFT JOIN Student_Enrolment SE ON S.student_id = SE.student_id WHERE A.state_province_county = 'North Carolina' AND SE.student_id IS NULL",
        "SELECT DISTINCT S.last_name FROM Students S, Addresses A WHERE S.current_address_id = A.address_id AND A.state_province_county = 'North Carolina' AND S.student_id NOT IN (SELECT SE.student_id FROM Student_Enrolment SE)",
        "SELECT S.last_name FROM Students S LEFT JOIN Student_Enrolment SE ON S.student_id = SE.student_id JOIN Addresses A ON S.current_address_id = A.address_id WHERE A.state_province_county = 'North Carolina' AND SE.student_id IS NULL",
        "SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') AND NOT EXISTS (SELECT 1 FROM Student_Enrolment WHERE student_id = Students.student_id)",
        "SELECT S.last_name FROM Students S WHERE EXISTS (SELECT 1 FROM Addresses A WHERE S.current_address_id = A.address_id AND A.state_province_county = 'North Carolina') AND NOT EXISTS (SELECT 1 FROM Student_Enrolment SE WHERE SE.student_id = S.student_id)"
      ]
    ]
  },
  {
    "id": 550,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT S.last_name FROM Students S JOIN Addresses A ON S.current_address_id = A.address_id WHERE A.state_province_county = 'North Carolina' AND S.student_id NOT IN (SELECT student_id FROM Student_Enrolment)",
        "SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM Student_Enrolment)",
        "SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') EXCEPT SELECT S.last_name FROM Students S JOIN Student_Enrolment SE ON S.student_id = SE.student_id",
        "SELECT S.last_name FROM Students S, Addresses A WHERE S.current_address_id = A.address_id AND A.state_province_county = 'North Carolina' AND NOT EXISTS (SELECT 1 FROM Student_Enrolment SE WHERE SE.student_id = S.student_id)",
        "SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') AND student_id NOT EXISTS (SELECT student_id FROM Student_Enrolment WHERE Students.student_id = Student_Enrolment.student_id)",
        "SELECT DISTINCT S.last_name FROM Students S INNER JOIN Addresses A ON S.current_address_id = A.address_id LEFT JOIN Student_Enrolment SE ON S.student_id = SE.student_id WHERE A.state_province_county = 'North Carolina' AND SE.student_id IS NULL",
        "SELECT S.last_name FROM Students S LEFT JOIN Student_Enrolment SE ON S.student_id = SE.student_id JOIN Addresses A ON S.current_address_id = A.address_id WHERE A.state_province_county = 'North Carolina' AND SE.student_id IS NULL",
        "SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT DISTINCT student_id FROM Student_Enrolment)",
        "SELECT S.last_name FROM Students S WHERE EXISTS (SELECT 1 FROM Addresses A WHERE S.current_address_id = A.address_id AND A.state_province_county = 'North Carolina') AND NOT EXISTS (SELECT 1 FROM Student_Enrolment SE WHERE SE.student_id = S.student_id)",
        "SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') AND NOT EXISTS (SELECT * FROM Student_Enrolment WHERE Students.student_id = Student_Enrolment.student_id)"
      ]
    ]
  },
  {
    "id": 551,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT T1.transcript_id, T1.transcript_date FROM Transcripts T1 JOIN Transcript_Contents T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING COUNT(T2.student_course_id) >= 2",
        "SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(*) >= 2)",
        "SELECT T.transcript_id, T.transcript_date FROM Transcripts T WHERE (SELECT COUNT(*) FROM Transcript_Contents TC WHERE TC.transcript_id = T.transcript_id) >= 2",
        "SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(student_course_id) >= 2)",
        "SELECT T.transcript_id, T.transcript_date FROM Transcripts T INNER JOIN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(student_course_id) >= 2) TC ON T.transcript_id = TC.transcript_id",
        "SELECT T1.transcript_id, T1.transcript_date FROM Transcripts AS T1 WHERE EXISTS (SELECT 1 FROM Transcript_Contents AS T2 WHERE T1.transcript_id = T2.transcript_id GROUP BY T2.transcript_id HAVING COUNT(*) >= 2)",
        "SELECT T1.transcript_id, T1.transcript_date FROM Transcripts T1 WHERE (SELECT COUNT(*) FROM Transcript_Contents T2 WHERE T2.transcript_id = T1.transcript_id) >= 2",
        "SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(transcript_id) >= 2)",
        "SELECT T1.transcript_id, T1.transcript_date FROM Transcripts T1 JOIN Transcript_Contents T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING COUNT(DISTINCT T2.student_course_id) >= 2",
        "SELECT transcript_id, transcript_date FROM Transcripts WHERE (SELECT COUNT(*) FROM Transcript_Contents WHERE transcript_id = Transcripts.transcript_id) >= 2"
      ]
    ]
  },
  {
    "id": 552,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT T1.transcript_id, T1.transcript_date FROM Transcripts T1 JOIN Transcript_Contents T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING COUNT(T2.student_course_id) >= 2",
        "SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(student_course_id) >= 2)",
        "SELECT T.transcript_id, T.transcript_date FROM Transcripts T WHERE (SELECT COUNT(*) FROM Transcript_Contents TC WHERE TC.transcript_id = T.transcript_id) >= 2",
        "SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(*) >= 2)",
        "SELECT T1.transcript_id, T1.transcript_date FROM Transcripts AS T1 WHERE EXISTS (SELECT 1 FROM Transcript_Contents AS T2 WHERE T1.transcript_id = T2.transcript_id GROUP BY T2.transcript_id HAVING COUNT(T2.student_course_id) >= 2)",
        "SELECT T1.transcript_id, T1.transcript_date FROM Transcripts T1 INNER JOIN Transcript_Contents T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING COUNT(T2.student_course_id) >= 2",
        "SELECT T1.transcript_id, T1.transcript_date FROM Transcripts T1, Transcript_Contents T2 WHERE T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING COUNT(T2.student_course_id) >= 2",
        "SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(student_course_id) >= 2)",
        "SELECT T1.transcript_id, T1.transcript_date FROM Transcripts T1 JOIN Transcript_Contents T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING COUNT(DISTINCT T2.student_course_id) >= 2",
        "SELECT transcript_id, transcript_date FROM Transcripts WHERE EXISTS (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(student_course_id) >= 2 AND transcript_id = Transcripts.transcript_id)"
      ]
    ]
  },
  {
    "id": 553,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
        "SELECT cell_mobile_number FROM Students WHERE first_name LIKE 'Timmothy' AND last_name LIKE 'Ward'",
        "SELECT s.cell_mobile_number FROM Students s WHERE s.first_name = 'Timmothy' AND s.last_name = 'Ward'",
        "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward' LIMIT 1",
        "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward' ORDER BY student_id ASC LIMIT 1",
        "SELECT TOP 1 cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
        "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' COLLATE NOCASE AND last_name = 'Ward' COLLATE NOCASE",
        "SELECT cell_mobile_number FROM Students WHERE LOWER(first_name) = 'timmothy' AND LOWER(last_name) = 'ward'",
        "SELECT cell_mobile_number FROM Students WHERE CONCAT(first_name, ' ', last_name) = 'Timmothy Ward'",
        "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward' FETCH FIRST 1 ROWS ONLY"
      ]
    ]
  },
  {
    "id": 554,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
        "SELECT cell_mobile_number FROM Students WHERE first_name LIKE 'Timmothy' AND last_name LIKE 'Ward'",
        "SELECT s.cell_mobile_number FROM Students s WHERE s.first_name = 'Timmothy' AND s.last_name = 'Ward'",
        "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward' LIMIT 1",
        "SELECT cell_mobile_number FROM Students WHERE CONCAT(first_name, ' ', last_name) = 'Timmothy Ward'",
        "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward' ORDER BY student_id ASC LIMIT 1",
        "SELECT TOP 1 cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
        "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward' FETCH FIRST 1 ROWS ONLY",
        "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward' AND cell_mobile_number IS NOT NULL",
        "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward' AND cell_mobile_number <> ''"
      ]
    ]
  },
  {
    "id": 555,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered, student_id LIMIT 1",
        "SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM Students) ORDER BY student_id LIMIT 1",
        "SELECT TOP 1 first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC, student_id ASC",
        "SELECT first_name, middle_name, last_name FROM Students WHERE student_id = (SELECT student_id FROM Students ORDER BY date_first_registered, student_id LIMIT 1)",
        "SELECT first_name, middle_name, last_name FROM (SELECT first_name, middle_name, last_name, ROW_NUMBER() OVER (ORDER BY date_first_registered, student_id) AS rn FROM Students) sub WHERE rn = 1",
        "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC, student_id ASC FETCH FIRST 1 ROWS ONLY",
        "SELECT first_name, middle_name, last_name FROM Students WHERE student_id IN (SELECT student_id FROM Students ORDER BY date_first_registered ASC, student_id ASC LIMIT 1)",
        "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC, student_id ASC LIMIT 1 OFFSET 0 ROWS",
        "SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM Students) AND student_id = (SELECT MIN(student_id) FROM Students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM Students))",
        "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC, student_id ASC LIMIT 1"
      ]
    ]
  },
  {
    "id": 556,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC, student_id ASC LIMIT 1",
        "SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM Students) ORDER BY student_id ASC LIMIT 1",
        "SELECT TOP 1 first_name, middle_name, last_name FROM Students ORDER BY date_first_registered, student_id",
        "SELECT first_name, middle_name, last_name FROM Students WHERE student_id = (SELECT student_id FROM Students ORDER BY date_first_registered, student_id LIMIT 1)",
        "SELECT S.first_name, S.middle_name, S.last_name FROM Students S WHERE S.date_first_registered = (SELECT MIN(date_first_registered) FROM Students) ORDER BY S.student_id LIMIT 1",
        "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC, student_id ASC FETCH FIRST 1 ROW ONLY",
        "SELECT first_name, middle_name, last_name FROM (SELECT first_name, middle_name, last_name, ROW_NUMBER() OVER (ORDER BY date_first_registered, student_id) AS rn FROM Students) WHERE rn = 1",
        "SELECT first_name, middle_name, last_name FROM Students WHERE (date_first_registered, student_id) IN (SELECT date_first_registered, student_id FROM Students ORDER BY date_first_registered, student_id LIMIT 1)",
        "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC, student_id ASC ROWS 1",
        "SELECT first_name, middle_name, last_name FROM Students WHERE student_id = (SELECT student_id FROM Students ORDER BY date_first_registered ASC, student_id ASC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 557,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left ASC, student_id ASC LIMIT 1",
        "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_left, student_id LIMIT 1",
        "SELECT first_name, middle_name, last_name FROM Students WHERE date_left = (SELECT MIN(date_left) FROM Students) ORDER BY student_id LIMIT 1",
        "SELECT S.first_name, S.middle_name, S.last_name FROM Students S WHERE S.date_left = (SELECT MIN(date_left) FROM Students WHERE date_left IS NOT NULL) ORDER BY S.student_id ASC LIMIT 1",
        "SELECT TOP 1 first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left ASC, student_id ASC",
        "SELECT first_name, middle_name, last_name FROM Students WHERE date_left = (SELECT MIN(date_left) FROM Students) ORDER BY student_id ASC FETCH FIRST 1 ROW ONLY",
        "SELECT first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left, student_id FETCH FIRST ROW ONLY",
        "SELECT first_name, middle_name, last_name FROM (SELECT first_name, middle_name, last_name, date_left, student_id, RANK() OVER (ORDER BY date_left, student_id) AS rank FROM Students) WHERE rank = 1",
        "SELECT first_name, middle_name, last_name FROM Students WHERE date_left = (SELECT MIN(date_left) FROM Students WHERE date_left IS NOT NULL) ORDER BY student_id FETCH FIRST ROW ONLY",
        "SELECT first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left ASC, student_id ASC FETCH FIRST ROW ONLY"
      ]
    ]
  },
  {
    "id": 558,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT first_name, middle_name, last_name FROM Students WHERE student_id = (SELECT student_id FROM Students ORDER BY date_left ASC, student_id ASC LIMIT 1)",
        "SELECT S.first_name, S.middle_name, S.last_name FROM Students S WHERE S.student_id IN (SELECT student_id FROM Students ORDER BY date_left, student_id LIMIT 1)",
        "SELECT first_name, middle_name, last_name FROM Students WHERE student_id = (SELECT MIN(student_id) FROM Students WHERE date_left = (SELECT MIN(date_left) FROM Students))",
        "SELECT TOP 1 first_name, middle_name, last_name FROM Students ORDER BY date_left ASC, student_id ASC",
        "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_left, student_id FETCH FIRST 1 ROW ONLY",
        "SELECT first_name, middle_name, last_name FROM (SELECT first_name, middle_name, last_name, RANK() OVER (ORDER BY date_left, student_id) AS rank FROM Students) WHERE rank = 1",
        "SELECT first_name, middle_name, last_name FROM Students WHERE (date_left, student_id) IN (SELECT date_left, MIN(student_id) FROM Students GROUP BY date_left ORDER BY date_left LIMIT 1)",
        "SELECT first_name, middle_name, last_name FROM Students WHERE student_id = (SELECT student_id FROM Students WHERE date_left IS NOT NULL ORDER BY date_left ASC, student_id ASC LIMIT 1)",
        "SELECT S.first_name, S.middle_name, S.last_name FROM Students S JOIN (SELECT student_id FROM Students ORDER BY date_left, student_id LIMIT 1) AS T ON S.student_id = T.student_id",
        "SELECT first_name, middle_name, last_name FROM Students WHERE student_id = (SELECT student_id FROM Students WHERE date_left = (SELECT MIN(date_left) FROM Students) ORDER BY student_id LIMIT 1)"
      ]
    ]
  },
  {
    "id": 559,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT first_name FROM Students WHERE permanent_address_id <> current_address_id",
        "SELECT first_name FROM Students WHERE NOT permanent_address_id = current_address_id",
        "SELECT first_name FROM Students WHERE permanent_address_id != current_address_id",
        "SELECT S.first_name FROM Students S WHERE S.permanent_address_id <> S.current_address_id",
        "SELECT first_name FROM Students WHERE permanent_address_id IS NOT current_address_id",
        "SELECT first_name FROM Students WHERE current_address_id <> permanent_address_id",
        "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "SELECT first_name FROM Students WHERE permanent_address_id NOT IN (current_address_id)",
        "SELECT first_name FROM Students WHERE current_address_id NOT IN (permanent_address_id)",
        "SELECT S.first_name FROM Students AS S WHERE S.permanent_address_id <> S.current_address_id"
      ]
    ]
  },
  {
    "id": 560,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT first_name FROM Students WHERE permanent_address_id != current_address_id",
        "SELECT first_name FROM Students WHERE NOT permanent_address_id = current_address_id",
        "SELECT S.first_name FROM Students S WHERE S.permanent_address_id <> S.current_address_id",
        "SELECT first_name FROM Students WHERE permanent_address_id <> current_address_id",
        "SELECT first_name FROM Students WHERE current_address_id IS NOT DISTINCT FROM permanent_address_id",
        "SELECT first_name FROM Students WHERE permanent_address_id != current_address_id AND permanent_address_id IS NOT NULL AND current_address_id IS NOT NULL",
        "SELECT first_name FROM Students WHERE permanent_address_id NOT IN (SELECT current_address_id FROM Students WHERE current_address_id = permanent_address_id)",
        "SELECT first_name FROM Students WHERE EXISTS (SELECT 1 FROM Students S2 WHERE Students.permanent_address_id != Students.current_address_id)",
        "SELECT first_name FROM Students WHERE permanent_address_id NOT LIKE current_address_id",
        "SELECT first_name FROM Students WHERE permanent_address_id != current_address_id ORDER BY first_name"
      ]
    ]
  },
  {
    "id": 561,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT A.address_id, A.line_1, A.line_2, A.line_3 FROM Addresses A JOIN (SELECT current_address_id FROM Students GROUP BY current_address_id ORDER BY COUNT(*) DESC LIMIT 1) AS S ON A.address_id = S.current_address_id",
        "SELECT address_id, line_1, line_2, line_3 FROM Addresses WHERE address_id IN (SELECT current_address_id FROM Students GROUP BY current_address_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT A.address_id, A.line_1, A.line_2, A.line_3 FROM Addresses A WHERE A.address_id = (SELECT current_address_id FROM Students GROUP BY current_address_id HAVING COUNT(*) = MAX(COUNT(*)))",
        "SELECT address_id, line_1, line_2, line_3 FROM Addresses WHERE address_id = (SELECT TOP 1 current_address_id FROM Students GROUP BY current_address_id ORDER BY COUNT(*) DESC)",
        "SELECT A.address_id, A.line_1, A.line_2, A.line_3 FROM Addresses A, (SELECT current_address_id, COUNT(*) AS student_count FROM Students GROUP BY current_address_id ORDER BY student_count DESC LIMIT 1) AS MaxAddress WHERE A.address_id = MaxAddress.current_address_id",
        "SELECT address_id, line_1, line_2, line_3 FROM Addresses WHERE address_id = (SELECT current_address_id FROM Students GROUP BY current_address_id ORDER BY COUNT(student_id) DESC FETCH FIRST 1 ROWS ONLY)",
        "SELECT A.address_id, A.line_1, A.line_2, A.line_3 FROM Addresses A INNER JOIN (SELECT current_address_id, COUNT(*) FROM Students GROUP BY current_address_id ORDER BY COUNT(*) DESC LIMIT 1) B ON A.address_id = B.current_address_id",
        "SELECT address_id, line_1, line_2, line_3 FROM Addresses WHERE address_id = (SELECT current_address_id FROM Students GROUP BY current_address_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT A.address_id, A.line_1, A.line_2, A.line_3 FROM Addresses A WHERE EXISTS (SELECT 1 FROM Students WHERE Students.current_address_id = A.address_id GROUP BY current_address_id HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Students GROUP BY current_address_id))",
        "SELECT A.address_id, A.line_1, A.line_2, A.line_3 FROM Addresses A WHERE A.address_id = (SELECT current_address_id FROM (SELECT current_address_id, COUNT(*) AS num_students FROM Students GROUP BY current_address_id) AS Temp ORDER BY num_students DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 562,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT A.address_id, A.line_1, A.line_2 FROM Addresses A JOIN (SELECT address_id, COUNT(*) AS cnt FROM (SELECT current_address_id AS address_id FROM Students UNION ALL SELECT permanent_address_id FROM Students) AS combined GROUP BY address_id) AS C ON A.address_id = C.address_id ORDER BY C.cnt DESC, A.address_id ASC LIMIT 1",
        "SELECT address_id, line_1, line_2 FROM Addresses WHERE address_id IN (SELECT address_id FROM (SELECT current_address_id AS address_id FROM Students UNION ALL SELECT permanent_address_id FROM Students) GROUP BY address_id ORDER BY COUNT(*) DESC, address_id ASC LIMIT 1)",
        "SELECT TOP 1 A.address_id, A.line_1, A.line_2 FROM Addresses A INNER JOIN (SELECT address_id, COUNT(*) AS total FROM (SELECT current_address_id AS address_id FROM Students UNION ALL SELECT permanent_address_id FROM Students) AS combined GROUP BY address_id) AS B ON A.address_id = B.address_id ORDER BY B.total DESC, A.address_id",
        "SELECT A.address_id, A.line_1, A.line_2 FROM Addresses A WHERE A.address_id = (SELECT address_id FROM (SELECT current_address_id AS address_id FROM Students UNION ALL SELECT permanent_address_id FROM Students) AS combined GROUP BY address_id ORDER BY COUNT(*) DESC, address_id ASC LIMIT 1)",
        "SELECT A.address_id, A.line_1, A.line_2, COUNT(*) AS num_students FROM Addresses A LEFT JOIN (SELECT current_address_id AS address_id FROM Students UNION ALL SELECT permanent_address_id FROM Students) AS B ON A.address_id = B.address_id GROUP BY A.address_id, A.line_1, A.line_2 ORDER BY num_students DESC, A.address_id ASC LIMIT 1",
        "WITH CombinedAddresses AS (SELECT current_address_id AS address_id FROM Students UNION ALL SELECT permanent_address_id FROM Students), Counted AS (SELECT address_id, COUNT(*) AS total FROM CombinedAddresses GROUP BY address_id) SELECT A.address_id, A.line_1, A.line_2 FROM Addresses A JOIN Counted C ON A.address_id = C.address_id ORDER BY C.total DESC, A.address_id ASC LIMIT 1",
        "SELECT address_id, line_1, line_2 FROM Addresses WHERE address_id = (SELECT address_id FROM (SELECT current_address_id AS address_id, COUNT(*) AS cnt FROM Students GROUP BY current_address_id UNION ALL SELECT permanent_address_id, COUNT(*) FROM Students GROUP BY permanent_address_id) AS combined GROUP BY address_id ORDER BY SUM(cnt) DESC, address_id ASC LIMIT 1)",
        "SELECT A.address_id, A.line_1, A.line_2 FROM Addresses A JOIN (SELECT address_id, COUNT(*) AS student_count FROM (SELECT current_address_id AS address_id FROM Students UNION ALL SELECT permanent_address_id FROM Students) GROUP BY address_id) AS B ON A.address_id = B.address_id ORDER BY B.student_count DESC, A.address_id ASC FETCH FIRST 1 ROWS ONLY",
        "SELECT A.address_id, A.line_1, A.line_2 FROM Addresses A WHERE A.address_id IN (SELECT address_id FROM (SELECT current_address_id AS address_id FROM Students UNION ALL SELECT permanent_address_id FROM Students) GROUP BY address_id HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM (SELECT current_address_id AS address_id FROM Students UNION ALL SELECT permanent_address_id FROM Students) GROUP BY address_id))) ORDER BY A.address_id ASC LIMIT 1",
        "SELECT A.address_id, A.line_1, A.line_2 FROM Addresses A WHERE A.address_id = (SELECT address_id FROM (SELECT current_address_id AS address_id, COUNT(*) AS cnt FROM Students GROUP BY current_address_id UNION ALL SELECT permanent_address_id, COUNT(*) FROM Students GROUP BY permanent_address_id) AS combined GROUP BY address_id ORDER BY SUM(cnt) DESC, address_id ASC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 563,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT AVG(EXTRACT(YEAR FROM transcript_date)) FROM Transcripts",
        "SELECT AVG(YEAR(transcript_date)) FROM Transcripts",
        "SELECT AVG(DATE_PART('year', transcript_date)) FROM Transcripts",
        "SELECT AVG(TO_NUMBER(TO_CHAR(transcript_date, 'YYYY'), '9999')) FROM Transcripts",
        "SELECT AVG(CAST(FORMAT(transcript_date, 'yyyy') AS INT)) FROM Transcripts",
        "SELECT AVG(CAST(SUBSTRING(CAST(transcript_date AS VARCHAR), 1, 4) AS INT)) FROM Transcripts",
        "SELECT AVG(CAST(YEAR(CAST(transcript_date AS DATE)) AS INTEGER)) FROM Transcripts",
        "SELECT AVG(CAST(EXTRACT(YEAR FROM CAST(transcript_date AS DATE)) AS INTEGER)) FROM Transcripts",
        "SELECT AVG(CAST(DATEPART(yy, transcript_date) AS INT)) FROM Transcripts",
        "SELECT AVG(CAST(STRFTIME('%Y', transcript_date) AS INTEGER)) FROM Transcripts"
      ]
    ]
  },
  {
    "id": 564,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT AVG(transcript_date) FROM Transcripts",
        "SELECT AVG(CAST(transcript_date AS DATE)) FROM Transcripts",
        "SELECT AVG(EXTRACT(EPOCH FROM transcript_date)) FROM Transcripts",
        "SELECT AVG(DATE_PART('day', transcript_date)) FROM Transcripts",
        "SELECT AVG(TO_DAYS(transcript_date)) FROM Transcripts",
        "SELECT AVG(DATEDIFF(CURRENT_DATE, transcript_date)) FROM Transcripts",
        "SELECT AVG(UNIX_TIMESTAMP(transcript_date)) FROM Transcripts",
        "SELECT AVG(CONVERT(DATETIME, transcript_date)) FROM Transcripts",
        "SELECT AVG(CAST(transcript_date AS TIMESTAMP)) FROM Transcripts",
        "SELECT AVG(DATE(transcript_date)) FROM Transcripts"
      ]
    ]
  },
  {
    "id": 565,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT MIN(transcript_date), other_details FROM Transcripts",
        "SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "SELECT TOP 1 transcript_date, other_details FROM Transcripts ORDER BY transcript_date",
        "SELECT transcript_date AS FirstReleaseDate, other_details FROM Transcripts ORDER BY transcript_date LIMIT 1",
        "SELECT * FROM (SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date) WHERE ROWNUM = 1",
        "SELECT transcript_date, other_details FROM Transcripts WHERE transcript_date = (SELECT MIN(transcript_date) FROM Transcripts)",
        "SELECT FIRST(transcript_date), other_details FROM Transcripts",
        "SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date FETCH FIRST ROW ONLY",
        "SELECT transcript_date, other_details FROM Transcripts WHERE transcript_date IN (SELECT MIN(transcript_date) FROM Transcripts)",
        "SELECT transcript_date AS EarliestDate, other_details FROM Transcripts ORDER BY transcript_date ASC FETCH FIRST 1 ROWS ONLY"
      ]
    ]
  },
  {
    "id": 566,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT * FROM Transcripts WHERE transcript_date = (SELECT MIN(transcript_date) FROM Transcripts)",
        "SELECT T.* FROM Transcripts T WHERE T.transcript_date = (SELECT MIN(transcript_date) FROM Transcripts)",
        "SELECT transcript_id, transcript_date, other_details FROM Transcripts WHERE transcript_date = (SELECT MIN(transcript_date) FROM Transcripts)",
        "SELECT * FROM Transcripts WHERE transcript_date IN (SELECT MIN(transcript_date) FROM Transcripts)",
        "WITH EarliestDate AS (SELECT MIN(transcript_date) AS MinDate FROM Transcripts) SELECT * FROM Transcripts, EarliestDate WHERE Transcripts.transcript_date = EarliestDate.MinDate",
        "SELECT Transcripts.* FROM Transcripts JOIN (SELECT MIN(transcript_date) AS MinDate FROM Transcripts) AS Temp ON Transcripts.transcript_date = Temp.MinDate",
        "SELECT * FROM Transcripts WHERE transcript_date = (SELECT MIN(T.transcript_date) FROM Transcripts T)",
        "SELECT * FROM Transcripts WHERE transcript_date = (SELECT MIN(transcript_date) FROM Transcripts GROUP BY transcript_date)",
        "SELECT transcript_id, transcript_date, other_details FROM Transcripts WHERE transcript_date = (SELECT MIN(T.transcript_date) FROM Transcripts T)",
        "SELECT * FROM Transcripts WHERE transcript_date = (SELECT MIN(transcript_date) FROM Transcripts LIMIT 1)"
      ]
    ]
  },
  {
    "id": 567,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Transcripts",
        "SELECT COUNT(transcript_id) FROM Transcripts",
        "SELECT COUNT(*) AS TotalTranscripts FROM Transcripts",
        "SELECT COUNT(Transcripts.transcript_id) FROM Transcripts",
        "SELECT COUNT(1) FROM Transcripts",
        "SELECT COUNT(DISTINCT transcript_id) FROM Transcripts",
        "SELECT COUNT(*) FROM Transcripts GROUP BY transcript_id",
        "SELECT COUNT(*) AS NumberOfTranscripts FROM Transcripts",
        "SELECT COUNT(ALL transcript_id) FROM Transcripts",
        "SELECT COUNT(transcript_id) AS Total FROM Transcripts"
      ]
    ]
  },
  {
    "id": 568,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Transcripts",
        "SELECT COUNT(transcript_id) FROM Transcripts",
        "SELECT COUNT(1) FROM Transcripts",
        "SELECT COUNT(*) AS total_transcripts FROM Transcripts",
        "SELECT COUNT(transcript_id) AS count_of_transcripts FROM Transcripts",
        "SELECT COUNT(*) FROM Transcripts AS t",
        "SELECT COUNT(transcript_id) FROM Transcripts AS t",
        "SELECT COUNT(*) FROM (SELECT * FROM Transcripts) AS all_transcripts",
        "SELECT COUNT(transcript_id) FROM (SELECT transcript_id FROM Transcripts) AS transcript_ids",
        "SELECT COUNT(*) FROM Transcripts WHERE transcript_id IS NOT NULL"
      ]
    ]
  },
  {
    "id": 569,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT MAX(transcript_date) FROM Transcripts",
        "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "SELECT TOP 1 transcript_date FROM Transcripts ORDER BY transcript_date DESC",
        "SELECT transcript_date FROM Transcripts WHERE transcript_date = (SELECT MAX(transcript_date) FROM Transcripts)",
        "SELECT MAX(t.transcript_date) FROM Transcripts t",
        "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC FETCH FIRST ROW ONLY",
        "SELECT transcript_date FROM (SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC) WHERE ROWNUM = 1",
        "SELECT transcript_date FROM Transcripts WHERE transcript_date IN (SELECT MAX(transcript_date) FROM Transcripts)",
        "SELECT MAX(Transcripts.transcript_date) AS LastTranscriptDate FROM Transcripts",
        "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1 OFFSET 0"
      ]
    ]
  },
  {
    "id": 570,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT MAX(transcript_date) FROM Transcripts",
        "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "SELECT TOP 1 transcript_date FROM Transcripts ORDER BY transcript_date DESC",
        "SELECT transcript_date FROM Transcripts WHERE transcript_date = (SELECT MAX(transcript_date) FROM Transcripts)",
        "SELECT MAX(t.transcript_date) FROM Transcripts t",
        "SELECT t.transcript_date FROM Transcripts t ORDER BY t.transcript_date DESC FETCH FIRST ROW ONLY",
        "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC FETCH FIRST 1 ROWS ONLY",
        "SELECT transcript_date FROM (SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC) WHERE ROWNUM = 1",
        "SELECT transcript_date FROM Transcripts WHERE transcript_date IN (SELECT MAX(transcript_date) FROM Transcripts)",
        "SELECT MAX(Transcripts.transcript_date) AS LastTranscriptDate FROM Transcripts"
      ]
    ]
  },
  {
    "id": 571,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT MAX(count) AS max_count, GROUP_CONCAT(student_course_id) AS course_enrollment_ids FROM (SELECT student_course_id, COUNT(transcript_id) AS count FROM Transcript_Contents GROUP BY student_course_id) AS subquery GROUP BY count HAVING count = MAX(count)",
        "SELECT student_course_id, COUNT(*) AS count FROM Transcript_Contents GROUP BY student_course_id ORDER BY count DESC LIMIT 1",
        "WITH Counts AS (SELECT student_course_id, COUNT(*) AS count FROM Transcript_Contents GROUP BY student_course_id) SELECT MAX(count) FROM Counts",
        "SELECT student_course_id FROM Transcript_Contents GROUP BY student_course_id HAVING COUNT(transcript_id) = (SELECT MAX(count) FROM (SELECT COUNT(transcript_id) AS count FROM Transcript_Contents GROUP BY student_course_id) AS subquery)",
        "SELECT TOP 1 student_course_id, COUNT(*) AS count FROM Transcript_Contents GROUP BY student_course_id ORDER BY count DESC",
        "SELECT student_course_id, COUNT(transcript_id) AS count FROM Transcript_Contents GROUP BY student_course_id HAVING count = (SELECT MAX(count) FROM (SELECT COUNT(transcript_id) AS count FROM Transcript_Contents GROUP BY student_course_id) AS subquery)",
        "SELECT student_course_id, COUNT(*) AS count FROM Transcript_Contents GROUP BY student_course_id HAVING count = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Transcript_Contents GROUP BY student_course_id) AS subquery)",
        "SELECT student_course_id FROM Transcript_Contents GROUP BY student_course_id HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Transcript_Contents GROUP BY student_course_id) AS subquery)",
        "SELECT student_course_id, COUNT(transcript_id) AS count FROM Transcript_Contents GROUP BY student_course_id ORDER BY count DESC FETCH FIRST 1 ROWS ONLY",
        "WITH CountData AS (SELECT student_course_id, COUNT(transcript_id) AS count FROM Transcript_Contents GROUP BY student_course_id) SELECT student_course_id FROM CountData WHERE count = (SELECT MAX(count) FROM CountData)"
      ]
    ]
  },
  {
    "id": 572,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT T2.student_enrolment_id, T1.student_course_id FROM Transcript_Contents AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_course_id = T2.student_course_id WHERE T1.student_course_id IN (SELECT student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT SEC.student_enrolment_id, TC.student_course_id FROM Transcript_Contents TC INNER JOIN Student_Enrolment_Courses SEC ON TC.student_course_id = SEC.student_course_id WHERE TC.student_course_id = (SELECT student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY COUNT(*) DESC FETCH FIRST 1 ROW ONLY)",
        "SELECT student_enrolment_id, student_course_id FROM Student_Enrolment_Courses WHERE student_course_id = (SELECT TOP 1 student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY COUNT(*) DESC)",
        "SELECT a.student_enrolment_id, b.student_course_id FROM Student_Enrolment_Courses a JOIN (SELECT student_course_id FROM Transcript_Contents GROUP BY student_course_id HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Transcript_Contents GROUP BY student_course_id))) b ON a.student_course_id = b.student_course_id",
        "SELECT student_enrolment_id, student_course_id FROM Student_Enrolment_Courses WHERE student_course_id IN (SELECT student_course_id FROM Transcript_Contents GROUP BY student_course_id HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Transcript_Contents GROUP BY student_course_id)))",
        "WITH RankedCourses AS (SELECT student_course_id, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank FROM Transcript_Contents GROUP BY student_course_id) SELECT SEC.student_enrolment_id, RC.student_course_id FROM Student_Enrolment_Courses SEC JOIN RankedCourses RC ON SEC.student_course_id = RC.student_course_id WHERE RC.rank = 1",
        "SELECT SEC.student_enrolment_id, TC.student_course_id FROM Student_Enrolment_Courses SEC, Transcript_Contents TC WHERE SEC.student_course_id = TC.student_course_id AND TC.student_course_id = (SELECT student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT student_enrolment_id, student_course_id FROM Student_Enrolment_Courses WHERE student_course_id = (SELECT student_course_id FROM (SELECT student_course_id, COUNT(*) AS total FROM Transcript_Contents GROUP BY student_course_id ORDER BY total DESC LIMIT 1))",
        "SELECT SEC.student_enrolment_id, TC.student_course_id FROM Student_Enrolment_Courses SEC INNER JOIN (SELECT student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY COUNT(*) DESC LIMIT 1) AS MostFrequent ON SEC.student_course_id = MostFrequent.student_course_id",
        "SELECT student_enrolment_id, student_course_id FROM Student_Enrolment_Courses WHERE student_course_id IN (SELECT student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY COUNT(*) DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 573,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT T1.transcript_date, T1.transcript_id FROM Transcripts T1 JOIN (SELECT transcript_id, COUNT(*) AS course_count FROM Transcript_Contents GROUP BY transcript_id) T2 ON T1.transcript_id = T2.transcript_id WHERE T2.course_count = (SELECT MIN(course_count) FROM (SELECT transcript_id, COUNT(*) AS course_count FROM Transcript_Contents GROUP BY transcript_id) T3)",
        "SELECT transcript_date, transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY COUNT(*) ASC, transcript_id ASC LIMIT 1)",
        "SELECT T.transcript_date, T.transcript_id FROM Transcripts T INNER JOIN (SELECT transcript_id, COUNT(student_course_id) AS cnt FROM Transcript_Contents GROUP BY transcript_id ORDER BY cnt ASC, transcript_id ASC LIMIT 1) TC ON T.transcript_id = TC.transcript_id",
        "SELECT transcript_date, transcript_id FROM Transcripts WHERE transcript_id = (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY COUNT(*) ASC, transcript_id ASC LIMIT 1)",
        "SELECT T.transcript_date, T.transcript_id FROM Transcripts T WHERE T.transcript_id = (SELECT TC.transcript_id FROM Transcript_Contents TC GROUP BY TC.transcript_id ORDER BY COUNT(TC.student_course_id) ASC, TC.transcript_id ASC LIMIT 1)",
        "SELECT T.transcript_date, T.transcript_id FROM Transcripts T JOIN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Transcript_Contents GROUP BY transcript_id)) TC ON T.transcript_id = TC.transcript_id ORDER BY T.transcript_id ASC LIMIT 1",
        "SELECT T.transcript_date, T.transcript_id FROM Transcripts T WHERE T.transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Transcript_Contents GROUP BY transcript_id)) ORDER BY T.transcript_id ASC LIMIT 1",
        "SELECT MIN(T.transcript_date) AS transcript_date, T.transcript_id FROM Transcripts T INNER JOIN (SELECT transcript_id, COUNT(*) AS num_courses FROM Transcript_Contents GROUP BY transcript_id) TC ON T.transcript_id = TC.transcript_id GROUP BY T.transcript_id HAVING TC.num_courses = (SELECT MIN(num_courses) FROM (SELECT COUNT(*) AS num_courses FROM Transcript_Contents GROUP BY transcript_id) sub) ORDER BY T.transcript_id ASC LIMIT 1",
        "SELECT transcript_date, transcript_id FROM Transcripts WHERE transcript_id = (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Transcript_Contents GROUP BY transcript_id)) ORDER BY transcript_id ASC LIMIT 1",
        "SELECT T.transcript_date, T.transcript_id FROM Transcripts T WHERE T.transcript_id = (SELECT TC.transcript_id FROM Transcript_Contents TC GROUP BY TC.transcript_id HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Transcript_Contents GROUP BY transcript_id)) ORDER BY T.transcript_id ASC LIMIT 1"
      ]
    ]
  },
  {
    "id": 574,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT T1.transcript_id, T1.transcript_date FROM Transcripts T1 JOIN (SELECT transcript_id, COUNT(*) AS result_count FROM Transcript_Contents GROUP BY transcript_id) T2 ON T1.transcript_id = T2.transcript_id ORDER BY T2.result_count ASC LIMIT 1",
        "SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id = (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)",
        "SELECT T.transcript_id, T.transcript_date FROM Transcripts T WHERE T.transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(*) = (SELECT MIN(cnt) FROM (SELECT COUNT(*) AS cnt FROM Transcript_Contents GROUP BY transcript_id) sub))",
        "SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id = (SELECT TOP 1 transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY COUNT(*) ASC)",
        "SELECT T.transcript_id, T.transcript_date FROM Transcripts T INNER JOIN (SELECT transcript_id, COUNT(*) AS num_results FROM Transcript_Contents GROUP BY transcript_id) TC ON T.transcript_id = TC.transcript_id WHERE TC.num_results = (SELECT MIN(num_results) FROM (SELECT COUNT(*) AS num_results FROM Transcript_Contents GROUP BY transcript_id) sub)",
        "SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY COUNT(*) ASC FETCH FIRST ROW ONLY)",
        "SELECT T1.transcript_id, T1.transcript_date FROM Transcripts T1 WHERE T1.transcript_id = (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY COUNT(*) ASC FETCH FIRST 1 ROWS ONLY)",
        "SELECT T.transcript_id, T.transcript_date FROM Transcripts T JOIN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1) TC ON T.transcript_id = TC.transcript_id",
        "SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id = (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Transcript_Contents GROUP BY transcript_id))",
        "SELECT T.transcript_id, T.transcript_date FROM Transcripts T WHERE T.transcript_id = (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 575,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT S.semester_name FROM Semesters S WHERE S.semester_id IN (SELECT SE.semester_id FROM Student_Enrolment SE JOIN Degree_Programs DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name = 'Master') AND S.semester_id IN (SELECT SE.semester_id FROM Student_Enrolment SE JOIN Degree_Programs DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name = 'Bachelor')",
        "SELECT semester_name FROM Semesters WHERE semester_id IN (SELECT semester_id FROM Student_Enrolment JOIN Degree_Programs ON degree_program_id WHERE degree_summary_name = 'Master') INTERSECT SELECT semester_name FROM Semesters WHERE semester_id IN (SELECT semester_id FROM Student_Enrolment JOIN Degree_Programs ON degree_program_id WHERE degree_summary_name = 'Bachelor')",
        "SELECT DISTINCT S.semester_name FROM Semesters S, Student_Enrolment SE, Degree_Programs DP WHERE S.semester_id = SE.semester_id AND SE.degree_program_id = DP.degree_program_id AND DP.degree_summary_name IN ('Master', 'Bachelor') GROUP BY S.semester_id HAVING COUNT(DISTINCT DP.degree_summary_name) = 2",
        "SELECT S.semester_name FROM Semesters S JOIN Student_Enrolment SE ON S.semester_id = SE.semester_id JOIN Degree_Programs DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name = 'Master' AND EXISTS (SELECT 1 FROM Student_Enrolment SE2 JOIN Degree_Programs DP2 ON SE2.degree_program_id = DP2.degree_program_id WHERE DP2.degree_summary_name = 'Bachelor' AND SE2.semester_id = SE.semester_id)",
        "SELECT S.semester_name FROM Semesters S WHERE EXISTS (SELECT 1 FROM Student_Enrolment SE JOIN Degree_Programs DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name = 'Master' AND SE.semester_id = S.semester_id) AND EXISTS (SELECT 1 FROM Student_Enrolment SE JOIN Degree_Programs DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name = 'Bachelor' AND SE.semester_id = S.semester_id)",
        "WITH MasterSemesters AS (SELECT semester_id FROM Student_Enrolment JOIN Degree_Programs ON degree_program_id WHERE degree_summary_name = 'Master'), BachelorSemesters AS (SELECT semester_id FROM Student_Enrolment JOIN Degree_Programs ON degree_program_id WHERE degree_summary_name = 'Bachelor') SELECT semester_name FROM Semesters WHERE semester_id IN (SELECT semester_id FROM MasterSemesters INTERSECT SELECT semester_id FROM BachelorSemesters)",
        "SELECT semester_name FROM Semesters WHERE semester_id IN (SELECT SE.semester_id FROM Student_Enrolment SE JOIN Degree_Programs DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name = 'Master' UNION ALL SELECT SE.semester_id FROM Student_Enrolment SE JOIN Degree_Programs DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name = 'Bachelor') GROUP BY semester_id HAVING COUNT(*) > 1",
        "SELECT S.semester_name FROM Semesters S WHERE S.semester_id IN (SELECT SE.semester_id FROM Student_Enrolment SE JOIN Degree_Programs DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name = 'Master') UNION SELECT S.semester_name FROM Semesters S WHERE S.semester_id IN (SELECT SE.semester_id FROM Student_Enrolment SE JOIN Degree_Programs DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name = 'Bachelor')",
        "SELECT S.semester_name FROM Semesters S JOIN (SELECT semester_id FROM Student_Enrolment JOIN Degree_Programs ON degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT semester_id FROM Student_Enrolment JOIN Degree_Programs ON degree_program_id WHERE degree_summary_name = 'Bachelor') AS SB ON S.semester_id = SB.semester_id",
        "SELECT S.semester_name FROM Semesters S WHERE S.semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Master') INTERSECT SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelor'))"
      ]
    ]
  },
  {
    "id": 576,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Masters%') INTERSECT SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Bachelors%')",
        "SELECT DISTINCT S1.semester_id FROM Student_Enrolment S1 JOIN Degree_Programs D1 ON S1.degree_program_id = D1.degree_program_id WHERE D1.degree_summary_name LIKE '%Masters%' AND S1.semester_id IN (SELECT S2.semester_id FROM Student_Enrolment S2 JOIN Degree_Programs D2 ON S2.degree_program_id = D2.degree_program_id WHERE D2.degree_summary_name LIKE '%Bachelors%')",
        "SELECT S.semester_id FROM Student_Enrolment S JOIN Degree_Programs D ON S.degree_program_id = D.degree_program_id WHERE D.degree_summary_name IN ('Masters', 'Bachelors') GROUP BY S.semester_id HAVING COUNT(DISTINCT D.degree_summary_name) = 2",
        "WITH Masters AS (SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Masters%')), Bachelors AS (SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Bachelors%')) SELECT M.semester_id FROM Masters M JOIN Bachelors B ON M.semester_id = B.semester_id",
        "SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Masters%') AND semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Bachelors%'))",
        "SELECT semester_id FROM (SELECT semester_id, COUNT(DISTINCT degree_summary_name) AS degree_types FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE degree_summary_name IN ('Masters', 'Bachelors') GROUP BY semester_id) WHERE degree_types = 2",
        "SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Masters%') UNION SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Bachelors%') HAVING COUNT(*) > 1",
        "SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Masters%') UNION ALL SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Bachelors%') GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) > 1",
        "SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Masters%') UNION SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Bachelors%')",
        "SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name IN ('Masters', 'Bachelors')) GROUP BY semester_id HAVING COUNT(DISTINCT degree_summary_name) = 2"
      ]
    ]
  },
  {
    "id": 577,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT current_address_id) FROM Students",
        "SELECT COUNT(DISTINCT Students.current_address_id) AS UniqueAddresses FROM Students",
        "SELECT COUNT(UNIQUE current_address_id) FROM Students",
        "SELECT COUNT(*) FROM (SELECT DISTINCT current_address_id FROM Students) AS unique_addresses",
        "SELECT COUNT(DISTINCT address_id) FROM Addresses WHERE address_id IN (SELECT current_address_id FROM Students)",
        "SELECT COUNT(DISTINCT A.address_id) FROM Addresses A JOIN Students S ON A.address_id = S.current_address_id",
        "SELECT COUNT(DISTINCT current_address_id) FROM Students WHERE current_address_id IS NOT NULL",
        "SELECT DISTINCT COUNT(current_address_id) FROM Students",
        "SELECT COUNT(DISTINCT S.current_address_id) FROM Students S",
        "SELECT COUNT(*) FROM (SELECT current_address_id FROM Students GROUP BY current_address_id) AS unique_current_addresses"
      ]
    ]
  },
  {
    "id": 578,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT DISTINCT A.address_id, A.line_1, A.line_2, A.line_3, A.city, A.zip_postcode, A.state_province_county, A.country FROM Addresses A JOIN Students S ON A.address_id = S.current_address_id OR A.address_id = S.permanent_address_id",
        "SELECT DISTINCT address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country FROM Addresses WHERE address_id IN (SELECT current_address_id FROM Students UNION SELECT permanent_address_id FROM Students)",
        "SELECT DISTINCT A.* FROM Addresses A WHERE EXISTS (SELECT 1 FROM Students S WHERE S.current_address_id = A.address_id OR S.permanent_address_id = A.address_id)",
        "SELECT DISTINCT A.address_id, A.line_1, A.line_2, A.line_3, A.city, A.zip_postcode, A.state_province_county, A.country FROM Addresses A INNER JOIN Students S ON A.address_id = S.current_address_id UNION SELECT DISTINCT A.address_id, A.line_1, A.line_2, A.line_3, A.city, A.zip_postcode, A.state_province_county, A.country FROM Addresses A INNER JOIN Students S ON A.address_id = S.permanent_address_id",
        "SELECT DISTINCT address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country FROM Addresses WHERE EXISTS (SELECT NULL FROM Students WHERE current_address_id = address_id OR permanent_address_id = address_id)",
        "SELECT DISTINCT A.address_id, A.line_1, A.line_2, A.line_3, A.city, A.zip_postcode, A.state_province_county, A.country FROM Addresses A, Students S WHERE A.address_id = S.current_address_id OR A.address_id = S.permanent_address_id",
        "SELECT DISTINCT A.address_id, A.line_1, A.line_2, A.line_3, A.city, A.zip_postcode, A.state_province_county, A.country FROM Addresses A WHERE A.address_id IN (SELECT current_address_id FROM Students) OR A.address_id IN (SELECT permanent_address_id FROM Students)",
        "SELECT DISTINCT A.address_id, A.line_1, A.line_2, A.line_3, A.city, A.zip_postcode, A.state_province_county, A.country FROM Addresses A WHERE A.address_id IN (SELECT current_address_id FROM Students UNION ALL SELECT permanent_address_id FROM Students)",
        "SELECT DISTINCT address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country FROM Addresses WHERE address_id IN (SELECT current_address_id FROM Students) UNION SELECT DISTINCT address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country FROM Addresses WHERE address_id IN (SELECT permanent_address_id FROM Students)",
        "SELECT DISTINCT A.address_id, A.line_1, A.line_2, A.line_3, A.city, A.zip_postcode, A.state_province_county, A.country FROM Addresses A LEFT JOIN Students S ON A.address_id = S.current_address_id OR A.address_id = S.permanent_address_id WHERE S.student_id IS NOT NULL"
      ]
    ]
  },
  {
    "id": 579,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT * FROM Students ORDER BY last_name DESC, first_name DESC",
        "SELECT * FROM Students ORDER BY first_name DESC, last_name DESC",
        "SELECT * FROM Students ORDER BY student_id DESC",
        "SELECT student_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details FROM Students ORDER BY last_name DESC",
        "SELECT Students.* FROM Students ORDER BY last_name DESC, first_name DESC",
        "SELECT first_name, middle_name, last_name, current_address_id, permanent_address_id, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details FROM Students ORDER BY first_name DESC",
        "SELECT * FROM Students ORDER BY CONCAT(last_name, ', ', first_name) DESC",
        "SELECT * FROM Students ORDER BY last_name DESC",
        "SELECT * FROM Students ORDER BY first_name DESC",
        "SELECT student_id, CONCAT(first_name, ' ', last_name) AS full_name, current_address_id, permanent_address_id, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details FROM Students ORDER BY full_name DESC"
      ]
    ]
  },
  {
    "id": 580,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT other_student_details FROM Students ORDER BY last_name DESC",
        "SELECT other_student_details FROM Students SORT BY last_name DESCENDING",
        "SELECT Students.other_student_details FROM Students ORDER BY Students.last_name DESC",
        "SELECT other_student_details FROM Students ORDER BY last_name DESCENDING",
        "SELECT S.other_student_details FROM Students S ORDER BY S.last_name DESC",
        "SELECT other_student_details FROM Students ORDER BY last_name DESC, first_name DESC",
        "SELECT other_student_details FROM Students ORDER BY last_name DESC LIMIT ALL",
        "SELECT * FROM Students ORDER BY last_name DESC",
        "SELECT other_student_details FROM Students ORDER BY last_name DESC, middle_name DESC",
        "SELECT other_student_details FROM Students ORDER BY last_name DESC, student_id DESC"
      ]
    ]
  },
  {
    "id": 581,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT section_description FROM Sections WHERE section_name = 'H'",
        "SELECT section_description FROM Sections WHERE section_name LIKE 'H'",
        "SELECT Sections.section_description FROM Sections WHERE Sections.section_name = 'H'",
        "SELECT s.section_description FROM Sections s WHERE s.section_name = 'H'",
        "SELECT section_description FROM Sections WHERE section_name = 'H' LIMIT 1",
        "SELECT section_description FROM Sections WHERE section_name IN ('H')",
        "SELECT section_description FROM Sections WHERE section_name = 'H' AND section_description IS NOT NULL",
        "SELECT section_description FROM Sections WHERE section_name = 'H' ORDER BY section_description DESC LIMIT 1",
        "SELECT section_description FROM Sections WHERE section_name = 'H' ORDER BY section_description ASC LIMIT 1",
        "SELECT section_description FROM Sections WHERE section_name = 'H' FETCH FIRST 1 ROWS ONLY"
      ]
    ]
  },
  {
    "id": 582,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT section_description FROM Sections WHERE section_name = 'h'",
        "SELECT section_description FROM Sections WHERE section_name LIKE 'h'",
        "SELECT Sections.section_description FROM Sections WHERE Sections.section_name = 'h'",
        "SELECT s.section_description FROM Sections s WHERE s.section_name = 'h'",
        "SELECT section_description FROM Sections WHERE section_name = 'h' LIMIT 1",
        "SELECT section_description FROM Sections WHERE section_name = 'h' AND section_description IS NOT NULL",
        "SELECT section_description FROM Sections WHERE section_name = 'h' ORDER BY section_id DESC LIMIT 1",
        "SELECT section_description FROM Sections WHERE section_name = 'h' ORDER BY section_id ASC LIMIT 1",
        "SELECT section_description FROM Sections WHERE section_name = 'h' FETCH FIRST 1 ROWS ONLY",
        "SELECT section_description FROM Sections WHERE section_name = 'h' AND section_description <> ''"
      ]
    ]
  },
  {
    "id": 583,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'",
        "SELECT S.first_name FROM Students S INNER JOIN Addresses A ON S.permanent_address_id = A.address_id WHERE A.country = 'Haiti' OR S.cell_mobile_number = '09700166582'",
        "SELECT first_name FROM Students, Addresses WHERE Students.permanent_address_id = Addresses.address_id AND (Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582')",
        "SELECT first_name FROM Students LEFT JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'",
        "SELECT DISTINCT first_name FROM Students INNER JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'",
        "SELECT first_name FROM Students AS S JOIN Addresses AS A ON S.permanent_address_id = A.address_id WHERE A.country = 'Haiti' OR S.cell_mobile_number = '09700166582'",
        "SELECT first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE (Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582')",
        "SELECT first_name FROM Students S, Addresses A WHERE S.permanent_address_id = A.address_id AND (A.country = 'Haiti' OR S.cell_mobile_number = '09700166582')",
        "SELECT first_name FROM Students INNER JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'",
        "SELECT first_name FROM Students S JOIN Addresses A ON S.permanent_address_id = A.address_id WHERE A.country = 'Haiti' OR S.cell_mobile_number = '09700166582'"
      ]
    ]
  },
  {
    "id": 584,
    "db_id": "student_transcripts_tracking",
    "infer_predictions": [
      [
        "SELECT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582'",
        "SELECT S.first_name FROM Students S JOIN Addresses A ON S.permanent_address_id = A.address_id WHERE A.country = 'Haiti' OR S.cell_mobile_number = '09700166582'",
        "SELECT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') UNION SELECT first_name FROM Students WHERE cell_mobile_number = '09700166582'",
        "SELECT DISTINCT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582'",
        "SELECT first_name FROM Students INNER JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'",
        "SELECT first_name FROM Students WHERE EXISTS (SELECT 1 FROM Addresses WHERE Students.permanent_address_id = Addresses.address_id AND Addresses.country = 'Haiti') OR cell_mobile_number = '09700166582'",
        "SELECT first_name FROM Students, Addresses WHERE Students.permanent_address_id = Addresses.address_id AND (Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582')",
        "SELECT first_name FROM Students WHERE permanent_address_id = ANY (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582'",
        "SELECT first_name FROM Students LEFT JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'",
        "SELECT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582'"
      ]
    ]
  },
  {
    "id": 585,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Title FROM Cartoon ORDER BY Title ASC",
        "SELECT Title FROM Cartoon ORDER BY Title",
        "SELECT Cartoon.Title FROM Cartoon ORDER BY Cartoon.Title ASC",
        "SELECT Title AS CartoonTitle FROM Cartoon ORDER BY CartoonTitle",
        "SELECT c.Title FROM Cartoon c ORDER BY c.Title ASC",
        "SELECT Title FROM Cartoon ORDER BY Title ASCENDING",
        "SELECT * FROM Cartoon ORDER BY Title",
        "SELECT Title FROM Cartoon SORT BY Title ASC",
        "SELECT Title FROM Cartoon ORDER BY Title COLLATE NOCASE",
        "SELECT DISTINCT Title FROM Cartoon ORDER BY Title ASC"
      ]
    ]
  },
  {
    "id": 586,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Title FROM Cartoon ORDER BY Title ASC",
        "SELECT Title FROM Cartoon ORDER BY Title",
        "SELECT Title FROM Cartoon SORT BY Title ASCENDING",
        "SELECT Title FROM Cartoon SORT BY Title",
        "SELECT Cartoon.Title FROM Cartoon ORDER BY Cartoon.Title ASC",
        "SELECT Cartoon.Title FROM Cartoon ORDER BY Cartoon.Title",
        "SELECT Title AS CartoonTitle FROM Cartoon ORDER BY CartoonTitle ASC",
        "SELECT Title AS CartoonTitle FROM Cartoon ORDER BY CartoonTitle",
        "SELECT DISTINCT Title FROM Cartoon ORDER BY Title ASC",
        "SELECT DISTINCT Title FROM Cartoon ORDER BY Title"
      ]
    ]
  },
  {
    "id": 587,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT * FROM Cartoon WHERE Directed_by = 'Ben Jones'",
        "SELECT id, Title, Original_air_date FROM Cartoon WHERE Directed_by = 'Ben Jones'",
        "SELECT Title FROM Cartoon WHERE Directed_by LIKE 'Ben Jones'",
        "SELECT Cartoon.* FROM Cartoon WHERE Directed_by = 'Ben Jones'",
        "SELECT Title, Production_code, Channel FROM Cartoon WHERE Directed_by = 'Ben Jones'",
        "SELECT * FROM Cartoon WHERE Directed_by = 'Ben Jones'",
        "SELECT Cartoon.Title, Cartoon.Original_air_date FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones'",
        "SELECT id, Title, Written_by, Original_air_date FROM Cartoon WHERE Directed_by = 'Ben Jones'",
        "SELECT * FROM Cartoon c WHERE c.Directed_by = 'Ben Jones'",
        "SELECT Title, Directed_by FROM Cartoon WHERE Directed_by = 'Ben Jones'"
      ]
    ]
  },
  {
    "id": 588,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'",
        "SELECT Title FROM Cartoon WHERE Directed_by LIKE 'Ben Jones'",
        "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'",
        "SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones')",
        "SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones'",
        "SELECT c.Title FROM Cartoon c WHERE c.Directed_by = 'Ben Jones'",
        "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'",
        "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'",
        "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'",
        "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'"
      ]
    ]
  },
  {
    "id": 589,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
        "SELECT COUNT(id) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
        "SELECT COUNT(*) AS Total FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
        "SELECT COUNT(*) FROM Cartoon WHERE Written_by LIKE 'Joseph Kuhr'",
        "SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
        "SELECT COUNT(Cartoon.id) FROM Cartoon WHERE Cartoon.Written_by = 'Joseph Kuhr'",
        "SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
        "SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
        "SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
        "SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'"
      ]
    ]
  },
  {
    "id": 590,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
        "SELECT COUNT(id) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
        "SELECT COUNT(Title) AS NumberOfCartoons FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
        "SELECT COUNT(*) AS Total FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
        "SELECT COUNT(*) FROM Cartoon WHERE Written_by LIKE 'Joseph Kuhr'",
        "SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr' GROUP BY Written_by",
        "SELECT COUNT(DISTINCT id) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
        "SELECT COUNT(DISTINCT Title) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
        "SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr' AND Title IS NOT NULL",
        "SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr' AND id IS NOT NULL"
      ]
    ]
  },
  {
    "id": 591,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date, id",
        "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date ASC, id ASC",
        "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date DESC, id ASC",
        "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date ASC, id DESC",
        "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date, id ASC",
        "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date DESC, id DESC",
        "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date ASC",
        "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date DESC",
        "SELECT Title, Directed_by FROM Cartoon ORDER BY id, Original_air_date",
        "SELECT Title, Directed_by FROM Cartoon ORDER BY id ASC, Original_air_date ASC"
      ]
    ]
  },
  {
    "id": 592,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date, id ASC",
        "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date ASC, id ASC",
        "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date, id",
        "SELECT Title AS Name, Directed_by AS Director FROM Cartoon ORDER BY Original_air_date ASC, id ASC",
        "SELECT C.Title, C.Directed_by FROM Cartoon C ORDER BY C.Original_air_date, C.id ASC",
        "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date ASC, id",
        "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date ASC, id ASCENDING",
        "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date, id ASCENDING",
        "SELECT Title AS Cartoon_Name, Directed_by AS Director FROM Cartoon ORDER BY Original_air_date ASC, id ASC",
        "SELECT * FROM Cartoon ORDER BY Original_air_date ASC, id ASC"
      ]
    ]
  },
  {
    "id": 593,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti')",
        "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'",
        "SELECT Title FROM Cartoon WHERE Directed_by LIKE 'Ben Jones' OR Directed_by LIKE 'Brandon Vietti'",
        "SELECT Title FROM Cartoon WHERE Directed_by = ANY (ARRAY['Ben Jones', 'Brandon Vietti'])",
        "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' UNION SELECT Title FROM Cartoon WHERE Directed_by = 'Brandon Vietti'",
        "SELECT c.Title FROM Cartoon c WHERE c.Directed_by = 'Ben Jones' OR c.Directed_by = 'Brandon Vietti'",
        "SELECT Title FROM Cartoon WHERE Directed_by IN (SELECT Directed_by FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti')",
        "SELECT DISTINCT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'",
        "SELECT Title FROM Cartoon WHERE Directed_by IN (SELECT Directed_by FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti'))",
        "SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti') GROUP BY Title"
      ]
    ]
  },
  {
    "id": 594,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'",
        "SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti')",
        "SELECT Title FROM Cartoon WHERE (Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti')",
        "SELECT Title FROM Cartoon WHERE Directed_by LIKE 'Ben Jones' OR Directed_by LIKE 'Brandon Vietti'",
        "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' UNION SELECT Title FROM Cartoon WHERE Directed_by = 'Brandon Vietti'",
        "SELECT DISTINCT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'",
        "SELECT Title FROM Cartoon WHERE Directed_by IN (SELECT Directed_by FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti')",
        "SELECT Title FROM Cartoon c WHERE c.Directed_by = 'Ben Jones' OR c.Directed_by = 'Brandon Vietti'",
        "SELECT c.Title FROM Cartoon c WHERE c.Directed_by = 'Ben Jones' OR c.Directed_by = 'Brandon Vietti'",
        "SELECT Title FROM Cartoon WHERE Directed_by = ANY (ARRAY['Ben Jones', 'Brandon Vietti'])"
      ]
    ]
  },
  {
    "id": 595,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Country, COUNT(id) AS ChannelCount FROM TV_Channel GROUP BY Country ORDER BY ChannelCount DESC LIMIT 1",
        "SELECT Country, COUNT(*) AS TotalChannels FROM TV_Channel GROUP BY Country HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM TV_Channel GROUP BY Country) AS SubQuery)",
        "SELECT TOP 1 Country, COUNT(id) AS NumberOfChannels FROM TV_Channel GROUP BY Country ORDER BY NumberOfChannels DESC",
        "SELECT Country, COUNT(id) FROM TV_Channel GROUP BY Country ORDER BY COUNT(id) DESC FETCH FIRST 1 ROW ONLY",
        "SELECT Country, COUNT(id) AS ChannelCount FROM TV_Channel GROUP BY Country ORDER BY ChannelCount DESC LIMIT 1",
        "SELECT Country, MAX(ChannelCount) FROM (SELECT Country, COUNT(id) AS ChannelCount FROM TV_Channel GROUP BY Country) AS SubQuery",
        "SELECT Country, COUNT(id) AS TotalChannels FROM TV_Channel GROUP BY Country ORDER BY TotalChannels DESC LIMIT 1",
        "SELECT Country, COUNT(*) FROM TV_Channel GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT Country, COUNT(id) AS TotalChannels FROM TV_Channel GROUP BY Country HAVING TotalChannels = (SELECT MAX(TotalChannels) FROM (SELECT COUNT(id) AS TotalChannels FROM TV_Channel GROUP BY Country) AS SubQuery)",
        "SELECT Country FROM TV_Channel GROUP BY Country ORDER BY COUNT(id) DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 596,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Country, COUNT(id) AS ChannelCount FROM TV_Channel GROUP BY Country ORDER BY ChannelCount DESC LIMIT 1",
        "SELECT TOP 1 Country, COUNT(id) AS ChannelCount FROM TV_Channel GROUP BY Country ORDER BY ChannelCount DESC",
        "SELECT Country, COUNT(*) FROM TV_Channel GROUP BY Country HAVING COUNT(*) = (SELECT MAX(ChannelCount) FROM (SELECT COUNT(*) AS ChannelCount FROM TV_Channel GROUP BY Country) AS SubQuery)",
        "WITH CountryCounts AS (SELECT Country, COUNT(id) AS ChannelCount FROM TV_Channel GROUP BY Country) SELECT Country, ChannelCount FROM CountryCounts WHERE ChannelCount = (SELECT MAX(ChannelCount) FROM CountryCounts)",
        "SELECT Country, COUNT(id) FROM TV_Channel GROUP BY Country ORDER BY COUNT(id) DESC FETCH FIRST 1 ROW ONLY",
        "SELECT Country, COUNT(id) AS TotalChannels FROM TV_Channel GROUP BY Country ORDER BY TotalChannels DESC LIMIT 1",
        "SELECT * FROM (SELECT Country, COUNT(id) AS ChannelCount FROM TV_Channel GROUP BY Country ORDER BY ChannelCount DESC) WHERE ROWNUM = 1",
        "SELECT Country, MAX(ChannelCount) FROM (SELECT Country, COUNT(id) AS ChannelCount FROM TV_Channel GROUP BY Country) GROUP BY Country ORDER BY MAX(ChannelCount) DESC LIMIT 1",
        "SELECT Country, COUNT(id) AS ChannelCount FROM TV_Channel GROUP BY Country ORDER BY ChannelCount DESC LIMIT 1 OFFSET 0 ROWS",
        "SELECT FIRST Country, COUNT(id) AS ChannelCount FROM TV_Channel GROUP BY Country ORDER BY ChannelCount DESC"
      ]
    ]
  },
  {
    "id": 597,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT series_name) AS distinct_series_names, COUNT(DISTINCT Content) AS distinct_contents FROM TV_Channel",
        "SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel",
        "SELECT (SELECT COUNT(DISTINCT series_name) FROM TV_Channel) AS series_count, (SELECT COUNT(DISTINCT Content) FROM TV_Channel) AS content_count",
        "SELECT DISTINCT COUNT(series_name), COUNT(Content) FROM TV_Channel",
        "SELECT COUNT(DISTINCT TV_Channel.series_name) AS num_series, COUNT(DISTINCT TV_Channel.Content) AS num_contents FROM TV_Channel",
        "SELECT COUNT(DISTINCT t.series_name) AS SeriesCount, COUNT(DISTINCT t.Content) AS ContentCount FROM TV_Channel t",
        "SELECT COUNT(DISTINCT series_name) AS SeriesNameCount, COUNT(DISTINCT Content) AS ContentCount FROM TV_Channel",
        "SELECT DISTINCT COUNT(series_name) AS UniqueSeries, DISTINCT COUNT(Content) AS UniqueContents FROM TV_Channel",
        "SELECT COUNT(DISTINCT series_name) AS TotalDistinctSeries, COUNT(DISTINCT Content) AS TotalDistinctContents FROM TV_Channel",
        "SELECT COUNT(DISTINCT series_name) AS SeriesVariety, COUNT(DISTINCT Content) AS ContentVariety FROM TV_Channel"
      ]
    ]
  },
  {
    "id": 598,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel",
        "SELECT COUNT(DISTINCT series_name) AS UniqueSeriesNames, COUNT(DISTINCT Content) AS UniqueContentTypes FROM TV_Channel",
        "SELECT (SELECT COUNT(DISTINCT series_name) FROM TV_Channel) AS UniqueSeriesNames, (SELECT COUNT(DISTINCT Content) FROM TV_Channel) AS UniqueContentTypes",
        "SELECT COUNT(DISTINCT t.series_name), COUNT(DISTINCT t.Content) FROM TV_Channel AS t",
        "SELECT DISTINCT COUNT(series_name), COUNT(Content) FROM TV_Channel",
        "SELECT COUNT(DISTINCT series_name) AS SeriesCount, COUNT(DISTINCT Content) AS ContentCount FROM TV_Channel",
        "SELECT DISTINCT COUNT(series_name) AS UniqueSeries, DISTINCT COUNT(Content) AS UniqueContent FROM TV_Channel",
        "SELECT COUNT(DISTINCT series_name) AS SeriesNamesCount, COUNT(DISTINCT Content) AS ContentTypesCount FROM TV_Channel",
        "SELECT COUNT(DISTINCT series_name) AS TotalUniqueSeries, COUNT(DISTINCT Content) AS TotalUniqueContent FROM TV_Channel",
        "SELECT DISTINCT COUNT(series_name) AS Series, DISTINCT COUNT(Content) AS Content FROM TV_Channel"
      ]
    ]
  },
  {
    "id": 599,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'",
        "SELECT TV_Channel.Content FROM TV_Channel WHERE TV_Channel.series_name = 'Sky Radio'",
        "SELECT t.Content FROM TV_Channel t WHERE t.series_name = 'Sky Radio'",
        "SELECT Content FROM TV_Channel WHERE series_name LIKE 'Sky Radio'",
        "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio' LIMIT 1",
        "SELECT c.Content FROM TV_Channel AS c WHERE c.series_name = 'Sky Radio'",
        "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio' AND Content IS NOT NULL",
        "SELECT DISTINCT Content FROM TV_Channel WHERE series_name = 'Sky Radio'",
        "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio' ORDER BY id DESC LIMIT 1",
        "SELECT TOP 1 Content FROM TV_Channel WHERE series_name = 'Sky Radio'"
      ]
    ]
  },
  {
    "id": 600,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'",
        "SELECT TV_Channel.Content FROM TV_Channel WHERE TV_Channel.series_name = 'Sky Radio'",
        "SELECT t.Content FROM TV_Channel t WHERE t.series_name = 'Sky Radio'",
        "SELECT Content FROM TV_Channel WHERE series_name LIKE 'Sky Radio'",
        "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio' LIMIT 1",
        "SELECT c.Content FROM TV_Channel AS c WHERE c.series_name = 'Sky Radio'",
        "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio' AND Content IS NOT NULL",
        "SELECT DISTINCT Content FROM TV_Channel WHERE series_name = 'Sky Radio'",
        "SELECT Content FROM TV_Channel WHERE series_name IN ('Sky Radio')",
        "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio' FETCH FIRST 1 ROWS ONLY"
      ]
    ]
  },
  {
    "id": 601,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'",
        "SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.series_name = 'Sky Radio'",
        "SELECT Package_Option FROM TV_Channel WHERE series_name LIKE 'Sky Radio'",
        "SELECT t.Package_Option FROM TV_Channel AS t WHERE t.series_name = 'Sky Radio'",
        "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio' LIMIT 1",
        "SELECT TOP 1 Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'",
        "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio' AND Package_Option IS NOT NULL",
        "SELECT DISTINCT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'",
        "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio' ORDER BY Package_Option DESC LIMIT 1",
        "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio' FETCH FIRST 1 ROWS ONLY"
      ]
    ]
  },
  {
    "id": 602,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'",
        "SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.series_name = 'Sky Radio'",
        "SELECT Package_Option FROM TV_Channel WHERE series_name LIKE 'Sky Radio'",
        "SELECT DISTINCT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'",
        "SELECT t.Package_Option FROM TV_Channel AS t WHERE t.series_name = 'Sky Radio'",
        "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio' GROUP BY Package_Option",
        "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio' AND Package_Option IS NOT NULL",
        "SELECT Package_Option FROM TV_Channel WHERE series_name IN ('Sky Radio')",
        "SELECT Package_Option FROM TV_Channel tc WHERE tc.series_name = 'Sky Radio'",
        "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio' ORDER BY Package_Option"
      ]
    ]
  },
  {
    "id": 603,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'",
        "SELECT COUNT(id) FROM TV_Channel WHERE Language = 'English'",
        "SELECT COUNT(*) AS EnglishChannels FROM TV_Channel WHERE Language = 'English'",
        "SELECT COUNT(DISTINCT id) FROM TV_Channel WHERE Language = 'English'",
        "SELECT COUNT(*) FROM TV_Channel WHERE Language LIKE 'English'",
        "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English' GROUP BY Language",
        "SELECT Language, COUNT(*) FROM TV_Channel WHERE Language = 'English' GROUP BY Language",
        "SELECT COUNT(*) FROM TV_Channel WHERE LOWER(Language) = 'english'",
        "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English' AND id IS NOT NULL",
        "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English' AND id IS NOT NULL GROUP BY Language"
      ]
    ]
  },
  {
    "id": 604,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'",
        "SELECT COUNT(id) FROM TV_Channel WHERE Language = 'English'",
        "SELECT COUNT(*) AS EnglishChannels FROM TV_Channel WHERE Language = 'English'",
        "SELECT COUNT(DISTINCT id) FROM TV_Channel WHERE Language = 'English'",
        "SELECT COUNT(*) FROM TV_Channel WHERE Language LIKE 'English'",
        "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English' GROUP BY Language",
        "SELECT Language, COUNT(*) FROM TV_Channel WHERE Language = 'English' GROUP BY Language",
        "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English' AND id IS NOT NULL",
        "SELECT COUNT(*) FROM TV_Channel WHERE UPPER(Language) = 'ENGLISH'",
        "SELECT COUNT(*) FROM TV_Channel WHERE LOWER(Language) = 'english'"
      ]
    ]
  },
  {
    "id": 605,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Language, COUNT(id) AS Channel_Count FROM TV_Channel GROUP BY Language HAVING Channel_Count = (SELECT MIN(Channel_Count) FROM (SELECT COUNT(id) AS Channel_Count FROM TV_Channel GROUP BY Language) AS SubQuery)",
        "SELECT Language, COUNT(id) FROM TV_Channel GROUP BY Language ORDER BY COUNT(id) ASC LIMIT 1",
        "SELECT T1.Language, T1.Channel_Count FROM (SELECT Language, COUNT(id) AS Channel_Count FROM TV_Channel GROUP BY Language) AS T1 WHERE T1.Channel_Count = (SELECT MIN(Channel_Count) FROM (SELECT COUNT(id) AS Channel_Count FROM TV_Channel GROUP BY Language) AS T2)",
        "SELECT Language, MIN(Channel_Count) FROM (SELECT Language, COUNT(id) AS Channel_Count FROM TV_Channel GROUP BY Language) AS SubQuery GROUP BY Language",
        "SELECT Language, COUNT(*) AS Num_Channels FROM TV_Channel GROUP BY Language HAVING Num_Channels = (SELECT MIN(Num_Channels) FROM (SELECT COUNT(*) AS Num_Channels FROM TV_Channel GROUP BY Language) AS SubQuery)",
        "SELECT TOP 1 Language, COUNT(id) AS Channel_Count FROM TV_Channel GROUP BY Language ORDER BY Channel_Count ASC",
        "SELECT Language, COUNT(id) AS Channel_Count FROM TV_Channel GROUP BY Language HAVING Channel_Count = (SELECT MIN(Channel_Count) FROM TV_Channel GROUP BY Language)",
        "SELECT Language, COUNT(id) FROM TV_Channel GROUP BY Language HAVING COUNT(id) = (SELECT MIN(COUNT(id)) FROM TV_Channel GROUP BY Language)",
        "SELECT Language, COUNT(id) AS Channel_Count FROM TV_Channel GROUP BY Language ORDER BY Channel_Count ASC FETCH FIRST 1 ROWS ONLY",
        "SELECT Language, COUNT(id) FROM TV_Channel GROUP BY Language HAVING COUNT(id) = (SELECT MIN(COUNT(id)) FROM TV_Channel GROUP BY Language)"
      ]
    ]
  },
  {
    "id": 606,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Language, COUNT(id) AS ChannelCount FROM TV_Channel GROUP BY Language HAVING ChannelCount = (SELECT MIN(ChannelCount) FROM (SELECT COUNT(id) AS ChannelCount FROM TV_Channel GROUP BY Language) AS SubQuery)",
        "SELECT Language, COUNT(*) AS NumChannels FROM TV_Channel GROUP BY Language ORDER BY NumChannels ASC LIMIT 1",
        "SELECT T1.Language, COUNT(T1.id) AS ChannelCount FROM TV_Channel AS T1 GROUP BY T1.Language HAVING ChannelCount = (SELECT MIN(ChannelCount) FROM (SELECT COUNT(id) AS ChannelCount FROM TV_Channel GROUP BY Language) T2)",
        "SELECT Language, COUNT(id) FROM TV_Channel GROUP BY Language HAVING COUNT(id) = (SELECT MIN(COUNT(id)) FROM TV_Channel GROUP BY Language)",
        "WITH LanguageCounts AS (SELECT Language, COUNT(*) AS Count FROM TV_Channel GROUP BY Language) SELECT Language, Count FROM LanguageCounts WHERE Count = (SELECT MIN(Count) FROM LanguageCounts)",
        "SELECT Language, COUNT(id) AS Count FROM TV_Channel GROUP BY Language ORDER BY Count ASC FETCH FIRST 1 ROWS ONLY",
        "SELECT Language, MIN(Count) FROM (SELECT Language, COUNT(*) AS Count FROM TV_Channel GROUP BY Language) GROUP BY Language ORDER BY MIN(Count) ASC",
        "SELECT A.Language, A.Count FROM (SELECT Language, COUNT(*) AS Count FROM TV_Channel GROUP BY Language) A WHERE A.Count = (SELECT MIN(B.Count) FROM (SELECT COUNT(*) AS Count FROM TV_Channel GROUP BY Language) B)",
        "SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM TV_Channel GROUP BY Language)",
        "SELECT TOP 1 WITH TIES Language, COUNT(*) AS ChannelCount FROM TV_Channel GROUP BY Language ORDER BY ChannelCount ASC"
      ]
    ]
  },
  {
    "id": 607,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Language, COUNT(id) AS Channel_Count FROM TV_Channel GROUP BY Language",
        "SELECT Language, COUNT(DISTINCT id) AS Channel_Count FROM TV_Channel GROUP BY Language",
        "SELECT Language, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY Language",
        "SELECT TV_Channel.Language, COUNT(TV_Channel.id) AS Channel_Count FROM TV_Channel GROUP BY TV_Channel.Language",
        "SELECT Language, COUNT(id) FROM TV_Channel GROUP BY Language",
        "SELECT COUNT(id), Language FROM TV_Channel GROUP BY Language",
        "SELECT Language, COUNT(id) AS Num_Channels FROM TV_Channel GROUP BY Language",
        "SELECT Language, COUNT(DISTINCT id) FROM TV_Channel GROUP BY Language",
        "SELECT COUNT(*) AS Channel_Count, Language FROM TV_Channel GROUP BY Language",
        "SELECT Language, COUNT(id) AS Total_Channels FROM TV_Channel GROUP BY Language"
      ]
    ]
  },
  {
    "id": 608,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Language, COUNT(id) AS Channel_Count FROM TV_Channel GROUP BY Language",
        "SELECT Language, COUNT(DISTINCT id) AS Channel_Count FROM TV_Channel GROUP BY Language",
        "SELECT Language, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY Language",
        "SELECT TV_Channel.Language, COUNT(TV_Channel.id) AS Channel_Count FROM TV_Channel GROUP BY TV_Channel.Language",
        "SELECT Language, COUNT(id) FROM TV_Channel GROUP BY Language",
        "SELECT COUNT(id), Language FROM TV_Channel GROUP BY Language",
        "SELECT Language, COUNT(DISTINCT id) FROM TV_Channel GROUP BY Language",
        "SELECT COUNT(*), Language FROM TV_Channel GROUP BY Language",
        "SELECT TV_Channel.Language, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY TV_Channel.Language",
        "SELECT TV_Channel.Language, COUNT(DISTINCT TV_Channel.id) AS Channel_Count FROM TV_Channel GROUP BY TV_Channel.Language"
      ]
    ]
  },
  {
    "id": 609,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = 'The Rise of the Blue Beetle!'",
        "SELECT series_name FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Title = 'The Rise of the Blue Beetle!')",
        "SELECT T1.series_name FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'",
        "SELECT series_name FROM TV_Channel, Cartoon WHERE TV_Channel.id = Cartoon.Channel AND Cartoon.Title = 'The Rise of the Blue Beetle!'",
        "SELECT series_name FROM TV_Channel WHERE id = (SELECT Channel FROM Cartoon WHERE Title = 'The Rise of the Blue Beetle!')",
        "SELECT T.series_name FROM TV_Channel T JOIN Cartoon C ON T.id = C.Channel WHERE C.Title = 'The Rise of the Blue Beetle!'",
        "SELECT series_name FROM TV_Channel INNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel AND Cartoon.Title = 'The Rise of the Blue Beetle!'",
        "SELECT TV_Channel.series_name FROM TV_Channel, Cartoon WHERE TV_Channel.id = Cartoon.Channel AND Cartoon.Title = 'The Rise of the Blue Beetle!'",
        "SELECT series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!' ORDER BY series_name",
        "SELECT DISTINCT series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = 'The Rise of the Blue Beetle!'"
      ]
    ]
  },
  {
    "id": 610,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = 'The Rise of the Blue Beetle'",
        "SELECT series_name FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Title = 'The Rise of the Blue Beetle')",
        "SELECT T1.series_name FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle'",
        "SELECT series_name FROM TV_Channel, Cartoon WHERE TV_Channel.id = Cartoon.Channel AND Cartoon.Title = 'The Rise of the Blue Beetle'",
        "SELECT series_name FROM TV_Channel WHERE id = (SELECT Channel FROM Cartoon WHERE Title = 'The Rise of the Blue Beetle')",
        "SELECT T1.series_name FROM TV_Channel T1 JOIN Cartoon T2 ON T1.id = T2.Channel AND T2.Title = 'The Rise of the Blue Beetle'",
        "SELECT series_name FROM TV_Channel INNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel AND Cartoon.Title = 'The Rise of the Blue Beetle'",
        "SELECT DISTINCT series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = 'The Rise of the Blue Beetle'",
        "SELECT series_name FROM TV_Channel WHERE EXISTS (SELECT 1 FROM Cartoon WHERE Cartoon.Channel = TV_Channel.id AND Cartoon.Title = 'The Rise of the Blue Beetle')",
        "SELECT TV_Channel.series_name FROM TV_Channel, Cartoon WHERE TV_Channel.id = Cartoon.Channel AND Cartoon.Title = 'The Rise of the Blue Beetle'"
      ]
    ]
  },
  {
    "id": 611,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio'",
        "SELECT c.Title FROM Cartoon c INNER JOIN TV_Channel t ON c.Channel = t.id WHERE t.series_name = 'Sky Radio'",
        "SELECT Title FROM Cartoon, TV_Channel WHERE Cartoon.Channel = TV_Channel.id AND TV_Channel.series_name = 'Sky Radio'",
        "SELECT Title FROM Cartoon INNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id AND TV_Channel.series_name = 'Sky Radio'",
        "SELECT Cartoon.Title FROM Cartoon, TV_Channel WHERE Cartoon.Channel = TV_Channel.id AND TV_Channel.series_name = 'Sky Radio'",
        "SELECT c.Title FROM Cartoon AS c JOIN TV_Channel AS t ON c.Channel = t.id WHERE t.series_name = 'Sky Radio'",
        "SELECT Title FROM Cartoon c JOIN TV_Channel t ON c.Channel = t.id WHERE t.series_name = 'Sky Radio'",
        "SELECT Cartoon.Title FROM Cartoon INNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio'",
        "SELECT c.Title FROM Cartoon c, TV_Channel t WHERE c.Channel = t.id AND t.series_name = 'Sky Radio'",
        "SELECT Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio'"
      ]
    ]
  },
  {
    "id": 612,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio'",
        "SELECT c.Title FROM Cartoon c INNER JOIN TV_Channel t ON c.Channel = t.id WHERE t.series_name = 'Sky Radio'",
        "SELECT Title FROM Cartoon, TV_Channel WHERE Cartoon.Channel = TV_Channel.id AND TV_Channel.series_name = 'Sky Radio'",
        "SELECT Title FROM Cartoon INNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id AND TV_Channel.series_name = 'Sky Radio'",
        "SELECT c.Title FROM Cartoon AS c, TV_Channel AS t WHERE c.Channel = t.id AND t.series_name = 'Sky Radio'",
        "SELECT c.Title FROM Cartoon c JOIN TV_Channel t ON c.Channel = t.id AND t.series_name = 'Sky Radio'",
        "SELECT Title FROM Cartoon WHERE Channel IN (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio')",
        "SELECT Cartoon.Title FROM Cartoon, TV_Channel WHERE Cartoon.Channel = TV_Channel.id AND TV_Channel.series_name = 'Sky Radio'",
        "SELECT c.Title FROM Cartoon c LEFT JOIN TV_Channel t ON c.Channel = t.id WHERE t.series_name = 'Sky Radio'",
        "SELECT Title FROM Cartoon WHERE EXISTS (SELECT 1 FROM TV_Channel WHERE TV_Channel.id = Cartoon.Channel AND series_name = 'Sky Radio')"
      ]
    ]
  },
  {
    "id": 613,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Episode FROM TV_series ORDER BY Rating ASC, id ASC",
        "SELECT Episode FROM TV_series ORDER BY Rating, id",
        "SELECT TV_series.Episode FROM TV_series ORDER BY TV_series.Rating ASC, TV_series.id ASC",
        "SELECT Episode FROM TV_series SORT BY Rating ASC, id ASC",
        "SELECT Episode FROM TV_series ORDER BY Rating ASCENDING, id ASCENDING",
        "SELECT Episode FROM TV_series ORDER BY Rating ASC, id ASCENDING",
        "SELECT * FROM TV_series ORDER BY Rating ASC, id ASC",
        "SELECT Episode FROM TV_series ORDER BY Rating ASC, id ASC",
        "SELECT Episode FROM TV_series ORDER BY Rating, id ASC",
        "SELECT Episode FROM TV_series ORDER BY Rating ASC, id ASC"
      ]
    ]
  },
  {
    "id": 614,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Episode FROM TV_series ORDER BY Rating DESC, id ASC",
        "SELECT Episode FROM TV_series ORDER BY Rating DESC, id",
        "SELECT * FROM TV_series ORDER BY Rating DESC, id ASC",
        "SELECT Episode, Rating, id FROM TV_series ORDER BY Rating DESC, id ASC",
        "SELECT Episode FROM TV_series ORDER BY Rating, id",
        "SELECT Episode, id FROM TV_series ORDER BY Rating DESC, id ASC",
        "SELECT Episode FROM TV_series ORDER BY Rating DESC, id ASCENDING",
        "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC, id ASC",
        "SELECT id, Episode FROM TV_series ORDER BY Rating DESC, id ASC",
        "SELECT Episode FROM TV_series ORDER BY Rating DESC, id ASCENDING"
      ]
    ]
  },
  {
    "id": 615,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC, Episode ASC LIMIT 3",
        "SELECT Episode, Rating FROM TV_series WHERE Rating IS NOT NULL ORDER BY Rating DESC, Episode LIMIT 3",
        "SELECT TOP 3 Episode, Rating FROM TV_series ORDER BY Rating DESC, Episode",
        "SELECT Episode, Rating FROM (SELECT Episode, Rating FROM TV_series ORDER BY Episode) AS sorted_by_episode ORDER BY Rating DESC LIMIT 3",
        "SELECT * FROM (SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC, Episode ASC) AS ranked LIMIT 3",
        "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC, Episode COLLATE NOCASE ASC LIMIT 3",
        "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC, Episode ASC FETCH FIRST 3 ROWS ONLY",
        "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC, Episode ASC LIMIT 3",
        "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC, Episode ASC LIMIT 3",
        "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC, Episode ASC LIMIT 3"
      ]
    ]
  },
  {
    "id": 616,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3",
        "SELECT TOP 3 Episode, Rating FROM TV_series ORDER BY Rating DESC",
        "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC FETCH FIRST 3 ROWS ONLY",
        "SELECT * FROM (SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC) WHERE ROWNUM <= 3",
        "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3 OFFSET 0",
        "SELECT Episode, Rating FROM (SELECT Episode, Rating, RANK() OVER (ORDER BY Rating DESC) as rank FROM TV_series) sub WHERE rank <= 3",
        "SELECT Episode, Rating FROM TV_series WHERE Rating IN (SELECT DISTINCT TOP 3 Rating FROM TV_series ORDER BY Rating DESC)",
        "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC, Episode ASC LIMIT 3",
        "SELECT Episode, Rating FROM TV_series AS t WHERE 3 > (SELECT COUNT(DISTINCT Rating) FROM TV_series WHERE Rating > t.Rating)",
        "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3 OFFSET 0 ROWS"
      ]
    ]
  },
  {
    "id": 617,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT MIN(Share) AS Min_Share, MAX(Share) AS Max_Share FROM TV_series",
        "SELECT MIN(Share) AS Minimum_Share, MAX(Share) AS Maximum_Share FROM TV_series",
        "SELECT MIN(Share), MAX(Share) FROM TV_series",
        "SELECT MIN(Share) MINIMUM, MAX(Share) MAXIMUM FROM TV_series",
        "SELECT MINIMUM(Share), MAXIMUM(Share) FROM TV_series",
        "SELECT MIN(Share) as 'Minimum Share', MAX(Share) as 'Maximum Share' FROM TV_series",
        "SELECT MIN(Share) MinShare, MAX(Share) MaxShare FROM TV_series",
        "SELECT MIN(Share) MinimumShareValue, MAX(Share) MaximumShareValue FROM TV_series",
        "SELECT MIN(Share) as Minimum_Share_Value, MAX(Share) as Maximum_Share_Value FROM TV_series",
        "SELECT MIN(Share) as MinValue, MAX(Share) as MaxValue FROM TV_series"
      ]
    ]
  },
  {
    "id": 618,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT MAX(Share), MIN(Share) FROM TV_series",
        "SELECT MAX(Share) AS MaximumShare, MIN(Share) AS MinimumShare FROM TV_series",
        "SELECT (SELECT MAX(Share) FROM TV_series) AS MaxShare, (SELECT MIN(Share) FROM TV_series) AS MinShare",
        "SELECT TOP 1 MAX(Share) AS MaxShare, MIN(Share) AS MinShare FROM TV_series",
        "SELECT MAX(Share) Maximum, MIN(Share) Minimum FROM TV_series",
        "SELECT MAX(Share) 'Maximum Share', MIN(Share) 'Minimum Share' FROM TV_series",
        "SELECT MAX(Share) max_share, MIN(Share) min_share FROM TV_series",
        "SELECT MAX(Share) AS 'Max Share', MIN(Share) AS 'Min Share' FROM TV_series GROUP BY Share",
        "SELECT MAX(Share) AS Maximum_Share, MIN(Share) AS Minimum_Share FROM TV_series",
        "SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM TV_series"
      ]
    ]
  },
  {
    "id": 619,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
        "SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = 'A Love of a Lifetime'",
        "SELECT Air_Date FROM TV_series WHERE Episode LIKE 'A Love of a Lifetime'",
        "SELECT t.Air_Date FROM TV_series AS t WHERE t.Episode = 'A Love of a Lifetime'",
        "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime' LIMIT 1",
        "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime' AND Air_Date IS NOT NULL",
        "SELECT TOP 1 Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
        "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime' ORDER BY Air_Date DESC LIMIT 1",
        "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime' ORDER BY Air_Date ASC LIMIT 1",
        "SELECT DISTINCT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'"
      ]
    ]
  },
  {
    "id": 620,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
        "SELECT Air_Date FROM TV_series WHERE Episode LIKE 'A Love of a Lifetime'",
        "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime' LIMIT 1",
        "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime' ORDER BY Air_Date DESC LIMIT 1",
        "SELECT TOP 1 Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
        "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime' AND Air_Date IS NOT NULL",
        "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime' ORDER BY Air_Date ASC",
        "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime' ORDER BY Air_Date",
        "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime' FETCH FIRST 1 ROW ONLY",
        "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime' ORDER BY Air_Date LIMIT 1"
      ]
    ]
  },
  {
    "id": 621,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
        "SELECT t.Weekly_Rank FROM TV_series t WHERE t.Episode = 'A Love of a Lifetime'",
        "SELECT Weekly_Rank FROM TV_series WHERE Episode LIKE 'A Love of a Lifetime'",
        "SELECT Weekly_Rank FROM TV_series AS t WHERE t.Episode = 'A Love of a Lifetime'",
        "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime' LIMIT 1",
        "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime' AND Weekly_Rank IS NOT NULL",
        "SELECT t.Weekly_Rank FROM TV_series t WHERE t.Episode LIKE '%A Love of a Lifetime%'",
        "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime' ORDER BY Weekly_Rank DESC LIMIT 1",
        "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime' ORDER BY Weekly_Rank ASC LIMIT 1",
        "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime' FETCH FIRST 1 ROWS ONLY"
      ]
    ]
  },
  {
    "id": 622,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
        "SELECT Weekly_Rank FROM TV_series WHERE Episode LIKE 'A Love of a Lifetime'",
        "SELECT t.Weekly_Rank FROM TV_series t WHERE t.Episode = 'A Love of a Lifetime'",
        "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime' LIMIT 1",
        "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime' ORDER BY Air_Date DESC LIMIT 1",
        "SELECT TOP 1 Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
        "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime' AND Channel = (SELECT id FROM TV_Channel WHERE series_name = 'A Love of a Lifetime')",
        "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime' AND Rating IS NOT NULL",
        "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime' AND Weekly_Rank IS NOT NULL",
        "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime' AND Viewers_m > 0"
      ]
    ]
  },
  {
    "id": 623,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = 'A Love of a Lifetime'",
        "SELECT series_name FROM TV_Channel WHERE id IN (SELECT Channel FROM TV_series WHERE Episode = 'A Love of a Lifetime')",
        "SELECT c.series_name FROM TV_Channel c INNER JOIN TV_series s ON c.id = s.Channel WHERE s.Episode = 'A Love of a Lifetime'",
        "SELECT series_name FROM TV_Channel, TV_series WHERE TV_Channel.id = TV_series.Channel AND TV_series.Episode = 'A Love of a Lifetime'",
        "SELECT series_name FROM TV_Channel WHERE id = (SELECT Channel FROM TV_series WHERE Episode = 'A Love of a Lifetime')",
        "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'",
        "SELECT series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel AND TV_series.Episode = 'A Love of a Lifetime'",
        "SELECT TV_Channel.series_name FROM TV_Channel INNER JOIN TV_series ON TV_Channel.id = TV_series.Channel AND TV_series.Episode = 'A Love of a Lifetime'",
        "SELECT series_name FROM TV_Channel AS TC JOIN TV_series AS TS ON TC.id = TS.Channel WHERE TS.Episode = 'A Love of a Lifetime'",
        "SELECT series_name FROM TV_Channel WHERE id = (SELECT Channel FROM TV_series WHERE Episode = 'A Love of a Lifetime' LIMIT 1)"
      ]
    ]
  },
  {
    "id": 624,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT series_name FROM TV_Channel WHERE id IN (SELECT Channel FROM TV_series WHERE Episode = 'A Love of a Lifetime')",
        "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'",
        "SELECT series_name FROM TV_Channel INNER JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = 'A Love of a Lifetime'",
        "SELECT T1.series_name FROM TV_Channel T1, TV_series T2 WHERE T1.id = T2.Channel AND T2.Episode = 'A Love of a Lifetime'",
        "SELECT series_name FROM TV_Channel WHERE id = (SELECT Channel FROM TV_series WHERE Episode = 'A Love of a Lifetime' LIMIT 1)",
        "SELECT DISTINCT series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = 'A Love of a Lifetime'",
        "SELECT series_name FROM TV_Channel AS TC JOIN TV_series AS TS ON TC.id = TS.Channel AND TS.Episode = 'A Love of a Lifetime'",
        "SELECT series_name FROM TV_Channel WHERE EXISTS (SELECT 1 FROM TV_series WHERE TV_series.Channel = TV_Channel.id AND Episode = 'A Love of a Lifetime')",
        "SELECT series_name FROM TV_Channel, TV_series WHERE TV_Channel.id = TV_series.Channel AND TV_series.Episode = 'A Love of a Lifetime'",
        "SELECT series_name FROM TV_Channel tc JOIN TV_series ts ON tc.id = ts.Channel WHERE ts.Episode = 'A Love of a Lifetime'"
      ]
    ]
  },
  {
    "id": 625,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio'",
        "SELECT Episode FROM TV_series, TV_Channel WHERE TV_series.Channel = TV_Channel.id AND TV_Channel.series_name = 'Sky Radio'",
        "SELECT e.Episode FROM TV_series AS e INNER JOIN TV_Channel AS c ON e.Channel = c.id WHERE c.series_name = 'Sky Radio'",
        "SELECT Episode FROM TV_series INNER JOIN TV_Channel ON TV_series.Channel = TV_Channel.id AND TV_Channel.series_name = 'Sky Radio'",
        "SELECT t.Episode FROM TV_series t JOIN TV_Channel c ON t.Channel = c.id WHERE c.series_name = 'Sky Radio'",
        "SELECT Episode FROM TV_series t, TV_Channel c WHERE t.Channel = c.id AND c.series_name = 'Sky Radio'",
        "SELECT t.Episode FROM TV_series t, TV_Channel c WHERE t.Channel = c.id AND c.series_name = 'Sky Radio'",
        "SELECT Episode FROM TV_series WHERE Channel IN (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio')",
        "SELECT t.Episode FROM TV_series t INNER JOIN TV_Channel c ON t.Channel = c.id WHERE c.series_name = 'Sky Radio'",
        "SELECT Episode FROM TV_series WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio')"
      ]
    ]
  },
  {
    "id": 626,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'",
        "SELECT Episode FROM TV_series WHERE Channel IN (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio')",
        "SELECT TV_series.Episode FROM TV_series INNER JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio'",
        "SELECT episode FROM TV_series, TV_Channel WHERE TV_series.Channel = TV_Channel.id AND TV_Channel.series_name = 'Sky Radio'",
        "SELECT a.Episode FROM TV_series a JOIN TV_Channel b ON a.Channel = b.id WHERE b.series_name = 'Sky Radio'",
        "SELECT Episode FROM TV_series AS s JOIN TV_Channel AS c ON s.Channel = c.id WHERE c.series_name = 'Sky Radio'",
        "SELECT e.Episode FROM TV_series e, TV_Channel s WHERE e.Channel = s.id AND s.series_name = 'Sky Radio'",
        "SELECT Episode FROM TV_series WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio')",
        "SELECT t.Episode FROM TV_series t INNER JOIN TV_Channel c ON t.Channel = c.id WHERE c.series_name = 'Sky Radio'",
        "SELECT Episode FROM TV_series t JOIN TV_Channel c ON t.Channel = c.id WHERE c.series_name = 'Sky Radio'"
      ]
    ]
  },
  {
    "id": 627,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Directed_by, COUNT(id) AS NumberOfCartoons FROM Cartoon GROUP BY Directed_by",
        "SELECT Directed_by, COUNT(*) AS TotalCartoons FROM Cartoon GROUP BY Directed_by",
        "SELECT Directed_by, COUNT(id) FROM Cartoon GROUP BY Directed_by",
        "SELECT COUNT(id), Directed_by FROM Cartoon GROUP BY Directed_by",
        "SELECT Directed_by, COUNT(id) AS CartoonsCount FROM Cartoon GROUP BY Directed_by ORDER BY Directed_by",
        "SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by ORDER BY COUNT(*) DESC",
        "SELECT Directed_by, COUNT(id) AS Total FROM Cartoon GROUP BY Directed_by HAVING COUNT(id) > 0",
        "SELECT Directed_by, COUNT(id) AS CountOfCartoons FROM Cartoon GROUP BY Directed_by ORDER BY CountOfCartoons DESC",
        "SELECT Directed_by, COUNT(*) AS NumberOfCartoons FROM Cartoon GROUP BY Directed_by ORDER BY NumberOfCartoons",
        "SELECT Directed_by, COUNT(id) FROM Cartoon GROUP BY Directed_by HAVING COUNT(id) > 1"
      ]
    ]
  },
  {
    "id": 628,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Directed_by, COUNT(id) AS Number_of_Cartoons FROM Cartoon GROUP BY Directed_by",
        "SELECT Directed_by, COUNT(*) AS Total_Cartoons FROM Cartoon GROUP BY Directed_by",
        "SELECT COUNT(id), Directed_by FROM Cartoon GROUP BY Directed_by",
        "SELECT Directed_by, COUNT(id) FROM Cartoon GROUP BY Directed_by",
        "SELECT Directed_by, COUNT(Cartoon.id) AS Cartoons_Count FROM Cartoon GROUP BY Directed_by",
        "SELECT Directed_by, COUNT(DISTINCT id) AS Cartoon_Count FROM Cartoon GROUP BY Directed_by",
        "SELECT Directed_by, COUNT(id) AS Total FROM Cartoon GROUP BY Directed_by ORDER BY COUNT(id) DESC",
        "SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by ORDER BY COUNT(*) DESC",
        "SELECT Directed_by, COUNT(id) AS Count_of_Cartoons FROM Cartoon GROUP BY Directed_by ORDER BY Directed_by",
        "SELECT Directed_by, COUNT(id) AS Number_of_Cartoons FROM Cartoon GROUP BY Directed_by HAVING COUNT(id) > 0"
      ]
    ]
  },
  {
    "id": 629,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Production_code, Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)",
        "SELECT C.Production_code, C.Channel FROM Cartoon C WHERE C.Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)",
        "SELECT Production_code, Channel FROM Cartoon WHERE Original_air_date IN (SELECT MAX(Original_air_date) FROM Cartoon)",
        "SELECT Production_code, Channel FROM Cartoon WHERE Original_air_date = (SELECT TOP 1 Original_air_date FROM Cartoon ORDER BY Original_air_date DESC)",
        "SELECT C.Production_code, C.Channel FROM Cartoon C WHERE C.Original_air_date = (SELECT MAX(C.Original_air_date) FROM Cartoon C)",
        "SELECT Production_code, Channel FROM Cartoon WHERE Original_air_date = (SELECT Original_air_date FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1)",
        "SELECT Production_code, Channel FROM Cartoon WHERE Original_air_date = (SELECT Original_air_date FROM Cartoon ORDER BY Original_air_date DESC FETCH FIRST 1 ROW ONLY)",
        "SELECT Production_code, Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(C.Original_air_date) FROM Cartoon C)",
        "SELECT Production_code, Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon AS C)",
        "SELECT Production_code, Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon GROUP BY Original_air_date ORDER BY Original_air_date DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 630,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1",
        "SELECT C.Production_code, C.Channel FROM Cartoon C WHERE C.Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)",
        "SELECT TOP 1 Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC",
        "SELECT Production_code, Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)",
        "SELECT C.Production_code, T.series_name FROM Cartoon C JOIN TV_Channel T ON C.Channel = T.id WHERE C.Original_air_date IN (SELECT MAX(Original_air_date) FROM Cartoon)",
        "SELECT Production_code, Channel FROM (SELECT Production_code, Channel, RANK() OVER (ORDER BY Original_air_date DESC) AS rk FROM Cartoon) AS Ranked WHERE rk = 1",
        "SELECT C.Production_code, T.series_name AS Channel FROM Cartoon C INNER JOIN TV_Channel T ON C.Channel = T.id WHERE C.Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon C)",
        "SELECT C.Production_code, T.series_name FROM Cartoon C, TV_Channel T WHERE C.Channel = T.id AND C.Original_air_date = (SELECT MAX(C.Original_air_date) FROM Cartoon C)",
        "SELECT FIRST(Production_code), FIRST(Channel) FROM Cartoon ORDER BY Original_air_date DESC",
        "SELECT C.Production_code, T.series_name FROM Cartoon C LEFT JOIN TV_Channel T ON C.Channel = T.id WHERE C.Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)"
      ]
    ]
  },
  {
    "id": 631,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'High definition TV'",
        "SELECT series_name, Package_Option FROM TV_Channel WHERE Hight_definition_TV = 'High definition TV'",
        "SELECT T.Package_Option, T.series_name FROM TV_Channel AS T WHERE T.Hight_definition_TV = 'High definition TV'",
        "SELECT series_name AS SeriesName, Package_Option AS PackageChoice FROM TV_Channel WHERE Hight_definition_TV = 'High definition TV'",
        "SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV LIKE 'High definition TV'",
        "SELECT series_name, Package_Option FROM TV_Channel WHERE Hight_definition_TV = 'High definition TV' ORDER BY series_name",
        "SELECT DISTINCT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'High definition TV'",
        "SELECT series_name, Package_Option FROM TV_Channel WHERE Hight_definition_TV = 'High definition TV' GROUP BY series_name, Package_Option",
        "SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'High definition TV' AND Package_Option IS NOT NULL",
        "SELECT series_name, Package_Option FROM TV_Channel WHERE Hight_definition_TV = 'High definition TV' AND Package_Option IS NOT NULL ORDER BY Package_Option"
      ]
    ]
  },
  {
    "id": 632,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes'",
        "SELECT series_name, Package_Option FROM TV_Channel WHERE Hight_definition_TV = 'Yes'",
        "SELECT T.series_name, T.Package_Option FROM TV_Channel AS T WHERE T.Hight_definition_TV = 'Yes'",
        "SELECT series_name AS SeriesName, Package_Option AS PackageOptions FROM TV_Channel WHERE Hight_definition_TV = 'Yes'",
        "SELECT series_name, Package_Option FROM TV_Channel WHERE Hight_definition_TV LIKE 'Yes'",
        "SELECT series_name, Package_Option FROM TV_Channel WHERE Hight_definition_TV = 'Yes' ORDER BY series_name",
        "SELECT DISTINCT series_name, Package_Option FROM TV_Channel WHERE Hight_definition_TV = 'Yes'",
        "SELECT series_name, Package_Option FROM TV_Channel WHERE Hight_definition_TV = 'Yes' GROUP BY series_name, Package_Option",
        "SELECT series_name, Package_Option FROM TV_Channel WHERE Hight_definition_TV = 'Yes' AND Package_Option IS NOT NULL",
        "SELECT series_name, Package_Option FROM TV_Channel WHERE Hight_definition_TV = 'Yes' AND Package_Option <> ''"
      ]
    ]
  },
  {
    "id": 633,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT DISTINCT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'Todd Casey'",
        "SELECT DISTINCT country FROM TV_Channel INNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'Todd Casey'",
        "SELECT DISTINCT TV_Channel.Country FROM TV_Channel, Cartoon WHERE TV_Channel.id = Cartoon.Channel AND Cartoon.Written_by = 'Todd Casey'",
        "SELECT DISTINCT c.Country FROM TV_Channel AS c JOIN Cartoon AS ct ON c.id = ct.Channel WHERE ct.Written_by = 'Todd Casey'",
        "SELECT DISTINCT Country FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')",
        "SELECT DISTINCT Country FROM TV_Channel tc JOIN Cartoon c ON tc.id = c.Channel AND c.Written_by = 'Todd Casey'",
        "SELECT DISTINCT Country FROM TV_Channel WHERE EXISTS (SELECT 1 FROM Cartoon WHERE Cartoon.Channel = TV_Channel.id AND Cartoon.Written_by = 'Todd Casey')",
        "SELECT Country FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey') GROUP BY Country",
        "SELECT DISTINCT Country FROM TV_Channel tc INNER JOIN Cartoon c ON tc.id = c.Channel WHERE c.Written_by = 'Todd Casey'",
        "SELECT DISTINCT Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel AND Cartoon.Written_by = 'Todd Casey'"
      ]
    ]
  },
  {
    "id": 634,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT DISTINCT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'Todd Casey'",
        "SELECT DISTINCT country FROM TV_Channel INNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'Todd Casey'",
        "SELECT DISTINCT c.Country FROM TV_Channel c, Cartoon ct WHERE c.id = ct.Channel AND ct.Written_by = 'Todd Casey'",
        "SELECT DISTINCT Country FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')",
        "SELECT DISTINCT Country FROM TV_Channel tc JOIN Cartoon c ON tc.id = c.Channel AND c.Written_by = 'Todd Casey'",
        "SELECT DISTINCT c.Country FROM TV_Channel c INNER JOIN Cartoon ct ON c.id = ct.Channel AND ct.Written_by = 'Todd Casey'",
        "SELECT DISTINCT Country FROM TV_Channel WHERE id = ANY (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')",
        "SELECT DISTINCT Country FROM TV_Channel tc, Cartoon c WHERE tc.id = c.Channel AND c.Written_by = 'Todd Casey'",
        "SELECT DISTINCT Country FROM TV_Channel WHERE EXISTS (SELECT 1 FROM Cartoon WHERE Cartoon.Channel = TV_Channel.id AND Cartoon.Written_by = 'Todd Casey')",
        "SELECT DISTINCT Country FROM TV_Channel tc LEFT JOIN Cartoon c ON tc.id = c.Channel WHERE c.Written_by = 'Todd Casey'"
      ]
    ]
  },
  {
    "id": 635,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')",
        "SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')",
        "SELECT Country FROM TV_Channel T1 WHERE NOT EXISTS (SELECT 1 FROM Cartoon T2 WHERE T2.Written_by = 'Todd Casey' AND T2.Channel = T1.id)",
        "SELECT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by LIKE 'Todd Casey')",
        "SELECT Country FROM TV_Channel EXCEPT SELECT Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'Todd Casey'",
        "SELECT DISTINCT Country FROM TV_Channel T1 LEFT JOIN Cartoon T2 ON T1.id = T2.Channel AND T2.Written_by = 'Todd Casey' WHERE T2.id IS NULL",
        "SELECT Country FROM TV_Channel T1 WHERE NOT EXISTS (SELECT * FROM Cartoon T2 WHERE T2.Written_by = 'Todd Casey' AND T1.id = T2.Channel)",
        "SELECT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey' AND Channel IS NOT NULL)",
        "SELECT Country FROM TV_Channel AS T1 WHERE NOT EXISTS (SELECT NULL FROM Cartoon AS T2 WHERE T2.Written_by = 'Todd Casey' AND T2.Channel = T1.id)",
        "SELECT Country FROM TV_Channel T1 LEFT JOIN Cartoon T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey' GROUP BY T1.Country HAVING COUNT(T2.id) = 0"
      ]
    ]
  },
  {
    "id": 636,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Country FROM TV_Channel WHERE Country NOT IN (SELECT DISTINCT Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'Todd Casey')",
        "SELECT DISTINCT Country FROM TV_Channel WHERE Country NOT IN (SELECT Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'Todd Casey')",
        "SELECT Country FROM TV_Channel WHERE NOT EXISTS (SELECT 1 FROM Cartoon WHERE Cartoon.Written_by = 'Todd Casey' AND Cartoon.Channel = TV_Channel.id)",
        "SELECT Country FROM TV_Channel t1 WHERE NOT EXISTS (SELECT 1 FROM Cartoon t2 WHERE t2.Written_by = 'Todd Casey' AND t2.Channel = t1.id)",
        "SELECT DISTINCT t1.Country FROM TV_Channel t1 LEFT JOIN Cartoon t2 ON t1.id = t2.Channel AND t2.Written_by = 'Todd Casey' WHERE t2.id IS NULL",
        "SELECT Country FROM TV_Channel EXCEPT SELECT Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'Todd Casey'",
        "SELECT Country FROM TV_Channel t1 WHERE t1.id NOT IN (SELECT t2.Channel FROM Cartoon t2 WHERE t2.Written_by = 'Todd Casey')",
        "SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')",
        "SELECT Country FROM TV_Channel AS t1 WHERE NOT EXISTS (SELECT * FROM Cartoon AS t2 WHERE t2.Written_by = 'Todd Casey' AND t2.Channel = t1.id)",
        "SELECT Country FROM TV_Channel WHERE Country NOT IN (SELECT Country FROM TV_Channel, Cartoon WHERE TV_Channel.id = Cartoon.Channel AND Cartoon.Written_by = 'Todd Casey')"
      ]
    ]
  },
  {
    "id": 637,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT TVC.series_name, TVC.Country FROM TV_Channel TVC JOIN Cartoon C ON TVC.id = C.Channel WHERE C.Directed_by IN ('Ben Jones', 'Michael Chang')",
        "SELECT series_name, Country FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Michael Chang')",
        "SELECT TVC.series_name, TVC.Country FROM TV_Channel AS TVC INNER JOIN Cartoon AS C ON TVC.id = C.Channel WHERE C.Directed_by = 'Ben Jones' OR C.Directed_by = 'Michael Chang'",
        "SELECT series_name, Country FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Michael Chang'))",
        "SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Michael Chang'",
        "SELECT TVC.series_name, TVC.Country FROM TV_Channel TVC, Cartoon C WHERE TVC.id = C.Channel AND (C.Directed_by = 'Ben Jones' OR C.Directed_by = 'Michael Chang')",
        "SELECT series_name, Country FROM TV_Channel INNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')",
        "SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel, Cartoon WHERE TV_Channel.id = Cartoon.Channel AND (Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Michael Chang')",
        "SELECT TVC.series_name, TVC.Country FROM TV_Channel TVC INNER JOIN Cartoon C ON TVC.id = C.Channel WHERE C.Directed_by IN ('Ben Jones', 'Michael Chang') GROUP BY TVC.series_name, TVC.Country",
        "SELECT series_name, Country FROM TV_Channel WHERE id = ANY (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones' UNION SELECT Channel FROM Cartoon WHERE Directed_by = 'Michael Chang')"
      ]
    ]
  },
  {
    "id": 638,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT T1.series_name, T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones' INTERSECT SELECT T1.series_name, T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Michael Chang'",
        "SELECT series_name, Country FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') INTERSECT SELECT series_name, Country FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Michael Chang')",
        "SELECT series_name, Country FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Michael Chang') GROUP BY Channel HAVING COUNT(DISTINCT Directed_by) = 2)",
        "WITH BenJonesChannels AS (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones'), MichaelChangChannels AS (SELECT Channel FROM Cartoon WHERE Directed_by = 'Michael Chang') SELECT series_name, Country FROM TV_Channel WHERE id IN (SELECT Channel FROM BenJonesChannels INTERSECT SELECT Channel FROM MichaelChangChannels)",
        "SELECT series_name, Country FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones' UNION ALL SELECT Channel FROM Cartoon WHERE Directed_by = 'Michael Chang' GROUP BY Channel HAVING COUNT(*) > 1)",
        "SELECT DISTINCT T1.series_name, T1.Country FROM TV_Channel T1, Cartoon T2 WHERE T1.id = T2.Channel AND T2.Directed_by = 'Ben Jones' AND T1.id IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Michael Chang')",
        "SELECT series_name, Country FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon GROUP BY Channel HAVING SUM(CASE WHEN Directed_by = 'Ben Jones' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Directed_by = 'Michael Chang' THEN 1 ELSE 0 END) > 0)",
        "SELECT series_name, Country FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') AND id IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Michael Chang')",
        "SELECT T1.series_name, T1.Country FROM TV_Channel AS T1 WHERE EXISTS (SELECT 1 FROM Cartoon AS T2 WHERE T1.id = T2.Channel AND T2.Directed_by = 'Ben Jones') AND EXISTS (SELECT 1 FROM Cartoon AS T2 WHERE T1.id = T2.Channel AND T2.Directed_by = 'Michael Chang')",
        "SELECT series_name, Country FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones' AND Channel IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Michael Chang'))"
      ]
    ]
  },
  {
    "id": 639,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> 'English'",
        "SELECT Country, Pixel_aspect_ratio_PAR FROM TV_Channel WHERE NOT Language = 'English'",
        "SELECT t.Pixel_aspect_ratio_PAR, t.Country FROM TV_Channel t WHERE t.Language != 'English'",
        "SELECT Pixel_aspect_ratio_PAR AS PAR, Country AS Nation FROM TV_Channel WHERE Language NOT IN ('English')",
        "SELECT Country, Pixel_aspect_ratio_PAR FROM TV_Channel WHERE Language NOT LIKE 'English'",
        "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language IS NOT 'English'",
        "SELECT Country, Pixel_aspect_ratio_PAR FROM TV_Channel WHERE Language <> 'English' ORDER BY Country",
        "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language NOT EQUALS 'English'",
        "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> 'English' AND Language IS NOT NULL",
        "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE UPPER(Language) <> UPPER('English')"
      ]
    ]
  },
  {
    "id": 640,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> 'English'",
        "SELECT Country, Pixel_aspect_ratio_PAR FROM TV_Channel WHERE NOT Language = 'English'",
        "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'",
        "SELECT Country, Pixel_aspect_ratio_PAR FROM TV_Channel WHERE Language NOT IN ('English')",
        "SELECT Pixel_aspect_ratio_PAR AS PAR, Country FROM TV_Channel WHERE Language NOT LIKE 'English'",
        "SELECT Country, Pixel_aspect_ratio_PAR FROM TV_Channel WHERE Language IS NOT 'English'",
        "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language NOT EQUALS 'English'",
        "SELECT Country, Pixel_aspect_ratio_PAR FROM TV_Channel WHERE Language <> 'English' ORDER BY Country",
        "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language NOT IN (SELECT Language FROM TV_Channel WHERE Language = 'English')",
        "SELECT Country, Pixel_aspect_ratio_PAR FROM TV_Channel WHERE Language <> 'English' AND Language IS NOT NULL"
      ]
    ]
  },
  {
    "id": 641,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(id) > 2)",
        "SELECT T1.id FROM TV_Channel AS T1 JOIN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2) AS T2 ON T1.Country = T2.Country",
        "SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2)",
        "SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2)",
        "SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(id) > 2)",
        "SELECT T1.id FROM TV_Channel AS T1 WHERE EXISTS (SELECT 1 FROM TV_Channel AS T2 WHERE T1.Country = T2.Country GROUP BY T2.Country HAVING COUNT(T2.id) > 2)",
        "SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM (SELECT Country, COUNT(*) AS cnt FROM TV_Channel GROUP BY Country) AS subquery WHERE cnt > 2)",
        "SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(DISTINCT id) > 2)",
        "SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(id) > 2)",
        "SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2)"
      ]
    ]
  },
  {
    "id": 642,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(id) > 2)",
        "SELECT T1.id FROM TV_Channel AS T1 JOIN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(id) > 2) AS T2 ON T1.Country = T2.Country",
        "SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2)",
        "SELECT TV_Channel.id FROM TV_Channel INNER JOIN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(id) > 2) AS SubQuery ON TV_Channel.Country = SubQuery.Country",
        "SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM (SELECT Country, COUNT(*) AS cnt FROM TV_Channel GROUP BY Country) AS Sub WHERE Sub.cnt > 2)",
        "SELECT id FROM TV_Channel T WHERE EXISTS (SELECT 1 FROM TV_Channel WHERE Country = T.Country GROUP BY Country HAVING COUNT(id) > 2)",
        "SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(DISTINCT id) > 2)",
        "SELECT id FROM TV_Channel AS T1 WHERE (SELECT COUNT(*) FROM TV_Channel AS T2 WHERE T2.Country = T1.Country) > 2",
        "SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(id) > 2 ORDER BY Country)",
        "SELECT T.id FROM TV_Channel T WHERE (SELECT COUNT(*) FROM TV_Channel WHERE Country = T.Country) > 2"
      ]
    ]
  },
  {
    "id": 643,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')",
        "SELECT TV_Channel.id FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = 'Ben Jones' AND Cartoon.id IS NULL",
        "SELECT id FROM TV_Channel WHERE NOT EXISTS (SELECT 1 FROM Cartoon WHERE Cartoon.Channel = TV_Channel.id AND Cartoon.Directed_by = 'Ben Jones')",
        "SELECT T1.id FROM TV_Channel AS T1 WHERE T1.id NOT IN (SELECT T2.Channel FROM Cartoon AS T2 WHERE T2.Directed_by = 'Ben Jones')",
        "SELECT id FROM TV_Channel EXCEPT SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones'",
        "SELECT id FROM TV_Channel T1 WHERE NOT EXISTS (SELECT NULL FROM Cartoon T2 WHERE T2.Channel = T1.id AND T2.Directed_by = 'Ben Jones')",
        "SELECT DISTINCT id FROM TV_Channel WHERE id NOT IN (SELECT DISTINCT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')",
        "SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones')",
        "SELECT id FROM TV_Channel AS T WHERE NOT EXISTS (SELECT * FROM Cartoon AS C WHERE C.Channel = T.id AND C.Directed_by = 'Ben Jones')",
        "SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones' GROUP BY Channel)"
      ]
    ]
  },
  {
    "id": 644,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')",
        "SELECT TV_Channel.id FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = 'Ben Jones' AND Cartoon.id IS NULL",
        "SELECT id FROM TV_Channel WHERE NOT EXISTS (SELECT 1 FROM Cartoon WHERE Cartoon.Channel = TV_Channel.id AND Cartoon.Directed_by = 'Ben Jones')",
        "SELECT T1.id FROM TV_Channel AS T1 WHERE T1.id NOT IN (SELECT T2.Channel FROM Cartoon AS T2 WHERE T2.Directed_by = 'Ben Jones')",
        "SELECT id FROM TV_Channel EXCEPT SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones'",
        "SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT DISTINCT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')",
        "SELECT DISTINCT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')",
        "SELECT id FROM TV_Channel T1 WHERE NOT EXISTS (SELECT NULL FROM Cartoon T2 WHERE T2.Channel = T1.id AND T2.Directed_by = 'Ben Jones')",
        "SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones' GROUP BY Channel)",
        "SELECT id FROM TV_Channel AS T1 LEFT OUTER JOIN Cartoon AS T2 ON T1.id = T2.Channel AND T2.Directed_by = 'Ben Jones' WHERE T2.Channel IS NULL"
      ]
    ]
  },
  {
    "id": 645,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')",
        "SELECT T1.Package_Option FROM TV_Channel AS T1 WHERE NOT EXISTS (SELECT 1 FROM Cartoon AS T2 WHERE T2.Channel = T1.id AND T2.Directed_by = 'Ben Jones')",
        "SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT DISTINCT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')",
        "SELECT DISTINCT Package_Option FROM TV_Channel AS TC LEFT JOIN Cartoon AS C ON TC.id = C.Channel AND C.Directed_by = 'Ben Jones' WHERE C.id IS NULL",
        "SELECT Package_Option FROM TV_Channel EXCEPT SELECT Package_Option FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = 'Ben Jones'",
        "SELECT Package_Option FROM TV_Channel T WHERE NOT EXISTS (SELECT * FROM Cartoon C WHERE C.Channel = T.id AND C.Directed_by = 'Ben Jones')",
        "SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones' GROUP BY Channel)",
        "SELECT Package_Option FROM TV_Channel TC WHERE TC.id NOT IN (SELECT C.Channel FROM Cartoon C WHERE C.Directed_by = 'Ben Jones')",
        "SELECT DISTINCT T.Package_Option FROM TV_Channel T LEFT OUTER JOIN Cartoon C ON T.id = C.Channel AND C.Directed_by = 'Ben Jones' WHERE C.Channel IS NULL",
        "SELECT Package_Option FROM TV_Channel WHERE id NOT EXISTS (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')"
      ]
    ]
  },
  {
    "id": 646,
    "db_id": "tvshow",
    "infer_predictions": [
      [
        "SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')",
        "SELECT DISTINCT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')",
        "SELECT T1.Package_Option FROM TV_Channel AS T1 LEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones' AND T2.Channel IS NULL",
        "SELECT Package_Option FROM TV_Channel WHERE NOT EXISTS (SELECT 1 FROM Cartoon WHERE Directed_by = 'Ben Jones' AND TV_Channel.id = Cartoon.Channel)",
        "SELECT Package_Option FROM TV_Channel AS T WHERE T.id NOT IN (SELECT C.Channel FROM Cartoon AS C WHERE C.Directed_by = 'Ben Jones')",
        "SELECT DISTINCT T.Package_Option FROM TV_Channel T WHERE T.id NOT IN (SELECT C.Channel FROM Cartoon C WHERE C.Directed_by = 'Ben Jones')",
        "SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones' GROUP BY Channel)",
        "SELECT DISTINCT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT DISTINCT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')",
        "SELECT T.Package_Option FROM TV_Channel T WHERE NOT EXISTS (SELECT * FROM Cartoon C WHERE C.Directed_by = 'Ben Jones' AND C.Channel = T.id)",
        "SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones' AND Channel IS NOT NULL)"
      ]
    ]
  },
  {
    "id": 647,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM poker_player",
        "SELECT COUNT(Poker_Player_ID) FROM poker_player",
        "SELECT COUNT(DISTINCT Poker_Player_ID) FROM poker_player",
        "SELECT COUNT(1) FROM poker_player",
        "SELECT COUNT(Poker_Player_ID) AS NumberOfPokerPlayers FROM poker_player",
        "SELECT COUNT(*) AS TotalPokerPlayers FROM poker_player",
        "SELECT COUNT(DISTINCT Poker_Player_ID) AS UniquePokerPlayers FROM poker_player",
        "SELECT COUNT(Poker_Player_ID) FROM poker_player WHERE Poker_Player_ID IS NOT NULL",
        "SELECT COUNT(*) FROM poker_player WHERE Poker_Player_ID > 0",
        "SELECT COUNT(*) FROM poker_player GROUP BY Poker_Player_ID HAVING COUNT(*) >= 1"
      ]
    ]
  },
  {
    "id": 648,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM poker_player",
        "SELECT COUNT(Poker_Player_ID) FROM poker_player",
        "SELECT COUNT(1) FROM poker_player",
        "SELECT COUNT(Poker_Player_ID) AS NumberOfPlayers FROM poker_player",
        "SELECT COUNT(DISTINCT Poker_Player_ID) FROM poker_player",
        "SELECT COUNT(*) AS TotalPokerPlayers FROM poker_player",
        "SELECT COUNT(Poker_Player_ID) FROM poker_player WHERE Poker_Player_ID IS NOT NULL",
        "SELECT COUNT(*) FROM poker_player WHERE Poker_Player_ID > 0",
        "SELECT COUNT(DISTINCT Poker_Player_ID) AS TotalPlayers FROM poker_player",
        "SELECT COUNT(*) FROM poker_player GROUP BY Poker_Player_ID HAVING COUNT(Poker_Player_ID) > 0"
      ]
    ]
  },
  {
    "id": 649,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "SELECT Earnings FROM poker_player ORDER BY Earnings DESCENDING",
        "SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC",
        "SELECT Earnings FROM poker_player ORDER BY Earnings DESC, Poker_Player_ID ASC",
        "SELECT * FROM poker_player ORDER BY Earnings DESC",
        "SELECT Earnings AS PlayerEarnings FROM poker_player ORDER BY PlayerEarnings DESC",
        "SELECT pp.Earnings FROM poker_player pp ORDER BY pp.Earnings DESC",
        "SELECT Earnings FROM poker_player ORDER BY 1 DESC",
        "SELECT Earnings FROM poker_player ORDER BY Earnings DESC LIMIT ALL",
        "SELECT Earnings FROM poker_player ORDER BY Earnings DESC, Poker_Player_ID"
      ]
    ]
  },
  {
    "id": 650,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT Earnings, Poker_Player_ID FROM poker_player ORDER BY Earnings DESC, Poker_Player_ID ASC",
        "SELECT Poker_Player_ID, Earnings FROM poker_player ORDER BY Earnings DESC, Poker_Player_ID",
        "SELECT Earnings, Poker_Player_ID FROM poker_player ORDER BY Earnings DESC, Poker_Player_ID",
        "SELECT * FROM poker_player ORDER BY Earnings DESC, Poker_Player_ID ASC",
        "SELECT Poker_Player_ID, Earnings FROM poker_player ORDER BY Earnings DESC, Poker_Player_ID ASC",
        "SELECT Earnings FROM poker_player ORDER BY Earnings DESC, Poker_Player_ID ASC",
        "SELECT Poker_Player_ID FROM poker_player ORDER BY Earnings DESC, Poker_Player_ID ASC",
        "SELECT Poker_Player_ID, Earnings FROM poker_player ORDER BY Earnings DESC",
        "SELECT Earnings, Poker_Player_ID FROM poker_player ORDER BY Earnings DESC",
        "SELECT Poker_Player_ID, Earnings FROM poker_player ORDER BY Earnings DESC, Poker_Player_ID ASC"
      ]
    ]
  },
  {
    "id": 651,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT Final_Table_Made, Best_Finish FROM poker_player",
        "SELECT p.Final_Table_Made, p.Best_Finish FROM poker_player p",
        "SELECT poker_player.Final_Table_Made AS FinalTables, poker_player.Best_Finish AS BestFinishes FROM poker_player",
        "SELECT Final_Table_Made AS 'Final Tables Made', Best_Finish AS 'Best Finishes' FROM poker_player",
        "SELECT DISTINCT Final_Table_Made, Best_Finish FROM poker_player",
        "SELECT * FROM poker_player WHERE Final_Table_Made IS NOT NULL AND Best_Finish IS NOT NULL",
        "SELECT Final_Table_Made, Best_Finish FROM poker_player ORDER BY Best_Finish DESC",
        "SELECT Final_Table_Made, Best_Finish FROM poker_player GROUP BY Final_Table_Made, Best_Finish",
        "SELECT Final_Table_Made, Best_Finish FROM poker_player WHERE Final_Table_Made > 0",
        "SELECT Final_Table_Made, Best_Finish FROM poker_player WHERE Best_Finish <= ALL (SELECT Best_Finish FROM poker_player)"
      ]
    ]
  },
  {
    "id": 652,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT Final_Table_Made, Best_Finish FROM poker_player",
        "SELECT p.Final_Table_Made, p.Best_Finish FROM poker_player p",
        "SELECT poker_player.Final_Table_Made AS FinalTables, poker_player.Best_Finish AS BestFinishes FROM poker_player",
        "SELECT DISTINCT Final_Table_Made, Best_Finish FROM poker_player",
        "SELECT Final_Table_Made, Best_Finish FROM poker_player GROUP BY Final_Table_Made, Best_Finish",
        "SELECT * FROM (SELECT Final_Table_Made, Best_Finish FROM poker_player) AS subquery",
        "SELECT pp.Final_Table_Made, pp.Best_Finish FROM poker_player pp",
        "SELECT Final_Table_Made AS 'Final Tables Made', Best_Finish AS 'Best Finishes' FROM poker_player",
        "SELECT Final_Table_Made, Best_Finish FROM poker_player ORDER BY Final_Table_Made, Best_Finish",
        "SELECT Final_Table_Made, Best_Finish FROM poker_player WHERE Final_Table_Made IS NOT NULL AND Best_Finish IS NOT NULL"
      ]
    ]
  },
  {
    "id": 653,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT AVG(Earnings) FROM poker_player",
        "SELECT AVG(Earnings) AS AverageEarnings FROM poker_player",
        "SELECT AVG(poker_player.Earnings) FROM poker_player",
        "SELECT AVG(poker_player.Earnings) AS Average_Earnings FROM poker_player",
        "SELECT AVG(Earnings) FROM poker_player WHERE Earnings IS NOT NULL",
        "SELECT AVG(Earnings) AS AvgEarnings FROM poker_player WHERE Earnings > 0",
        "SELECT AVG(Earnings) FROM poker_player GROUP BY Poker_Player_ID",
        "SELECT AVG(Earnings) AS AverageEarnings FROM poker_player GROUP BY Poker_Player_ID",
        "SELECT AVG(Earnings) FROM poker_player WHERE Earnings > 0",
        "SELECT AVG(Earnings) AS Average_Earnings FROM poker_player WHERE Earnings IS NOT NULL"
      ]
    ]
  },
  {
    "id": 654,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT AVG(Earnings) FROM poker_player",
        "SELECT AVG(Earnings) AS AverageEarnings FROM poker_player",
        "SELECT AVG(poker_player.Earnings) FROM poker_player",
        "SELECT AVG(poker_player.Earnings) AS Average_Earnings FROM poker_player",
        "SELECT AVG(Earnings) FROM poker_player WHERE Earnings IS NOT NULL",
        "SELECT AVG(Earnings) AS AvgEarnings FROM poker_player WHERE Earnings > 0",
        "SELECT AVG(Earnings) FROM poker_player GROUP BY Poker_Player_ID",
        "SELECT AVG(Earnings) FROM poker_player WHERE Earnings > 0",
        "SELECT AVG(Earnings) AS AverageEarnings FROM poker_player WHERE Earnings IS NOT NULL",
        "SELECT AVG(Earnings) FROM poker_player WHERE Earnings >= 0"
      ]
    ]
  },
  {
    "id": 655,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)",
        "SELECT p.Money_Rank FROM poker_player p WHERE p.Earnings = (SELECT MAX(Earnings) FROM poker_player)",
        "SELECT Money_Rank FROM poker_player WHERE Earnings IN (SELECT MAX(Earnings) FROM poker_player)",
        "SELECT p.Money_Rank FROM poker_player p WHERE p.Earnings IN (SELECT MAX(Earnings) FROM poker_player)",
        "SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(p.Earnings) FROM poker_player p)",
        "SELECT p.Money_Rank FROM poker_player p WHERE p.Earnings = (SELECT MAX(Earnings) FROM poker_player p)",
        "SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player GROUP BY Earnings)",
        "SELECT p.Money_Rank FROM poker_player p WHERE p.Earnings = (SELECT MAX(Earnings) FROM poker_player GROUP BY Earnings)",
        "SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT TOP 1 Earnings FROM poker_player ORDER BY Earnings DESC)",
        "SELECT p.Money_Rank FROM poker_player p WHERE p.Earnings = (SELECT TOP 1 Earnings FROM poker_player p ORDER BY Earnings DESC)"
      ]
    ]
  },
  {
    "id": 656,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)",
        "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "SELECT p.Money_Rank FROM poker_player p WHERE p.Earnings = (SELECT MAX(Earnings) FROM poker_player)",
        "SELECT Money_Rank FROM poker_player WHERE Earnings IN (SELECT MAX(Earnings) FROM poker_player)",
        "SELECT TOP 1 Money_Rank FROM poker_player ORDER BY Earnings DESC",
        "SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player) LIMIT 1",
        "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC FETCH FIRST ROW ONLY",
        "SELECT Money_Rank FROM poker_player AS pp WHERE pp.Earnings = (SELECT MAX(Earnings) FROM poker_player AS pp2)",
        "SELECT DISTINCT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)",
        "SELECT Money_Rank FROM (SELECT Money_Rank, RANK() OVER (ORDER BY Earnings DESC) AS rank FROM poker_player) WHERE rank = 1"
      ]
    ]
  },
  {
    "id": 657,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
        "SELECT MAX(Final_Table_Made) AS MaxFinalTables FROM poker_player WHERE Earnings < 200000",
        "SELECT MAX(poker_player.Final_Table_Made) FROM poker_player WHERE poker_player.Earnings < 200000",
        "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < '200000'",
        "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000.00",
        "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000 GROUP BY Poker_Player_ID",
        "SELECT MAX(Final_Table_Made) FROM poker_player GROUP BY Poker_Player_ID HAVING MAX(Earnings) < 200000",
        "SELECT MAX(Final_Table_Made) FROM poker_player p WHERE p.Earnings < 200000",
        "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000 ORDER BY Final_Table_Made DESC LIMIT 1",
        "SELECT MAX(Final_Table_Made) AS MaximumFinalTables FROM poker_player WHERE Earnings < 200000"
      ]
    ]
  },
  {
    "id": 658,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
        "SELECT MAX(Final_Table_Made) AS MaxFinalTables FROM poker_player WHERE Earnings < 200000",
        "SELECT MAX(poker_player.Final_Table_Made) FROM poker_player WHERE poker_player.Earnings < 200000",
        "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < '200000'",
        "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000.00",
        "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000 GROUP BY Poker_Player_ID",
        "SELECT MAX(Final_Table_Made) FROM poker_player GROUP BY Poker_Player_ID HAVING MAX(Earnings) < 200000",
        "SELECT MAX(Final_Table_Made) FROM poker_player p WHERE p.Earnings < 200000",
        "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000 ORDER BY Final_Table_Made DESC LIMIT 1",
        "SELECT MAX(Final_Table_Made) AS MaximumFinalTables FROM poker_player WHERE Earnings < 200000"
      ]
    ]
  },
  {
    "id": 659,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID",
        "SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player)",
        "SELECT people.Name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID",
        "SELECT Name FROM people, poker_player WHERE people.People_ID = poker_player.People_ID",
        "SELECT DISTINCT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID",
        "SELECT p.Name FROM poker_player pp, people p WHERE pp.People_ID = p.People_ID",
        "SELECT Name FROM people WHERE EXISTS (SELECT 1 FROM poker_player WHERE poker_player.People_ID = people.People_ID)",
        "SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY people.Name",
        "SELECT p.Name FROM people p WHERE p.People_ID IN (SELECT People_ID FROM poker_player)",
        "SELECT Name FROM people p INNER JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.People_ID IS NOT NULL"
      ]
    ]
  },
  {
    "id": 660,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID",
        "SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player)",
        "SELECT people.Name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID",
        "SELECT Name FROM people WHERE EXISTS (SELECT 1 FROM poker_player WHERE poker_player.People_ID = people.People_ID)",
        "SELECT DISTINCT people.Name FROM people, poker_player WHERE people.People_ID = poker_player.People_ID",
        "SELECT p.Name FROM poker_player pp, people p WHERE pp.People_ID = p.People_ID",
        "SELECT Name FROM people p WHERE p.People_ID IN (SELECT People_ID FROM poker_player pp)",
        "SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID",
        "SELECT p.Name FROM people p INNER JOIN poker_player pp ON p.People_ID = pp.People_ID",
        "SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player WHERE poker_player.People_ID = people.People_ID)"
      ]
    ]
  },
  {
    "id": 661,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Earnings > 300000",
        "SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player WHERE Earnings > 300000)",
        "SELECT people.Name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000",
        "SELECT Name FROM people, poker_player WHERE people.People_ID = poker_player.People_ID AND poker_player.Earnings > 300000",
        "SELECT p.Name FROM people p, poker_player pp WHERE p.People_ID = pp.People_ID AND pp.Earnings > 300000",
        "SELECT DISTINCT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000",
        "SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID AND poker_player.Earnings > 300000",
        "SELECT Name FROM people WHERE EXISTS (SELECT 1 FROM poker_player WHERE People_ID = people.People_ID AND Earnings > 300000)",
        "SELECT p.Name FROM people p INNER JOIN poker_player pp ON p.People_ID = pp.People_ID AND pp.Earnings > 300000",
        "SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player WHERE Earnings > 300000) ORDER BY Name"
      ]
    ]
  },
  {
    "id": 662,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Earnings > 300000",
        "SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player WHERE Earnings > 300000)",
        "SELECT people.Name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000",
        "SELECT Name FROM people, poker_player WHERE people.People_ID = poker_player.People_ID AND poker_player.Earnings > 300000",
        "SELECT p.Name FROM people p, poker_player pp WHERE p.People_ID = pp.People_ID AND pp.Earnings > 300000",
        "SELECT DISTINCT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000",
        "SELECT p.Name FROM people AS p JOIN poker_player AS pp ON p.People_ID = pp.People_ID WHERE pp.Earnings > 300000 ORDER BY p.Name",
        "SELECT Name FROM people WHERE EXISTS (SELECT 1 FROM poker_player WHERE People_ID = people.People_ID AND Earnings > 300000)",
        "SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID AND pp.Earnings > 300000",
        "SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID AND poker_player.Earnings > 300000"
      ]
    ]
  },
  {
    "id": 663,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT P.Name FROM people P JOIN poker_player PP ON P.People_ID = PP.People_ID ORDER BY PP.Final_Table_Made ASC, PP.Earnings DESC, PP.Poker_Player_ID ASC",
        "SELECT people.Name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC, poker_player.Earnings DESC, poker_player.Poker_Player_ID ASC",
        "SELECT Name FROM people, poker_player WHERE people.People_ID = poker_player.People_ID ORDER BY Final_Table_Made ASC, Earnings DESC, Poker_Player_ID ASC",
        "SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made, poker_player.Earnings DESC, poker_player.Poker_Player_ID",
        "SELECT P.Name FROM people AS P INNER JOIN poker_player AS PP ON P.People_ID = PP.People_ID ORDER BY PP.Final_Table_Made ASC, PP.Earnings DESC, PP.Poker_Player_ID ASC",
        "SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Final_Table_Made ASC, Earnings DESC, Poker_Player_ID ASC",
        "SELECT people.Name FROM people, poker_player WHERE people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC, poker_player.Earnings DESC, poker_player.Poker_Player_ID ASC",
        "SELECT P.Name FROM people P, poker_player PP WHERE P.People_ID = PP.People_ID ORDER BY PP.Final_Table_Made ASC, PP.Earnings DESC, PP.Poker_Player_ID ASC",
        "SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC, poker_player.Earnings DESC, poker_player.Poker_Player_ID",
        "SELECT P.Name FROM people P INNER JOIN poker_player PP ON P.People_ID = PP.People_ID ORDER BY PP.Final_Table_Made ASC, PP.Earnings DESC, PP.Poker_Player_ID"
      ]
    ]
  },
  {
    "id": 664,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT P.Name FROM people P JOIN poker_player PP ON P.People_ID = PP.People_ID ORDER BY PP.Final_Table_Made ASC, P.Name ASC, PP.Poker_Player_ID ASC",
        "SELECT people.Name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC, people.Name ASC, poker_player.Poker_Player_ID ASC",
        "SELECT Name FROM people, poker_player WHERE people.People_ID = poker_player.People_ID ORDER BY Final_Table_Made ASC, Name ASC, Poker_Player_ID ASC",
        "SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made, people.Name, poker_player.Poker_Player_ID",
        "SELECT P.Name FROM people AS P INNER JOIN poker_player AS PP ON P.People_ID = PP.People_ID ORDER BY PP.Final_Table_Made, P.Name, PP.Poker_Player_ID",
        "SELECT Name FROM people JOIN poker_player USING(People_ID) ORDER BY Final_Table_Made ASC, Name ASC, Poker_Player_ID ASC",
        "SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC, people.Name ASC, poker_player.Poker_Player_ID ASC",
        "SELECT Name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Final_Table_Made ASC, Name ASC, Poker_Player_ID ASC",
        "SELECT people.Name AS PlayerName FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC, people.Name ASC, poker_player.Poker_Player_ID ASC",
        "SELECT P.Name FROM people P, poker_player PP WHERE P.People_ID = PP.People_ID ORDER BY PP.Final_Table_Made ASC, P.Name ASC, PP.Poker_Player_ID ASC"
      ]
    ]
  },
  {
    "id": 665,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT Birth_Date FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player WHERE Earnings = (SELECT MIN(Earnings) FROM poker_player))",
        "SELECT p.Birth_Date FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Earnings = (SELECT MIN(Earnings) FROM poker_player)",
        "SELECT Birth_Date FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player GROUP BY People_ID HAVING Earnings = MIN(Earnings))",
        "SELECT people.Birth_Date FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings = (SELECT MIN(Earnings) FROM poker_player)",
        "SELECT Birth_Date FROM people WHERE EXISTS (SELECT 1 FROM poker_player WHERE poker_player.People_ID = people.People_ID AND poker_player.Earnings = (SELECT MIN(Earnings) FROM poker_player))",
        "SELECT p.Birth_Date FROM people p, poker_player pp WHERE p.People_ID = pp.People_ID AND pp.Earnings = (SELECT MIN(Earnings) FROM poker_player)",
        "SELECT Birth_Date FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player HAVING MIN(Earnings) = Earnings)",
        "SELECT p.Birth_Date FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Earnings = (SELECT MIN(Earnings) FROM poker_player WHERE People_ID = pp.People_ID)",
        "SELECT Birth_Date FROM people WHERE People_ID = ANY (SELECT People_ID FROM poker_player WHERE Earnings = (SELECT MIN(Earnings) FROM poker_player))",
        "SELECT p.Birth_Date FROM people p WHERE EXISTS (SELECT * FROM poker_player pp WHERE pp.People_ID = p.People_ID AND pp.Earnings = (SELECT MIN(Earnings) FROM poker_player))"
      ]
    ]
  },
  {
    "id": 666,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT Birth_Date FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player WHERE Earnings = (SELECT MIN(Earnings) FROM poker_player))",
        "SELECT p.Birth_Date FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Earnings = (SELECT MIN(Earnings) FROM poker_player)",
        "SELECT people.Birth_Date FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings = (SELECT MIN(Earnings) FROM poker_player)",
        "SELECT Birth_Date FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player GROUP BY People_ID HAVING Earnings = MIN(Earnings))",
        "SELECT p.Birth_Date FROM people p, poker_player pp WHERE p.People_ID = pp.People_ID AND pp.Earnings = (SELECT MIN(Earnings) FROM poker_player)",
        "SELECT Birth_Date FROM people WHERE People_ID = ANY (SELECT People_ID FROM poker_player WHERE Earnings = (SELECT MIN(Earnings) FROM poker_player))",
        "SELECT p.Birth_Date FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Earnings = (SELECT MIN(Earnings) FROM poker_player GROUP BY People_ID)",
        "SELECT Birth_Date FROM people WHERE EXISTS (SELECT 1 FROM poker_player WHERE People_ID = people.People_ID AND Earnings = (SELECT MIN(Earnings) FROM poker_player))",
        "SELECT p.Birth_Date FROM people p WHERE EXISTS (SELECT 1 FROM poker_player pp WHERE pp.People_ID = p.People_ID AND pp.Earnings = (SELECT MIN(Earnings) FROM poker_player))",
        "SELECT Birth_Date FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player HAVING MIN(Earnings) = Earnings)"
      ]
    ]
  },
  {
    "id": 667,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT Money_Rank FROM poker_player WHERE People_ID IN (SELECT People_ID FROM people WHERE Height = (SELECT MAX(Height) FROM people))",
        "SELECT p.Money_Rank FROM poker_player p JOIN people pe ON p.People_ID = pe.People_ID WHERE pe.Height = (SELECT MAX(Height) FROM people)",
        "SELECT Money_Rank FROM poker_player WHERE People_ID IN (SELECT People_ID FROM people ORDER BY Height DESC LIMIT 1)",
        "SELECT p.Money_Rank FROM poker_player p INNER JOIN people pe ON p.People_ID = pe.People_ID WHERE pe.Height >= ALL (SELECT Height FROM people)",
        "SELECT Money_Rank FROM poker_player, people WHERE poker_player.People_ID = people.People_ID AND people.Height = (SELECT MAX(Height) FROM people)",
        "SELECT p.Money_Rank FROM poker_player p, people pe WHERE p.People_ID = pe.People_ID AND pe.Height = (SELECT MAX(Height) FROM people)",
        "SELECT Money_Rank FROM poker_player WHERE People_ID = (SELECT People_ID FROM people WHERE Height = (SELECT MAX(Height) FROM people))",
        "SELECT p.Money_Rank FROM poker_player p WHERE EXISTS (SELECT 1 FROM people pe WHERE p.People_ID = pe.People_ID AND pe.Height = (SELECT MAX(Height) FROM people))",
        "SELECT Money_Rank FROM poker_player WHERE People_ID = (SELECT People_ID FROM people ORDER BY Height DESC FETCH FIRST 1 ROW ONLY)",
        "SELECT p.Money_Rank FROM poker_player p WHERE p.People_ID = (SELECT pe.People_ID FROM people pe WHERE pe.Height = (SELECT MAX(Height) FROM people))"
      ]
    ]
  },
  {
    "id": 668,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT pp.Money_Rank FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE p.Height = (SELECT MAX(Height) FROM people)",
        "SELECT Money_Rank FROM poker_player WHERE People_ID IN (SELECT People_ID FROM people WHERE Height = (SELECT MAX(Height) FROM people))",
        "SELECT pp.Money_Rank FROM poker_player pp INNER JOIN people p ON pp.People_ID = p.People_ID ORDER BY p.Height DESC LIMIT 1",
        "SELECT Money_Rank FROM poker_player, people WHERE poker_player.People_ID = people.People_ID AND people.Height = (SELECT MAX(Height) FROM people)",
        "SELECT TOP 1 pp.Money_Rank FROM poker_player pp, people p WHERE pp.People_ID = p.People_ID ORDER BY p.Height DESC",
        "SELECT pp.Money_Rank FROM poker_player pp INNER JOIN (SELECT People_ID, MAX(Height) AS MaxHeight FROM people GROUP BY People_ID) AS maxp ON pp.People_ID = maxp.People_ID",
        "SELECT Money_Rank FROM poker_player WHERE People_ID = (SELECT People_ID FROM people ORDER BY Height DESC LIMIT 1)",
        "SELECT pp.Money_Rank FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID AND p.Height >= ALL (SELECT Height FROM people)",
        "SELECT pp.Money_Rank FROM poker_player pp WHERE EXISTS (SELECT 1 FROM people p WHERE p.People_ID = pp.People_ID AND p.Height = (SELECT MAX(Height) FROM people))",
        "SELECT Money_Rank FROM poker_player WHERE People_ID IN (SELECT People_ID FROM people WHERE Height >= ALL (SELECT Height FROM people))"
      ]
    ]
  },
  {
    "id": 669,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200",
        "SELECT AVG(Earnings) AS AverageEarnings FROM poker_player INNER JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200",
        "SELECT AVG(Earnings) FROM poker_player, people WHERE poker_player.People_ID = people.People_ID AND people.Height > 200",
        "SELECT AVG(p.Earnings) FROM poker_player p JOIN people pe ON p.People_ID = pe.People_ID WHERE pe.Height > 200",
        "SELECT AVG(Earnings) FROM poker_player p INNER JOIN people pe ON p.People_ID = pe.People_ID AND pe.Height > 200",
        "SELECT AVG(Earnings) FROM poker_player LEFT JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200",
        "SELECT AVG(poker_player.Earnings) AS Average_Earnings FROM poker_player, people WHERE poker_player.People_ID = people.People_ID AND people.Height > 200",
        "SELECT AVG(Earnings) FROM poker_player p, people pe WHERE p.People_ID = pe.People_ID AND pe.Height > 200",
        "SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID AND people.Height > 200",
        "SELECT AVG(p.Earnings) FROM poker_player p JOIN people pe ON p.People_ID = pe.People_ID WHERE pe.Height > 200 GROUP BY p.People_ID"
      ]
    ]
  },
  {
    "id": 670,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200",
        "SELECT AVG(Earnings) AS AverageEarnings FROM poker_player INNER JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200",
        "SELECT AVG(Earnings) FROM poker_player, people WHERE poker_player.People_ID = people.People_ID AND people.Height > 200",
        "SELECT AVG(p.Earnings) FROM poker_player p JOIN people pe ON p.People_ID = pe.People_ID WHERE pe.Height > 200",
        "SELECT AVG(Earnings) FROM poker_player p INNER JOIN people pe ON p.People_ID = pe.People_ID AND pe.Height > 200",
        "SELECT AVG(p.Earnings) AS Average_Earnings FROM poker_player p, people pe WHERE p.People_ID = pe.People_ID AND pe.Height > 200",
        "SELECT AVG(Earnings) FROM poker_player JOIN people USING (People_ID) WHERE Height > 200",
        "SELECT AVG(poker_player.Earnings) FROM poker_player, people WHERE poker_player.People_ID = people.People_ID AND people.Height > 200 GROUP BY poker_player.People_ID",
        "SELECT AVG(Earnings) FROM poker_player p JOIN people pe ON p.People_ID = pe.People_ID WHERE pe.Height > 200 GROUP BY p.People_ID",
        "SELECT AVG(Earnings) FROM poker_player INNER JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200"
      ]
    ]
  },
  {
    "id": 671,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT P.Name FROM people P JOIN poker_player PP ON P.People_ID = PP.People_ID ORDER BY PP.Earnings DESC, P.Name ASC",
        "SELECT people.Name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC, people.Name",
        "SELECT Name FROM people, poker_player WHERE people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC, people.Name ASC",
        "SELECT people.Name AS PlayerName FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC, people.Name ASC",
        "SELECT P.Name FROM people AS P, poker_player AS PP WHERE P.People_ID = PP.People_ID ORDER BY PP.Earnings DESC, P.Name ASC",
        "SELECT Name FROM people JOIN poker_player USING(People_ID) ORDER BY Earnings DESC, Name",
        "SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC, people.Name ASC",
        "SELECT P.Name FROM people P INNER JOIN poker_player PP ON P.People_ID = PP.People_ID ORDER BY PP.Earnings DESC, P.Name",
        "SELECT Name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Earnings DESC, Name ASC",
        "SELECT P.Name FROM people P LEFT JOIN poker_player PP ON P.People_ID = PP.People_ID ORDER BY PP.Earnings DESC, P.Name ASC"
      ]
    ]
  },
  {
    "id": 672,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC, p.Name ASC, pp.Poker_Player_ID ASC",
        "SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player ORDER BY Earnings DESC, Poker_Player_ID ASC)",
        "SELECT people.Name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC, people.Name, poker_player.Poker_Player_ID",
        "SELECT p.Name FROM people p, poker_player pp WHERE p.People_ID = pp.People_ID ORDER BY pp.Earnings DESC, p.Name ASC, pp.Poker_Player_ID ASC",
        "SELECT Name FROM people JOIN poker_player ON People_ID = Poker_Player_ID ORDER BY Earnings DESC, Name ASC, Poker_Player_ID ASC",
        "SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID ORDER BY pp.Earnings DESC, p.Name ASC, pp.Poker_Player_ID ASC",
        "SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player ORDER BY Earnings DESC, Name ASC, Poker_Player_ID ASC)",
        "SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC, people.Name ASC, poker_player.Poker_Player_ID ASC",
        "SELECT p.Name FROM people p INNER JOIN poker_player pp ON p.People_ID = pp.People_ID ORDER BY pp.Earnings DESC, p.Name ASC, pp.Poker_Player_ID ASC",
        "SELECT Name FROM people p LEFT JOIN poker_player pp ON p.People_ID = pp.People_ID ORDER BY pp.Earnings DESC, p.Name ASC, pp.Poker_Player_ID ASC"
      ]
    ]
  },
  {
    "id": 673,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT Nationality, COUNT(People_ID) AS NumberOfPeople FROM people GROUP BY Nationality",
        "SELECT Nationality, COUNT(*) AS CountOfPeople FROM people GROUP BY Nationality",
        "SELECT p.Nationality, COUNT(p.People_ID) AS Total FROM people p GROUP BY p.Nationality",
        "SELECT Nationality, COUNT(People_ID) FROM people GROUP BY Nationality",
        "SELECT Nationality, COUNT(People_ID) AS PeopleCount FROM people GROUP BY Nationality ORDER BY Nationality",
        "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC",
        "SELECT p.Nationality, COUNT(*) AS NumPeople FROM people p GROUP BY p.Nationality ORDER BY NumPeople DESC",
        "SELECT Nationality, COUNT(People_ID) AS TotalPeople FROM people GROUP BY Nationality ORDER BY TotalPeople",
        "SELECT Nationality, COUNT(People_ID) AS Count FROM people GROUP BY Nationality HAVING COUNT(People_ID) > 0",
        "SELECT Nationality, COUNT(People_ID) AS NumberOfIndividuals FROM people GROUP BY Nationality ORDER BY NumberOfIndividuals DESC"
      ]
    ]
  },
  {
    "id": 674,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT Nationality, COUNT(*) AS count FROM people GROUP BY Nationality",
        "SELECT Nationality, COUNT(People_ID) FROM people GROUP BY Nationality",
        "SELECT COUNT(*), Nationality FROM people GROUP BY Nationality",
        "SELECT Nationality, COUNT(People_ID) AS NumberOfPeople FROM people GROUP BY Nationality",
        "SELECT p.Nationality, COUNT(*) FROM people p GROUP BY p.Nationality",
        "SELECT Nationality, COUNT(1) FROM people GROUP BY Nationality",
        "SELECT Nationality, COUNT(People_ID) AS Total FROM people GROUP BY Nationality ORDER BY Nationality",
        "SELECT Nationality, COUNT(*) AS TotalPeople FROM people GROUP BY Nationality ORDER BY TotalPeople DESC",
        "SELECT Nationality, COUNT(People_ID) AS CountOfPeople FROM people GROUP BY Nationality ORDER BY CountOfPeople",
        "SELECT Nationality, COUNT(*) AS Population FROM people GROUP BY Nationality ORDER BY Population DESC"
      ]
    ]
  },
  {
    "id": 675,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT Nationality, COUNT(*) AS Frequency FROM people GROUP BY Nationality ORDER BY Frequency DESC LIMIT 1",
        "SELECT Nationality, COUNT(Nationality) AS Count FROM people GROUP BY Nationality HAVING COUNT(Nationality) = (SELECT MAX(c) FROM (SELECT COUNT(*) AS c FROM people GROUP BY Nationality) AS subquery)",
        "SELECT TOP 1 Nationality, COUNT(*) AS Total FROM people GROUP BY Nationality ORDER BY Total DESC",
        "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC FETCH FIRST ROW ONLY",
        "SELECT p.Nationality FROM people p GROUP BY p.Nationality ORDER BY COUNT(p.Nationality) DESC LIMIT 1",
        "SELECT Nationality, COUNT(Nationality) AS Count FROM people GROUP BY Nationality ORDER BY Count DESC LIMIT 1",
        "SELECT Nationality FROM (SELECT Nationality, COUNT(*) AS count FROM people GROUP BY Nationality ORDER BY count DESC) WHERE ROWNUM = 1",
        "SELECT Nationality, MAX(Count) FROM (SELECT Nationality, COUNT(*) AS Count FROM people GROUP BY Nationality) GROUP BY Nationality ORDER BY MAX(Count) DESC LIMIT 1",
        "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(Nationality) DESC LIMIT 1",
        "SELECT Nationality, COUNT(*) AS TotalCount FROM people GROUP BY Nationality ORDER BY TotalCount DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 676,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM people GROUP BY Nationality) AS subquery)",
        "SELECT p.Nationality FROM people p GROUP BY p.Nationality HAVING COUNT(p.Nationality) = (SELECT MAX(c) FROM (SELECT COUNT(*) AS c FROM people GROUP BY Nationality) AS counts)",
        "WITH NationalityCounts AS (SELECT Nationality, COUNT(*) AS Count FROM people GROUP BY Nationality), MaxCount AS (SELECT MAX(Count) AS MaxCount FROM NationalityCounts) SELECT Nationality FROM NationalityCounts WHERE Count = (SELECT MaxCount FROM MaxCount)",
        "SELECT Nationality FROM (SELECT Nationality, COUNT(*) AS Count FROM people GROUP BY Nationality) AS NationalityCount WHERE Count = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM people GROUP BY Nationality) AS MaxCount)",
        "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(Nationality) = (SELECT COUNT(Nationality) FROM people GROUP BY Nationality ORDER BY COUNT(Nationality) DESC LIMIT 1)",
        "SELECT TOP 1 WITH TIES Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC",
        "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS WITH TIES",
        "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) = (SELECT TOP 1 COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC)",
        "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(Nationality) = (SELECT MAX(Count) FROM (SELECT Nationality, COUNT(Nationality) AS Count FROM people GROUP BY Nationality) AS TempTable)",
        "SELECT Nationality FROM (SELECT Nationality, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank FROM people GROUP BY Nationality) AS RankedNationalities WHERE rank = 1"
      ]
    ]
  },
  {
    "id": 677,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
        "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) > 1",
        "SELECT p.Nationality FROM people p GROUP BY p.Nationality HAVING COUNT(p.People_ID) >= 2",
        "SELECT DISTINCT Nationality FROM people WHERE Nationality IN (SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) > 1)",
        "SELECT Nationality, COUNT(*) AS count FROM people GROUP BY Nationality HAVING count > 1",
        "SELECT Nationality FROM (SELECT Nationality, COUNT(*) as num FROM people GROUP BY Nationality) as subquery WHERE num >= 2",
        "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(Nationality) >= 2",
        "SELECT Nationality, COUNT(Nationality) as Total FROM people GROUP BY Nationality HAVING Total > 1",
        "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) >= 2",
        "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2 ORDER BY Nationality"
      ]
    ]
  },
  {
    "id": 678,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
        "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) >= 2",
        "SELECT p.Nationality FROM people p GROUP BY p.Nationality HAVING COUNT(p.People_ID) >= 2",
        "SELECT Nationality FROM (SELECT Nationality, COUNT(*) as num FROM people GROUP BY Nationality) WHERE num >= 2",
        "SELECT Nationality, COUNT(*) as Total FROM people GROUP BY Nationality HAVING Total >= 2",
        "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(Nationality) >= 2",
        "SELECT DISTINCT Nationality FROM people WHERE Nationality IN (SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) > 1)",
        "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality HAVING COUNT(*) > 1",
        "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) > 1",
        "SELECT Nationality, COUNT(People_ID) as Count FROM people GROUP BY Nationality HAVING Count > 1"
      ]
    ]
  },
  {
    "id": 679,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT Name, Birth_Date FROM people ORDER BY Name ASC, People_ID ASC",
        "SELECT Name, Birth_Date FROM people ORDER BY Name, People_ID",
        "SELECT people.Name, people.Birth_Date FROM people ORDER BY people.Name ASC, people.People_ID ASC",
        "SELECT p.Name, p.Birth_Date FROM people p ORDER BY p.Name ASC, p.People_ID ASC",
        "SELECT Name, Birth_Date FROM people ORDER BY Name ASCENDING, People_ID ASCENDING",
        "SELECT Name, Birth_Date FROM people ORDER BY Name COLLATE NOCASE ASC, People_ID ASC",
        "SELECT Name, Birth_Date FROM people ORDER BY UPPER(Name) ASC, People_ID ASC",
        "SELECT Name, Birth_Date FROM people ORDER BY LOWER(Name) ASC, People_ID ASC",
        "SELECT Name, Birth_Date FROM people ORDER BY Name ASC, People_ID ASCENDING",
        "SELECT Name, Birth_Date FROM people ORDER BY Name ASC, CAST(People_ID AS INTEGER) ASC"
      ]
    ]
  },
  {
    "id": 680,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT Name, Birth_Date FROM people ORDER BY Name ASC, People_ID ASC",
        "SELECT Name, Birth_Date FROM people ORDER BY Name, People_ID",
        "SELECT people.Name, people.Birth_Date FROM people ORDER BY people.Name ASC, people.People_ID ASC",
        "SELECT p.Name, p.Birth_Date FROM people p ORDER BY p.Name ASC, p.People_ID ASC",
        "SELECT Name, Birth_Date FROM people ORDER BY Name COLLATE NOCASE ASC, People_ID ASC",
        "SELECT Name, Birth_Date FROM people ORDER BY UPPER(Name) ASC, People_ID ASC",
        "SELECT Name, Birth_Date FROM people ORDER BY Name ASCENDING, People_ID ASCENDING",
        "SELECT Name, Birth_Date FROM people ORDER BY Name ASC, People_ID",
        "SELECT Name, Birth_Date FROM people ORDER BY Name, People_ID ASC",
        "SELECT Name, Birth_Date FROM people ORDER BY Name ASC, People_ID ASCENDING"
      ]
    ]
  },
  {
    "id": 681,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT Name FROM people WHERE Nationality <> 'Russia'",
        "SELECT Name FROM people WHERE Nationality != 'Russia'",
        "SELECT Name FROM people WHERE NOT Nationality = 'Russia'",
        "SELECT people.Name FROM people WHERE people.Nationality NOT IN ('Russia')",
        "SELECT p.Name FROM people p WHERE p.Nationality <> 'Russia'",
        "SELECT p.Name FROM people AS p WHERE p.Nationality != 'Russia'",
        "SELECT Name FROM people WHERE Nationality NOT LIKE 'Russia'",
        "SELECT Name FROM people WHERE Nationality IS NOT 'Russia'",
        "SELECT Name FROM people WHERE NOT (Nationality = 'Russia')",
        "SELECT Name FROM people WHERE Nationality NOT EQUALS 'Russia'"
      ]
    ]
  },
  {
    "id": 682,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT Name FROM people WHERE Nationality <> 'Russia'",
        "SELECT Name FROM people WHERE NOT Nationality = 'Russia'",
        "SELECT Name FROM people WHERE Nationality != 'Russia'",
        "SELECT people.Name FROM people WHERE people.Nationality <> 'Russia'",
        "SELECT p.Name FROM people p WHERE p.Nationality <> 'Russia'",
        "SELECT Name FROM people WHERE Nationality NOT IN ('Russia')",
        "SELECT Name FROM people WHERE Nationality NOT LIKE 'Russia'",
        "SELECT people.Name FROM people WHERE people.Nationality NOT IN ('Russia')",
        "SELECT p.Name FROM people p WHERE p.Nationality != 'Russia'",
        "SELECT Name FROM people WHERE Nationality IS NOT 'Russia'"
      ]
    ]
  },
  {
    "id": 683,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "SELECT p.Name FROM people p WHERE p.People_ID NOT IN (SELECT pp.People_ID FROM poker_player pp)",
        "SELECT Name FROM people WHERE NOT EXISTS (SELECT 1 FROM poker_player WHERE poker_player.People_ID = people.People_ID)",
        "SELECT p.Name FROM people p LEFT JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.People_ID IS NULL",
        "SELECT Name FROM people EXCEPT SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID",
        "SELECT Name FROM people WHERE People_ID NOT IN (SELECT DISTINCT People_ID FROM poker_player)",
        "SELECT DISTINCT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "SELECT Name FROM people p WHERE NOT EXISTS (SELECT NULL FROM poker_player pp WHERE pp.People_ID = p.People_ID)",
        "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player WHERE People_ID IS NOT NULL)",
        "SELECT p.Name FROM people p WHERE p.People_ID NOT IN (SELECT People_ID FROM poker_player) AND p.Name IS NOT NULL"
      ]
    ]
  },
  {
    "id": 684,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "SELECT p.Name FROM people p WHERE p.People_ID NOT IN (SELECT pp.People_ID FROM poker_player pp)",
        "SELECT Name FROM people WHERE NOT EXISTS (SELECT 1 FROM poker_player WHERE poker_player.People_ID = people.People_ID)",
        "SELECT people.Name FROM people LEFT JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.People_ID IS NULL",
        "SELECT p.Name FROM people p LEFT OUTER JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.People_ID IS NULL",
        "SELECT Name FROM people WHERE People_ID NOT IN (SELECT DISTINCT People_ID FROM poker_player)",
        "SELECT DISTINCT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "SELECT Name FROM people p WHERE NOT EXISTS (SELECT NULL FROM poker_player pp WHERE pp.People_ID = p.People_ID)",
        "SELECT p.Name FROM people p WHERE p.People_ID NOT IN (SELECT People_ID FROM poker_player WHERE People_ID IS NOT NULL)",
        "SELECT Name FROM people EXCEPT SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID"
      ]
    ]
  },
  {
    "id": 685,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT Nationality) FROM people",
        "SELECT COUNT(UNIQUE Nationality) FROM people",
        "SELECT COUNT(*) FROM (SELECT DISTINCT Nationality FROM people) AS unique_nationalities",
        "SELECT COUNT(DISTINCT Nationality) AS total_nationalities FROM people",
        "SELECT COUNT(*) FROM (SELECT Nationality FROM people GROUP BY Nationality) AS distinct_nationalities",
        "SELECT DISTINCT COUNT(Nationality) FROM people",
        "SELECT COUNT(Nationality) FROM (SELECT DISTINCT Nationality FROM people) temp",
        "SELECT COUNT(DISTINCT people.Nationality) FROM people",
        "SELECT COUNT(*) FROM (SELECT DISTINCT Nationality FROM people) unique_nationalities",
        "SELECT DISTINCT COUNT(*) FROM (SELECT Nationality FROM people GROUP BY Nationality) AS count_nationalities"
      ]
    ]
  },
  {
    "id": 686,
    "db_id": "poker_player",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT Nationality) FROM people",
        "SELECT COUNT(UNIQUE Nationality) FROM people",
        "SELECT COUNT(*) FROM (SELECT DISTINCT Nationality FROM people) AS unique_nationalities",
        "SELECT COUNT(DISTINCT Nationality) AS count_of_nationalities FROM people",
        "SELECT COUNT(DISTINCT p.Nationality) FROM people p",
        "SELECT COUNT(*) FROM (SELECT Nationality FROM people GROUP BY Nationality) AS distinct_nationalities",
        "SELECT COUNT(DISTINCT Nationality) FROM people GROUP BY Nationality HAVING COUNT(Nationality) > 0",
        "SELECT COUNT(Nationality) FROM (SELECT DISTINCT Nationality FROM people) temp",
        "SELECT DISTINCT COUNT(Nationality) FROM people",
        "SELECT COUNT(DISTINCT Nationality) FROM people WHERE Nationality IS NOT NULL"
      ]
    ]
  },
  {
    "id": 687,
    "db_id": "voter_1",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE",
        "SELECT COUNT(UNIQUE state) FROM AREA_CODE_STATE",
        "SELECT COUNT(*) FROM (SELECT DISTINCT state FROM AREA_CODE_STATE)",
        "SELECT COUNT(state) FROM (SELECT DISTINCT state FROM AREA_CODE_STATE AS A)",
        "SELECT COUNT(DISTINCT state) AS NumberOfStates FROM AREA_CODE_STATE",
        "SELECT DISTINCT COUNT(state) FROM AREA_CODE_STATE",
        "SELECT COUNT(*) FROM (SELECT state FROM AREA_CODE_STATE GROUP BY state)",
        "SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE GROUP BY state",
        "SELECT COUNT(state) FROM AREA_CODE_STATE GROUP BY state",
        "SELECT DISTINCT COUNT(*) FROM (SELECT state FROM AREA_CODE_STATE GROUP BY state)"
      ]
    ]
  },
  {
    "id": 688,
    "db_id": "voter_1",
    "infer_predictions": [
      [
        "SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC",
        "SELECT contestant_name, contestant_number FROM CONTESTANTS ORDER BY contestant_name DESC",
        "SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c ORDER BY c.contestant_name DESC",
        "SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESCENDING",
        "SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY CONTESTANTS.contestant_name DESC",
        "SELECT contestant_name AS Name, contestant_number AS Number FROM CONTESTANTS ORDER BY Name DESC",
        "SELECT contestant_number AS Number, contestant_name AS Name FROM CONTESTANTS ORDER BY Name DESC",
        "SELECT * FROM CONTESTANTS ORDER BY contestant_name DESC",
        "SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY 2 DESC",
        "SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESCENDING"
      ]
    ]
  },
  {
    "id": 689,
    "db_id": "voter_1",
    "infer_predictions": [
      [
        "SELECT vote_id, phone_number, state FROM VOTES",
        "SELECT VOTES.vote_id, VOTES.phone_number, VOTES.state FROM VOTES",
        "SELECT v.vote_id, v.phone_number, v.state FROM VOTES v",
        "SELECT vote_id AS VoteID, phone_number AS PhoneNumber, state AS State FROM VOTES",
        "SELECT * FROM VOTES",
        "SELECT vote_id, phone_number, state FROM VOTES ORDER BY vote_id",
        "SELECT vote_id, phone_number, state FROM VOTES WHERE vote_id IS NOT NULL",
        "SELECT DISTINCT vote_id, phone_number, state FROM VOTES",
        "SELECT vote_id, phone_number, state FROM VOTES GROUP BY vote_id, phone_number, state",
        "SELECT vote_id, phone_number, state FROM VOTES WHERE state IS NOT NULL"
      ]
    ]
  },
  {
    "id": 690,
    "db_id": "voter_1",
    "infer_predictions": [
      [
        "SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE",
        "SELECT MAX(area_code), MIN(area_code) FROM AREA_CODE_STATE",
        "SELECT (SELECT MAX(area_code) FROM AREA_CODE_STATE) AS Maximum, (SELECT MIN(area_code) FROM AREA_CODE_STATE) AS Minimum",
        "SELECT MAX(area_code) AS MaximumAreaCode, MIN(area_code) AS MinimumAreaCode FROM AREA_CODE_STATE",
        "SELECT area_code FROM AREA_CODE_STATE ORDER BY area_code DESC LIMIT 1, 1 UNION SELECT area_code FROM AREA_CODE_STATE ORDER BY area_code ASC LIMIT 1",
        "WITH MaxMin AS (SELECT MAX(area_code) AS MaxCode, MIN(area_code) AS MinCode FROM AREA_CODE_STATE) SELECT MaxCode, MinCode FROM MaxMin",
        "SELECT TOP 1 area_code AS MaxCode FROM AREA_CODE_STATE ORDER BY area_code DESC, area_code AS MinCode FROM AREA_CODE_STATE ORDER BY area_code ASC LIMIT 1",
        "SELECT area_code FROM AREA_CODE_STATE GROUP BY area_code HAVING area_code = MAX(area_code) OR area_code = MIN(area_code)",
        "SELECT * FROM (SELECT 'Max' AS Type, MAX(area_code) AS Code FROM AREA_CODE_STATE UNION ALL SELECT 'Min' AS Type, MIN(area_code) AS Code FROM AREA_CODE_STATE) AS Result",
        "SELECT MAX(area_code) AS Highest, MIN(area_code) AS Lowest FROM AREA_CODE_STATE WHERE area_code IS NOT NULL"
      ]
    ]
  },
  {
    "id": 691,
    "db_id": "voter_1",
    "infer_predictions": [
      [
        "SELECT MAX(created) FROM VOTES WHERE state = 'CA'",
        "SELECT created FROM VOTES WHERE state = 'CA' ORDER BY created DESC LIMIT 1",
        "SELECT TOP 1 created FROM VOTES WHERE state = 'CA' ORDER BY created DESC",
        "SELECT created FROM VOTES WHERE state = 'CA' ORDER BY created DESC FETCH FIRST ROW ONLY",
        "SELECT MAX(VOTES.created) AS LastCreatedDate FROM VOTES WHERE VOTES.state = 'CA'",
        "SELECT created FROM VOTES WHERE state = 'CA' ORDER BY created DESC, vote_id DESC LIMIT 1",
        "SELECT created FROM (SELECT created FROM VOTES WHERE state = 'CA' ORDER BY created DESC) WHERE ROWNUM = 1",
        "SELECT created FROM VOTES WHERE state = 'CA' ORDER BY created DESC LIMIT 1 OFFSET 0",
        "SELECT created FROM VOTES WHERE state = 'CA' ORDER BY created DESC ROWS 1",
        "SELECT created FROM VOTES WHERE state = 'CA' ORDER BY created DESC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING"
      ]
    ]
  },
  {
    "id": 692,
    "db_id": "voter_1",
    "infer_predictions": [
      [
        "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name <> 'Jessie Alloway'",
        "SELECT contestant_name FROM CONTESTANTS WHERE NOT contestant_name = 'Jessie Alloway'",
        "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway'",
        "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name NOT IN ('Jessie Alloway')",
        "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name NOT LIKE 'Jessie Alloway'",
        "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name IS NOT 'Jessie Alloway'",
        "SELECT contestant_name FROM CONTESTANTS WHERE 'Jessie Alloway' <> contestant_name",
        "SELECT contestant_name FROM CONTESTANTS WHERE 'Jessie Alloway' != contestant_name",
        "SELECT contestant_name FROM CONTESTANTS WHERE 'Jessie Alloway' NOT IN (contestant_name)",
        "SELECT contestant_name FROM CONTESTANTS WHERE 'Jessie Alloway' IS NOT contestant_name"
      ]
    ]
  },
  {
    "id": 693,
    "db_id": "voter_1",
    "infer_predictions": [
      [
        "SELECT DISTINCT state, created FROM VOTES",
        "SELECT state, created FROM VOTES GROUP BY state, created",
        "SELECT UNIQUE state, created FROM VOTES",
        "SELECT state, created FROM VOTES DISTINCT",
        "SELECT DISTINCT VOTES.state, VOTES.created FROM VOTES",
        "SELECT state AS State, created AS CreateTime FROM VOTES DISTINCT",
        "SELECT DISTINCT state, MIN(created) FROM VOTES GROUP BY state",
        "SELECT DISTINCT ON (state) state, created FROM VOTES",
        "SELECT state, created FROM (SELECT DISTINCT state, created FROM VOTES) AS unique_votes",
        "SELECT DISTINCT state, created FROM VOTES ORDER BY state, created"
      ]
    ]
  },
  {
    "id": 694,
    "db_id": "voter_1",
    "infer_predictions": [
      [
        "SELECT C.contestant_number, C.contestant_name FROM CONTESTANTS C JOIN VOTES V ON C.contestant_number = V.contestant_number GROUP BY C.contestant_number, C.contestant_name HAVING COUNT(V.vote_id) >= 2",
        "SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN (SELECT contestant_number FROM VOTES GROUP BY contestant_number HAVING COUNT(*) >= 2)",
        "SELECT C.contestant_number, C.contestant_name FROM CONTESTANTS C WHERE EXISTS (SELECT 1 FROM VOTES V WHERE V.contestant_number = C.contestant_number GROUP BY V.contestant_number HAVING COUNT(V.vote_id) >= 2)",
        "SELECT contestant_number, contestant_name FROM CONTESTANTS INNER JOIN (SELECT contestant_number FROM VOTES GROUP BY contestant_number HAVING COUNT(vote_id) >= 2) AS V ON CONTESTANTS.contestant_number = V.contestant_number",
        "SELECT C.contestant_number, C.contestant_name FROM CONTESTANTS C INNER JOIN VOTES V ON C.contestant_number = V.contestant_number GROUP BY C.contestant_number, C.contestant_name HAVING COUNT(*) >= 2",
        "SELECT C.contestant_number, C.contestant_name FROM CONTESTANTS C, VOTES V WHERE C.contestant_number = V.contestant_number GROUP BY C.contestant_number, C.contestant_name HAVING COUNT(V.vote_id) >= 2",
        "SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN (SELECT contestant_number FROM VOTES GROUP BY contestant_number HAVING COUNT(vote_id) >= 2)",
        "SELECT C.contestant_number, C.contestant_name FROM CONTESTANTS C LEFT JOIN VOTES V ON C.contestant_number = V.contestant_number GROUP BY C.contestant_number, C.contestant_name HAVING COUNT(V.vote_id) >= 2",
        "SELECT DISTINCT C.contestant_number, C.contestant_name FROM CONTESTANTS C JOIN VOTES V ON C.contestant_number = V.contestant_number GROUP BY C.contestant_number, C.contestant_name HAVING COUNT(V.vote_id) >= 2",
        "SELECT C.contestant_number, C.contestant_name FROM CONTESTANTS C JOIN VOTES V ON C.contestant_number = V.contestant_number WHERE (SELECT COUNT(*) FROM VOTES V2 WHERE V2.contestant_number = C.contestant_number) >= 2 GROUP BY C.contestant_number, C.contestant_name"
      ]
    ]
  },
  {
    "id": 695,
    "db_id": "voter_1",
    "infer_predictions": [
      [
        "SELECT C.contestant_number, C.contestant_name FROM CONTESTANTS C JOIN VOTES V ON C.contestant_number = V.contestant_number GROUP BY C.contestant_number, C.contestant_name HAVING COUNT(V.vote_id) = (SELECT MIN(vote_count) FROM (SELECT COUNT(vote_id) AS vote_count FROM VOTES GROUP BY contestant_number) AS subquery)",
        "SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN (SELECT contestant_number FROM VOTES GROUP BY contestant_number HAVING COUNT(*) = (SELECT MIN(vote_count) FROM (SELECT contestant_number, COUNT(*) AS vote_count FROM VOTES GROUP BY contestant_number) AS votes))",
        "SELECT C.contestant_number, C.contestant_name FROM CONTESTANTS C WHERE C.contestant_number IN (SELECT contestant_number FROM VOTES GROUP BY contestant_number HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM VOTES GROUP BY contestant_number))",
        "SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN (SELECT contestant_number FROM VOTES GROUP BY contestant_number ORDER BY COUNT(*) ASC LIMIT 1)",
        "SELECT C.contestant_number, C.contestant_name FROM CONTESTANTS C INNER JOIN (SELECT contestant_number FROM VOTES GROUP BY contestant_number HAVING COUNT(vote_id) = (SELECT MIN(vote_count) FROM (SELECT contestant_number, COUNT(vote_id) AS vote_count FROM VOTES GROUP BY contestant_number) AS votes)) V ON C.contestant_number = V.contestant_number",
        "SELECT C.contestant_number, C.contestant_name FROM CONTESTANTS C, VOTES V WHERE C.contestant_number = V.contestant_number GROUP BY C.contestant_number HAVING COUNT(V.vote_id) = (SELECT MIN(vote_count) FROM (SELECT COUNT(vote_id) AS vote_count FROM VOTES GROUP BY contestant_number) AS subquery)",
        "SELECT C.contestant_number, C.contestant_name FROM CONTESTANTS C JOIN VOTES V ON C.contestant_number = V.contestant_number GROUP BY C.contestant_number HAVING COUNT(*) = (SELECT MIN(vote_count) FROM (SELECT contestant_number, COUNT(*) AS vote_count FROM VOTES GROUP BY contestant_number) AS votes)",
        "SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN (SELECT contestant_number FROM VOTES GROUP BY contestant_number HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM VOTES GROUP BY contestant_number))",
        "SELECT C.contestant_number, C.contestant_name FROM CONTESTANTS C WHERE EXISTS (SELECT 1 FROM VOTES V WHERE V.contestant_number = C.contestant_number GROUP BY V.contestant_number HAVING COUNT(V.vote_id) = (SELECT MIN(vote_count) FROM (SELECT COUNT(vote_id) AS vote_count FROM VOTES GROUP BY contestant_number) AS subquery))",
        "SELECT C.contestant_number, C.contestant_name FROM CONTESTANTS C WHERE C.contestant_number IN (SELECT V.contestant_number FROM VOTES V GROUP BY V.contestant_number HAVING COUNT(V.vote_id) = (SELECT MIN(vote_count) FROM (SELECT contestant_number, COUNT(vote_id) AS vote_count FROM VOTES GROUP BY contestant_number) AS votes))"
      ]
    ]
  },
  {
    "id": 696,
    "db_id": "voter_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM VOTES WHERE state IN ('NY', 'CA')",
        "SELECT COUNT(vote_id) FROM VOTES WHERE state = 'NY' OR state = 'CA'",
        "SELECT COUNT(*) AS total_votes FROM VOTES WHERE state IN ('CA', 'NY')",
        "SELECT COUNT(*) FROM VOTES WHERE state = 'CA' UNION ALL SELECT COUNT(*) FROM VOTES WHERE state = 'NY'",
        "SELECT state, COUNT(*) FROM VOTES WHERE state IN ('NY', 'CA') GROUP BY state",
        "SELECT COUNT(vote_id) FROM VOTES WHERE state IN ('NY', 'CA') GROUP BY state",
        "SELECT 'Total Votes' AS Description, COUNT(*) AS Number FROM VOTES WHERE state IN ('NY', 'CA')",
        "SELECT COUNT(*) FROM VOTES WHERE state = 'NY' UNION SELECT COUNT(*) FROM VOTES WHERE state = 'CA'",
        "SELECT SUM(CASE WHEN state = 'NY' THEN 1 ELSE 0 END) + SUM(CASE WHEN state = 'CA' THEN 1 ELSE 0 END) AS TotalVotes FROM VOTES",
        "SELECT COUNT(*) FROM VOTES WHERE state IN (SELECT state FROM AREA_CODE_STATE WHERE state = 'NY' OR state = 'CA')"
      ]
    ]
  },
  {
    "id": 697,
    "db_id": "voter_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)",
        "SELECT COUNT(contestant_number) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT DISTINCT contestant_number FROM VOTES)",
        "SELECT COUNT(*) FROM CONTESTANTS AS C WHERE NOT EXISTS (SELECT 1 FROM VOTES AS V WHERE V.contestant_number = C.contestant_number)",
        "SELECT COUNT(*) FROM CONTESTANTS LEFT JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number WHERE VOTES.contestant_number IS NULL",
        "WITH Voted AS (SELECT DISTINCT contestant_number FROM VOTES) SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM Voted)",
        "SELECT COUNT(*) FROM CONTESTANTS WHERE NOT EXISTS (SELECT contestant_number FROM VOTES WHERE VOTES.contestant_number = CONTESTANTS.contestant_number)",
        "SELECT COUNT(DISTINCT contestant_number) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES WHERE contestant_number IS NOT NULL)",
        "SELECT COUNT(*) FROM (SELECT contestant_number FROM CONTESTANTS EXCEPT SELECT contestant_number FROM VOTES) AS Unvoted",
        "SELECT COUNT(*) FROM CONTESTANTS C WHERE C.contestant_number NOT IN (SELECT V.contestant_number FROM VOTES V)",
        "SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES GROUP BY contestant_number)"
      ]
    ]
  },
  {
    "id": 698,
    "db_id": "voter_1",
    "infer_predictions": [
      [
        "SELECT area_code FROM AREA_CODE_STATE WHERE state IN (SELECT state FROM VOTES GROUP BY state HAVING COUNT(*) = (SELECT MAX(vote_count) FROM (SELECT COUNT(*) AS vote_count FROM VOTES GROUP BY state) AS subquery))",
        "SELECT ACS.area_code FROM AREA_CODE_STATE ACS JOIN (SELECT state, COUNT(*) AS vote_count FROM VOTES GROUP BY state) V ON ACS.state = V.state WHERE V.vote_count = (SELECT MAX(vote_count) FROM (SELECT COUNT(*) AS vote_count FROM VOTES GROUP BY state) AS subquery)",
        "SELECT ACS.area_code FROM AREA_CODE_STATE ACS WHERE EXISTS (SELECT 1 FROM VOTES V WHERE V.state = ACS.state GROUP BY V.state HAVING COUNT(*) = (SELECT MAX(vote_count) FROM (SELECT state, COUNT(*) AS vote_count FROM VOTES GROUP BY state) AS subquery))",
        "WITH StateVotes AS (SELECT state, COUNT(*) AS vote_count FROM VOTES GROUP BY state), MaxVotes AS (SELECT MAX(vote_count) AS max_vote FROM StateVotes) SELECT area_code FROM AREA_CODE_STATE WHERE state IN (SELECT state FROM StateVotes WHERE vote_count = (SELECT max_vote FROM MaxVotes))",
        "SELECT area_code FROM AREA_CODE_STATE WHERE state IN (SELECT state FROM VOTES GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT ACS.area_code FROM AREA_CODE_STATE ACS INNER JOIN (SELECT state FROM VOTES GROUP BY state HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM VOTES GROUP BY state)) AS MaxStates ON ACS.state = MaxStates.state",
        "SELECT area_code FROM AREA_CODE_STATE WHERE state IN (SELECT TOP 1 WITH TIES state FROM VOTES GROUP BY state ORDER BY COUNT(*) DESC)",
        "SELECT ACS.area_code FROM AREA_CODE_STATE ACS, (SELECT state, COUNT(*) AS votes FROM VOTES GROUP BY state HAVING votes = (SELECT MAX(votes) FROM (SELECT COUNT(*) AS votes FROM VOTES GROUP BY state) AS subquery)) AS MaxVotes WHERE ACS.state = MaxVotes.state",
        "SELECT area_code FROM AREA_CODE_STATE WHERE state IN (SELECT state FROM (SELECT state, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank FROM VOTES GROUP BY state) AS RankedStates WHERE rank = 1)",
        "SELECT ACS.area_code FROM AREA_CODE_STATE ACS WHERE ACS.state IN (SELECT state FROM VOTES GROUP BY state HAVING COUNT(vote_id) = (SELECT MAX(vote_count) FROM (SELECT state, COUNT(vote_id) AS vote_count FROM VOTES GROUP BY state) AS VotesCount))"
      ]
    ]
  },
  {
    "id": 699,
    "db_id": "voter_1",
    "infer_predictions": [
      [
        "SELECT V.created, V.state, V.phone_number FROM VOTES V JOIN CONTESTANTS C ON V.contestant_number = C.contestant_number WHERE C.contestant_name = 'Tabatha Gehling'",
        "SELECT created, state, phone_number FROM VOTES INNER JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling'",
        "SELECT V.created AS VoteDate, V.state AS State, V.phone_number AS PhoneNumber FROM VOTES V, CONTESTANTS C WHERE V.contestant_number = C.contestant_number AND C.contestant_name = 'Tabatha Gehling'",
        "SELECT created, state, phone_number FROM VOTES, CONTESTANTS WHERE VOTES.contestant_number = CONTESTANTS.contestant_number AND CONTESTANTS.contestant_name = 'Tabatha Gehling'",
        "SELECT V.created, V.state, V.phone_number FROM VOTES V INNER JOIN CONTESTANTS C ON V.contestant_number = C.contestant_number WHERE C.contestant_name = 'Tabatha Gehling'",
        "SELECT created, state, phone_number FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling'",
        "SELECT V.created, V.state, V.phone_number FROM VOTES AS V LEFT JOIN CONTESTANTS AS C ON V.contestant_number = C.contestant_number WHERE C.contestant_name = 'Tabatha Gehling'",
        "SELECT created, state, phone_number FROM VOTES LEFT JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling'",
        "SELECT V.created, V.state, V.phone_number FROM VOTES V RIGHT JOIN CONTESTANTS C ON V.contestant_number = C.contestant_number WHERE C.contestant_name = 'Tabatha Gehling'",
        "SELECT created, state, phone_number FROM VOTES RIGHT JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling'"
      ]
    ]
  },
  {
    "id": 700,
    "db_id": "voter_1",
    "infer_predictions": [
      [
        "SELECT area_code FROM AREA_CODE_STATE WHERE state IN (SELECT state FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling' INTERSECT SELECT state FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Kelly Clauss')",
        "SELECT DISTINCT area_code FROM AREA_CODE_STATE WHERE state IN (SELECT V.state FROM VOTES V JOIN CONTESTANTS C ON V.contestant_number = C.contestant_number WHERE C.contestant_name = 'Tabatha Gehling' INTERSECT SELECT V.state FROM VOTES V JOIN CONTESTANTS C ON V.contestant_number = C.contestant_number WHERE C.contestant_name = 'Kelly Clauss')",
        "SELECT A.area_code FROM AREA_CODE_STATE A WHERE EXISTS (SELECT 1 FROM VOTES V JOIN CONTESTANTS C ON V.contestant_number = C.contestant_number WHERE C.contestant_name = 'Tabatha Gehling' AND V.state = A.state) AND EXISTS (SELECT 1 FROM VOTES V JOIN CONTESTANTS C ON V.contestant_number = C.contestant_number WHERE C.contestant_name = 'Kelly Clauss' AND V.state = A.state)",
        "SELECT area_code FROM AREA_CODE_STATE WHERE state IN (SELECT state FROM VOTES, CONTESTANTS WHERE VOTES.contestant_number = CONTESTANTS.contestant_number AND CONTESTANTS.contestant_name = 'Tabatha Gehling' INTERSECT SELECT state FROM VOTES, CONTESTANTS WHERE VOTES.contestant_number = CONTESTANTS.contestant_number AND CONTESTANTS.contestant_name = 'Kelly Clauss')",
        "WITH TabathaVotes AS (SELECT state FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling'), KellyVotes AS (SELECT state FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Kelly Clauss') SELECT area_code FROM AREA_CODE_STATE WHERE state IN (SELECT state FROM TabathaVotes INTERSECT SELECT state FROM KellyVotes)",
        "SELECT area_code FROM AREA_CODE_STATE WHERE state IN (SELECT V.state FROM VOTES V INNER JOIN CONTESTANTS C ON V.contestant_number = C.contestant_number WHERE C.contestant_name IN ('Tabatha Gehling', 'Kelly Clauss') GROUP BY V.state HAVING COUNT(DISTINCT C.contestant_name) = 2)",
        "SELECT area_code FROM AREA_CODE_STATE WHERE state IN (SELECT state FROM VOTES V JOIN CONTESTANTS C ON V.contestant_number = C.contestant_number WHERE C.contestant_name = 'Tabatha Gehling' UNION SELECT state FROM VOTES V JOIN CONTESTANTS C ON V.contestant_number = C.contestant_number WHERE C.contestant_name = 'Kelly Clauss')",
        "SELECT area_code FROM AREA_CODE_STATE WHERE state IN (SELECT state FROM VOTES V JOIN CONTESTANTS C ON V.contestant_number = C.contestant_number WHERE C.contestant_name = 'Tabatha Gehling' AND state IN (SELECT state FROM VOTES V JOIN CONTESTANTS C ON V.contestant_number = C.contestant_number WHERE C.contestant_name = 'Kelly Clauss'))",
        "SELECT DISTINCT A.area_code FROM AREA_CODE_STATE A, VOTES V1, CONTESTANTS C1, VOTES V2, CONTESTANTS C2 WHERE V1.contestant_number = C1.contestant_number AND C1.contestant_name = 'Tabatha Gehling' AND V2.contestant_number = C2.contestant_number AND C2.contestant_name = 'Kelly Clauss' AND V1.state = V2.state AND V1.state = A.state",
        "SELECT area_code FROM AREA_CODE_STATE WHERE state IN (SELECT state FROM VOTES V JOIN CONTESTANTS C ON V.contestant_number = C.contestant_number WHERE C.contestant_name = 'Tabatha Gehling' AND state IN (SELECT state FROM VOTES V JOIN CONTESTANTS C ON V.contestant_number = C.contestant_number WHERE C.contestant_name = 'Kelly Clauss'))"
      ]
    ]
  },
  {
    "id": 701,
    "db_id": "voter_1",
    "infer_predictions": [
      [
        "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'",
        "SELECT contestant_name FROM CONTESTANTS WHERE INSTR(contestant_name, 'Al') > 0",
        "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name CONTAINS 'Al'",
        "SELECT contestant_name FROM CONTESTANTS WHERE POSITION('Al' IN contestant_name) > 0",
        "SELECT contestant_name FROM CONTESTANTS WHERE CHARINDEX('Al', contestant_name) > 0",
        "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name REGEXP 'Al'",
        "SELECT contestant_name FROM CONTESTANTS WHERE LOWER(contestant_name) LIKE '%al%'",
        "SELECT contestant_name FROM CONTESTANTS WHERE UPPER(contestant_name) LIKE '%AL%'",
        "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%' ESCAPE '\\'",
        "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name SIMILAR TO '%Al%'"
      ]
    ]
  },
  {
    "id": 702,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name FROM country WHERE IndepYear > 1950",
        "SELECT country.Name FROM country WHERE country.IndepYear > 1950",
        "SELECT Name FROM country WHERE IndepYear IS NOT NULL AND IndepYear > 1950",
        "SELECT c.Name FROM country AS c WHERE c.IndepYear > 1950",
        "SELECT Name FROM country WHERE IndepYear > '1950'",
        "SELECT Name FROM country WHERE IndepYear > 1950 AND IndepYear IS NOT NULL",
        "SELECT country.Name FROM country WHERE IndepYear > 1950 ORDER BY Name",
        "SELECT Name FROM country WHERE IndepYear > 1950 ORDER BY IndepYear DESC",
        "SELECT DISTINCT Name FROM country WHERE IndepYear > 1950",
        "SELECT Name FROM country WHERE CAST(IndepYear AS INTEGER) > 1950"
      ]
    ]
  },
  {
    "id": 703,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name FROM country WHERE IndepYear > 1950",
        "SELECT country.Name FROM country WHERE country.IndepYear > 1950",
        "SELECT Name FROM country WHERE IndepYear > '1950'",
        "SELECT c.Name FROM country AS c WHERE c.IndepYear > 1950",
        "SELECT Name FROM country WHERE IndepYear IS NOT NULL AND IndepYear > 1950",
        "SELECT Name FROM country WHERE IndepYear > 1950 ORDER BY Name",
        "SELECT Name FROM country WHERE IndepYear > 1950 AND IndepYear IS NOT NULL",
        "SELECT country.Name FROM country WHERE country.IndepYear > 1950 AND country.IndepYear IS NOT NULL",
        "SELECT DISTINCT Name FROM country WHERE IndepYear > 1950",
        "SELECT Name FROM country WHERE CAST(IndepYear AS INTEGER) > 1950"
      ]
    ]
  },
  {
    "id": 704,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%'",
        "SELECT COUNT(Code) FROM country WHERE GovernmentForm LIKE '%Republic%'",
        "SELECT COUNT(DISTINCT Code) FROM country WHERE GovernmentForm LIKE '%Republic%'",
        "SELECT COUNT(*) AS RepublicCount FROM country WHERE GovernmentForm LIKE '%Republic%'",
        "SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE 'Republic%'",
        "SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic'",
        "SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic'",
        "SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE 'Republic'",
        "SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%' ESCAPE '%'",
        "SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%' COLLATE NOCASE"
      ]
    ]
  },
  {
    "id": 705,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%republic%'",
        "SELECT COUNT(DISTINCT Code) FROM country WHERE GovernmentForm LIKE '%republic%'",
        "SELECT COUNT(Code) FROM country WHERE GovernmentForm LIKE '%republic%'",
        "SELECT COUNT(*) AS RepublicCount FROM country WHERE GovernmentForm LIKE '%republic%'",
        "SELECT COUNT(*) FROM country WHERE LOWER(GovernmentForm) LIKE '%republic%'",
        "SELECT COUNT(*) FROM country WHERE GovernmentForm ILIKE '%republic%'",
        "SELECT COUNT(DISTINCT Name) FROM country WHERE GovernmentForm LIKE '%republic%'",
        "SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%'",
        "SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%republic' OR GovernmentForm LIKE 'republic%'",
        "SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%republic%' COLLATE NOCASE"
      ]
    ]
  },
  {
    "id": 706,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Region = 'Caribbean'",
        "SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'",
        "SELECT SUM(country.SurfaceArea) FROM country WHERE country.Region = 'Caribbean'",
        "SELECT SUM(c.SurfaceArea) AS TotalSurfaceArea FROM country AS c WHERE c.Region = 'Caribbean'",
        "SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Region LIKE 'Caribbean'",
        "SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean' GROUP BY Region",
        "SELECT SUM(SurfaceArea) TotalSurfaceArea FROM country WHERE Region = 'Caribbean'",
        "SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean' AND SurfaceArea IS NOT NULL",
        "SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Region = 'Caribbean' AND SurfaceArea > 0",
        "SELECT SUM(c.SurfaceArea) FROM country c WHERE c.Region = 'Caribbean'"
      ]
    ]
  },
  {
    "id": 707,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'",
        "SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Region = 'Caribbean'",
        "SELECT SUM(country.SurfaceArea) FROM country WHERE country.Region = 'Caribbean'",
        "SELECT SUM(SurfaceArea) FROM country WHERE Region LIKE 'Caribbean'",
        "SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean' GROUP BY Region",
        "SELECT SUM(c.SurfaceArea) FROM country AS c WHERE c.Region = 'Caribbean'",
        "SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean' AND SurfaceArea IS NOT NULL",
        "SELECT SUM(SurfaceArea) AS TotalArea FROM country WHERE Region = 'Caribbean'",
        "SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean' AND SurfaceArea > 0",
        "SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean' AND SurfaceArea > 0 GROUP BY Region"
      ]
    ]
  },
  {
    "id": 708,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Continent FROM country WHERE Name = 'Anguilla'",
        "SELECT c.Continent FROM country AS c WHERE c.Name = 'Anguilla'",
        "SELECT country.Continent FROM country WHERE country.Name = 'Anguilla'",
        "SELECT Continent FROM country WHERE Name LIKE 'Anguilla'",
        "SELECT Continent FROM country WHERE Name = 'Anguilla' LIMIT 1",
        "SELECT DISTINCT Continent FROM country WHERE Name = 'Anguilla'",
        "SELECT Continent FROM country WHERE TRIM(Name) = 'Anguilla'",
        "SELECT Continent FROM country WHERE UPPER(Name) = UPPER('Anguilla')",
        "SELECT Continent FROM country WHERE Name COLLATE NOCASE = 'Anguilla'",
        "SELECT Continent FROM country WHERE Name = 'Anguilla' AND Continent IS NOT NULL"
      ]
    ]
  },
  {
    "id": 709,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Continent FROM country WHERE Name = 'Anguilla'",
        "SELECT c.Continent FROM country AS c WHERE c.Name = 'Anguilla'",
        "SELECT country.Continent FROM country WHERE country.Name = 'Anguilla'",
        "SELECT Continent FROM country WHERE Name LIKE 'Anguilla'",
        "SELECT Continent FROM country WHERE Name = 'Anguilla' LIMIT 1",
        "SELECT c.Continent FROM country c WHERE c.Name = 'Anguilla'",
        "SELECT Continent FROM country WHERE TRIM(Name) = 'Anguilla'",
        "SELECT Continent FROM country WHERE UPPER(Name) = UPPER('Anguilla')",
        "SELECT DISTINCT Continent FROM country WHERE Name = 'Anguilla'",
        "SELECT Continent FROM country WHERE Name = 'Anguilla' AND Continent IS NOT NULL"
      ]
    ]
  },
  {
    "id": 710,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT country.Region FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Name = 'Kabul'",
        "SELECT R.Region FROM country AS R JOIN city AS C ON R.Code = C.CountryCode WHERE C.Name = 'Kabul'",
        "SELECT Region FROM country, city WHERE country.Code = city.CountryCode AND city.Name = 'Kabul'",
        "SELECT country.Region FROM country, city WHERE country.Code = city.CountryCode AND city.Name = 'Kabul'",
        "SELECT DISTINCT country.Region FROM country INNER JOIN city ON country.Code = city.CountryCode WHERE city.Name = 'Kabul'",
        "SELECT country.Region FROM country INNER JOIN city ON country.Code = city.CountryCode WHERE city.Name LIKE 'Kabul'",
        "SELECT Region FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE ci.Name = 'Kabul'",
        "SELECT c.Region FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE ci.Name = 'Kabul'",
        "SELECT country.Region FROM country LEFT JOIN city ON country.Code = city.CountryCode WHERE city.Name = 'Kabul'",
        "SELECT country.Region FROM country RIGHT JOIN city ON country.Code = city.CountryCode WHERE city.Name = 'Kabul'"
      ]
    ]
  },
  {
    "id": 711,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT country.Region FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Name = 'Kabul'",
        "SELECT R.Region FROM country AS R INNER JOIN city AS C ON R.Code = C.CountryCode WHERE C.Name = 'Kabul'",
        "SELECT region FROM country, city WHERE country.Code = city.CountryCode AND city.Name = 'Kabul'",
        "SELECT country.Region FROM country, city WHERE country.Code = city.CountryCode AND city.Name = 'Kabul'",
        "SELECT c.Region FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE ci.Name = 'Kabul'",
        "SELECT DISTINCT country.Region FROM country INNER JOIN city ON country.Code = city.CountryCode WHERE city.Name = 'Kabul'",
        "SELECT country.Region FROM country INNER JOIN city ON country.Code = city.CountryCode WHERE city.Name LIKE 'Kabul'",
        "SELECT (SELECT Region FROM country WHERE Code = (SELECT CountryCode FROM city WHERE Name = 'Kabul')) AS Region",
        "SELECT country.Region FROM country, city WHERE country.Code = city.CountryCode AND city.Name = 'Kabul' LIMIT 1",
        "SELECT TOP 1 country.Region FROM country INNER JOIN city ON country.Code = city.CountryCode WHERE city.Name = 'Kabul'"
      ]
    ]
  },
  {
    "id": 712,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = 'Aruba' AND countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = 'Aruba')",
        "SELECT Language FROM countrylanguage, country WHERE countrylanguage.CountryCode = country.Code AND country.Name = 'Aruba' AND countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage, country WHERE countrylanguage.CountryCode = country.Code AND country.Name = 'Aruba')",
        "SELECT CL.Language FROM countrylanguage AS CL INNER JOIN country AS C ON CL.CountryCode = C.Code WHERE C.Name = 'Aruba' AND CL.Percentage = (SELECT MAX(Percentage) FROM countrylanguage AS CL INNER JOIN country AS C ON CL.CountryCode = C.Code WHERE C.Name = 'Aruba')",
        "SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba') AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba'))",
        "SELECT CL.Language FROM countrylanguage CL JOIN country C ON CL.CountryCode = C.Code WHERE C.Name = 'Aruba' AND CL.Percentage IN (SELECT MAX(Percentage) FROM countrylanguage CL JOIN country C ON CL.CountryCode = C.Code WHERE C.Name = 'Aruba')",
        "SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba') AND Percentage >= ALL (SELECT Percentage FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba'))",
        "SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba') ORDER BY Percentage DESC LIMIT 1",
        "SELECT TOP 1 Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba') ORDER BY Percentage DESC",
        "SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba') AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba'))",
        "SELECT Language FROM countrylanguage AS CL INNER JOIN country AS C ON CL.CountryCode = C.Code WHERE C.Name = 'Aruba' AND CL.Percentage = (SELECT MAX(Percentage) FROM countrylanguage AS CL INNER JOIN country AS C ON CL.CountryCode = C.Code WHERE C.Name = 'Aruba')"
      ]
    ]
  },
  {
    "id": 713,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT CountryCode FROM city WHERE Name = 'Aruba') AND IsOfficial = 'T'",
        "SELECT countrylanguage.Language FROM countrylanguage JOIN city ON countrylanguage.CountryCode = city.CountryCode WHERE city.Name = 'Aruba' AND countrylanguage.IsOfficial = 'T'",
        "SELECT L.Language FROM countrylanguage AS L JOIN city AS C ON L.CountryCode = C.CountryCode WHERE C.Name = 'Aruba' AND L.IsOfficial = 'T'",
        "SELECT CL.Language FROM countrylanguage CL INNER JOIN city CI ON CL.CountryCode = CI.CountryCode WHERE CI.Name = 'Aruba' AND CL.IsOfficial = 'T'",
        "SELECT Language FROM countrylanguage, city WHERE city.Name = 'Aruba' AND city.CountryCode = countrylanguage.CountryCode AND countrylanguage.IsOfficial = 'T'",
        "SELECT CL.Language FROM countrylanguage CL, city CI WHERE CI.Name = 'Aruba' AND CI.CountryCode = CL.CountryCode AND CL.IsOfficial = 'T'",
        "SELECT DISTINCT Language FROM countrylanguage WHERE CountryCode IN (SELECT CountryCode FROM city WHERE Name = 'Aruba') AND IsOfficial = 'T'",
        "SELECT TOP 1 Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Code = (SELECT CountryCode FROM city WHERE Name = 'Aruba')) AND IsOfficial = 'T'",
        "SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT CountryCode FROM city WHERE Name = 'Aruba') AND IsOfficial = 'TRUE'",
        "SELECT countrylanguage.Language FROM countrylanguage INNER JOIN city ON countrylanguage.CountryCode = city.CountryCode WHERE city.Name = 'Aruba' AND countrylanguage.IsOfficial = 'TRUE'"
      ]
    ]
  },
  {
    "id": 714,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'",
        "SELECT country.Population, country.LifeExpectancy FROM country WHERE country.Name = 'Brazil'",
        "SELECT c.Population, c.LifeExpectancy FROM country AS c WHERE c.Name = 'Brazil'",
        "SELECT Population AS Pop, LifeExpectancy AS LifeExp FROM country WHERE Name = 'Brazil'",
        "SELECT Population, LifeExpectancy FROM country WHERE Name LIKE 'Brazil'",
        "SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil' LIMIT 1",
        "SELECT `Population`, `LifeExpectancy` FROM `country` WHERE `Name` = 'Brazil'",
        "SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil' AND Continent = 'South America'",
        "SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil' ORDER BY Population DESC",
        "SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil' ORDER BY LifeExpectancy DESC"
      ]
    ]
  },
  {
    "id": 715,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'",
        "SELECT country.Population, country.LifeExpectancy FROM country WHERE country.Name = 'Brazil'",
        "SELECT c.Population, c.LifeExpectancy FROM country AS c WHERE c.Name = 'Brazil'",
        "SELECT Population AS 'Population', LifeExpectancy AS 'Life Expectancy' FROM country WHERE Name = 'Brazil'",
        "SELECT Population, LifeExpectancy FROM country WHERE Name LIKE 'Brazil'",
        "SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil' LIMIT 1",
        "SELECT `Population`, `LifeExpectancy` FROM country WHERE `Name` = 'Brazil'",
        "SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil' AND Continent = 'South America'",
        "SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil' ORDER BY Population DESC",
        "SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil' AND LifeExpectancy IS NOT NULL"
      ]
    ]
  },
  {
    "id": 716,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Region, Population FROM country WHERE Name = 'Angola'",
        "SELECT country.Region, country.Population FROM country WHERE country.Name = 'Angola'",
        "SELECT c.Region, c.Population FROM country AS c WHERE c.Name = 'Angola'",
        "SELECT Region, Population FROM country WHERE Name LIKE 'Angola'",
        "SELECT Region, Population FROM country WHERE Name = 'Angola' LIMIT 1",
        "SELECT country.Region AS Region, country.Population AS Population FROM country WHERE country.Name = 'Angola'",
        "SELECT Region, Population FROM country WHERE Name = 'Angola' AND Population IS NOT NULL",
        "SELECT Region, Population FROM country WHERE Name = 'Angola' ORDER BY Population DESC",
        "SELECT Region, Population FROM country WHERE Name = 'Angola' ORDER BY Region",
        "SELECT Region, Population FROM country WHERE Name = 'Angola' AND Region IS NOT NULL"
      ]
    ]
  },
  {
    "id": 717,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Region, Population FROM country WHERE Name = 'Angola'",
        "SELECT country.Region, country.Population FROM country WHERE country.Name = 'Angola'",
        "SELECT c.Region, c.Population FROM country AS c WHERE c.Name = 'Angola'",
        "SELECT Region, Population FROM country WHERE Name LIKE 'Angola'",
        "SELECT Region, Population FROM country WHERE Name = 'Angola' LIMIT 1",
        "SELECT Population, Region FROM country WHERE Name = 'Angola'",
        "SELECT country.Region AS Region, country.Population AS Population FROM country WHERE country.Name = 'Angola'",
        "SELECT Region, Population FROM country WHERE Name = 'Angola' AND Population IS NOT NULL",
        "SELECT * FROM country WHERE Name = 'Angola' AND Region IS NOT NULL AND Population IS NOT NULL",
        "SELECT Region, Population FROM country WHERE Name = 'Angola' ORDER BY Population DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 718,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'",
        "SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Region = 'Central Africa'",
        "SELECT AVG(LifeExpectancy) FROM country WHERE Region LIKE 'Central Africa'",
        "SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa' GROUP BY Region",
        "SELECT Region, AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa' GROUP BY Region",
        "SELECT AVG(c.LifeExpectancy) FROM country AS c WHERE c.Region = 'Central Africa'",
        "SELECT AVG(LifeExpectancy) AS Average_Life_Expectancy FROM country WHERE Region = 'Central Africa'",
        "SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa' AND LifeExpectancy IS NOT NULL",
        "SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa' AND LifeExpectancy > 0",
        "SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa' AND LifeExpectancy IS NOT NULL GROUP BY Region"
      ]
    ]
  },
  {
    "id": 719,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'",
        "SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Region = 'Central Africa'",
        "SELECT AVG(LifeExpectancy) FROM country WHERE Region LIKE 'Central Africa'",
        "SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa' GROUP BY Region",
        "SELECT Region, AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa' GROUP BY Region",
        "SELECT AVG(LifeExpectancy) AS Average_Life_Expectancy FROM country WHERE Region = 'Central Africa'",
        "SELECT AVG(c.LifeExpectancy) FROM country AS c WHERE c.Region = 'Central Africa'",
        "SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa' AND LifeExpectancy IS NOT NULL",
        "SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa' AND LifeExpectancy > 0",
        "SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa' AND LifeExpectancy IS NOT NULL GROUP BY Region"
      ]
    ]
  },
  {
    "id": 720,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name FROM country WHERE LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia') AND Continent = 'Asia'",
        "SELECT Name FROM country WHERE Continent = 'Asia' AND LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia')",
        "SELECT c.Name FROM country AS c WHERE c.Continent = 'Asia' AND c.LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia')",
        "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1",
        "SELECT TOP 1 Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy",
        "SELECT Name FROM country WHERE LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia')",
        "SELECT Name FROM country WHERE Continent = 'Asia' AND LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country AS c WHERE c.Continent = 'Asia')",
        "SELECT c.Name FROM country c WHERE c.Continent = 'Asia' AND c.LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia')",
        "SELECT Name FROM country WHERE Continent = 'Asia' AND LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country c WHERE c.Continent = 'Asia')",
        "SELECT Name FROM country WHERE Continent = 'Asia' AND LifeExpectancy = (SELECT MIN(c.LifeExpectancy) FROM country c WHERE c.Continent = 'Asia')"
      ]
    ]
  },
  {
    "id": 721,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1",
        "SELECT TOP 1 Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy",
        "SELECT Name FROM country WHERE Continent = 'Asia' AND LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia')",
        "SELECT Name FROM (SELECT Name, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC) AS subquery LIMIT 1",
        "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC FETCH FIRST 1 ROW ONLY",
        "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1",
        "SELECT Name FROM country WHERE Continent = 'Asia' AND LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia') LIMIT 1",
        "SELECT Name FROM country WHERE LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia') AND Continent = 'Asia'",
        "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC, Name DESC LIMIT 1",
        "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC, Name ASC LIMIT 1"
      ]
    ]
  },
  {
    "id": 722,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT SUM(Population) AS TotalPopulation, MAX(GNP) AS MaxGNP FROM country WHERE Continent = 'Asia'",
        "SELECT SUM(Population) TotalPopulation, MAX(GNP) MaxGNP FROM country WHERE Continent = 'Asia'",
        "SELECT SUM(Population), MAX(GNP) FROM country WHERE Continent = 'Asia'",
        "SELECT SUM(country.Population) AS TotalPopulation, MAX(country.GNP) AS MaxGNP FROM country WHERE country.Continent = 'Asia'",
        "SELECT SUM(Population) AS Total_Population, MAX(GNP) AS Maximum_GNP FROM country WHERE Continent = 'Asia'",
        "SELECT SUM(Population) AS TotalPopulation, MAX(GNP) AS MaxGNP FROM country WHERE Continent = 'Asia' GROUP BY Continent",
        "SELECT SUM(Population) AS TotalPopulation, MAX(GNP) AS MaxGNP FROM country WHERE Continent = 'Asia' GROUP BY Continent",
        "SELECT SUM(Population) AS Total_Population, MAX(GNP) AS Maximum_GNP FROM country WHERE Continent = 'Asia' GROUP BY Continent",
        "SELECT SUM(country.Population) AS TotalPopulation, MAX(country.GNP) AS MaxGNP FROM country WHERE country.Continent = 'Asia' GROUP BY country.Continent",
        "SELECT SUM(country.Population) AS Total_Population, MAX(country.GNP) AS Maximum_GNP FROM country WHERE country.Continent = 'Asia' GROUP BY country.Continent"
      ]
    ]
  },
  {
    "id": 723,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT SUM(Population) AS TotalPopulation, MAX(GNP) AS LargestGNP FROM country WHERE Continent = 'Asia'",
        "SELECT SUM(Population), MAX(GNP) FROM country WHERE Continent = 'Asia'",
        "SELECT SUM(Population) TotalPopulation, MAX(GNP) LargestGNP FROM country WHERE Continent = 'Asia'",
        "SELECT SUM(Population) AS PopulationSum, MAX(GNP) AS MaxGNP FROM country WHERE Continent = 'Asia'",
        "SELECT SUM(country.Population) AS TotalPopulation, MAX(country.GNP) AS HighestGNP FROM country WHERE country.Continent = 'Asia'",
        "SELECT SUM(Population) AS Total_Population, MAX(GNP) AS Max_GNP FROM country WHERE Continent = 'Asia'",
        "SELECT SUM(Population) AS TotalPopulation, MAX(GNP) AS MaxGNP FROM country WHERE Continent = 'Asia'",
        "SELECT SUM(Population) AS PopulationTotal, MAX(GNP) AS GNPMax FROM country WHERE Continent = 'Asia'",
        "SELECT SUM(Population) AS Total_Pop, MAX(GNP) AS Largest_GNP FROM country WHERE Continent = 'Asia'",
        "SELECT SUM(Population) AS TotalPop, MAX(GNP) AS MaxGNP FROM country WHERE Continent = 'Asia'"
      ]
    ]
  },
  {
    "id": 724,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'",
        "SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'",
        "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'",
        "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE 'Republic'",
        "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE 'Republic%'",
        "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic'",
        "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%' GROUP BY Continent",
        "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%' GROUP BY GovernmentForm",
        "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%' GROUP BY Continent, GovernmentForm",
        "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%' ORDER BY LifeExpectancy DESC"
      ]
    ]
  },
  {
    "id": 725,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'",
        "SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'",
        "SELECT AVG(c.LifeExpectancy) FROM country c WHERE c.Continent = 'Africa' AND c.GovernmentForm LIKE '%Republic%'",
        "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'",
        "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE 'Republic'",
        "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE 'Republic%'",
        "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic'",
        "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%' GROUP BY Continent",
        "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%' GROUP BY GovernmentForm",
        "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%' GROUP BY Continent, GovernmentForm"
      ]
    ]
  },
  {
    "id": 726,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe')",
        "SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'",
        "SELECT Continent, SUM(SurfaceArea) AS TotalArea FROM country WHERE Continent = 'Asia' OR Continent = 'Europe' GROUP BY Continent",
        "SELECT SUM(SurfaceArea) AS TotalSurface FROM country WHERE Continent IN ('Asia', 'Europe') GROUP BY Continent",
        "SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' UNION ALL SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Europe'",
        "SELECT SUM(SurfaceArea) TotalSurfaceArea FROM country WHERE Continent = 'Asia' UNION SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Europe'",
        "SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe') GROUP BY Continent WITH ROLLUP",
        "SELECT SUM(SurfaceArea) AS TotalArea FROM country GROUP BY Continent HAVING Continent = 'Asia' OR Continent = 'Europe'",
        "SELECT 'Total Surface Area' AS Description, SUM(SurfaceArea) AS Area FROM country WHERE Continent IN ('Asia', 'Europe')",
        "SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' UNION SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Europe' ORDER BY SUM(SurfaceArea) DESC"
      ]
    ]
  },
  {
    "id": 727,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')",
        "SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'",
        "SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' UNION ALL SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Europe'",
        "SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe') GROUP BY Continent",
        "SELECT SUM(c.SurfaceArea) FROM country AS c WHERE c.Continent = 'Asia' OR c.Continent = 'Europe'",
        "SELECT SUM(SurfaceArea) TotalArea FROM country WHERE Continent = 'Asia' UNION SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Europe'",
        "SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' UNION SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Europe'",
        "SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Europe', 'Asia')",
        "SELECT SUM(SurfaceArea) AS TotalArea FROM country WHERE Continent = 'Europe' OR Continent = 'Asia'",
        "SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Europe' OR Continent = 'Asia' GROUP BY Continent"
      ]
    ]
  },
  {
    "id": 728,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT SUM(Population) FROM city WHERE District = 'Gelderland'",
        "SELECT TOTAL(Population) FROM city WHERE District = 'Gelderland'",
        "SELECT SUM(Population) AS TotalPopulation FROM city WHERE District = 'Gelderland'",
        "SELECT SUM(city.Population) FROM city WHERE city.District = 'Gelderland'",
        "SELECT SUM(Population) FROM city WHERE District LIKE 'Gelderland'",
        "SELECT SUM(Population) FROM city WHERE District = 'Gelderland' GROUP BY District",
        "SELECT SUM(Population) FROM city c WHERE c.District = 'Gelderland'",
        "SELECT TOTAL(Population) FROM city WHERE District = 'Gelderland' GROUP BY District",
        "SELECT SUM(Population) FROM city WHERE District = 'Gelderland' AND Population IS NOT NULL",
        "SELECT SUM(Population) FROM city WHERE District = 'Gelderland' AND Population > 0"
      ]
    ]
  },
  {
    "id": 729,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT SUM(Population) FROM city WHERE District = 'Gelderland'",
        "SELECT SUM(Population) AS TotalPopulation FROM city WHERE District = 'Gelderland'",
        "SELECT SUM(city.Population) FROM city WHERE city.District = 'Gelderland'",
        "SELECT TOTAL(Population) FROM city WHERE District = 'Gelderland'",
        "SELECT SUM(Population) FROM city WHERE District LIKE 'Gelderland'",
        "SELECT SUM(Population) FROM city WHERE District = 'Gelderland' GROUP BY District",
        "SELECT SUM(Population) AS Total_Pop FROM city WHERE District = 'Gelderland'",
        "SELECT SUM(city.Population) AS TotalPopulation FROM city WHERE city.District = 'Gelderland' GROUP BY city.District",
        "SELECT SUM(Population) FROM city c WHERE c.District = 'Gelderland'",
        "SELECT SUM(Population) FROM city WHERE District = 'Gelderland' AND Population IS NOT NULL"
      ]
    ]
  },
  {
    "id": 730,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT AVG(GNP) AS Average_GNP, SUM(Population) AS Total_Population FROM country WHERE GovernmentForm = 'US territory'",
        "SELECT AVG(GNP) AS avg_gnp, SUM(Population) AS total_population FROM country WHERE GovernmentForm LIKE '%US territory%'",
        "SELECT AVG(GNP), SUM(Population) FROM country WHERE GovernmentForm = 'US territory'",
        "SELECT AVG(GNP) average_gnp, SUM(Population) total_population FROM country WHERE GovernmentForm LIKE 'US territory'",
        "SELECT AVG(GNP) AS AverageGNP, SUM(Population) AS TotalPopulation FROM country WHERE GovernmentForm = 'US territory'",
        "SELECT AVG(GNP) averageGNP, SUM(Population) totalPop FROM country WHERE GovernmentForm LIKE 'US territory'",
        "SELECT AVG(GNP) AS AvgGNP, SUM(Population) AS TotalPop FROM country WHERE GovernmentForm = 'US territory'",
        "SELECT AVG(GNP) AS Average_GNP, SUM(Population) AS Total_Population FROM country WHERE GovernmentForm LIKE '%US territory%'",
        "SELECT AVG(GNP) AS AverageGNP, SUM(Population) AS TotalPopulation FROM country WHERE GovernmentForm LIKE 'US territory'",
        "SELECT AVG(GNP) AS Avg_GNP, SUM(Population) AS Total_Pop FROM country WHERE GovernmentForm = 'US territory'"
      ]
    ]
  },
  {
    "id": 731,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT AVG(GNP) AS Mean_GNP, SUM(Population) AS Total_Population FROM country WHERE GovernmentForm LIKE '%US territory%'",
        "SELECT AVG(GNP) AS Average_GNP, SUM(Population) AS TotalPopulation FROM country WHERE GovernmentForm = 'US territory'",
        "SELECT AVG(GNP), SUM(Population) FROM country WHERE GovernmentForm LIKE '%US territory%'",
        "SELECT AVG(GNP) AS AverageGNP, SUM(Population) AS SumPopulation FROM country WHERE GovernmentForm LIKE 'US territory'",
        "SELECT AVG(GNP) AS MeanGNP, SUM(Population) AS PopulationTotal FROM country WHERE GovernmentForm LIKE '%US territory%' GROUP BY GovernmentForm",
        "SELECT AVG(GNP) AS Average_GNP, SUM(Population) AS Total_Population FROM country WHERE GovernmentForm LIKE '%US territory%' GROUP BY GovernmentForm",
        "SELECT AVG(GNP) AS Mean_GNP, SUM(Population) AS Total_Population FROM country WHERE GovernmentForm = 'US territory'",
        "SELECT AVG(GNP) AS Average_GNP, SUM(Population) AS Total_Population FROM country WHERE GovernmentForm LIKE '%US territory%' GROUP BY GovernmentForm",
        "SELECT AVG(GNP) AS Mean_GNP, SUM(Population) AS Total_Population FROM country WHERE GovernmentForm LIKE '%US territory%'",
        "SELECT AVG(GNP) AS Average_GNP, SUM(Population) AS Total_Population FROM country WHERE GovernmentForm LIKE 'US territory'"
      ]
    ]
  },
  {
    "id": 732,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT Language) FROM countrylanguage",
        "SELECT COUNT(UNIQUE Language) FROM countrylanguage",
        "SELECT COUNT(*) FROM (SELECT DISTINCT Language FROM countrylanguage)",
        "SELECT COUNT(DISTINCT Language) AS UniqueLanguages FROM countrylanguage",
        "SELECT DISTINCT COUNT(Language) FROM countrylanguage",
        "SELECT COUNT(Language) FROM countrylanguage GROUP BY Language",
        "SELECT DISTINCT COUNT(*) FROM (SELECT Language FROM countrylanguage GROUP BY Language)",
        "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE Language IS NOT NULL",
        "SELECT COUNT(*) FROM (SELECT Language FROM countrylanguage GROUP BY Language HAVING COUNT(*) >= 1)",
        "SELECT COUNT(DISTINCT Language) FROM countrylanguage GROUP BY Language"
      ]
    ]
  },
  {
    "id": 733,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT Language) FROM countrylanguage",
        "SELECT COUNT(UNIQUE Language) FROM countrylanguage",
        "SELECT COUNT(*) FROM (SELECT DISTINCT Language FROM countrylanguage)",
        "SELECT DISTINCT COUNT(Language) FROM countrylanguage",
        "SELECT COUNT(Language) FROM countrylanguage GROUP BY Language",
        "SELECT COUNT(DISTINCT Language) AS TotalLanguages FROM countrylanguage",
        "SELECT COUNT(*) FROM (SELECT Language FROM countrylanguage GROUP BY Language)",
        "SELECT DISTINCT COUNT(*) OVER (PARTITION BY Language) FROM countrylanguage",
        "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE Language IS NOT NULL",
        "SELECT COUNT(DISTINCT Language) FROM countrylanguage GROUP BY Language HAVING COUNT(Language) > 0"
      ]
    ]
  },
  {
    "id": 734,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'",
        "SELECT COUNT(UNIQUE GovernmentForm) FROM country WHERE Continent = 'Africa'",
        "SELECT COUNT(*) FROM (SELECT DISTINCT GovernmentForm FROM country WHERE Continent = 'Africa')",
        "SELECT COUNT(DISTINCT GovernmentForm) AS NumberOfGovernments FROM country WHERE Continent = 'Africa'",
        "SELECT DISTINCT COUNT(GovernmentForm) FROM country WHERE Continent = 'Africa'",
        "SELECT COUNT(*) FROM (SELECT GovernmentForm FROM country WHERE Continent = 'Africa' GROUP BY GovernmentForm)",
        "SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa' GROUP BY GovernmentForm",
        "SELECT COUNT(DISTINCT GovernmentForm) FROM country c WHERE c.Continent = 'Africa'",
        "SELECT COUNT(DISTINCT c.GovernmentForm) FROM country c WHERE c.Continent = 'Africa'",
        "SELECT DISTINCT COUNT(GovernmentForm) FROM country GROUP BY Continent HAVING Continent = 'Africa'"
      ]
    ]
  },
  {
    "id": 735,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'",
        "SELECT COUNT(UNIQUE GovernmentForm) FROM country WHERE Continent = 'Africa'",
        "SELECT COUNT(*) FROM (SELECT DISTINCT GovernmentForm FROM country WHERE Continent = 'Africa')",
        "SELECT COUNT(DISTINCT GovernmentForm) AS NumberOfGovernments FROM country WHERE Continent = 'Africa'",
        "SELECT DISTINCT COUNT(GovernmentForm) FROM country WHERE Continent = 'Africa'",
        "SELECT COUNT(*) FROM (SELECT GovernmentForm FROM country WHERE Continent = 'Africa' GROUP BY GovernmentForm)",
        "SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa' GROUP BY GovernmentForm",
        "SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa' AND GovernmentForm IS NOT NULL",
        "SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa' AND GovernmentForm <> ''",
        "SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa' AND GovernmentForm != ''"
      ]
    ]
  },
  {
    "id": 736,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba')",
        "SELECT COUNT(Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = 'Aruba'",
        "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = 'Aruba'",
        "SELECT COUNT(*) FROM (SELECT DISTINCT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba'))",
        "SELECT COUNT(DISTINCT Language) AS TotalLanguages FROM countrylanguage, country WHERE countrylanguage.CountryCode = country.Code AND country.Name = 'Aruba'",
        "SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Name = 'Aruba')",
        "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba') GROUP BY CountryCode",
        "SELECT COUNT(*) FROM (SELECT Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = 'Aruba' GROUP BY Language)",
        "SELECT COUNT(DISTINCT Language) FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Name = 'Aruba'",
        "SELECT COUNT(DISTINCT cl.Language) FROM countrylanguage cl, country c WHERE cl.CountryCode = c.Code AND c.Name = 'Aruba'"
      ]
    ]
  },
  {
    "id": 737,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = 'Aruba'",
        "SELECT COUNT(Language) AS NumberOfLanguages FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = 'Aruba'",
        "SELECT COUNT(*) FROM (SELECT DISTINCT Language FROM countrylanguage, country WHERE countrylanguage.CountryCode = country.Code AND country.Name = 'Aruba')",
        "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage, country WHERE countrylanguage.CountryCode = country.Code AND country.Name = 'Aruba'",
        "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba')",
        "SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Name = 'Aruba') GROUP BY CountryCode",
        "SELECT COUNT(DISTINCT Language) FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Name = 'Aruba'",
        "SELECT COUNT(DISTINCT cl.Language) FROM countrylanguage cl, country c WHERE cl.CountryCode = c.Code AND c.Name = 'Aruba'",
        "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba')",
        "SELECT COUNT(*) FROM (SELECT Language FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = 'Aruba' GROUP BY Language)"
      ]
    ]
  },
  {
    "id": 738,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = 'Afghanistan' AND countrylanguage.IsOfficial = 'T'",
        "SELECT COUNT(Language) AS OfficialLanguages FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = 'Afghanistan' AND countrylanguage.IsOfficial = 'T'",
        "SELECT COUNT(DISTINCT Language) FROM countrylanguage, country WHERE countrylanguage.CountryCode = country.Code AND country.Name = 'Afghanistan' AND countrylanguage.IsOfficial = 'TRUE'",
        "SELECT COUNT(*) FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Name = 'Afghanistan' AND cl.IsOfficial = 'TRUE'",
        "SELECT COUNT(Language) FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = 'Afghanistan' AND countrylanguage.IsOfficial = 'TRUE'",
        "SELECT COUNT(*) FROM countrylanguage AS cl INNER JOIN country AS c ON cl.CountryCode = c.Code WHERE c.Name = 'Afghanistan' AND cl.IsOfficial = 'T'",
        "SELECT COUNT(Language) FROM countrylanguage, country WHERE countrylanguage.CountryCode = country.Code AND country.Name = 'Afghanistan' AND countrylanguage.IsOfficial = 'T'",
        "SELECT COUNT(DISTINCT Language) FROM countrylanguage cl INNER JOIN country c ON cl.CountryCode = c.Code WHERE c.Name = 'Afghanistan' AND cl.IsOfficial = 'T'",
        "SELECT COUNT(*) FROM countrylanguage cl, country c WHERE cl.CountryCode = c.Code AND c.Name = 'Afghanistan' AND cl.IsOfficial = 'TRUE'",
        "SELECT COUNT(Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = 'Afghanistan' AND countrylanguage.IsOfficial = 'TRUE'"
      ]
    ]
  },
  {
    "id": 739,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan')",
        "SELECT COUNT(Language) AS OfficialLanguages FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = 'Afghanistan' AND countrylanguage.IsOfficial = 'T'",
        "SELECT COUNT(*) FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Name = 'Afghanistan' AND cl.IsOfficial = 'T'",
        "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode IN (SELECT Code FROM country WHERE Name = 'Afghanistan')",
        "SELECT COUNT(Language) FROM countrylanguage, country WHERE countrylanguage.CountryCode = country.Code AND country.Name = 'Afghanistan' AND countrylanguage.IsOfficial = 'True'",
        "SELECT COUNT(*) FROM countrylanguage WHERE IsOfficial = 'True' AND CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan')",
        "SELECT COUNT(Language) FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = 'Afghanistan' AND countrylanguage.IsOfficial = 'T'",
        "SELECT COUNT(*) FROM countrylanguage cl INNER JOIN country c ON cl.CountryCode = c.Code WHERE c.Name = 'Afghanistan' AND cl.IsOfficial = 'True'",
        "SELECT COUNT(DISTINCT Language) FROM countrylanguage cl, country c WHERE cl.CountryCode = c.Code AND c.Name = 'Afghanistan' AND cl.IsOfficial = 'T'",
        "SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan') AND IsOfficial = 'T'"
      ]
    ]
  },
  {
    "id": 740,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name FROM country WHERE Code = (SELECT CountryCode FROM countrylanguage GROUP BY CountryCode ORDER BY COUNT(Language) DESC LIMIT 1)",
        "SELECT c.Name FROM country c JOIN (SELECT CountryCode, COUNT(*) AS LangCount FROM countrylanguage GROUP BY CountryCode ORDER BY LangCount DESC LIMIT 1) AS sub ON c.Code = sub.CountryCode",
        "SELECT c.Name FROM country c WHERE c.Code IN (SELECT CountryCode FROM countrylanguage GROUP BY CountryCode ORDER BY COUNT(Language) DESC LIMIT 1)",
        "SELECT TOP 1 c.Name FROM country c INNER JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Code, c.Name ORDER BY COUNT(cl.Language) DESC",
        "SELECT c.Name FROM country c WHERE c.Code = (SELECT cl.CountryCode FROM countrylanguage cl GROUP BY cl.CountryCode HAVING COUNT(cl.Language) = (SELECT MAX(cnt) FROM (SELECT COUNT(Language) AS cnt FROM countrylanguage GROUP BY CountryCode) sub))",
        "SELECT Name FROM country WHERE Code = (SELECT CountryCode FROM (SELECT CountryCode, COUNT(Language) AS LangCount FROM countrylanguage GROUP BY CountryCode) AS Temp ORDER BY LangCount DESC LIMIT 1)",
        "SELECT c.Name FROM country c, (SELECT CountryCode FROM countrylanguage GROUP BY CountryCode ORDER BY COUNT(*) DESC LIMIT 1) AS max_lang WHERE c.Code = max_lang.CountryCode",
        "SELECT Name FROM country WHERE Code = (SELECT CountryCode FROM countrylanguage GROUP BY CountryCode HAVING COUNT(Language) = (SELECT MAX(cnt) FROM (SELECT COUNT(Language) AS cnt FROM countrylanguage GROUP BY CountryCode) t))",
        "SELECT c.Name FROM country c WHERE EXISTS (SELECT 1 FROM countrylanguage cl WHERE cl.CountryCode = c.Code GROUP BY cl.CountryCode HAVING COUNT(cl.Language) >= ALL (SELECT COUNT(Language) FROM countrylanguage GROUP BY CountryCode))",
        "SELECT Name FROM country WHERE Code = (SELECT CountryCode FROM countrylanguage GROUP BY CountryCode ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 741,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage GROUP BY CountryCode HAVING COUNT(DISTINCT Language) = (SELECT MAX(num_languages) FROM (SELECT COUNT(DISTINCT Language) AS num_languages FROM countrylanguage GROUP BY CountryCode)))",
        "SELECT c.Name FROM country c JOIN (SELECT CountryCode, COUNT(DISTINCT Language) AS num_languages FROM countrylanguage GROUP BY CountryCode) cl ON c.Code = cl.CountryCode WHERE cl.num_languages = (SELECT MAX(num_languages) FROM (SELECT COUNT(DISTINCT Language) AS num_languages FROM countrylanguage GROUP BY CountryCode))",
        "SELECT c.Name FROM country c WHERE (SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = c.Code) = (SELECT MAX(num_languages) FROM (SELECT COUNT(DISTINCT Language) AS num_languages FROM countrylanguage GROUP BY CountryCode))",
        "SELECT c.Name FROM country c WHERE EXISTS (SELECT 1 FROM countrylanguage cl WHERE cl.CountryCode = c.Code GROUP BY cl.CountryCode HAVING COUNT(DISTINCT cl.Language) = (SELECT MAX(num_languages) FROM (SELECT COUNT(DISTINCT Language) AS num_languages FROM countrylanguage GROUP BY CountryCode)))",
        "SELECT c.Name FROM country c INNER JOIN (SELECT CountryCode, COUNT(DISTINCT Language) AS num_languages FROM countrylanguage GROUP BY CountryCode HAVING num_languages = (SELECT MAX(num_languages) FROM (SELECT COUNT(DISTINCT Language) AS num_languages FROM countrylanguage GROUP BY CountryCode))) cl ON c.Code = cl.CountryCode",
        "SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage GROUP BY CountryCode ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1)",
        "SELECT Name FROM country WHERE Code = (SELECT CountryCode FROM countrylanguage GROUP BY CountryCode ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1)",
        "SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM (SELECT CountryCode, COUNT(DISTINCT Language) AS LanguageCount FROM countrylanguage GROUP BY CountryCode) AS Temp WHERE LanguageCount = (SELECT MAX(LanguageCount) FROM (SELECT COUNT(DISTINCT Language) AS LanguageCount FROM countrylanguage GROUP BY CountryCode) AS Temp2))",
        "SELECT c.Name FROM country c JOIN (SELECT CountryCode FROM countrylanguage GROUP BY CountryCode HAVING COUNT(DISTINCT Language) = (SELECT MAX(num_languages) FROM (SELECT COUNT(DISTINCT Language) AS num_languages FROM countrylanguage GROUP BY CountryCode))) cl ON c.Code = cl.CountryCode",
        "SELECT c.Name FROM country c WHERE (SELECT COUNT(DISTINCT cl.Language) FROM countrylanguage cl WHERE cl.CountryCode = c.Code) = (SELECT MAX(num_languages) FROM (SELECT COUNT(DISTINCT Language) AS num_languages FROM countrylanguage GROUP BY CountryCode))"
      ]
    ]
  },
  {
    "id": 742,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Continent FROM (SELECT Continent, COUNT(DISTINCT Language) AS NumLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent) AS SubQuery WHERE NumLanguages = (SELECT MAX(NumLanguages) FROM (SELECT Continent, COUNT(DISTINCT Language) AS NumLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent) AS SubMax)",
        "SELECT Continent FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1",
        "WITH LanguageCount AS (SELECT Continent, COUNT(DISTINCT Language) AS NumLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent) SELECT Continent FROM LanguageCount WHERE NumLanguages = (SELECT MAX(NumLanguages) FROM LanguageCount)",
        "SELECT T1.Continent FROM (SELECT Continent, COUNT(DISTINCT Language) AS LanguageCount FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent) AS T1 WHERE T1.LanguageCount = (SELECT MAX(LanguageCount) FROM (SELECT Continent, COUNT(DISTINCT Language) AS LanguageCount FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent) AS T2)",
        "SELECT Continent FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent HAVING COUNT(DISTINCT Language) = (SELECT MAX(CountLang) FROM (SELECT COUNT(DISTINCT Language) AS CountLang FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent) AS TempTable)",
        "SELECT Continent FROM (SELECT Continent, COUNT(DISTINCT Language) AS TotalLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent) AS DerivedTable WHERE TotalLanguages = (SELECT MAX(TotalLanguages) FROM (SELECT COUNT(DISTINCT Language) AS TotalLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent) AS MaxTable)",
        "SELECT TOP 1 WITH TIES Continent FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent ORDER BY COUNT(DISTINCT Language) DESC",
        "SELECT Continent FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent HAVING COUNT(DISTINCT Language) >= ALL (SELECT COUNT(DISTINCT Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent)",
        "SELECT Continent, COUNT(DISTINCT Language) AS LanguageDiversity FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent ORDER BY LanguageDiversity DESC FETCH FIRST ROW WITH TIES",
        "SELECT Continent FROM (SELECT Continent, COUNT(DISTINCT Language) AS LanguageVariety FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent) AS Result WHERE LanguageVariety = (SELECT MAX(LanguageVariety) FROM (SELECT Continent, COUNT(DISTINCT Language) AS LanguageVariety FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent) AS MaxResult)"
      ]
    ]
  },
  {
    "id": 743,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Continent FROM (SELECT Continent, COUNT(DISTINCT Language) AS NumLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent) AS SubQuery WHERE NumLanguages = (SELECT MAX(NumLanguages) FROM (SELECT Continent, COUNT(DISTINCT Language) AS NumLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent) AS SubQuery2)",
        "SELECT Continent FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1",
        "WITH LanguageCounts AS (SELECT Continent, COUNT(DISTINCT Language) AS NumLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent) SELECT Continent FROM LanguageCounts WHERE NumLanguages = (SELECT MAX(NumLanguages) FROM LanguageCounts)",
        "SELECT Continent FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent HAVING COUNT(DISTINCT Language) = (SELECT MAX(COUNT(DISTINCT Language)) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent)",
        "SELECT TOP 1 WITH TIES Continent FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent ORDER BY COUNT(DISTINCT Language) DESC",
        "SELECT Continent FROM (SELECT Continent, COUNT(DISTINCT Language) AS NumLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent ORDER BY NumLanguages DESC) WHERE NumLanguages = (SELECT MAX(NumLanguages) FROM (SELECT Continent, COUNT(DISTINCT Language) AS NumLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent))",
        "SELECT Continent FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent HAVING COUNT(DISTINCT Language) >= ALL (SELECT COUNT(DISTINCT Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent)",
        "SELECT Continent, COUNT(DISTINCT Language) AS NumLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent ORDER BY NumLanguages DESC FETCH FIRST 1 ROWS WITH TIES",
        "SELECT Continent FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent HAVING COUNT(DISTINCT Language) = (SELECT MAX(COUNT(DISTINCT Language)) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent)",
        "SELECT Continent FROM (SELECT Continent, COUNT(DISTINCT Language) AS NumLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent) AS SubQuery WHERE NumLanguages = (SELECT MAX(NumLanguages) FROM (SELECT Continent, COUNT(DISTINCT Language) AS NumLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent) AS SubQuery2) ORDER BY Continent"
      ]
    ]
  },
  {
    "id": 744,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'English' AND CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch')",
        "SELECT COUNT(DISTINCT a.CountryCode) FROM countrylanguage a JOIN countrylanguage b ON a.CountryCode = b.CountryCode WHERE a.Language = 'English' AND b.Language = 'Dutch'",
        "SELECT COUNT(*) FROM (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' INTERSECT SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch') AS subquery",
        "WITH English_Countries AS (SELECT CountryCode FROM countrylanguage WHERE Language = 'English'), Dutch_Countries AS (SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch') SELECT COUNT(DISTINCT CountryCode) FROM English_Countries WHERE CountryCode IN (SELECT CountryCode FROM Dutch_Countries)",
        "SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language IN ('English', 'Dutch') GROUP BY CountryCode HAVING COUNT(DISTINCT Language) = 2",
        "SELECT COUNT(*) FROM (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' UNION ALL SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch') AS subquery WHERE subquery.CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch')",
        "SELECT COUNT(DISTINCT CountryCode) FROM (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' UNION SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch') AS subquery",
        "SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage cl1 WHERE cl1.Language = 'English' AND EXISTS (SELECT 1 FROM countrylanguage cl2 WHERE cl2.CountryCode = cl1.CountryCode AND cl2.Language = 'Dutch')",
        "SELECT COUNT(DISTINCT cl.CountryCode) FROM countrylanguage cl WHERE cl.Language = 'English' AND cl.CountryCode IN (SELECT cl2.CountryCode FROM countrylanguage cl2 WHERE cl2.Language = 'Dutch')",
        "SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'English' AND CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch')"
      ]
    ]
  },
  {
    "id": 745,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language IN ('English', 'Dutch') GROUP BY CountryCode HAVING COUNT(DISTINCT Language) = 2",
        "SELECT COUNT(*) FROM (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' INTERSECT SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch') AS subquery",
        "SELECT COUNT(DISTINCT cl.CountryCode) FROM countrylanguage cl WHERE cl.Language = 'English' AND cl.CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch')",
        "SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'English' OR Language = 'Dutch' GROUP BY CountryCode HAVING COUNT(*) > 1",
        "WITH English_Countries AS (SELECT CountryCode FROM countrylanguage WHERE Language = 'English'), Dutch_Countries AS (SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch') SELECT COUNT(*) FROM English_Countries WHERE CountryCode IN (SELECT CountryCode FROM Dutch_Countries)",
        "SELECT COUNT(DISTINCT CountryCode) FROM (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' UNION ALL SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch') AS Combined WHERE Language IN ('English', 'Dutch') GROUP BY CountryCode HAVING COUNT(*) > 1",
        "SELECT COUNT(DISTINCT a.CountryCode) FROM countrylanguage a JOIN countrylanguage b ON a.CountryCode = b.CountryCode WHERE a.Language = 'English' AND b.Language = 'Dutch'",
        "SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'English' AND CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch')",
        "SELECT COUNT(*) FROM (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' UNION SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch') AS UniqueCountries",
        "SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage GROUP BY CountryCode HAVING SUM(CASE WHEN Language = 'English' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Language = 'Dutch' THEN 1 ELSE 0 END) > 0"
      ]
    ]
  },
  {
    "id": 746,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') INTERSECT SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'French')",
        "SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'French') GROUP BY c.Name HAVING COUNT(DISTINCT cl.Language) = 2",
        "SELECT c.Name FROM country c WHERE EXISTS (SELECT 1 FROM countrylanguage cl WHERE cl.CountryCode = c.Code AND cl.Language = 'English') AND EXISTS (SELECT 1 FROM countrylanguage cl WHERE cl.CountryCode = c.Code AND cl.Language = 'French')",
        "SELECT DISTINCT c.Name FROM country c, countrylanguage cl WHERE c.Code = cl.CountryCode AND cl.Language = 'English' AND c.Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'French')",
        "SELECT c.Name FROM country c WHERE c.Code IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'English' INTERSECT SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'French')",
        "SELECT c.Name FROM country c INNER JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode INNER JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'French'",
        "SELECT c.Name FROM country c WHERE (SELECT COUNT(DISTINCT cl.Language) FROM countrylanguage cl WHERE cl.CountryCode = c.Code AND cl.Language IN ('English', 'French')) = 2",
        "SELECT c.Name FROM country c WHERE 'English' IN (SELECT cl.Language FROM countrylanguage cl WHERE cl.CountryCode = c.Code) AND 'French' IN (SELECT cl.Language FROM countrylanguage cl WHERE cl.CountryCode = c.Code)",
        "SELECT c.Name FROM country c WHERE EXISTS (SELECT * FROM countrylanguage cl WHERE cl.CountryCode = c.Code AND cl.Language = 'English') AND EXISTS (SELECT * FROM countrylanguage cl WHERE cl.CountryCode = c.Code AND cl.Language = 'French')",
        "SELECT c.Name FROM country c WHERE c.Code IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'English') AND c.Code IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'French')"
      ]
    ]
  },
  {
    "id": 747,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') INTERSECT SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'French')",
        "SELECT c.Name FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language = 'English' INTERSECT SELECT c.Name FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language = 'French'",
        "SELECT c.Name FROM country c WHERE EXISTS (SELECT 1 FROM countrylanguage cl WHERE cl.CountryCode = c.Code AND cl.Language = 'English') AND EXISTS (SELECT 1 FROM countrylanguage cl WHERE cl.CountryCode = c.Code AND cl.Language = 'French')",
        "SELECT DISTINCT c.Name FROM country c, countrylanguage cl WHERE c.Code = cl.CountryCode AND cl.Language IN ('English', 'French') GROUP BY c.Name HAVING COUNT(DISTINCT cl.Language) = 2",
        "SELECT c.Name FROM country c WHERE c.Code IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'English' UNION ALL SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'French' GROUP BY cl.CountryCode HAVING COUNT(*) = 2)",
        "SELECT c.Name FROM country c INNER JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode INNER JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'French'",
        "SELECT c.Name FROM country c WHERE 'English' = ALL (SELECT cl.Language FROM countrylanguage cl WHERE cl.CountryCode = c.Code) AND 'French' = ALL (SELECT cl.Language FROM countrylanguage cl WHERE cl.CountryCode = c.Code)",
        "SELECT c.Name FROM country c WHERE c.Code IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'English') AND c.Code IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'French')",
        "SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'French'))",
        "SELECT Name FROM country WHERE Code IN (SELECT cl.CountryCode FROM countrylanguage cl GROUP BY cl.CountryCode HAVING SUM(CASE WHEN cl.Language = 'English' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN cl.Language = 'French' THEN 1 ELSE 0 END) > 0)"
      ]
    ]
  },
  {
    "id": 748,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') INTERSECT SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'French' AND IsOfficial = 'T')",
        "SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'French') AND cl.IsOfficial = 'T' GROUP BY c.Name HAVING COUNT(DISTINCT cl.Language) = 2",
        "SELECT c.Name FROM country c WHERE EXISTS (SELECT 1 FROM countrylanguage cl WHERE cl.CountryCode = c.Code AND cl.Language = 'English' AND cl.IsOfficial = 'T') AND EXISTS (SELECT 1 FROM countrylanguage cl WHERE cl.CountryCode = c.Code AND cl.Language = 'French' AND cl.IsOfficial = 'T')",
        "SELECT DISTINCT c.Name FROM country c, countrylanguage cl WHERE c.Code = cl.CountryCode AND cl.IsOfficial = 'T' AND cl.Language = 'English' AND c.Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'French' AND IsOfficial = 'T')",
        "SELECT c.Name FROM country c WHERE (SELECT COUNT(*) FROM countrylanguage cl WHERE cl.CountryCode = c.Code AND cl.Language IN ('English', 'French') AND cl.IsOfficial = 'T') = 2",
        "SELECT c.Name FROM country c INNER JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'English' AND cl.IsOfficial = 'T' INTERSECT SELECT c.Name FROM country c INNER JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'French' AND cl.IsOfficial = 'T'",
        "SELECT c.Name FROM country c WHERE 2 = (SELECT COUNT(DISTINCT cl.Language) FROM countrylanguage cl WHERE cl.CountryCode = c.Code AND cl.Language IN ('English', 'French') AND cl.IsOfficial = 'T')",
        "SELECT c.Name FROM country c WHERE c.Code IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'English' AND cl.IsOfficial = 'T') AND c.Code IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'French' AND cl.IsOfficial = 'T')",
        "SELECT c.Name FROM country c WHERE EXISTS (SELECT * FROM countrylanguage cl WHERE cl.CountryCode = c.Code AND cl.Language = 'English' AND cl.IsOfficial = 'T') AND EXISTS (SELECT * FROM countrylanguage cl WHERE cl.CountryCode = c.Code AND cl.Language = 'French' AND cl.IsOfficial = 'T')",
        "SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl1.IsOfficial = 'T' AND cl2.Language = 'French' AND cl2.IsOfficial = 'T'"
      ]
    ]
  },
  {
    "id": 749,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') AND Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'French' AND IsOfficial = 'T')",
        "SELECT c.Name FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'French') AND cl.IsOfficial = 'T' GROUP BY c.Name HAVING COUNT(DISTINCT cl.Language) = 2",
        "SELECT c.Name FROM country AS c WHERE EXISTS (SELECT 1 FROM countrylanguage WHERE CountryCode = c.Code AND Language = 'English' AND IsOfficial = 'T') AND EXISTS (SELECT 1 FROM countrylanguage WHERE CountryCode = c.Code AND Language = 'French' AND IsOfficial = 'T')",
        "SELECT DISTINCT c.Name FROM country AS c, countrylanguage AS cl WHERE c.Code = cl.CountryCode AND cl.Language = 'English' AND cl.IsOfficial = 'T' INTERSECT SELECT DISTINCT c.Name FROM country AS c, countrylanguage AS cl WHERE c.Code = cl.CountryCode AND cl.Language = 'French' AND cl.IsOfficial = 'T'",
        "SELECT c.Name FROM country AS c WHERE c.Code IN (SELECT cl.CountryCode FROM countrylanguage AS cl WHERE cl.Language = 'English' AND cl.IsOfficial = 'T' INTERSECT SELECT cl.CountryCode FROM countrylanguage AS cl WHERE cl.Language = 'French' AND cl.IsOfficial = 'T')",
        "SELECT c.Name FROM country AS c INNER JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language = 'English' AND cl.IsOfficial = 'T' INTERSECT SELECT c.Name FROM country AS c INNER JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language = 'French' AND cl.IsOfficial = 'T'",
        "SELECT c.Name FROM country AS c WHERE (SELECT COUNT(*) FROM countrylanguage AS cl WHERE cl.CountryCode = c.Code AND cl.Language IN ('English', 'French') AND cl.IsOfficial = 'T') = 2",
        "SELECT c.Name FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language = 'English' AND cl.IsOfficial = 'T' UNION SELECT c.Name FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language = 'French' AND cl.IsOfficial = 'T' HAVING COUNT(*) > 1",
        "SELECT c.Name FROM country AS c WHERE 2 = (SELECT COUNT(DISTINCT cl.Language) FROM countrylanguage AS cl WHERE cl.CountryCode = c.Code AND cl.Language IN ('English', 'French') AND cl.IsOfficial = 'T')",
        "SELECT c.Name FROM country AS c WHERE EXISTS (SELECT 1 FROM countrylanguage AS cl WHERE cl.CountryCode = c.Code AND cl.Language = 'English' AND cl.IsOfficial = 'T') INTERSECT SELECT c.Name FROM country AS c WHERE EXISTS (SELECT 1 FROM countrylanguage AS cl WHERE cl.CountryCode = c.Code AND cl.Language = 'French' AND cl.IsOfficial = 'T')"
      ]
    ]
  },
  {
    "id": 750,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT country.Continent) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese'",
        "SELECT COUNT(DISTINCT Continent) FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE Language = 'Chinese'",
        "SELECT COUNT(DISTINCT c.Continent) FROM country AS c, countrylanguage AS cl WHERE c.Code = cl.CountryCode AND cl.Language = 'Chinese'",
        "SELECT COUNT(DISTINCT Continent) FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND countrylanguage.Language = 'Chinese'",
        "SELECT DISTINCT COUNT(Continent) FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese'",
        "SELECT COUNT(UNIQUE country.Continent) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese'",
        "SELECT COUNT(DISTINCT c.Continent) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Chinese'",
        "SELECT COUNT(DISTINCT Continent) FROM (SELECT Continent FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE Language = 'Chinese')",
        "SELECT DISTINCT COUNT(Continent) FROM country c INNER JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Chinese' GROUP BY Continent",
        "SELECT COUNT(DISTINCT c.Continent) FROM country c, countrylanguage cl WHERE c.Code = cl.CountryCode AND cl.Language = 'Chinese' GROUP BY c.Continent"
      ]
    ]
  },
  {
    "id": 751,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT country.Continent) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese'",
        "SELECT COUNT(DISTINCT c.Continent) FROM country AS c INNER JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Chinese'",
        "SELECT COUNT(DISTINCT Continent) FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Chinese')",
        "SELECT COUNT(DISTINCT c.Continent) FROM country c, countrylanguage cl WHERE c.Code = cl.CountryCode AND cl.Language = 'Chinese'",
        "SELECT COUNT(DISTINCT Continent) FROM (SELECT Continent FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese') AS TempTable",
        "SELECT COUNT(UNIQUE Continent) FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Chinese')",
        "SELECT COUNT(*) FROM (SELECT DISTINCT Continent FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese') AS UniqueContinents",
        "SELECT DISTINCT COUNT(Continent) FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese' GROUP BY Continent",
        "SELECT COUNT(DISTINCT Continent) FROM country WHERE EXISTS (SELECT 1 FROM countrylanguage WHERE countrylanguage.CountryCode = country.Code AND countrylanguage.Language = 'Chinese')",
        "SELECT COUNT(DISTINCT Continent) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode AND cl.Language = 'Chinese'"
      ]
    ]
  },
  {
    "id": 752,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT DISTINCT country.Region FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'Dutch')",
        "SELECT DISTINCT Region FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE Language = 'English' OR Language = 'Dutch'",
        "SELECT DISTINCT c.Region FROM country AS c, countrylanguage AS cl WHERE c.Code = cl.CountryCode AND (cl.Language = 'English' OR cl.Language = 'Dutch')",
        "SELECT DISTINCT Region FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' OR Language = 'Dutch')",
        "SELECT DISTINCT c.Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch')",
        "SELECT DISTINCT Region FROM country WHERE EXISTS (SELECT 1 FROM countrylanguage WHERE CountryCode = country.Code AND Language IN ('English', 'Dutch'))",
        "SELECT DISTINCT c.Region FROM country c INNER JOIN countrylanguage cl ON c.Code = cl.CountryCode AND cl.Language IN ('English', 'Dutch')",
        "SELECT DISTINCT Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'English' UNION SELECT DISTINCT Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Dutch'",
        "SELECT DISTINCT c.Region FROM country c, countrylanguage cl WHERE c.Code = cl.CountryCode AND (cl.Language = 'English' OR cl.Language = 'Dutch') GROUP BY c.Region",
        "SELECT DISTINCT Region FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language IN ('English', 'Dutch'))"
      ]
    ]
  },
  {
    "id": 753,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT DISTINCT country.Region FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('Dutch', 'English')",
        "SELECT DISTINCT Region FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE Language = 'Dutch' OR Language = 'English'",
        "SELECT DISTINCT c.Region FROM country AS c, countrylanguage AS cl WHERE c.Code = cl.CountryCode AND (cl.Language = 'Dutch' OR cl.Language = 'English')",
        "SELECT DISTINCT Region FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND (countrylanguage.Language = 'Dutch' OR countrylanguage.Language = 'English')",
        "SELECT DISTINCT country.Region FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Dutch' UNION SELECT DISTINCT country.Region FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English'",
        "SELECT DISTINCT Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('Dutch', 'English')",
        "SELECT DISTINCT c.Region FROM country c INNER JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Dutch' OR cl.Language = 'English'",
        "SELECT DISTINCT Region FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch' OR Language = 'English')",
        "SELECT DISTINCT c.Region FROM country c, countrylanguage cl WHERE c.Code = cl.CountryCode AND cl.Language IN ('Dutch', 'English')",
        "SELECT DISTINCT Region FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language IN ('Dutch', 'English'))"
      ]
    ]
  },
  {
    "id": 754,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch') AND countrylanguage.IsOfficial = 'T'",
        "SELECT c.Name FROM country AS c INNER JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE (cl.Language IN ('English', 'Dutch')) AND cl.IsOfficial = 'T'",
        "SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language IN ('English', 'Dutch') AND IsOfficial = 'T')",
        "SELECT DISTINCT c.Name FROM country c, countrylanguage cl WHERE c.Code = cl.CountryCode AND cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T'",
        "SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T' AND (cl.Language = 'English' OR cl.Language = 'Dutch')",
        "SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE (Language = 'English' OR Language = 'Dutch') AND IsOfficial = 'T')",
        "SELECT country.Name FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.IsOfficial = 'T' AND (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch')",
        "SELECT DISTINCT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T' UNION SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch' AND IsOfficial = 'T')",
        "SELECT c.Name FROM country AS c WHERE EXISTS (SELECT 1 FROM countrylanguage AS cl WHERE cl.CountryCode = c.Code AND cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T')",
        "SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T' UNION ALL SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch' AND IsOfficial = 'T')"
      ]
    ]
  },
  {
    "id": 755,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT DISTINCT c.Name FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T'",
        "SELECT country.Name FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch') AND countrylanguage.IsOfficial = 'T'",
        "SELECT DISTINCT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language IN ('English', 'Dutch') AND IsOfficial = 'T')",
        "SELECT c.Name FROM country c, countrylanguage cl WHERE c.Code = cl.CountryCode AND cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T'",
        "SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'English' AND cl.IsOfficial = 'T' UNION SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Dutch' AND cl.IsOfficial = 'T'",
        "SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE (Language = 'English' OR Language = 'Dutch') AND IsOfficial = 'T')",
        "SELECT DISTINCT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'Dutch') AND countrylanguage.IsOfficial = 'True'",
        "SELECT DISTINCT c.Name FROM country AS c INNER JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE (cl.Language = 'English' OR cl.Language = 'Dutch') AND cl.IsOfficial = 'T'",
        "SELECT c.Name FROM country c WHERE EXISTS (SELECT 1 FROM countrylanguage cl WHERE cl.CountryCode = c.Code AND cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T')",
        "SELECT DISTINCT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T' UNION ALL SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch' AND IsOfficial = 'T')"
      ]
    ]
  },
  {
    "id": 756,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' AND countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia')",
        "SELECT Language FROM countrylanguage, country WHERE countrylanguage.CountryCode = country.Code AND country.Continent = 'Asia' AND countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage, country WHERE countrylanguage.CountryCode = country.Code AND country.Continent = 'Asia')",
        "SELECT CL.Language FROM countrylanguage AS CL INNER JOIN country AS C ON CL.CountryCode = C.Code WHERE C.Continent = 'Asia' AND CL.Percentage = (SELECT MAX(Percentage) FROM countrylanguage AS CL INNER JOIN country AS C ON CL.CountryCode = C.Code WHERE C.Continent = 'Asia')",
        "SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia') AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia'))",
        "SELECT DISTINCT Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' AND countrylanguage.Percentage >= ALL (SELECT Percentage FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia')",
        "SELECT Language FROM countrylanguage CL JOIN country C ON CL.CountryCode = C.Code WHERE C.Continent = 'Asia' AND CL.Percentage = (SELECT MAX(Percentage) FROM countrylanguage CL JOIN country C ON CL.CountryCode = C.Code WHERE C.Continent = 'Asia')",
        "SELECT TOP 1 WITH TIES Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' ORDER BY countrylanguage.Percentage DESC",
        "SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia') ORDER BY Percentage DESC LIMIT 1",
        "SELECT Language FROM countrylanguage CL JOIN country C ON CL.CountryCode = C.Code WHERE C.Continent = 'Asia' ORDER BY CL.Percentage DESC FETCH FIRST ROW WITH TIES",
        "SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia') AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia'))"
      ]
    ]
  },
  {
    "id": 757,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Language FROM (SELECT Language, COUNT(*) AS NumCountries FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY Language) AS SubQuery WHERE NumCountries = (SELECT MAX(NumCountries) FROM (SELECT Language, COUNT(*) AS NumCountries FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY Language) AS SubQuery)",
        "SELECT Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY Language HAVING COUNT(*) = (SELECT MAX(NumCountries) FROM (SELECT COUNT(*) AS NumCountries FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY Language) AS SubQuery)",
        "WITH LanguageCounts AS (SELECT Language, COUNT(*) AS NumCountries FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY Language) SELECT Language FROM LanguageCounts WHERE NumCountries = (SELECT MAX(NumCountries) FROM LanguageCounts)",
        "SELECT Language FROM countrylanguage, country WHERE countrylanguage.CountryCode = country.Code AND country.Continent = 'Asia' GROUP BY Language HAVING COUNT(country.Code) = (SELECT MAX(NumCountries) FROM (SELECT COUNT(country.Code) AS NumCountries FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY Language) AS SubQuery)",
        "SELECT T1.Language FROM (SELECT Language, COUNT(*) AS NumCountries FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY Language) AS T1 WHERE T1.NumCountries = (SELECT MAX(T2.NumCountries) FROM (SELECT COUNT(*) AS NumCountries FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY Language) AS T2)",
        "SELECT Language FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT Language FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY Language HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY Language)",
        "SELECT Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Continent = 'Asia' GROUP BY cl.Language HAVING COUNT(c.Code) = (SELECT MAX(NumCountries) FROM (SELECT COUNT(*) AS NumCountries FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY Language) AS SubQuery)",
        "SELECT Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Continent = 'Asia' GROUP BY cl.Language ORDER BY COUNT(c.Code) DESC FETCH FIRST 1 ROWS ONLY",
        "SELECT Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Continent = 'Asia' GROUP BY cl.Language HAVING COUNT(c.Code) = (SELECT COUNT(c.Code) FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Continent = 'Asia' GROUP BY cl.Language ORDER BY COUNT(c.Code) DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 758,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.GovernmentForm LIKE '%republic%' GROUP BY Language HAVING COUNT(DISTINCT country.Code) = 1",
        "SELECT Language FROM countrylanguage, country WHERE countrylanguage.CountryCode = country.Code AND country.GovernmentForm LIKE '%republic%' GROUP BY Language HAVING COUNT(DISTINCT country.Code) = 1",
        "SELECT CL.Language FROM countrylanguage AS CL INNER JOIN country AS C ON CL.CountryCode = C.Code WHERE C.GovernmentForm LIKE '%republic%' GROUP BY CL.Language HAVING COUNT(DISTINCT C.Code) = 1",
        "SELECT DISTINCT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE GovernmentForm LIKE '%republic%') GROUP BY Language HAVING COUNT(CountryCode) = 1",
        "SELECT L.Language FROM (SELECT Language, COUNT(*) AS NumCountries FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.GovernmentForm LIKE '%republic%' GROUP BY Language) AS L WHERE L.NumCountries = 1",
        "SELECT Language FROM countrylanguage CL JOIN country C ON CL.CountryCode = C.Code WHERE C.GovernmentForm LIKE '%republic%' GROUP BY CL.Language HAVING COUNT(DISTINCT CL.CountryCode) = 1",
        "SELECT Language FROM (SELECT Language, COUNT(DISTINCT CountryCode) AS CountryCount FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE GovernmentForm LIKE '%republic%' GROUP BY Language) AS TempTable WHERE CountryCount = 1",
        "SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE GovernmentForm LIKE '%republic%') GROUP BY Language HAVING COUNT(DISTINCT CountryCode) = 1",
        "SELECT DISTINCT CL.Language FROM countrylanguage CL INNER JOIN country C ON CL.CountryCode = C.Code WHERE C.GovernmentForm LIKE '%republic%' GROUP BY CL.Language HAVING COUNT(DISTINCT C.Code) = 1",
        "SELECT Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code AND country.GovernmentForm LIKE '%republic%' GROUP BY Language HAVING COUNT(DISTINCT country.Code) = 1"
      ]
    ]
  },
  {
    "id": 759,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE GovernmentForm LIKE '%Republic%') GROUP BY Language HAVING COUNT(*) = 1",
        "SELECT CL.Language FROM countrylanguage CL JOIN country C ON CL.CountryCode = C.Code WHERE C.GovernmentForm LIKE '%Republic%' GROUP BY CL.Language HAVING COUNT(DISTINCT CL.CountryCode) = 1",
        "SELECT DISTINCT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE GovernmentForm = 'Republic') GROUP BY Language HAVING COUNT(CountryCode) = 1",
        "SELECT Language FROM countrylanguage CL INNER JOIN country C ON CL.CountryCode = C.Code WHERE C.GovernmentForm LIKE '%Republic%' GROUP BY Language HAVING COUNT(DISTINCT CL.CountryCode) = 1",
        "SELECT CL.Language FROM countrylanguage CL, country C WHERE CL.CountryCode = C.Code AND C.GovernmentForm LIKE '%Republic%' GROUP BY CL.Language HAVING COUNT(DISTINCT CL.CountryCode) = 1",
        "SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE GovernmentForm LIKE '%Republic%') AND Language IN (SELECT Language FROM countrylanguage GROUP BY Language HAVING COUNT(*) = 1)",
        "SELECT Language FROM (SELECT Language, COUNT(*) AS NumCountries FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE GovernmentForm LIKE '%Republic%') GROUP BY Language) AS SubQuery WHERE NumCountries = 1",
        "SELECT Language FROM countrylanguage CL JOIN (SELECT Code FROM country WHERE GovernmentForm LIKE '%Republic%') AS C ON CL.CountryCode = C.Code GROUP BY CL.Language HAVING COUNT(*) = 1",
        "SELECT DISTINCT CL.Language FROM countrylanguage CL LEFT JOIN country C ON CL.CountryCode = C.Code WHERE C.GovernmentForm LIKE '%Republic%' GROUP BY CL.Language HAVING COUNT(CL.CountryCode) = 1",
        "SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE GovernmentForm LIKE 'Republic') GROUP BY Language HAVING COUNT(*) = 1"
      ]
    ]
  },
  {
    "id": 760,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT T1.Name, T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1.Population DESC LIMIT 1",
        "SELECT Name, Population FROM city WHERE CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') ORDER BY Population DESC LIMIT 1",
        "SELECT city.Name, MAX(city.Population) AS Population FROM city INNER JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' GROUP BY city.Name ORDER BY Population DESC LIMIT 1",
        "SELECT TOP 1 city.Name, city.Population FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC",
        "SELECT Name, Population FROM (SELECT Name, Population, RANK() OVER (ORDER BY Population DESC) AS rank FROM city WHERE CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')) AS ranked_cities WHERE rank = 1",
        "SELECT c.Name, c.Population FROM city c JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' ORDER BY c.Population DESC FETCH FIRST 1 ROW ONLY",
        "SELECT Name, Population FROM city WHERE CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND Population = (SELECT MAX(Population) FROM city WHERE CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English'))",
        "SELECT city.Name, city.Population FROM city, countrylanguage WHERE city.CountryCode = countrylanguage.CountryCode AND countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1",
        "SELECT Name, Population FROM city WHERE CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') ORDER BY Population DESC LIMIT 1 OFFSET 0",
        "SELECT FIRST(Name), FIRST(Population) FROM city WHERE CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') ORDER BY Population DESC"
      ]
    ]
  },
  {
    "id": 761,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name, Population FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY Population DESC LIMIT 1",
        "SELECT c.Name, c.Population FROM city c INNER JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' ORDER BY c.Population DESC FETCH FIRST 1 ROW ONLY",
        "SELECT TOP 1 city.Name, city.Population FROM city, countrylanguage WHERE city.CountryCode = countrylanguage.CountryCode AND countrylanguage.Language = 'English' ORDER BY city.Population DESC",
        "SELECT city.Name, MAX(city.Population) AS Population FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' GROUP BY city.Name ORDER BY Population DESC LIMIT 1",
        "SELECT Name, Population FROM city WHERE CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') ORDER BY Population DESC LIMIT 1",
        "SELECT c.Name, c.Population FROM city AS c JOIN countrylanguage AS cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' ORDER BY c.Population DESC LIMIT 1",
        "SELECT Name, Population FROM city WHERE CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') ORDER BY Population DESC LIMIT 1",
        "SELECT city.Name, city.Population FROM city INNER JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1",
        "SELECT Name, Population FROM (SELECT Name, Population, RANK() OVER (ORDER BY Population DESC) AS rank FROM city WHERE CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')) WHERE rank = 1",
        "SELECT Name, Population FROM city WHERE CountryCode = (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' ORDER BY Population DESC LIMIT 1) LIMIT 1"
      ]
    ]
  },
  {
    "id": 762,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name, Population, LifeExpectancy FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Asia') AND Continent = 'Asia'",
        "SELECT c.Name, c.Population, c.LifeExpectancy FROM country AS c WHERE c.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Asia') AND c.Continent = 'Asia'",
        "SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1",
        "SELECT Name, Population, LifeExpectancy FROM country WHERE SurfaceArea IN (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Asia') AND Continent = 'Asia'",
        "SELECT TOP 1 Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC",
        "SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' AND SurfaceArea = (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Asia')",
        "SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' AND c.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Asia')",
        "SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' HAVING SurfaceArea = MAX(SurfaceArea)",
        "SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' AND SurfaceArea = (SELECT MAX(SurfaceArea) FROM country c WHERE c.Continent = 'Asia')",
        "SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' AND SurfaceArea >= ALL (SELECT SurfaceArea FROM country WHERE Continent = 'Asia')"
      ]
    ]
  },
  {
    "id": 763,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name, Population, LifeExpectancy FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Asia') AND Continent = 'Asia'",
        "SELECT c.Name, c.Population, c.LifeExpectancy FROM country AS c WHERE c.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Asia') AND c.Continent = 'Asia'",
        "SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1",
        "SELECT Name, Population, LifeExpectancy FROM country WHERE SurfaceArea IN (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Asia')",
        "SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' AND SurfaceArea = (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Asia')",
        "SELECT TOP 1 Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC",
        "SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' HAVING SurfaceArea = MAX(SurfaceArea)",
        "SELECT Name, Population, LifeExpectancy FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Asia')",
        "SELECT c.Name, c.Population, c.LifeExpectancy FROM country c JOIN (SELECT MAX(SurfaceArea) AS MaxArea FROM country WHERE Continent = 'Asia') sub ON c.SurfaceArea = sub.MaxArea WHERE c.Continent = 'Asia'",
        "SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' AND SurfaceArea >= ALL (SELECT SurfaceArea FROM country WHERE Continent = 'Asia')"
      ]
    ]
  },
  {
    "id": 764,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')",
        "SELECT AVG(c.LifeExpectancy) FROM country AS c LEFT JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language = 'English' AND cl.IsOfficial = 'F'",
        "SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') GROUP BY Code",
        "SELECT AVG(LifeExpectancy) FROM country WHERE NOT EXISTS (SELECT 1 FROM countrylanguage WHERE CountryCode = country.Code AND Language = 'English' AND IsOfficial = 'T')",
        "SELECT AVG(c.LifeExpectancy) FROM country c WHERE NOT EXISTS (SELECT 1 FROM countrylanguage cl WHERE cl.CountryCode = c.Code AND cl.Language = 'English' AND cl.IsOfficial = 'T')",
        "SELECT AVG(LifeExpectancy) FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language <> 'English' OR IsOfficial <> 'T')",
        "SELECT AVG(LifeExpectancy) FROM country c WHERE c.Code NOT IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'English' AND cl.IsOfficial = 'T')",
        "SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') AND LifeExpectancy IS NOT NULL",
        "SELECT AVG(c.LifeExpectancy) FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE (cl.Language <> 'English' OR cl.IsOfficial <> 'T')",
        "SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') AND LifeExpectancy > 0"
      ]
    ]
  },
  {
    "id": 765,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')",
        "SELECT AVG(c.LifeExpectancy) FROM country AS c LEFT JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language = 'English' AND cl.IsOfficial = 'T' AND cl.CountryCode IS NULL",
        "SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'TRUE')",
        "SELECT AVG(LifeExpectancy) FROM country WHERE NOT EXISTS (SELECT 1 FROM countrylanguage WHERE countrylanguage.CountryCode = country.Code AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T')",
        "SELECT AVG(LifeExpectancy) FROM country c WHERE NOT EXISTS (SELECT NULL FROM countrylanguage cl WHERE cl.CountryCode = c.Code AND cl.Language = 'English' AND cl.IsOfficial = 'T')",
        "SELECT AVG(c.LifeExpectancy) FROM country c WHERE c.Code NOT IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'English' AND cl.IsOfficial = 'T')",
        "SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = '1')",
        "SELECT AVG(LifeExpectancy) FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode AND cl.Language = 'English' AND cl.IsOfficial = 'T' WHERE cl.CountryCode IS NULL",
        "SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'Yes')",
        "SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')"
      ]
    ]
  },
  {
    "id": 766,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')",
        "SELECT SUM(Population) FROM country WHERE NOT EXISTS (SELECT 1 FROM countrylanguage WHERE countrylanguage.CountryCode = country.Code AND countrylanguage.Language = 'English')",
        "SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language LIKE 'English')",
        "SELECT SUM(Population) FROM country c WHERE NOT EXISTS (SELECT NULL FROM countrylanguage cl WHERE cl.CountryCode = c.Code AND cl.Language = 'English')",
        "SELECT SUM(c.Population) FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode AND cl.Language = 'English' WHERE cl.Language IS NULL",
        "SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language = 'English')",
        "SELECT SUM(Population) FROM country c WHERE c.Code NOT IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'English')",
        "SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')",
        "SELECT SUM(Population) FROM country AS c WHERE NOT EXISTS (SELECT * FROM countrylanguage AS cl WHERE cl.CountryCode = c.Code AND cl.Language = 'English')",
        "SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' GROUP BY CountryCode)"
      ]
    ]
  },
  {
    "id": 767,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')",
        "SELECT SUM(Population) FROM country WHERE NOT EXISTS (SELECT 1 FROM countrylanguage WHERE countrylanguage.CountryCode = country.Code AND countrylanguage.Language = 'English')",
        "SELECT SUM(c.Population) FROM country AS c LEFT JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language <> 'English' OR cl.Language IS NULL",
        "SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')",
        "SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language = 'English')",
        "SELECT SUM(Population) FROM country c WHERE NOT EXISTS (SELECT * FROM countrylanguage cl WHERE cl.CountryCode = c.Code AND cl.Language = 'English')",
        "SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'F')",
        "SELECT SUM(Population) FROM country AS c WHERE c.Code NOT IN (SELECT cl.CountryCode FROM countrylanguage AS cl WHERE cl.Language = 'English')",
        "SELECT SUM(Population) FROM country c WHERE c.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' GROUP BY CountryCode)",
        "SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND Percentage > 0)"
      ]
    ]
  },
  {
    "id": 768,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T'",
        "SELECT countrylanguage.Language FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'TRUE'",
        "SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'true'",
        "SELECT Language FROM countrylanguage, country WHERE countrylanguage.CountryCode = country.Code AND country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T'",
        "SELECT cl.Language FROM countrylanguage AS cl INNER JOIN country AS c ON cl.CountryCode = c.Code WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = '1'",
        "SELECT Language FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE HeadOfState = 'Beatrix' AND IsOfficial = 'true'",
        "SELECT Language FROM countrylanguage cl, country c WHERE cl.CountryCode = c.Code AND c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T'",
        "SELECT cl.Language FROM countrylanguage cl INNER JOIN country c ON cl.CountryCode = c.Code WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'TRUE'",
        "SELECT Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = '1'",
        "SELECT Language FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'true'"
      ]
    ]
  },
  {
    "id": 769,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T'",
        "SELECT countrylanguage.Language FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'TRUE'",
        "SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T'",
        "SELECT Language FROM countrylanguage, country WHERE countrylanguage.CountryCode = country.Code AND country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T'",
        "SELECT cl.Language FROM countrylanguage AS cl INNER JOIN country AS c ON cl.CountryCode = c.Code WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'TRUE'",
        "SELECT Language FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode IN (SELECT Code FROM country WHERE HeadOfState = 'Beatrix')",
        "SELECT DISTINCT Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T'",
        "SELECT cl.Language FROM countrylanguage cl, country c WHERE cl.CountryCode = c.Code AND c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'TRUE'",
        "SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE HeadOfState = 'Beatrix') AND IsOfficial = 'T'",
        "SELECT Language FROM countrylanguage cl INNER JOIN country c ON cl.CountryCode = c.Code WHERE c.HeadOfState LIKE 'Beatrix' AND cl.IsOfficial = 'T'"
      ]
    ]
  },
  {
    "id": 770,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930)",
        "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.IsOfficial = 'T' AND country.IndepYear < 1930",
        "SELECT COUNT(DISTINCT cl.Language) FROM countrylanguage cl INNER JOIN country c ON cl.CountryCode = c.Code WHERE cl.IsOfficial = 'T' AND c.IndepYear < 1930",
        "SELECT COUNT(DISTINCT Language) AS TotalLanguages FROM countrylanguage WHERE IsOfficial = 'TRUE' AND CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930)",
        "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930 GROUP BY Code)",
        "SELECT DISTINCT COUNT(Language) FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930)",
        "SELECT COUNT(UNIQUE Language) FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930)",
        "SELECT COUNT(DISTINCT Language) FROM countrylanguage, country WHERE countrylanguage.CountryCode = country.Code AND countrylanguage.IsOfficial = 'T' AND country.IndepYear < 1930",
        "SELECT DISTINCT COUNT(Language) FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.IsOfficial = 'T' AND country.IndepYear < 1930",
        "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE IsOfficial = 'TRUE' AND CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930)"
      ]
    ]
  },
  {
    "id": 771,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.IndepYear < 1930 AND T2.IsOfficial = 'T'",
        "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930)",
        "SELECT COUNT(DISTINCT cl.Language) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T'",
        "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930)",
        "SELECT COUNT(DISTINCT cl.Language) FROM country AS c INNER JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T'",
        "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE IsOfficial = 'TRUE' AND CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930)",
        "SELECT COUNT(DISTINCT Language) FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'TRUE'",
        "SELECT COUNT(DISTINCT cl.Language) FROM country c INNER JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'TRUE'",
        "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE IsOfficial = 'TRUE' AND CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930)",
        "SELECT COUNT(DISTINCT cl.Language) FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'TRUE'"
      ]
    ]
  },
  {
    "id": 772,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')",
        "SELECT c.Name FROM country c WHERE c.SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')",
        "SELECT country.Name FROM country WHERE country.SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')",
        "SELECT Name FROM country WHERE SurfaceArea > ALL (SELECT SurfaceArea FROM country WHERE Continent = 'Europe')",
        "SELECT c.Name FROM country AS c WHERE c.SurfaceArea > (SELECT MAX(c2.SurfaceArea) FROM country AS c2 WHERE c2.Continent = 'Europe')",
        "SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country c WHERE c.Continent = 'Europe')",
        "SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(c.SurfaceArea) FROM country c WHERE c.Continent = 'Europe')",
        "SELECT country.Name FROM country WHERE country.SurfaceArea > ALL (SELECT SurfaceArea FROM country WHERE Continent = 'Europe')",
        "SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe' GROUP BY Continent)",
        "SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country c WHERE c.Continent = 'Europe' GROUP BY c.Continent)"
      ]
    ]
  },
  {
    "id": 773,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe') AND Continent != 'Europe'",
        "SELECT c.Name FROM country AS c WHERE c.SurfaceArea > (SELECT MAX(c2.SurfaceArea) FROM country AS c2 WHERE c2.Continent = 'Europe') AND c.Continent <> 'Europe'",
        "SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe') AND Continent NOT IN ('Europe')",
        "SELECT country.Name FROM country WHERE country.SurfaceArea > (SELECT MAX(country.SurfaceArea) FROM country WHERE country.Continent = 'Europe') AND country.Continent != 'Europe'",
        "SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe') AND NOT Continent = 'Europe'",
        "SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country c WHERE c.Continent = 'Europe') AND Continent <> 'Europe'",
        "SELECT Name FROM country c1 WHERE c1.SurfaceArea > (SELECT MAX(c2.SurfaceArea) FROM country c2 WHERE c2.Continent = 'Europe') AND c1.Continent != 'Europe'",
        "SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe') AND Continent NOT LIKE 'Europe'",
        "SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe') AND Continent != 'Europe'",
        "SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe') AND Continent NOT IN ('Europe')"
      ]
    ]
  },
  {
    "id": 774,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')",
        "SELECT c1.Name FROM country AS c1 WHERE c1.Continent = 'Africa' AND c1.Population < (SELECT MIN(c2.Population) FROM country AS c2 WHERE c2.Continent = 'Asia')",
        "SELECT Name FROM country WHERE Continent = 'Africa' AND Population < ALL (SELECT Population FROM country WHERE Continent = 'Asia')",
        "SELECT Name FROM country AS c WHERE c.Continent = 'Africa' AND NOT EXISTS (SELECT 1 FROM country AS c2 WHERE c2.Continent = 'Asia' AND c2.Population <= c.Population)",
        "SELECT c.Name FROM country c WHERE c.Continent = 'Africa' AND c.Population < ANY (SELECT Population FROM country WHERE Continent = 'Asia')",
        "SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia' GROUP BY Continent)",
        "SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT Population FROM country WHERE Continent = 'Asia' ORDER BY Population ASC LIMIT 1)",
        "SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia' AND Population IS NOT NULL)",
        "SELECT Name FROM country WHERE Continent = 'Africa' AND EXISTS (SELECT * FROM country AS c2 WHERE c2.Continent = 'Asia' AND country.Population < c2.Population)",
        "SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia' AND Population > 0)"
      ]
    ]
  },
  {
    "id": 775,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')",
        "SELECT c1.Name FROM country AS c1 WHERE c1.Continent = 'Africa' AND c1.Population < (SELECT MIN(c2.Population) FROM country AS c2 WHERE c2.Continent = 'Asia')",
        "SELECT Name FROM country WHERE Continent = 'Africa' AND Population < ALL (SELECT Population FROM country WHERE Continent = 'Asia')",
        "SELECT Name FROM country AS c1 WHERE c1.Continent = 'Africa' AND NOT EXISTS (SELECT 1 FROM country AS c2 WHERE c2.Continent = 'Asia' AND c2.Population <= c1.Population)",
        "SELECT c1.Name FROM country c1 WHERE c1.Continent = 'Africa' AND c1.Population < (SELECT MIN(c2.Population) FROM country c2 WHERE c2.Continent = 'Asia')",
        "SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia' GROUP BY Continent)",
        "SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT Population FROM country WHERE Continent = 'Asia' ORDER BY Population ASC LIMIT 1)",
        "SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia' AND Population IS NOT NULL)",
        "SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT Population FROM country WHERE Continent = 'Asia' ORDER BY Population LIMIT 1)",
        "SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia' AND Population > 0)"
      ]
    ]
  },
  {
    "id": 776,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')",
        "SELECT c.Name FROM country c WHERE c.Continent = 'Asia' AND c.Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')",
        "SELECT Name FROM country AS c1 WHERE c1.Continent = 'Asia' AND c1.Population > (SELECT MAX(c2.Population) FROM country AS c2 WHERE c2.Continent = 'Africa')",
        "SELECT country.Name FROM country WHERE country.Continent = 'Asia' AND country.Population > (SELECT MAX(country.Population) FROM country WHERE country.Continent = 'Africa')",
        "SELECT Name FROM country WHERE Continent = 'Asia' AND Population > ALL (SELECT Population FROM country WHERE Continent = 'Africa')",
        "SELECT c.Name FROM country c WHERE c.Continent = 'Asia' AND EXISTS (SELECT 1 FROM country c2 WHERE c2.Continent = 'Africa' HAVING MAX(c2.Population) < c.Population)",
        "SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country c WHERE c.Continent = 'Africa')",
        "SELECT Name FROM country AS AsianCountries WHERE AsianCountries.Continent = 'Asia' AND AsianCountries.Population > (SELECT MAX(Population) FROM country AS AfricanCountries WHERE AfricanCountries.Continent = 'Africa')",
        "SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa' GROUP BY Continent)",
        "SELECT c1.Name FROM country c1 WHERE c1.Continent = 'Asia' AND c1.Population > (SELECT MAX(c2.Population) FROM country c2 WHERE c2.Continent = 'Africa')"
      ]
    ]
  },
  {
    "id": 777,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name FROM country WHERE Continent = 'Asia' AND Population > ALL (SELECT Population FROM country WHERE Continent = 'Africa')",
        "SELECT c1.Name FROM country c1 WHERE c1.Continent = 'Asia' AND c1.Population > (SELECT MIN(c2.Population) FROM country c2 WHERE c2.Continent = 'Africa')",
        "SELECT Name FROM country AS c1 WHERE Continent = 'Asia' AND NOT EXISTS (SELECT 1 FROM country AS c2 WHERE c2.Continent = 'Africa' AND c2.Population >= c1.Population)",
        "SELECT c1.Name FROM country c1 WHERE c1.Continent = 'Asia' AND c1.Population > ALL (SELECT MAX(c2.Population) FROM country c2 WHERE c2.Continent = 'Africa')",
        "SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')",
        "SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT Population FROM country WHERE Continent = 'Africa' ORDER BY Population DESC LIMIT 1)",
        "SELECT Name FROM country WHERE Continent = 'Asia' AND Population > ALL (SELECT Population FROM country WHERE Continent = 'Africa' GROUP BY Name)",
        "SELECT Name FROM country AS AsianCountries WHERE AsianCountries.Continent = 'Asia' AND AsianCountries.Population > ALL (SELECT AfricanCountries.Population FROM country AS AfricanCountries WHERE AfricanCountries.Continent = 'Africa')",
        "SELECT Asian.Name FROM country AS Asian WHERE Asian.Continent = 'Asia' AND Asian.Population > (SELECT MAX(African.Population) FROM country AS African WHERE African.Continent = 'Africa')",
        "SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT Population FROM country WHERE Continent = 'Africa' HAVING MAX(Population))"
      ]
    ]
  },
  {
    "id": 778,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')",
        "SELECT c.Code FROM country AS c LEFT JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language = 'English' AND cl.CountryCode IS NULL",
        "SELECT Code FROM country WHERE NOT EXISTS (SELECT 1 FROM countrylanguage WHERE Language = 'English' AND CountryCode = country.Code)",
        "SELECT c.Code FROM country c WHERE c.Code NOT IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'English')",
        "SELECT DISTINCT c.Code FROM country c WHERE c.Code NOT IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'English')",
        "SELECT Code FROM country EXCEPT SELECT CountryCode FROM countrylanguage WHERE Language = 'English'",
        "SELECT c.Code FROM country c WHERE NOT EXISTS (SELECT NULL FROM countrylanguage cl WHERE cl.Language = 'English' AND cl.CountryCode = c.Code)",
        "SELECT Code FROM country c WHERE c.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')",
        "SELECT DISTINCT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')",
        "SELECT c.Code FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode AND cl.Language = 'English' WHERE cl.CountryCode IS NULL"
      ]
    ]
  },
  {
    "id": 779,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')",
        "SELECT c.Code FROM country AS c WHERE NOT EXISTS (SELECT 1 FROM countrylanguage AS cl WHERE cl.Language = 'English' AND cl.CountryCode = c.Code)",
        "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language LIKE 'English')",
        "SELECT c.Code FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode AND cl.Language = 'English' WHERE cl.Language IS NULL",
        "SELECT DISTINCT c.Code FROM country c WHERE c.Code NOT IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'English')",
        "SELECT Code FROM country EXCEPT SELECT CountryCode FROM countrylanguage WHERE Language = 'English'",
        "SELECT c.Code FROM country c WHERE NOT EXISTS (SELECT NULL FROM countrylanguage cl WHERE cl.CountryCode = c.Code AND cl.Language = 'English')",
        "SELECT Code FROM country c WHERE NOT EXISTS (SELECT * FROM countrylanguage cl WHERE cl.CountryCode = c.Code AND cl.Language = 'English')",
        "SELECT c.Code FROM country c WHERE c.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')",
        "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')"
      ]
    ]
  },
  {
    "id": 780,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')",
        "SELECT DISTINCT c.Code FROM country AS c LEFT JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language <> 'English' OR cl.Language IS NULL",
        "SELECT c.Code FROM country AS c WHERE NOT EXISTS (SELECT 1 FROM countrylanguage AS cl WHERE cl.CountryCode = c.Code AND cl.Language = 'English')",
        "SELECT Code FROM country EXCEPT SELECT CountryCode FROM countrylanguage WHERE Language = 'English'",
        "SELECT c.Code FROM country c WHERE c.Code NOT IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'English')",
        "SELECT DISTINCT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')",
        "SELECT Code FROM country c WHERE NOT EXISTS (SELECT NULL FROM countrylanguage cl WHERE cl.CountryCode = c.Code AND cl.Language = 'English')",
        "SELECT c.Code FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language <> 'English' OR cl.Language IS NULL GROUP BY c.Code",
        "SELECT DISTINCT c.Code FROM country c WHERE c.Code NOT IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'English')",
        "SELECT c.Code FROM country c WHERE c.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')"
      ]
    ]
  },
  {
    "id": 781,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT DISTINCT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language <> 'English'",
        "SELECT DISTINCT c.Code FROM country AS c INNER JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language NOT LIKE 'English'",
        "SELECT DISTINCT Code FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language != 'English')",
        "SELECT DISTINCT country.Code FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND countrylanguage.Language NOT IN ('English')",
        "SELECT DISTINCT c.Code FROM country c, countrylanguage cl WHERE c.Code = cl.CountryCode AND cl.Language <> 'English'",
        "SELECT DISTINCT Code FROM country WHERE EXISTS (SELECT 1 FROM countrylanguage WHERE CountryCode = country.Code AND Language <> 'English')",
        "SELECT DISTINCT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode AND cl.Language <> 'English'",
        "SELECT DISTINCT country.Code FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode AND countrylanguage.Language NOT IN ('English')",
        "SELECT DISTINCT Code FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE NOT (Language = 'English'))",
        "SELECT DISTINCT c.Code FROM country AS c WHERE NOT EXISTS (SELECT * FROM countrylanguage AS cl WHERE cl.CountryCode = c.Code AND cl.Language = 'English')"
      ]
    ]
  },
  {
    "id": 782,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Code FROM country WHERE GovernmentForm != 'Republic' AND Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')",
        "SELECT c.Code FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.GovernmentForm != 'Republic' AND (cl.Language != 'English' OR cl.Language IS NULL)",
        "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND GovernmentForm NOT LIKE '%Republic%'",
        "SELECT c.Code FROM country c WHERE NOT EXISTS (SELECT 1 FROM countrylanguage cl WHERE cl.CountryCode = c.Code AND cl.Language = 'English') AND c.GovernmentForm <> 'Republic'",
        "SELECT Code FROM country WHERE GovernmentForm NOT IN ('Republic') AND Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')",
        "SELECT DISTINCT c.Code FROM country c WHERE c.GovernmentForm != 'Republic' AND NOT EXISTS (SELECT 1 FROM countrylanguage cl WHERE cl.CountryCode = c.Code AND cl.Language = 'English')",
        "SELECT Code FROM country WHERE NOT (GovernmentForm = 'Republic' OR Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English'))",
        "SELECT c.Code FROM country c WHERE c.GovernmentForm != 'Republic' AND c.Code NOT IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'English')",
        "SELECT Code FROM country WHERE GovernmentForm NOT LIKE 'Republic' AND Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')",
        "SELECT c.Code FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode AND cl.Language = 'English' WHERE c.GovernmentForm != 'Republic' AND cl.Language IS NULL"
      ]
    ]
  },
  {
    "id": 783,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Code FROM country WHERE GovernmentForm NOT LIKE '%Republic%' AND Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')",
        "SELECT c.Code FROM country AS c LEFT JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language <> 'English' AND c.GovernmentForm NOT LIKE '%Republic%'",
        "SELECT Code FROM country WHERE NOT GovernmentForm LIKE '%Republic%' AND Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')",
        "SELECT c.Code FROM country c WHERE NOT EXISTS (SELECT 1 FROM countrylanguage cl WHERE cl.CountryCode = c.Code AND cl.Language = 'English') AND c.GovernmentForm NOT LIKE '%Republic%'",
        "SELECT Code FROM country WHERE GovernmentForm NOT LIKE '%Republic%' EXCEPT SELECT CountryCode FROM countrylanguage WHERE Language = 'English'",
        "SELECT DISTINCT c.Code FROM country c WHERE c.GovernmentForm NOT LIKE '%Republic%' AND NOT EXISTS (SELECT 1 FROM countrylanguage cl WHERE cl.CountryCode = c.Code AND cl.Language = 'English')",
        "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND GovernmentForm NOT LIKE '%Republic%'",
        "SELECT c.Code FROM country c WHERE c.GovernmentForm NOT LIKE '%Republic%' AND c.Code NOT IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'English')",
        "SELECT Code FROM country WHERE GovernmentForm NOT LIKE '%Republic%' AND NOT EXISTS (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND CountryCode = Code)",
        "SELECT c.Code FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IS NULL OR cl.Language <> 'English' AND c.GovernmentForm NOT LIKE '%Republic%'"
      ]
    ]
  },
  {
    "id": 784,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Europe' AND Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T'))",
        "SELECT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code LEFT JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Europe' AND (cl.Language != 'English' OR cl.IsOfficial != 'T')",
        "SELECT city.Name FROM city INNER JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Europe' AND country.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')",
        "SELECT c.Name FROM city c, country co WHERE c.CountryCode = co.Code AND co.Continent = 'Europe' AND NOT EXISTS (SELECT 1 FROM countrylanguage cl WHERE cl.CountryCode = co.Code AND cl.Language = 'English' AND cl.IsOfficial = 'T')",
        "SELECT Name FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Europe') AND CountryCode NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')",
        "SELECT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code WHERE co.Continent = 'Europe' AND NOT EXISTS (SELECT * FROM countrylanguage cl WHERE cl.CountryCode = co.Code AND cl.Language = 'English' AND cl.IsOfficial = 'T')",
        "SELECT Name FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Europe' AND Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T'))",
        "SELECT c.Name FROM city c INNER JOIN country co ON c.CountryCode = co.Code LEFT JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Europe' AND (cl.Language <> 'English' OR cl.IsOfficial <> 'T')",
        "SELECT city.Name FROM city INNER JOIN country ON city.CountryCode = country.Code LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND (countrylanguage.Language <> 'English' OR countrylanguage.IsOfficial <> 'T')",
        "SELECT c.Name FROM city c WHERE EXISTS (SELECT * FROM country co WHERE co.Continent = 'Europe' AND co.Code = c.CountryCode AND NOT EXISTS (SELECT * FROM countrylanguage cl WHERE cl.CountryCode = co.Code AND cl.Language = 'English' AND cl.IsOfficial = 'T'))"
      ]
    ]
  },
  {
    "id": 785,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Europe') AND CountryCode NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')",
        "SELECT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code LEFT JOIN countrylanguage cl ON co.Code = cl.CountryCode AND cl.Language = 'English' AND cl.IsOfficial = 'T' WHERE co.Continent = 'Europe' AND cl.Language IS NULL",
        "SELECT c.Name FROM city c INNER JOIN country co ON c.CountryCode = co.Code WHERE co.Continent = 'Europe' AND NOT EXISTS (SELECT 1 FROM countrylanguage cl WHERE cl.CountryCode = co.Code AND cl.Language = 'English' AND cl.IsOfficial = 'T')",
        "SELECT city.Name FROM city INNER JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Europe' AND city.CountryCode NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')",
        "SELECT c.Name FROM city c, country co WHERE c.CountryCode = co.Code AND co.Continent = 'Europe' AND c.CountryCode NOT IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'English' AND cl.IsOfficial = 'T')",
        "SELECT Name FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Europe' AND Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T'))",
        "SELECT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code LEFT JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Europe' AND (cl.Language != 'English' OR cl.IsOfficial != 'T' OR cl.Language IS NULL)",
        "SELECT Name FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Europe') EXCEPT SELECT Name FROM city WHERE CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')",
        "SELECT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code WHERE co.Continent = 'Europe' AND NOT EXISTS (SELECT * FROM countrylanguage cl WHERE cl.CountryCode = co.Code AND cl.Language = 'English' AND cl.IsOfficial = 'T')",
        "SELECT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code LEFT JOIN countrylanguage cl ON co.Code = cl.CountryCode AND cl.Language = 'English' AND cl.IsOfficial = 'T' WHERE co.Continent = 'Europe' AND cl.CountryCode IS NULL"
      ]
    ]
  },
  {
    "id": 786,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT DISTINCT c.Name, c.Population FROM city AS c JOIN country AS co ON c.CountryCode = co.Code JOIN countrylanguage AS cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T'",
        "SELECT c.Name, c.Population FROM city c INNER JOIN country co ON c.CountryCode = co.Code INNER JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'TRUE'",
        "SELECT DISTINCT city.Name, city.Population FROM city, country, countrylanguage WHERE city.CountryCode = country.Code AND country.Code = countrylanguage.CountryCode AND country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'",
        "SELECT city.Name, city.Population FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T' GROUP BY city.Name",
        "SELECT DISTINCT Name, Population FROM city INNER JOIN country ON city.CountryCode = country.Code INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE Continent = 'Asia' AND Language = 'Chinese' AND IsOfficial = 'T'",
        "SELECT c.Name AS CityName, c.Population AS CityPopulation FROM city c, country co, countrylanguage cl WHERE c.CountryCode = co.Code AND co.Code = cl.CountryCode AND co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T'",
        "SELECT DISTINCT c.Name, c.Population FROM city c LEFT JOIN country co ON c.CountryCode = co.Code LEFT JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T'",
        "SELECT Name, Population FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia' AND Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Chinese' AND IsOfficial = 'T'))",
        "SELECT DISTINCT c.Name, c.Population FROM city c JOIN country co ON c.CountryCode = co.Code JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T' ORDER BY c.Name",
        "SELECT c.Name, c.Population FROM city c JOIN country co ON c.CountryCode = co.Code JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'TRUE' ORDER BY c.Name ASC"
      ]
    ]
  },
  {
    "id": 787,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT DISTINCT c.Name FROM city AS c JOIN country AS co ON c.CountryCode = co.Code JOIN countrylanguage AS cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T'",
        "SELECT DISTINCT city.Name FROM city INNER JOIN country ON city.CountryCode = country.Code INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'",
        "SELECT DISTINCT Name FROM city, country, countrylanguage WHERE city.CountryCode = country.Code AND country.Code = countrylanguage.CountryCode AND country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'",
        "SELECT DISTINCT c.Name FROM city c, country co, countrylanguage cl WHERE c.CountryCode = co.Code AND co.Code = cl.CountryCode AND co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T'",
        "SELECT DISTINCT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = TRUE",
        "SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = TRUE",
        "SELECT DISTINCT c.Name FROM city c INNER JOIN country co ON c.CountryCode = co.Code INNER JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T'",
        "SELECT DISTINCT Name FROM city INNER JOIN country ON city.CountryCode = country.Code INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE Continent = 'Asia' AND Language = 'Chinese' AND IsOfficial = 'T'",
        "SELECT DISTINCT c.Name FROM city AS c, country AS co, countrylanguage AS cl WHERE c.CountryCode = co.Code AND co.Code = cl.CountryCode AND co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T'",
        "SELECT DISTINCT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'TRUE'"
      ]
    ]
  },
  {
    "id": 788,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country)",
        "SELECT c.Name, c.IndepYear, c.SurfaceArea FROM country AS c WHERE c.Population = (SELECT MIN(Population) FROM country)",
        "SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population IN (SELECT MIN(Population) FROM country)",
        "SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country WHERE country.Population = (SELECT MIN(Population) FROM country)",
        "SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country AS c)",
        "SELECT Name, IndepYear, SurfaceArea FROM country c1 WHERE c1.Population = (SELECT MIN(c2.Population) FROM country c2)",
        "SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country GROUP BY Population)",
        "SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1",
        "SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT Population FROM country ORDER BY Population ASC LIMIT 1)",
        "SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country WHERE Population IS NOT NULL)"
      ]
    ]
  },
  {
    "id": 789,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country)",
        "SELECT c.Name, c.IndepYear, c.SurfaceArea FROM country AS c WHERE c.Population = (SELECT MIN(Population) FROM country)",
        "SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population IN (SELECT MIN(Population) FROM country)",
        "SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country AS c)",
        "SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country WHERE country.Population = (SELECT MIN(country.Population) FROM country)",
        "SELECT Name, IndepYear, SurfaceArea FROM country c1 WHERE c1.Population = (SELECT MIN(c2.Population) FROM country c2)",
        "SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country GROUP BY Population)",
        "SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT Population FROM country ORDER BY Population ASC LIMIT 1)",
        "SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1",
        "SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT Population FROM country ORDER BY Population LIMIT 1)"
      ]
    ]
  },
  {
    "id": 790,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Population, Name, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)",
        "SELECT c.Population, c.Name, c.HeadOfState FROM country AS c WHERE c.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)",
        "SELECT Population, Name, HeadOfState FROM country WHERE SurfaceArea IN (SELECT MAX(SurfaceArea) FROM country)",
        "SELECT Name, Population, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)",
        "SELECT Name, Population, HeadOfState FROM country c1 WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country c2)",
        "SELECT c.Name, c.Population, c.HeadOfState FROM country c WHERE c.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)",
        "SELECT Name, Population, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "SELECT Name, Population, HeadOfState FROM country WHERE SurfaceArea >= ALL (SELECT SurfaceArea FROM country)",
        "SELECT Name, Population, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country AS c)",
        "SELECT Population, Name, HeadOfState FROM country WHERE SurfaceArea >= ALL (SELECT SurfaceArea FROM country)"
      ]
    ]
  },
  {
    "id": 791,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name, Population, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)",
        "SELECT c.Name, c.Population, c.HeadOfState FROM country AS c WHERE c.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)",
        "SELECT Name, Population, HeadOfState FROM country WHERE SurfaceArea IN (SELECT MAX(SurfaceArea) FROM country)",
        "SELECT country.Name, country.Population, country.HeadOfState FROM country WHERE country.SurfaceArea = (SELECT MAX(country.SurfaceArea) FROM country)",
        "SELECT Name, Population, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "SELECT TOP 1 Name, Population, HeadOfState FROM country ORDER BY SurfaceArea DESC",
        "SELECT Name, Population, HeadOfState FROM country WHERE SurfaceArea >= ALL (SELECT SurfaceArea FROM country)",
        "SELECT Name, Population, HeadOfState FROM country c1 WHERE NOT EXISTS (SELECT 1 FROM country c2 WHERE c2.SurfaceArea > c1.SurfaceArea)",
        "SELECT Name, Population, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country AS c)",
        "SELECT Name, Population, HeadOfState FROM country c WHERE c.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)"
      ]
    ]
  },
  {
    "id": 792,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT C.Name, COUNT(L.Language) AS NumLanguages FROM country AS C JOIN countrylanguage AS L ON C.Code = L.CountryCode GROUP BY C.Name HAVING COUNT(L.Language) >= 3",
        "SELECT country.Name, COUNT(countrylanguage.Language) AS LanguageCount FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(countrylanguage.Language) >= 3",
        "SELECT Name, COUNT(Language) FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Name HAVING COUNT(Language) >= 3",
        "SELECT C.Name, COUNT(*) AS Languages FROM country C INNER JOIN countrylanguage CL ON C.Code = CL.CountryCode GROUP BY C.Name HAVING COUNT(*) >= 3",
        "SELECT Name, COUNT(Language) AS Num_Languages FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode GROUP BY Name HAVING COUNT(Language) >= 3",
        "SELECT country.Name, COUNT(DISTINCT countrylanguage.Language) AS TotalLanguages FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(DISTINCT countrylanguage.Language) >= 3",
        "SELECT C.Name, COUNT(L.Language) FROM country AS C, countrylanguage AS L WHERE C.Code = L.CountryCode GROUP BY C.Name HAVING COUNT(L.Language) >= 3",
        "SELECT Name, COUNT(Language) AS Language_Count FROM country JOIN countrylanguage ON Code = CountryCode GROUP BY Name HAVING COUNT(Language) >= 3",
        "SELECT C.Name, COUNT(L.Language) AS NumberOfLanguages FROM country C LEFT JOIN countrylanguage L ON C.Code = L.CountryCode GROUP BY C.Name HAVING COUNT(L.Language) >= 3",
        "SELECT Name, COUNT(Language) AS Languages_Spoken FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Name HAVING COUNT(Language) >= 3"
      ]
    ]
  },
  {
    "id": 793,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT c.Name, COUNT(cl.Language) AS NumLanguages FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode GROUP BY c.Code HAVING COUNT(cl.Language) > 2",
        "SELECT country.Name, COUNT(countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING COUNT(countrylanguage.Language) > 2",
        "SELECT Name, COUNT(Language) FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING COUNT(Language) > 2",
        "SELECT c.Name, COUNT(*) AS LanguageCount FROM country c INNER JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Code HAVING COUNT(*) > 2",
        "SELECT Name, NumLanguages FROM (SELECT country.Name AS Name, COUNT(countrylanguage.Language) AS NumLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code) AS subquery WHERE NumLanguages > 2",
        "SELECT Name, COUNT(Language) AS TotalLanguages FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING TotalLanguages > 2",
        "SELECT c.Name, COUNT(cl.Language) AS LanguagesSpoken FROM country c, countrylanguage cl WHERE c.Code = cl.CountryCode GROUP BY c.Code HAVING LanguagesSpoken > 2",
        "SELECT Name, COUNT(Language) FROM country JOIN countrylanguage ON Code = CountryCode GROUP BY Code HAVING COUNT(Language) > 2",
        "SELECT Name, COUNT(Language) AS LanguageCount FROM country INNER JOIN countrylanguage ON Code = CountryCode GROUP BY Code HAVING LanguageCount > 2",
        "SELECT c.Name, COUNT(cl.Language) FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode GROUP BY c.Code HAVING COUNT(cl.Language) > 2"
      ]
    ]
  },
  {
    "id": 794,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT district, COUNT(*) AS num_cities FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district",
        "SELECT c.district, COUNT(c.ID) FROM city AS c WHERE c.population > (SELECT AVG(population) FROM city) GROUP BY c.district",
        "SELECT district, COUNT(ID) FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district",
        "SELECT district, COUNT(*) FROM city GROUP BY district HAVING population > (SELECT AVG(population) FROM city)",
        "SELECT c.district, COUNT(*) FROM city c WHERE c.population > (SELECT AVG(p.population) FROM city p) GROUP BY c.district",
        "SELECT district, COUNT(city.ID) FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district",
        "SELECT c.district, COUNT(c.ID) AS NumberOfCities FROM city c WHERE c.population > (SELECT AVG(population) FROM city) GROUP BY c.district",
        "SELECT district, COUNT(*) AS CityCount FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district",
        "SELECT c.district, COUNT(*) FROM city c WHERE c.population > (SELECT AVG(p.population) FROM city p) GROUP BY c.district",
        "SELECT district, COUNT(*) FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district"
      ]
    ]
  },
  {
    "id": 795,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT District, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District",
        "SELECT c.District, COUNT(c.ID) FROM city c WHERE c.Population > (SELECT AVG(Population) FROM city) GROUP BY c.District",
        "SELECT District, COUNT(ID) AS CityCount FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District",
        "SELECT c.District, COUNT(*) AS NumberOfCities FROM city c WHERE c.Population > (SELECT AVG(Population) FROM city) GROUP BY c.District",
        "SELECT District, COUNT(ID) FROM city GROUP BY District HAVING Population > (SELECT AVG(Population) FROM city)",
        "SELECT c.District, COUNT(c.ID) FROM city c GROUP BY c.District HAVING c.Population > (SELECT AVG(Population) FROM city)",
        "SELECT District, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city GROUP BY District) GROUP BY District",
        "SELECT c.District, COUNT(c.ID) FROM city c WHERE c.Population > (SELECT AVG(Population) FROM city) GROUP BY c.District",
        "SELECT District, COUNT(ID) FROM city GROUP BY District HAVING Population > (SELECT AVG(Population) FROM city)",
        "SELECT c.District, COUNT(*) FROM city c WHERE c.Population > (SELECT AVG(Population) FROM city) GROUP BY c.District"
      ]
    ]
  },
  {
    "id": 796,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm",
        "SELECT GovernmentForm, SUM(Population) FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72",
        "SELECT c.GovernmentForm, SUM(c.Population) FROM country c WHERE c.LifeExpectancy > 72 GROUP BY c.GovernmentForm",
        "SELECT GovernmentForm, TOTAL(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm",
        "SELECT GovernmentForm, SUM(Population) FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72",
        "SELECT c.GovernmentForm, SUM(c.Population) FROM country AS c GROUP BY c.GovernmentForm HAVING AVG(c.LifeExpectancy) > 72",
        "SELECT GovernmentForm, SUM(Population) FROM country WHERE AVG(LifeExpectancy) > 72 GROUP BY GovernmentForm",
        "SELECT DISTINCT GovernmentForm, SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm",
        "SELECT GovernmentForm, SUM(Population) FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72",
        "SELECT GovernmentForm, SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm"
      ]
    ]
  },
  {
    "id": 797,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT GovernmentForm, SUM(Population) FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72",
        "SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country WHERE GovernmentForm IN (SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72) GROUP BY GovernmentForm",
        "SELECT c.GovernmentForm, SUM(c.Population) FROM country c WHERE c.GovernmentForm IN (SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72) GROUP BY c.GovernmentForm",
        "SELECT GovernmentForm, SUM(Population) FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72 ORDER BY GovernmentForm",
        "SELECT DISTINCT GovernmentForm, SUM(Population) FROM country WHERE GovernmentForm IN (SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72) GROUP BY GovernmentForm",
        "SELECT GovernmentForm, TotalPopulation FROM (SELECT GovernmentForm, SUM(Population) AS TotalPopulation, AVG(LifeExpectancy) AS AvgLifeExpectancy FROM country GROUP BY GovernmentForm) AS subquery WHERE AvgLifeExpectancy > 72",
        "SELECT GovernmentForm, SUM(Population) FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72 AND GovernmentForm IS NOT NULL",
        "SELECT GovernmentForm, SUM(Population) AS PopulationSum FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72",
        "SELECT GovernmentForm, SUM(Population) FROM country WHERE GovernmentForm IN (SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72) GROUP BY GovernmentForm",
        "SELECT GovernmentForm, SUM(Population) FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72"
      ]
    ]
  },
  {
    "id": 798,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Continent, AVG(LifeExpectancy) AS AvgLifeExpectancy, SUM(Population) AS TotalPopulation FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72",
        "SELECT c.Continent, AVG(c.LifeExpectancy) AS AverageLifeExpectancy, SUM(c.Population) AS TotalPopulation FROM country AS c GROUP BY c.Continent HAVING AverageLifeExpectancy < 72",
        "SELECT Continent, AVG(LifeExpectancy), SUM(Population) FROM country WHERE LifeExpectancy < 72 GROUP BY Continent",
        "SELECT Continent, AVG(LifeExpectancy) AS AverageLife, SUM(Population) AS PopulationSum FROM country GROUP BY Continent HAVING AverageLife < 72",
        "SELECT c.Continent, AVG(c.LifeExpectancy) AS LifeExpAvg, SUM(c.Population) AS PopSum FROM country c GROUP BY c.Continent HAVING LifeExpAvg < 72",
        "SELECT Continent, AVG(LifeExpectancy) AS LifeExpectancyAverage, SUM(Population) AS TotalPop FROM country GROUP BY Continent HAVING LifeExpectancyAverage < 72",
        "SELECT Continent, AVG(LifeExpectancy) AS AvgLifeExp, SUM(Population) AS SumPopulation FROM country GROUP BY Continent HAVING AvgLifeExp < 72",
        "SELECT Continent, AVG(LifeExpectancy) AS AverageLE, SUM(Population) AS PopulationTotal FROM country GROUP BY Continent HAVING AverageLE < 72",
        "SELECT Continent, AVG(LifeExpectancy) AS LifeExp, SUM(Population) AS PopTotal FROM country GROUP BY Continent HAVING LifeExp < 72",
        "SELECT Continent, AVG(LifeExpectancy) AS AvgLifeExpectancy, SUM(Population) AS TotalPopulation FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72"
      ]
    ]
  },
  {
    "id": 799,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Continent, SUM(Population) AS TotalPopulation, AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72",
        "SELECT c.Continent, SUM(c.Population) AS TotalPopulation, AVG(c.LifeExpectancy) AS AverageLifeExpectancy FROM country AS c GROUP BY c.Continent HAVING AVG(c.LifeExpectancy) < 72",
        "SELECT Continent, SUM(Population), AVG(LifeExpectancy) FROM country WHERE LifeExpectancy IS NOT NULL GROUP BY Continent HAVING AVG(LifeExpectancy) < 72",
        "SELECT Continent, TotalPopulation, AverageLifeExpectancy FROM (SELECT Continent, SUM(Population) AS TotalPopulation, AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country GROUP BY Continent) AS subquery WHERE AverageLifeExpectancy < 72",
        "SELECT Continent, SUM(Population) AS PopulationSum, AVG(LifeExpectancy) AS LifeExpectancyAvg FROM country GROUP BY Continent HAVING LifeExpectancyAvg < 72",
        "SELECT c.Continent, SUM(c.Population) AS PopulationTotal, AVG(c.LifeExpectancy) AS LifeExpectancyAverage FROM country c GROUP BY c.Continent HAVING LifeExpectancyAverage < 72",
        "SELECT Continent, SUM(Population) AS TotalPop, AVG(LifeExpectancy) AS AvgLifeExp FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72",
        "SELECT Continent, SUM(Population) AS TotalPopulation, AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72 ORDER BY Continent",
        "SELECT Continent, SUM(Population) AS TotalPopulation, AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE LifeExpectancy < 72 GROUP BY Continent",
        "SELECT Continent, SUM(Population) AS TotalPopulation, AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72 AND LifeExpectancy IS NOT NULL"
      ]
    ]
  },
  {
    "id": 800,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name, SurfaceArea FROM country ORDER BY Name ASC, Code ASC LIMIT 5",
        "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC, Name ASC, Code ASC LIMIT 5",
        "SELECT Name, SurfaceArea FROM (SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5) AS subquery ORDER BY Name ASC, Code ASC",
        "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "SELECT Name, SurfaceArea FROM country ORDER BY Name, Code LIMIT 5",
        "SELECT Name, SurfaceArea FROM country ORDER BY Name ASC, Code ASC FETCH FIRST 5 ROWS ONLY",
        "SELECT TOP 5 Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC, Name, Code",
        "SELECT Name, SurfaceArea FROM country ORDER BY Name ASC, Code ASC FETCH FIRST 5 ROWS ONLY",
        "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC, Name ASC, Code ASC FETCH FIRST 5 ROWS ONLY",
        "SELECT Name, SurfaceArea FROM country ORDER BY Name ASC, Code ASC OFFSET 0 ROWS FETCH NEXT 5 ROWS ONLY"
      ]
    ]
  },
  {
    "id": 801,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC, Population DESC, Code ASC LIMIT 5",
        "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC, Population DESC, Code LIMIT 5",
        "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC, Population DESC, Code ASC FETCH FIRST 5 ROWS ONLY",
        "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC, Population DESC, Code ASC LIMIT 5;",
        "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.SurfaceArea DESC, country.Population DESC, country.Code ASC LIMIT 5",
        "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC, Population DESC, Code ASC LIMIT 5 ROWS",
        "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC, Population DESC, Code ASC LIMIT 5 OFFSET 0",
        "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC, Population DESC, Code ASC LIMIT 5 OFFSET 0 ROWS",
        "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC, Population DESC, Code ASC LIMIT 5 OFFSET 0 ROWS FETCH NEXT 5 ROWS ONLY",
        "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC, Population DESC, Code ASC LIMIT 5 OFFSET 0 ROWS FETCH FIRST 5 ROWS ONLY"
      ]
    ]
  },
  {
    "id": 802,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name FROM country ORDER BY Population DESC, Name ASC, Code ASC LIMIT 3",
        "SELECT Name FROM country WHERE Population IN (SELECT Population FROM country ORDER BY Population DESC LIMIT 3) ORDER BY Name ASC, Code ASC",
        "SELECT Name FROM (SELECT Name, Code, Population FROM country ORDER BY Population DESC LIMIT 3) AS top_countries ORDER BY Name ASC, Code ASC",
        "SELECT Name FROM country ORDER BY Population DESC LIMIT 3 ORDER BY Name, Code",
        "SELECT Name FROM country WHERE Population >= (SELECT MIN(Population) FROM (SELECT Population FROM country ORDER BY Population DESC LIMIT 3)) ORDER BY Name ASC, Code ASC",
        "SELECT Name FROM country ORDER BY Population DESC LIMIT 3, Name, Code",
        "SELECT Name FROM country AS c WHERE c.Population IN (SELECT Population FROM country ORDER BY Population DESC LIMIT 3) ORDER BY c.Name ASC, c.Code ASC",
        "SELECT Name FROM country ORDER BY (SELECT COUNT(*) FROM country AS c2 WHERE c2.Population > country.Population) ASC, Name ASC, Code ASC LIMIT 3",
        "SELECT Name FROM country WHERE Population IN (SELECT DISTINCT Population FROM country ORDER BY Population DESC LIMIT 3) ORDER BY Name ASC, Code ASC",
        "SELECT Name FROM (SELECT Name, Code FROM country ORDER BY Population DESC LIMIT 3) ORDER BY Name ASC, Code ASC"
      ]
    ]
  },
  {
    "id": 803,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name FROM country ORDER BY Population DESC, Name ASC, Code ASC LIMIT 3",
        "SELECT Name FROM country ORDER BY Population DESC LIMIT 3 SORT BY Name ASC, Code ASC",
        "SELECT Name FROM (SELECT Name, Code FROM country ORDER BY Population DESC LIMIT 3) ORDER BY Name ASC, Code ASC",
        "SELECT Name FROM country WHERE Code IN (SELECT Code FROM country ORDER BY Population DESC LIMIT 3) ORDER BY Name ASC, Code ASC",
        "SELECT Name FROM country ORDER BY Population DESC LIMIT 3, Name, Code",
        "SELECT Name FROM country ORDER BY Population DESC, Name, Code LIMIT 3",
        "SELECT TOP 3 Name FROM country ORDER BY Population DESC, Name ASC, Code ASC",
        "SELECT Name FROM country ORDER BY Population DESC FETCH FIRST 3 ROWS ONLY ORDER BY Name ASC, Code ASC",
        "SELECT Name FROM country ORDER BY Population DESC LIMIT 3 SORT BY Name, Code",
        "SELECT Name FROM country ORDER BY Population DESC, Name, Code FETCH FIRST 3 ROWS ONLY"
      ]
    ]
  },
  {
    "id": 804,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name FROM country ORDER BY Population ASC, Name ASC, Code ASC LIMIT 3",
        "SELECT Name FROM country WHERE Population IN (SELECT Population FROM country ORDER BY Population ASC LIMIT 3) ORDER BY Name ASC, Code ASC",
        "SELECT Name FROM country AS c WHERE c.Population <= ALL (SELECT Population FROM country ORDER BY Population ASC LIMIT 3) ORDER BY Name, Code",
        "SELECT Name FROM (SELECT Name, Population, Code FROM country ORDER BY Population ASC, Name, Code) AS subquery LIMIT 3",
        "SELECT Name FROM country ORDER BY Population, Name, Code FETCH FIRST 3 ROWS ONLY",
        "SELECT Name FROM country ORDER BY Population ASC, Name ASC, Code ASC FETCH FIRST 3 ROWS ONLY",
        "SELECT TOP 3 Name FROM country ORDER BY Population ASC, Name ASC, Code ASC",
        "SELECT Name FROM country ORDER BY Population ASC, Name, Code LIMIT 3",
        "SELECT Name FROM country WHERE Population IN (SELECT MIN(Population) FROM country) ORDER BY Name, Code LIMIT 3",
        "SELECT Name FROM country ORDER BY Population ASC, Name ASC, Code ASC LIMIT 3"
      ]
    ]
  },
  {
    "id": 805,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name FROM country ORDER BY Population ASC, Name ASC, Code ASC LIMIT 3",
        "SELECT Name FROM country WHERE Population IN (SELECT Population FROM country ORDER BY Population ASC LIMIT 3) ORDER BY Name ASC, Code ASC",
        "SELECT Name FROM country ORDER BY Population, Name, Code LIMIT 3",
        "SELECT Name FROM country AS c WHERE c.Population <= ALL (SELECT Population FROM country ORDER BY Population ASC LIMIT 3) ORDER BY Name, Code",
        "SELECT Name FROM (SELECT Name, Population, Code FROM country ORDER BY Population ASC, Name ASC, Code ASC) AS subquery LIMIT 3",
        "SELECT Name FROM country ORDER BY Population ASC, Name, Code LIMIT 3",
        "SELECT Name FROM country ORDER BY Population ASC, Name ASC, Code LIMIT 3",
        "SELECT Name FROM country WHERE Population IN (SELECT MIN(Population) FROM country) ORDER BY Name ASC, Code ASC LIMIT 3",
        "SELECT TOP 3 Name FROM country ORDER BY Population ASC, Name ASC, Code ASC",
        "SELECT Name FROM country ORDER BY Population ASC, Name, Code FETCH FIRST 3 ROWS ONLY"
      ]
    ]
  },
  {
    "id": 806,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM country WHERE Continent = 'Asia'",
        "SELECT COUNT(Code) FROM country WHERE Continent = 'Asia'",
        "SELECT COUNT(DISTINCT Code) FROM country WHERE Continent = 'Asia'",
        "SELECT COUNT(Code) AS NumberOfCountries FROM country WHERE Continent = 'Asia'",
        "SELECT COUNT(*) AS CountryCount FROM country WHERE Continent = 'Asia'",
        "SELECT COUNT(*) FROM country WHERE Continent LIKE 'Asia'",
        "SELECT COUNT(*) FROM country WHERE Continent = 'Asia' GROUP BY Continent",
        "SELECT COUNT(*) FROM country WHERE Continent = 'Asia' AND Population > 0",
        "SELECT COUNT(DISTINCT Name) FROM country WHERE Continent = 'Asia'",
        "SELECT COUNT(*) FROM country WHERE Continent = 'Asia' AND SurfaceArea > 0"
      ]
    ]
  },
  {
    "id": 807,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM country WHERE Continent = 'Asia'",
        "SELECT COUNT(Code) FROM country WHERE Continent = 'Asia'",
        "SELECT COUNT(1) FROM country WHERE Continent = 'Asia'",
        "SELECT COUNT(Code) AS NumberOfCountries FROM country WHERE Continent = 'Asia'",
        "SELECT COUNT(*) AS CountryCount FROM country WHERE Continent = 'Asia'",
        "SELECT COUNT(DISTINCT Code) FROM country WHERE Continent = 'Asia'",
        "SELECT COUNT(DISTINCT Name) FROM country WHERE Continent = 'Asia'",
        "SELECT COUNT(*) FROM country WHERE Continent LIKE 'Asia'",
        "SELECT COUNT(*) FROM country WHERE Continent = 'Asia' GROUP BY Continent",
        "SELECT COUNT(*) FROM country WHERE Continent = 'Asia' AND Population > 0"
      ]
    ]
  },
  {
    "id": 808,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000",
        "SELECT country.Name FROM country WHERE country.Continent = 'Europe' AND country.Population = 80000",
        "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000",
        "SELECT c.Name FROM country AS c WHERE c.Continent = 'Europe' AND c.Population = 80000",
        "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000",
        "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000",
        "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000",
        "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000",
        "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000",
        "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000"
      ]
    ]
  },
  {
    "id": 809,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000",
        "SELECT country.Name FROM country WHERE country.Continent = 'Europe' AND country.Population = 80000",
        "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;",
        "SELECT c.Name FROM country AS c WHERE c.Continent = 'Europe' AND c.Population = 80000",
        "SELECT Name FROM country WHERE Continent LIKE 'Europe' AND Population = 80000",
        "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = '80000'",
        "SELECT country.Name FROM country WHERE country.Continent = 'Europe' AND country.Population = '80000'",
        "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000 ORDER BY Name",
        "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000 LIMIT 100",
        "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000 AND Continent IS NOT NULL"
      ]
    ]
  },
  {
    "id": 810,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000",
        "SELECT SUM(Population) TotalPopulation, AVG(SurfaceArea) AverageArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000",
        "SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000",
        "SELECT SUM(Population) AS Total_Population, AVG(SurfaceArea) AS Average_Area FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000",
        "SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000 GROUP BY Continent",
        "SELECT SUM(Population) AS Total_Population, AVG(SurfaceArea) AS Average_Area FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000 GROUP BY Continent",
        "SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000 GROUP BY Continent HAVING SurfaceArea > 3000",
        "SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000 GROUP BY Continent HAVING AVG(SurfaceArea) > 3000",
        "SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000 GROUP BY Continent HAVING SUM(Population) > 0",
        "SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000 GROUP BY Continent HAVING AVG(SurfaceArea) > 0"
      ]
    ]
  },
  {
    "id": 811,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageSurfaceArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000",
        "SELECT SUM(Population) TotalPopulation, AVG(SurfaceArea) AverageSurfaceArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000",
        "SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000",
        "SELECT SUM(Population) AS Total_Population, AVG(SurfaceArea) AS Avg_Surface_Area FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000",
        "SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageSurfaceArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000 GROUP BY Continent",
        "SELECT SUM(Population) AS Total_Population, AVG(SurfaceArea) AS Average_Surface_Area FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000",
        "SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageSurfaceArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000 GROUP BY Continent",
        "SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageSurfaceArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000",
        "SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageSurfaceArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000",
        "SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageSurfaceArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000"
      ]
    ]
  },
  {
    "id": 812,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000",
        "SELECT city.Name FROM city WHERE city.Population >= 160000 AND city.Population <= 900000",
        "SELECT Name FROM city WHERE Population >= 160000 AND Population <= 900000",
        "SELECT c.Name FROM city AS c WHERE c.Population BETWEEN 160000 AND 900000",
        "SELECT Name FROM city WHERE Population > 159999 AND Population < 900001",
        "SELECT city.Name FROM city WHERE Population > 159999 AND Population < 900001",
        "SELECT Name FROM city WHERE Population >= 160K AND Population <= 900K",
        "SELECT Name FROM city WHERE Population BETWEEN 160K AND 900K",
        "SELECT city.Name FROM city WHERE city.Population >= 160K AND city.Population <= 900K",
        "SELECT c.Name FROM city c WHERE c.Population BETWEEN 160000 AND 900000"
      ]
    ]
  },
  {
    "id": 813,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000",
        "SELECT city.Name FROM city WHERE city.Population >= 160000 AND city.Population <= 900000",
        "SELECT Name FROM city WHERE Population >= 160000 AND Population <= 900000",
        "SELECT c.Name FROM city AS c WHERE c.Population BETWEEN 160000 AND 900000",
        "SELECT Name FROM city WHERE Population > 159999 AND Population < 900001",
        "SELECT city.Name FROM city WHERE Population > 159999 AND Population < 900001",
        "SELECT Name FROM city WHERE Population >= 160000 AND Population <= 900000 ORDER BY Population",
        "SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000 ORDER BY Name",
        "SELECT Name FROM city WHERE Population >= 160000 AND Population <= 900000 ORDER BY Name ASC",
        "SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000 ORDER BY Population DESC"
      ]
    ]
  },
  {
    "id": 814,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Language FROM countrylanguage GROUP BY Language HAVING COUNT(DISTINCT CountryCode) = (SELECT MAX(CountryCount) FROM (SELECT COUNT(DISTINCT CountryCode) AS CountryCount FROM countrylanguage GROUP BY Language) AS SubQuery)",
        "SELECT L.Language FROM (SELECT Language, COUNT(DISTINCT CountryCode) AS NumCountries FROM countrylanguage GROUP BY Language) AS L WHERE L.NumCountries = (SELECT MAX(NumCountries) FROM (SELECT COUNT(DISTINCT CountryCode) AS NumCountries FROM countrylanguage GROUP BY Language) AS SubQuery)",
        "SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1",
        "WITH CountryCounts AS (SELECT Language, COUNT(DISTINCT CountryCode) AS Count FROM countrylanguage GROUP BY Language) SELECT Language FROM CountryCounts WHERE Count = (SELECT MAX(Count) FROM CountryCounts)",
        "SELECT TOP 1 WITH TIES Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC",
        "SELECT Language FROM (SELECT Language, RANK() OVER (ORDER BY COUNT(DISTINCT CountryCode) DESC) AS rank FROM countrylanguage GROUP BY Language) sub WHERE rank = 1",
        "SELECT Language FROM countrylanguage GROUP BY Language HAVING COUNT(DISTINCT CountryCode) >= ALL (SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage GROUP BY Language)",
        "SELECT Language FROM countrylanguage GROUP BY Language HAVING COUNT(DISTINCT CountryCode) = (SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1)",
        "SELECT Language FROM countrylanguage GROUP BY Language HAVING COUNT(DISTINCT CountryCode) = (SELECT MAX(Count) FROM (SELECT COUNT(DISTINCT CountryCode) AS Count FROM countrylanguage GROUP BY Language) AS Counts)",
        "SELECT DISTINCT Language FROM countrylanguage WHERE (SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage AS cl WHERE cl.Language = countrylanguage.Language) = (SELECT MAX(CountryCount) FROM (SELECT COUNT(DISTINCT CountryCode) AS CountryCount FROM countrylanguage GROUP BY Language) AS SubQuery)"
      ]
    ]
  },
  {
    "id": 815,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Language FROM (SELECT Language, COUNT(*) AS NumCountries FROM countrylanguage GROUP BY Language) AS LangCount WHERE NumCountries = (SELECT MAX(NumCountries) FROM (SELECT COUNT(*) AS NumCountries FROM countrylanguage GROUP BY Language))",
        "SELECT L.Language FROM countrylanguage L GROUP BY L.Language HAVING COUNT(L.CountryCode) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM countrylanguage GROUP BY Language))",
        "SELECT Language FROM countrylanguage GROUP BY Language HAVING COUNT(CountryCode) = (SELECT MAX(Count) FROM (SELECT COUNT(CountryCode) AS Count FROM countrylanguage GROUP BY Language))",
        "WITH LangCount AS (SELECT Language, COUNT(*) AS NumCountries FROM countrylanguage GROUP BY Language) SELECT Language FROM LangCount WHERE NumCountries = (SELECT MAX(NumCountries) FROM LangCount)",
        "SELECT T1.Language FROM (SELECT Language, COUNT(*) AS CountryCount FROM countrylanguage GROUP BY Language) T1 WHERE T1.CountryCount = (SELECT MAX(T2.CountryCount) FROM (SELECT COUNT(*) AS CountryCount FROM countrylanguage GROUP BY Language) T2)",
        "SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT TOP 1 WITH TIES Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(*) DESC",
        "SELECT Language FROM countrylanguage GROUP BY Language HAVING COUNT(*) = (SELECT COUNT(*) FROM countrylanguage GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT DISTINCT Language FROM countrylanguage WHERE (SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1) = (SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = countrylanguage.Language)",
        "SELECT Language FROM (SELECT Language, COUNT(DISTINCT CountryCode) AS NumCountries FROM countrylanguage GROUP BY Language) AS CountryLang WHERE NumCountries = (SELECT MAX(NumCountries) FROM (SELECT COUNT(DISTINCT CountryCode) AS NumCountries FROM countrylanguage GROUP BY Language))"
      ]
    ]
  },
  {
    "id": 816,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT CL.Language, CL.Percentage, CL.CountryCode, C.Name FROM countrylanguage AS CL JOIN country AS C ON CL.CountryCode = C.Code WHERE (CL.CountryCode, CL.Percentage) IN (SELECT CountryCode, MAX(Percentage) FROM countrylanguage GROUP BY CountryCode)",
        "SELECT CL.Language, CL.Percentage, CL.CountryCode, C.Name FROM countrylanguage CL INNER JOIN country C ON CL.CountryCode = C.Code WHERE (CL.CountryCode, CL.Percentage) IN (SELECT CountryCode, MAX(Percentage) AS MaxPercentage FROM countrylanguage GROUP BY CountryCode)",
        "SELECT CL.Language, CL.Percentage, CL.CountryCode, C.Name FROM countrylanguage CL, country C WHERE CL.CountryCode = C.Code AND (CL.CountryCode, CL.Percentage) IN (SELECT CountryCode, MAX(Percentage) FROM countrylanguage GROUP BY CountryCode)",
        "SELECT CL.Language, CL.Percentage, CL.CountryCode, C.Name FROM countrylanguage CL JOIN country C ON CL.CountryCode = C.Code WHERE CL.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = CL.CountryCode)",
        "SELECT CL.Language, CL.Percentage, CL.CountryCode, C.Name FROM countrylanguage CL JOIN country C ON CL.CountryCode = C.Code WHERE CL.Percentage >= ALL (SELECT Percentage FROM countrylanguage WHERE CountryCode = CL.CountryCode)",
        "SELECT CL.Language, CL.Percentage, CL.CountryCode, C.Name FROM countrylanguage CL JOIN country C ON CL.CountryCode = C.Code WHERE CL.Percentage = (SELECT MAX(Percentage) FROM countrylanguage CL2 WHERE CL2.CountryCode = CL.CountryCode)",
        "SELECT CL.Language, CL.Percentage, CL.CountryCode, C.Name FROM countrylanguage CL JOIN country C ON CL.CountryCode = C.Code WHERE EXISTS (SELECT 1 FROM countrylanguage CL2 WHERE CL2.CountryCode = CL.CountryCode HAVING MAX(CL2.Percentage) = CL.Percentage)",
        "SELECT CL.Language, CL.Percentage, CL.CountryCode, C.Name FROM countrylanguage CL JOIN country C ON CL.CountryCode = C.Code WHERE CL.Percentage IN (SELECT MAX(Percentage) FROM countrylanguage GROUP BY CountryCode HAVING CountryCode = CL.CountryCode)",
        "SELECT CL.Language, CL.Percentage, CL.CountryCode, C.Name FROM countrylanguage CL JOIN country C ON CL.CountryCode = C.Code WHERE CL.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = CL.CountryCode GROUP BY CountryCode)",
        "SELECT CL.Language, CL.Percentage, CL.CountryCode, C.Name FROM countrylanguage CL JOIN country C ON CL.CountryCode = C.Code WHERE (CL.CountryCode, CL.Percentage) IN (SELECT CountryCode, MAX(Percentage) FROM countrylanguage GROUP BY CountryCode ORDER BY Percentage DESC)"
      ]
    ]
  },
  {
    "id": 817,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT T1.Code, T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE (T2.CountryCode, T2.Percentage) IN (SELECT CountryCode, MAX(Percentage) FROM countrylanguage GROUP BY CountryCode)",
        "SELECT c.Code, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE (cl.CountryCode, cl.Percentage) IN (SELECT CountryCode, MAX(Percentage) FROM countrylanguage GROUP BY CountryCode)",
        "SELECT country.Code, countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.CountryCode, countrylanguage.Percentage) IN (SELECT CountryCode, MAX(Percentage) FROM countrylanguage GROUP BY CountryCode)",
        "SELECT c.Code, l.Language FROM country c INNER JOIN countrylanguage l ON c.Code = l.CountryCode WHERE (l.CountryCode, l.Percentage) IN (SELECT CountryCode, MAX(Percentage) FROM countrylanguage GROUP BY CountryCode)",
        "SELECT Code, Language FROM country JOIN countrylanguage USING (Code) WHERE (CountryCode, Percentage) IN (SELECT CountryCode, MAX(Percentage) FROM countrylanguage GROUP BY CountryCode)",
        "SELECT c.Code, cl.Language FROM country AS c, countrylanguage AS cl WHERE c.Code = cl.CountryCode AND (cl.CountryCode, cl.Percentage) IN (SELECT CountryCode, MAX(Percentage) FROM countrylanguage GROUP BY CountryCode)",
        "SELECT c.Code, l.Language FROM country c, countrylanguage l WHERE c.Code = l.CountryCode AND (l.CountryCode, l.Percentage) IN (SELECT CountryCode, MAX(Percentage) FROM countrylanguage GROUP BY CountryCode)",
        "SELECT c.Code, l.Language FROM country c JOIN countrylanguage l ON c.Code = l.CountryCode GROUP BY c.Code, l.Language HAVING l.Percentage = MAX(l.Percentage)",
        "SELECT c.Code, l.Language FROM country c JOIN countrylanguage l ON c.Code = l.CountryCode WHERE l.Percentage = (SELECT MAX(Percentage) FROM countrylanguage cl WHERE cl.CountryCode = c.Code)",
        "SELECT c.Code, l.Language FROM country c JOIN countrylanguage l ON c.Code = l.CountryCode WHERE (c.Code, l.Percentage) IN (SELECT CountryCode, MAX(Percentage) FROM countrylanguage GROUP BY CountryCode)"
      ]
    ]
  },
  {
    "id": 818,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT country.Code) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish' AND countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE countrylanguage.CountryCode = country.Code);",
        "SELECT COUNT(*) FROM (SELECT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish' GROUP BY country.Code HAVING countrylanguage.Percentage = MAX(countrylanguage.Percentage));",
        "SELECT COUNT(DISTINCT C.Code) FROM country C INNER JOIN countrylanguage CL ON C.Code = CL.CountryCode WHERE CL.Language = 'Spanish' AND CL.Percentage IN (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = C.Code);",
        "SELECT COUNT(*) FROM (SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' GROUP BY CountryCode HAVING Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = countrylanguage.CountryCode));",
        "SELECT COUNT(DISTINCT country.Code) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish' AND countrylanguage.Percentage >= ALL (SELECT Percentage FROM countrylanguage WHERE countrylanguage.CountryCode = country.Code);",
        "SELECT COUNT(DISTINCT country.Code) FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish' AND countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage CL WHERE CL.CountryCode = country.Code);",
        "SELECT COUNT(DISTINCT country.Code) FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND countrylanguage.Language = 'Spanish' AND countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage CL WHERE CL.CountryCode = country.Code);",
        "SELECT COUNT(DISTINCT country.Code) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish' AND countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage CL WHERE CL.CountryCode = country.Code GROUP BY CL.CountryCode);",
        "SELECT COUNT(DISTINCT country.Code) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish' AND countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = country.Code AND Language = 'Spanish');",
        "SELECT COUNT(DISTINCT country.Code) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish' AND countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = country.Code AND Language = 'Spanish' GROUP BY CountryCode);"
      ]
    ]
  },
  {
    "id": 819,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT country.Code) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish' AND countrylanguage.IsOfficial = 'T'",
        "SELECT COUNT(*) FROM (SELECT country.Code FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish' AND countrylanguage.IsOfficial = 'T' GROUP BY country.Code)",
        "SELECT COUNT(UNIQUE country.Code) FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND countrylanguage.Language = 'Spanish' AND countrylanguage.IsOfficial = 'T'",
        "SELECT COUNT(country.Code) FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish' AND countrylanguage.IsOfficial = 'True'",
        "SELECT COUNT(*) FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T')",
        "SELECT COUNT(DISTINCT c.Code) FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Spanish' AND cl.IsOfficial = 'T'",
        "SELECT COUNT(*) FROM (SELECT DISTINCT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode AND countrylanguage.Language = 'Spanish' AND countrylanguage.IsOfficial = 'T') AS SpanishSpeakingCountries",
        "SELECT COUNT(DISTINCT country.Code) FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode AND countrylanguage.Language = 'Spanish' AND countrylanguage.IsOfficial = 'T'",
        "SELECT COUNT(country.Code) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish' AND countrylanguage.IsOfficial = 'T' GROUP BY country.Code HAVING COUNT(country.Code) > 0",
        "SELECT COUNT(*) FROM country WHERE EXISTS (SELECT 1 FROM countrylanguage WHERE countrylanguage.CountryCode = country.Code AND countrylanguage.Language = 'Spanish' AND countrylanguage.IsOfficial = 'T')"
      ]
    ]
  },
  {
    "id": 820,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT Code FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish'))",
        "SELECT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish' AND countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')",
        "SELECT C.Code FROM country AS C INNER JOIN countrylanguage AS CL ON C.Code = CL.CountryCode WHERE CL.Language = 'Spanish' AND CL.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')",
        "SELECT DISTINCT country.Code FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND countrylanguage.Language = 'Spanish' AND countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')",
        "SELECT Code FROM country WHERE EXISTS (SELECT 1 FROM countrylanguage WHERE countrylanguage.CountryCode = country.Code AND countrylanguage.Language = 'Spanish' AND countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish'))",
        "SELECT Code FROM country INNER JOIN (SELECT CountryCode, MAX(Percentage) AS MaxPercentage FROM countrylanguage WHERE Language = 'Spanish' GROUP BY CountryCode) AS MaxSpanish ON country.Code = MaxSpanish.CountryCode AND MaxSpanish.MaxPercentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')",
        "SELECT Code FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' GROUP BY CountryCode HAVING MAX(Percentage) = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish'))",
        "SELECT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish' GROUP BY country.Code HAVING MAX(countrylanguage.Percentage) = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')",
        "SELECT Code FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage GROUP BY CountryCode, Language HAVING Language = 'Spanish' AND MAX(Percentage) = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish'))",
        "SELECT Code FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' ORDER BY Percentage DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 821,
    "db_id": "world_1",
    "infer_predictions": [
      [
        "SELECT c.Code FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Spanish' AND cl.IsOfficial = 'T'",
        "SELECT country.Code FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish' AND countrylanguage.IsOfficial = 'T'",
        "SELECT Code FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T')",
        "SELECT DISTINCT c.Code FROM country c, countrylanguage cl WHERE c.Code = cl.CountryCode AND cl.Language = 'Spanish' AND cl.IsOfficial = 'T'",
        "SELECT c.Code FROM country c INNER JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Spanish' AND cl.IsOfficial = 'True'",
        "SELECT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish' AND countrylanguage.IsOfficial = 'True'",
        "SELECT DISTINCT country.Code FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND countrylanguage.Language = 'Spanish' AND countrylanguage.IsOfficial = 'T'",
        "SELECT c.Code FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language LIKE 'Spanish' AND cl.IsOfficial = 'T'",
        "SELECT Code FROM country WHERE EXISTS (SELECT 1 FROM countrylanguage WHERE CountryCode = country.Code AND Language = 'Spanish' AND IsOfficial = 'T')",
        "SELECT c.Code FROM country c WHERE EXISTS (SELECT * FROM countrylanguage cl WHERE cl.CountryCode = c.Code AND cl.Language = 'Spanish' AND cl.IsOfficial = 'T')"
      ]
    ]
  },
  {
    "id": 822,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM conductor",
        "SELECT COUNT(Conductor_ID) FROM conductor",
        "SELECT COUNT(DISTINCT Conductor_ID) FROM conductor",
        "SELECT COUNT(Conductor_ID) AS NumberOfConductors FROM conductor",
        "SELECT COUNT(*) AS TotalConductors FROM conductor",
        "SELECT COUNT(DISTINCT Conductor_ID) AS UniqueConductors FROM conductor",
        "SELECT COUNT(Conductor_ID) FROM conductor WHERE Conductor_ID IS NOT NULL",
        "SELECT COUNT(*) FROM conductor WHERE Conductor_ID IS NOT NULL",
        "SELECT COUNT(DISTINCT Conductor_ID) FROM conductor WHERE Conductor_ID IS NOT NULL",
        "SELECT COUNT(*) AS Total FROM conductor WHERE Conductor_ID IS NOT NULL"
      ]
    ]
  },
  {
    "id": 823,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM conductor",
        "SELECT COUNT(Conductor_ID) FROM conductor",
        "SELECT COUNT(Conductor_ID) AS NumberOfConductors FROM conductor",
        "SELECT COUNT(DISTINCT Conductor_ID) FROM conductor",
        "SELECT COUNT(DISTINCT Conductor_ID) AS TotalConductors FROM conductor",
        "SELECT COUNT(1) FROM conductor",
        "SELECT COUNT(*) AS Total FROM conductor",
        "SELECT COUNT(Conductor_ID) FROM conductor WHERE Conductor_ID IS NOT NULL",
        "SELECT COUNT(*) FROM conductor WHERE Conductor_ID IS NOT NULL",
        "SELECT COUNT(DISTINCT Conductor_ID) FROM conductor WHERE Conductor_ID IS NOT NULL"
      ]
    ]
  },
  {
    "id": 824,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT Name FROM conductor ORDER BY Age ASC, Conductor_ID ASC",
        "SELECT Name FROM conductor ORDER BY Age, Conductor_ID",
        "SELECT conductor.Name FROM conductor ORDER BY conductor.Age ASC, conductor.Conductor_ID ASC",
        "SELECT Name FROM conductor ORDER BY Age ASC, Conductor_ID",
        "SELECT c.Name FROM conductor c ORDER BY c.Age ASC, c.Conductor_ID ASC",
        "SELECT Name FROM conductor ORDER BY Age, Conductor_ID ASC",
        "SELECT Name FROM conductor ORDER BY Age ASCENDING, Conductor_ID ASCENDING",
        "SELECT Name FROM conductor ORDER BY Age ASC, Conductor_ID ASCENDING",
        "SELECT Name FROM conductor ORDER BY Age ASCENDING, Conductor_ID",
        "SELECT Name FROM conductor ORDER BY Age ASC, Conductor_ID ASCENDING"
      ]
    ]
  },
  {
    "id": 825,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT Name FROM conductor ORDER BY Age, Conductor_ID",
        "SELECT Name FROM conductor ORDER BY Age ASC, Conductor_ID ASC",
        "SELECT conductor.Name FROM conductor ORDER BY conductor.Age, conductor.Conductor_ID",
        "SELECT Name FROM conductor ORDER BY Age ASC, Conductor_ID ASC",
        "SELECT c.Name FROM conductor c ORDER BY c.Age, c.Conductor_ID",
        "SELECT Name FROM conductor ORDER BY Age, Conductor_ID ASC",
        "SELECT Name FROM conductor ORDER BY Age ASC, Conductor_ID",
        "SELECT Name FROM conductor ORDER BY conductor.Age ASC, conductor.Conductor_ID ASC",
        "SELECT Name FROM conductor ORDER BY Age ASC, Conductor_ID ASC",
        "SELECT Name FROM conductor ORDER BY Age, Conductor_ID"
      ]
    ]
  },
  {
    "id": 826,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT Name FROM conductor WHERE Nationality <> 'USA'",
        "SELECT Name FROM conductor WHERE NOT Nationality = 'USA'",
        "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "SELECT conductor.Name FROM conductor WHERE conductor.Nationality <> 'USA'",
        "SELECT c.Name FROM conductor c WHERE c.Nationality <> 'USA'",
        "SELECT Name FROM conductor WHERE Nationality NOT IN ('USA')",
        "SELECT Name FROM conductor WHERE Nationality NOT LIKE 'USA'",
        "SELECT Name FROM conductor WHERE Nationality IS NOT 'USA'",
        "SELECT Name FROM conductor WHERE NOT (Nationality = 'USA')",
        "SELECT Name FROM conductor WHERE Nationality NOT EQUALS 'USA'"
      ]
    ]
  },
  {
    "id": 827,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT Name FROM conductor WHERE Nationality <> 'USA'",
        "SELECT Name FROM conductor WHERE NOT Nationality = 'USA'",
        "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "SELECT conductor.Name FROM conductor WHERE conductor.Nationality <> 'USA'",
        "SELECT c.Name FROM conductor c WHERE c.Nationality <> 'USA'",
        "SELECT Name FROM conductor WHERE Nationality NOT IN ('USA')",
        "SELECT Name FROM conductor WHERE Nationality NOT LIKE 'USA'",
        "SELECT Name FROM conductor WHERE Nationality IS NOT 'USA'",
        "SELECT conductor.Name FROM conductor WHERE NOT(conductor.Nationality = 'USA')",
        "SELECT Name FROM conductor WHERE Nationality NOT EQUALS 'USA'"
      ]
    ]
  },
  {
    "id": 828,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC, Orchestra_ID",
        "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC, Orchestra_ID ASC",
        "SELECT Record_Company FROM orchestra SORT BY Year_of_Founded DESCENDING, Orchestra_ID ASCENDING",
        "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESCENDING, Orchestra_ID ASCENDING",
        "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC, Orchestra_ID ASCENDING",
        "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC, Orchestra_ID ASC",
        "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESCENDING, Orchestra_ID",
        "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC, Orchestra_ID ASCENDING",
        "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC, Orchestra_ID",
        "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC, Orchestra_ID ASC"
      ]
    ]
  },
  {
    "id": 829,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC, Orchestra_ID",
        "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC, Orchestra_ID ASC",
        "SELECT Record_Company FROM orchestra SORT BY Year_of_Founded DESCENDING, Orchestra_ID ASCENDING",
        "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESCENDING, Orchestra_ID ASCENDING",
        "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC, Orchestra_ID ASCENDING",
        "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESCENDING, Orchestra_ID",
        "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC, Orchestra_ID ASCENDING",
        "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC, Orchestra_ID ASC",
        "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESCENDING, Orchestra_ID ASC",
        "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC, Orchestra_ID ASC"
      ]
    ]
  },
  {
    "id": 830,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT AVG(Attendance) FROM show",
        "SELECT AVG(show.Attendance) AS AverageAttendance FROM show",
        "SELECT AVG(Attendance) AS AvgAttendance FROM show",
        "SELECT AVG(Attendance) FROM show AS Average_Attendance",
        "SELECT AVG(show.Attendance) FROM show",
        "SELECT AVG(Attendance) AS Average FROM show",
        "SELECT AVG(Attendance) AS `Average Attendance` FROM show",
        "SELECT AVG(Attendance) FROM show GROUP BY Show_ID",
        "SELECT AVG(Attendance) AS AverageAttendance FROM show GROUP BY Show_ID",
        "SELECT AVG(Attendance) FROM show WHERE Attendance IS NOT NULL"
      ]
    ]
  },
  {
    "id": 831,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT AVG(Attendance) FROM show",
        "SELECT AVG(show.Attendance) AS AverageAttendance FROM show",
        "SELECT AVG(Attendance) AS AvgAttendance FROM show",
        "SELECT AVG(show.Attendance) FROM show",
        "SELECT AVG(Attendance) FROM show AS Average_Attendance",
        "SELECT AVG(show.Attendance) FROM show AS AverageAttendance",
        "SELECT AVG(Attendance) AS Average FROM show",
        "SELECT AVG(show.Attendance) AS Average FROM show",
        "SELECT AVG(Attendance) FROM show AS Avg_Attendance",
        "SELECT AVG(show.Attendance) FROM show AS AvgAttendance"
      ]
    ]
  },
  {
    "id": 832,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT MAX(Share), MIN(Share) FROM performance WHERE Type <> 'Live final'",
        "SELECT MAX(Share) AS MaxShare, MIN(Share) AS MinShare FROM performance WHERE Type != 'Live final'",
        "SELECT MAX(Share) AS MaximumShare, MIN(Share) AS MinimumShare FROM performance WHERE NOT Type = 'Live final'",
        "SELECT MAX(Share) maximum, MIN(Share) minimum FROM performance WHERE Type NOT IN ('Live final')",
        "SELECT MAX(Share) max_share, MIN(Share) min_share FROM performance WHERE Type NOT LIKE 'Live final'",
        "SELECT MAX(Share), MIN(Share) FROM performance WHERE Type NOT EQUALS 'Live final'",
        "SELECT MAX(Share) AS HighestShare, MIN(Share) AS LowestShare FROM performance WHERE Type IS NOT 'Live final'",
        "SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM performance WHERE Type <> 'Live final'",
        "SELECT MAX(Share) AS Maximum_Share, MIN(Share) AS Minimum_Share FROM performance WHERE Type != 'Live final'",
        "SELECT MAX(Share) AS MaxShareValue, MIN(Share) AS MinShareValue FROM performance WHERE Type NOT IN ('Live final')"
      ]
    ]
  },
  {
    "id": 833,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT MAX(Share), MIN(Share) FROM performance WHERE Type != 'Live final'",
        "SELECT MAX(Share) AS MaxShare, MIN(Share) AS MinShare FROM performance WHERE Type <> 'Live final'",
        "SELECT MAX(Share) MaximumShare, MIN(Share) MinimumShare FROM performance WHERE NOT Type = 'Live final'",
        "SELECT MAX(Share) HighestShare, MIN(Share) LowestShare FROM performance WHERE Type NOT LIKE 'Live final'",
        "SELECT MAX(Share), MIN(Share) FROM performance WHERE Type NOT IN ('Live final')",
        "SELECT MAX(Share) as Maximum, MIN(Share) as Minimum FROM performance WHERE Type != 'Live final'",
        "SELECT MAX(Share) Max_Share, MIN(Share) Min_Share FROM performance WHERE Type NOT IN ('Live final')",
        "SELECT MAX(Share) as MaxShare, MIN(Share) as MinShare FROM performance WHERE Type NOT LIKE 'Live final'",
        "SELECT MAX(Share) MaxShareValue, MIN(Share) MinShareValue FROM performance WHERE Type <> 'Live final'",
        "SELECT MAX(Share) as Highest, MIN(Share) as Lowest FROM performance WHERE Type NOT EQUAL TO 'Live final'"
      ]
    ]
  },
  {
    "id": 834,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT Nationality) FROM conductor",
        "SELECT COUNT(UNIQUE Nationality) FROM conductor",
        "SELECT COUNT(*) FROM (SELECT DISTINCT Nationality FROM conductor) AS unique_nationalities",
        "SELECT COUNT(DISTINCT Nationality) AS total_nationalities FROM conductor",
        "SELECT COUNT(*) FROM (SELECT Nationality FROM conductor GROUP BY Nationality) AS nationalities",
        "SELECT COUNT(Nationality) FROM (SELECT DISTINCT Nationality FROM conductor) temp",
        "SELECT COUNT(DISTINCT c.Nationality) FROM conductor c",
        "SELECT COUNT(*) FROM (SELECT DISTINCT Nationality FROM conductor) unique_nationalities",
        "SELECT DISTINCT COUNT(Nationality) FROM conductor",
        "SELECT COUNT(DISTINCT Nationality) FROM conductor WHERE Nationality IS NOT NULL"
      ]
    ]
  },
  {
    "id": 835,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT Nationality) FROM conductor",
        "SELECT COUNT(DISTINCT conductor.Nationality) FROM conductor",
        "SELECT COUNT(UNIQUE Nationality) FROM conductor",
        "SELECT COUNT(*) FROM (SELECT DISTINCT Nationality FROM conductor) AS unique_nationalities",
        "SELECT COUNT(DISTINCT c.Nationality) FROM conductor AS c",
        "SELECT COUNT(*) FROM (SELECT Nationality FROM conductor GROUP BY Nationality) AS distinct_nationalities",
        "SELECT COUNT(DISTINCT Nationality) AS count_of_nationalities FROM conductor",
        "SELECT COUNT(DISTINCT Nationality) FROM conductor GROUP BY Nationality HAVING COUNT(*) >= 1",
        "SELECT COUNT(*) FROM (SELECT DISTINCT Nationality FROM conductor) temp",
        "SELECT DISTINCT COUNT(Nationality) FROM conductor"
      ]
    ]
  },
  {
    "id": 836,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT Name FROM conductor ORDER BY Year_of_Work DESC, Conductor_ID ASC",
        "SELECT Name FROM conductor ORDER BY Year_of_Work DESC, Conductor_ID",
        "SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC, conductor.Conductor_ID ASC",
        "SELECT c.Name FROM conductor c ORDER BY c.Year_of_Work DESC, c.Conductor_ID ASC",
        "SELECT Name FROM conductor ORDER BY Year_of_Work DESC, Conductor_ID ASCENDING",
        "SELECT Name FROM conductor ORDER BY Year_of_Work DESCENDING, Conductor_ID ASCENDING",
        "SELECT Name FROM conductor ORDER BY Year_of_Work DESCENDING, Conductor_ID ASC",
        "SELECT Name FROM conductor ORDER BY Year_of_Work DESC, Conductor_ID ASCENDING",
        "SELECT conductor.Name FROM conductor ORDER BY Year_of_Work DESCENDING, conductor.Conductor_ID ASC",
        "SELECT Name FROM conductor ORDER BY Year_of_Work DESC, Conductor_ID ASC"
      ]
    ]
  },
  {
    "id": 837,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT Name FROM conductor ORDER BY Year_of_Work DESC, Conductor_ID",
        "SELECT Name FROM conductor ORDER BY Year_of_Work DESC, Conductor_ID ASC",
        "SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC, conductor.Conductor_ID ASC",
        "SELECT Name FROM conductor ORDER BY Year_of_Work DESC, Conductor_ID DESC",
        "SELECT c.Name FROM conductor c ORDER BY c.Year_of_Work DESC, c.Conductor_ID ASC",
        "SELECT Name FROM conductor ORDER BY Year_of_Work DESC, Conductor_ID ASCENDING",
        "SELECT Name FROM conductor ORDER BY Year_of_Work DESCENDING, Conductor_ID ASCENDING",
        "SELECT Name FROM conductor ORDER BY Year_of_Work DESC, Conductor_ID ASC LIMIT ALL",
        "SELECT Name FROM conductor ORDER BY Year_of_Work DESC, Conductor_ID ASCENDING LIMIT ALL",
        "SELECT Name FROM conductor ORDER BY Year_of_Work DESC, Conductor_ID ASCENDING FETCH ALL ROWS ONLY"
      ]
    ]
  },
  {
    "id": 838,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT Name FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor)",
        "SELECT c.Name FROM conductor c WHERE c.Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor)",
        "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "SELECT c.Name FROM conductor c ORDER BY c.Year_of_Work DESC LIMIT 1",
        "SELECT Name FROM conductor WHERE Year_of_Work IN (SELECT MAX(Year_of_Work) FROM conductor)",
        "SELECT c.Name FROM conductor c WHERE c.Year_of_Work IN (SELECT MAX(Year_of_Work) FROM conductor)",
        "SELECT TOP 1 Name FROM conductor ORDER BY Year_of_Work DESC",
        "SELECT TOP 1 c.Name FROM conductor c ORDER BY c.Year_of_Work DESC",
        "SELECT Name FROM conductor GROUP BY Name, Year_of_Work HAVING Year_of_Work = MAX(Year_of_Work)",
        "SELECT c.Name FROM conductor c GROUP BY c.Name, c.Year_of_Work HAVING c.Year_of_Work = MAX(c.Year_of_Work)"
      ]
    ]
  },
  {
    "id": 839,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT Name FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor)",
        "SELECT c.Name FROM conductor c WHERE c.Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor)",
        "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "SELECT Name FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor GROUP BY Conductor_ID)",
        "SELECT TOP 1 Name FROM conductor ORDER BY Year_of_Work DESC",
        "SELECT Name FROM conductor WHERE Year_of_Work IN (SELECT MAX(Year_of_Work) FROM conductor)",
        "SELECT Name FROM conductor AS c WHERE c.Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor AS sub)",
        "SELECT Name FROM (SELECT Name, Year_of_Work, RANK() OVER (ORDER BY Year_of_Work DESC) as rank FROM conductor) WHERE rank = 1",
        "SELECT Name FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor) LIMIT 1",
        "SELECT Name FROM conductor WHERE Year_of_Work >= ALL (SELECT Year_of_Work FROM conductor)"
      ]
    ]
  },
  {
    "id": 840,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID",
        "SELECT c.Name, o.Orchestra FROM conductor c INNER JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID",
        "SELECT Name, Orchestra FROM conductor, orchestra WHERE conductor.Conductor_ID = orchestra.Conductor_ID",
        "SELECT c.Name AS ConductorName, o.Orchestra AS OrchestraName FROM conductor c, orchestra o WHERE c.Conductor_ID = o.Conductor_ID",
        "SELECT Name AS Conductor, Orchestra AS ConductedOrchestra FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID",
        "SELECT conductor.Name, orchestra.Orchestra FROM conductor, orchestra WHERE conductor.Conductor_ID = orchestra.Conductor_ID",
        "SELECT c.Name, o.Orchestra FROM conductor AS c JOIN orchestra AS o ON c.Conductor_ID = o.Conductor_ID ORDER BY c.Name",
        "SELECT DISTINCT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID",
        "SELECT conductor.Name, orchestra.Orchestra FROM conductor LEFT JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID",
        "SELECT c.Name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name, o.Orchestra"
      ]
    ]
  },
  {
    "id": 841,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID",
        "SELECT c.Name AS ConductorName, o.Orchestra AS OrchestraName FROM conductor c INNER JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID",
        "SELECT Name, Orchestra FROM conductor, orchestra WHERE conductor.Conductor_ID = orchestra.Conductor_ID",
        "SELECT Name AS Conductor, Orchestra AS ConductedOrchestra FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID",
        "SELECT c.Name, o.Orchestra FROM conductor c, orchestra o WHERE c.Conductor_ID = o.Conductor_ID",
        "SELECT conductor.Name, orchestra.Orchestra FROM conductor, orchestra WHERE conductor.Conductor_ID = orchestra.Conductor_ID",
        "SELECT Name, Orchestra FROM conductor JOIN orchestra USING (Conductor_ID)",
        "SELECT c.Name, o.Orchestra FROM conductor AS c JOIN orchestra AS o ON c.Conductor_ID = o.Conductor_ID",
        "SELECT conductor.Name AS Conductor, orchestra.Orchestra AS Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID",
        "SELECT c.Name AS ConductorName, o.Orchestra AS OrchestraName FROM conductor c CROSS JOIN orchestra o WHERE c.Conductor_ID = o.Conductor_ID"
      ]
    ]
  },
  {
    "id": 842,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID HAVING COUNT(DISTINCT o.Orchestra_ID) > 1",
        "SELECT conductor.Name FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1",
        "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID HAVING COUNT(DISTINCT Orchestra_ID) > 1)",
        "SELECT c.Name FROM conductor c, orchestra o WHERE c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID HAVING COUNT(DISTINCT o.Orchestra_ID) > 1",
        "SELECT DISTINCT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID, c.Name HAVING COUNT(o.Orchestra_ID) > 1",
        "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID HAVING COUNT(*) > 1)",
        "SELECT c.Name FROM conductor c WHERE EXISTS (SELECT 1 FROM orchestra o WHERE o.Conductor_ID = c.Conductor_ID GROUP BY o.Conductor_ID HAVING COUNT(DISTINCT o.Orchestra_ID) > 1)",
        "SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID, c.Name HAVING COUNT(DISTINCT o.Orchestra_ID) > 1",
        "SELECT c.Name FROM conductor AS c JOIN orchestra AS o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID HAVING COUNT(DISTINCT o.Orchestra_ID) > 1",
        "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID HAVING COUNT(DISTINCT Orchestra_ID) > 1)"
      ]
    ]
  },
  {
    "id": 843,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID HAVING COUNT(DISTINCT Orchestra_ID) > 1)",
        "SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name HAVING COUNT(DISTINCT o.Orchestra_ID) > 1",
        "SELECT conductor.Name FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1",
        "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID HAVING COUNT(Orchestra_ID) > 1)",
        "SELECT DISTINCT c.Name FROM conductor c, orchestra o WHERE c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID HAVING COUNT(DISTINCT o.Orchestra_ID) > 1",
        "SELECT c.Name FROM conductor c WHERE EXISTS (SELECT 1 FROM orchestra o WHERE o.Conductor_ID = c.Conductor_ID GROUP BY o.Conductor_ID HAVING COUNT(DISTINCT o.Orchestra_ID) > 1)",
        "SELECT c.Name FROM conductor c JOIN (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID HAVING COUNT(DISTINCT Orchestra_ID) > 1) o ON c.Conductor_ID = o.Conductor_ID",
        "SELECT c.Name FROM conductor c WHERE (SELECT COUNT(DISTINCT o.Orchestra_ID) FROM orchestra o WHERE o.Conductor_ID = c.Conductor_ID) > 1",
        "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID HAVING COUNT(*) > 1)",
        "SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID, c.Name HAVING COUNT(DISTINCT o.Orchestra_ID) > 1"
      ]
    ]
  },
  {
    "id": 844,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID HAVING COUNT(*) = (SELECT MAX(num_orchestras) FROM (SELECT COUNT(*) AS num_orchestras FROM orchestra GROUP BY Conductor_ID) AS counts))",
        "SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID, c.Name HAVING COUNT(o.Orchestra_ID) = (SELECT MAX(counts) FROM (SELECT COUNT(*) AS counts FROM orchestra GROUP BY Conductor_ID) sub)",
        "SELECT c.Name FROM conductor c WHERE c.Conductor_ID IN (SELECT o.Conductor_ID FROM orchestra o GROUP BY o.Conductor_ID HAVING COUNT(o.Orchestra_ID) = (SELECT MAX(counts) FROM (SELECT COUNT(*) AS counts FROM orchestra GROUP BY Conductor_ID) sub))",
        "SELECT c.Name FROM conductor c INNER JOIN (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID HAVING COUNT(*) = (SELECT MAX(num_orchestras) FROM (SELECT COUNT(*) AS num_orchestras FROM orchestra GROUP BY Conductor_ID) AS counts)) o ON c.Conductor_ID = o.Conductor_ID",
        "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT c.Name FROM conductor c WHERE EXISTS (SELECT 1 FROM orchestra o WHERE o.Conductor_ID = c.Conductor_ID GROUP BY o.Conductor_ID HAVING COUNT(*) = (SELECT MAX(num_orchestras) FROM (SELECT COUNT(*) AS num_orchestras FROM orchestra GROUP BY Conductor_ID) AS counts))",
        "SELECT c.Name FROM conductor c JOIN (SELECT Conductor_ID, COUNT(*) AS num_orchestras FROM orchestra GROUP BY Conductor_ID) o ON c.Conductor_ID = o.Conductor_ID WHERE o.num_orchestras = (SELECT MAX(num_orchestras) FROM (SELECT COUNT(*) AS num_orchestras FROM orchestra GROUP BY Conductor_ID) AS counts)",
        "SELECT c.Name FROM conductor c WHERE c.Conductor_ID IN (SELECT o.Conductor_ID FROM orchestra o GROUP BY o.Conductor_ID HAVING COUNT(*) = (SELECT MAX(num_orchestras) FROM (SELECT COUNT(*) AS num_orchestras FROM orchestra GROUP BY Conductor_ID) AS counts))",
        "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID HAVING COUNT(Orchestra_ID) = (SELECT MAX(num_orchestras) FROM (SELECT COUNT(Orchestra_ID) AS num_orchestras FROM orchestra GROUP BY Conductor_ID) AS counts))",
        "SELECT c.Name FROM conductor c WHERE c.Conductor_ID IN (SELECT o.Conductor_ID FROM orchestra o GROUP BY o.Conductor_ID HAVING COUNT(o.Orchestra_ID) = (SELECT MAX(counts) FROM (SELECT COUNT(*) AS counts FROM orchestra GROUP BY Conductor_ID) sub))"
      ]
    ]
  },
  {
    "id": 845,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID HAVING COUNT(*) = (SELECT MAX(num_orchestras) FROM (SELECT Conductor_ID, COUNT(*) AS num_orchestras FROM orchestra GROUP BY Conductor_ID) AS counts))",
        "SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID, c.Name HAVING COUNT(o.Orchestra_ID) = (SELECT MAX(counts) FROM (SELECT COUNT(*) counts FROM orchestra GROUP BY Conductor_ID) sub)",
        "SELECT c.Name FROM conductor c WHERE c.Conductor_ID IN (SELECT o.Conductor_ID FROM orchestra o GROUP BY o.Conductor_ID HAVING COUNT(o.Orchestra_ID) = (SELECT MAX(counts) FROM (SELECT COUNT(*) counts FROM orchestra GROUP BY Conductor_ID) sub))",
        "SELECT c.Name FROM conductor c INNER JOIN (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID HAVING COUNT(*) = (SELECT MAX(num_orchestras) FROM (SELECT COUNT(*) AS num_orchestras FROM orchestra GROUP BY Conductor_ID) sub)) o ON c.Conductor_ID = o.Conductor_ID",
        "SELECT c.Name FROM conductor c WHERE EXISTS (SELECT 1 FROM orchestra o WHERE o.Conductor_ID = c.Conductor_ID GROUP BY o.Conductor_ID HAVING COUNT(*) = (SELECT MAX(num_orchestras) FROM (SELECT COUNT(*) AS num_orchestras FROM orchestra GROUP BY Conductor_ID) sub))",
        "SELECT c.Name FROM conductor c WHERE c.Conductor_ID IN (SELECT o.Conductor_ID FROM orchestra o GROUP BY o.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT c.Name FROM conductor c JOIN (SELECT Conductor_ID, COUNT(*) AS num_orchestras FROM orchestra GROUP BY Conductor_ID) o ON c.Conductor_ID = o.Conductor_ID WHERE o.num_orchestras = (SELECT MAX(num_orchestras) FROM (SELECT COUNT(*) AS num_orchestras FROM orchestra GROUP BY Conductor_ID) sub)",
        "SELECT DISTINCT c.Name FROM conductor c, orchestra o WHERE c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID HAVING COUNT(o.Orchestra_ID) = (SELECT MAX(counts) FROM (SELECT COUNT(*) counts FROM orchestra GROUP BY Conductor_ID) sub)",
        "SELECT c.Name FROM conductor c WHERE c.Conductor_ID IN (SELECT o.Conductor_ID FROM orchestra o GROUP BY o.Conductor_ID HAVING COUNT(o.Orchestra_ID) >= ALL (SELECT COUNT(*) FROM orchestra GROUP BY Conductor_ID))",
        "SELECT c.Name FROM conductor c WHERE (SELECT COUNT(*) FROM orchestra o WHERE o.Conductor_ID = c.Conductor_ID) = (SELECT MAX(num_orchestras) FROM (SELECT COUNT(*) AS num_orchestras FROM orchestra GROUP BY Conductor_ID) sub)"
      ]
    ]
  },
  {
    "id": 846,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT c.Name FROM conductor AS c JOIN orchestra AS o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008",
        "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra WHERE Year_of_Founded > 2008)",
        "SELECT DISTINCT c.Name FROM conductor c INNER JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008",
        "SELECT conductor.Name FROM conductor, orchestra WHERE conductor.Conductor_ID = orchestra.Conductor_ID AND orchestra.Year_of_Founded > 2008",
        "SELECT c.Name FROM conductor c, orchestra o WHERE c.Conductor_ID = o.Conductor_ID AND o.Year_of_Founded > 2008",
        "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra WHERE Year_of_Founded > '2008')",
        "SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008 ORDER BY c.Name",
        "SELECT DISTINCT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra WHERE Year_of_Founded > 2008)",
        "SELECT c.Name FROM conductor AS c, orchestra AS o WHERE c.Conductor_ID = o.Conductor_ID AND o.Year_of_Founded > 2008",
        "SELECT c.Name FROM conductor c WHERE EXISTS (SELECT 1 FROM orchestra o WHERE o.Conductor_ID = c.Conductor_ID AND o.Year_of_Founded > 2008)"
      ]
    ]
  },
  {
    "id": 847,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT c.Name FROM conductor AS c JOIN orchestra AS o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008",
        "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra WHERE Year_of_Founded > 2008)",
        "SELECT DISTINCT conductor.Name FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008",
        "SELECT c.Name FROM conductor c, orchestra o WHERE c.Conductor_ID = o.Conductor_ID AND o.Year_of_Founded > 2008",
        "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra WHERE Year_of_Founded > '2008')",
        "SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID AND orchestra.Year_of_Founded > 2008",
        "SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008 ORDER BY c.Name",
        "SELECT Name FROM conductor WHERE EXISTS (SELECT 1 FROM orchestra WHERE Conductor_ID = conductor.Conductor_ID AND Year_of_Founded > 2008)",
        "SELECT c.Name FROM conductor c WHERE c.Conductor_ID IN (SELECT o.Conductor_ID FROM orchestra o WHERE o.Year_of_Founded > 2008)",
        "SELECT DISTINCT c.Name FROM conductor c LEFT JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008"
      ]
    ]
  },
  {
    "id": 848,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT Record_Company, COUNT(Orchestra_ID) AS NumberOfOrchestras FROM orchestra GROUP BY Record_Company",
        "SELECT Record_Company, COUNT(*) AS OrchestraCount FROM orchestra GROUP BY Record_Company",
        "SELECT o.Record_Company, COUNT(o.Orchestra_ID) AS TotalOrchestras FROM orchestra o GROUP BY o.Record_Company",
        "SELECT Record_Company, COUNT(Orchestra_ID) FROM orchestra GROUP BY Record_Company",
        "SELECT Record_Company, COUNT(Orchestra_ID) AS CountOfOrchestras FROM orchestra GROUP BY Record_Company ORDER BY Record_Company",
        "SELECT Record_Company, COUNT(Orchestra_ID) AS NumOfOrchestras FROM orchestra GROUP BY Record_Company ORDER BY COUNT(Orchestra_ID) DESC",
        "SELECT Record_Company, COUNT(Orchestra_ID) AS OrchestraTotal FROM orchestra GROUP BY Record_Company HAVING COUNT(Orchestra_ID) > 0",
        "SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS NumberOfDistinctOrchestras FROM orchestra GROUP BY Record_Company",
        "SELECT Record_Company, COUNT(Orchestra_ID) AS TotalNumberOfOrchestras FROM orchestra GROUP BY Record_Company ORDER BY COUNT(Orchestra_ID)",
        "SELECT Record_Company, COUNT(Orchestra_ID) AS OrchestraCount FROM orchestra GROUP BY Record_Company HAVING COUNT(Orchestra_ID) > 1"
      ]
    ]
  },
  {
    "id": 849,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT Record_Company, COUNT(Orchestra_ID) AS Number_of_Orchestras FROM orchestra GROUP BY Record_Company",
        "SELECT Record_Company, COUNT(*) AS Orchestra_Count FROM orchestra GROUP BY Record_Company",
        "SELECT Record_Company, COUNT(Orchestra_ID) FROM orchestra GROUP BY Record_Company",
        "SELECT o.Record_Company, COUNT(o.Orchestra_ID) FROM orchestra o GROUP BY o.Record_Company",
        "SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) FROM orchestra GROUP BY Record_Company",
        "SELECT Record_Company, COUNT(Orchestra_ID) AS Total_Orchestras FROM orchestra GROUP BY Record_Company",
        "SELECT Record_Company, COUNT(Orchestra_ID) AS Managed_Orchestras FROM orchestra GROUP BY Record_Company",
        "SELECT Record_Company, COUNT(*) FROM orchestra GROUP BY Record_Company",
        "SELECT Record_Company, COUNT(Orchestra_ID) AS Count_Of_Orchestras FROM orchestra GROUP BY Record_Company",
        "SELECT Record_Company, COUNT(Orchestra_ID) AS Orchestra_Total FROM orchestra GROUP BY Record_Company"
      ]
    ]
  },
  {
    "id": 850,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT Major_Record_Format, COUNT(*) AS Format_Count FROM orchestra GROUP BY Major_Record_Format ORDER BY Format_Count ASC, Major_Record_Format ASC",
        "SELECT Major_Record_Format, COUNT(Major_Record_Format) AS Count FROM orchestra GROUP BY Major_Record_Format ORDER BY Count ASC, Major_Record_Format ASC",
        "SELECT o.Major_Record_Format, COUNT(o.Major_Record_Format) AS Count FROM orchestra o GROUP BY o.Major_Record_Format ORDER BY Count ASC, o.Major_Record_Format ASC",
        "SELECT Major_Record_Format, COUNT(Orchestra_ID) FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(Orchestra_ID), Major_Record_Format",
        "SELECT Major_Record_Format, COUNT(*) FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC, Major_Record_Format ASC",
        "SELECT Major_Record_Format, COUNT(Orchestra_ID) AS Total FROM orchestra GROUP BY Major_Record_Format ORDER BY Total ASC, Major_Record_Format ASC",
        "SELECT Major_Record_Format, COUNT(*) AS Total_Records FROM orchestra GROUP BY Major_Record_Format ORDER BY Total_Records ASC, Major_Record_Format ASC",
        "SELECT Major_Record_Format, COUNT(Orchestra) AS Count FROM orchestra GROUP BY Major_Record_Format ORDER BY Count ASC, Major_Record_Format ASC",
        "SELECT Major_Record_Format, COUNT(*) AS Record_Count FROM orchestra GROUP BY Major_Record_Format ORDER BY Record_Count ASC, Major_Record_Format ASC",
        "SELECT Major_Record_Format, COUNT(Orchestra_ID) AS Count FROM orchestra GROUP BY Major_Record_Format ORDER BY Count ASC, Major_Record_Format ASC"
      ]
    ]
  },
  {
    "id": 851,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT Major_Record_Format, COUNT(*) AS Frequency, Orchestra_ID FROM orchestra GROUP BY Major_Record_Format, Orchestra_ID ORDER BY Frequency DESC, Major_Record_Format ASC, Orchestra_ID ASC",
        "SELECT Major_Record_Format, COUNT(Orchestra_ID) AS Frequency, Orchestra_ID FROM orchestra GROUP BY Major_Record_Format, Orchestra_ID ORDER BY Frequency DESC, Major_Record_Format, Orchestra_ID",
        "SELECT o.Major_Record_Format, COUNT(o.Orchestra_ID) AS Frequency, o.Orchestra_ID FROM orchestra o GROUP BY o.Major_Record_Format, o.Orchestra_ID ORDER BY Frequency DESC, o.Major_Record_Format ASC, o.Orchestra_ID ASC",
        "SELECT Major_Record_Format, COUNT(Orchestra_ID) Frequency, Orchestra_ID FROM orchestra GROUP BY Major_Record_Format, Orchestra_ID ORDER BY COUNT(Orchestra_ID) DESC, Major_Record_Format ASC, Orchestra_ID ASC",
        "SELECT Major_Record_Format, COUNT(*) AS Count, Orchestra_ID FROM orchestra GROUP BY Major_Record_Format, Orchestra_ID ORDER BY Count DESC, Major_Record_Format ASC, Orchestra_ID ASC",
        "SELECT Major_Record_Format, COUNT(Orchestra_ID) AS Total, Orchestra_ID FROM orchestra GROUP BY Major_Record_Format, Orchestra_ID ORDER BY Total DESC, Major_Record_Format ASC, Orchestra_ID ASC",
        "SELECT Major_Record_Format, COUNT(*) AS Frequency, Orchestra_ID FROM orchestra GROUP BY Major_Record_Format, Orchestra_ID ORDER BY Frequency DESC, Major_Record_Format, Orchestra_ID",
        "SELECT Major_Record_Format, COUNT(Orchestra_ID) AS Frequency, Orchestra_ID FROM orchestra GROUP BY Major_Record_Format, Orchestra_ID ORDER BY Frequency DESC, Major_Record_Format ASC, Orchestra_ID",
        "SELECT o.Major_Record_Format, COUNT(o.Orchestra_ID) AS Frequency, o.Orchestra_ID FROM orchestra o GROUP BY o.Major_Record_Format, o.Orchestra_ID ORDER BY Frequency DESC, o.Major_Record_Format, o.Orchestra_ID ASC",
        "SELECT Major_Record_Format, COUNT(Orchestra_ID) AS Frequency, Orchestra_ID FROM orchestra GROUP BY Major_Record_Format, Orchestra_ID ORDER BY Frequency DESC, Major_Record_Format ASC, Orchestra_ID ASC"
      ]
    ]
  },
  {
    "id": 852,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT Record_Company FROM orchestra GROUP BY Record_Company HAVING COUNT(Orchestra_ID) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM orchestra GROUP BY Record_Company) AS counts)",
        "SELECT O.Record_Company FROM orchestra O GROUP BY O.Record_Company HAVING COUNT(O.Orchestra_ID) = (SELECT MAX(C.cnt) FROM (SELECT COUNT(*) AS cnt FROM orchestra GROUP BY Record_Company) C)",
        "SELECT R.Record_Company FROM (SELECT Record_Company, COUNT(*) AS Total FROM orchestra GROUP BY Record_Company) R WHERE R.Total = (SELECT MAX(Total) FROM (SELECT COUNT(*) AS Total FROM orchestra GROUP BY Record_Company) T)",
        "WITH RecordCounts AS (SELECT Record_Company, COUNT(*) AS Count FROM orchestra GROUP BY Record_Company) SELECT Record_Company FROM RecordCounts WHERE Count = (SELECT MAX(Count) FROM RecordCounts)",
        "SELECT top 1 WITH TIES Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(Orchestra_ID) DESC",
        "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(Orchestra_ID) DESC LIMIT 1",
        "SELECT Record_Company FROM (SELECT Record_Company, COUNT(Orchestra_ID) AS OrchestraCount FROM orchestra GROUP BY Record_Company) AS SubQuery WHERE OrchestraCount = (SELECT MAX(OrchestraCount) FROM (SELECT COUNT(Orchestra_ID) AS OrchestraCount FROM orchestra GROUP BY Record_Company) AS SubQuery2)",
        "SELECT Record_Company FROM orchestra GROUP BY Record_Company HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM orchestra GROUP BY Record_Company) AS Sub)",
        "SELECT Record_Company FROM orchestra GROUP BY Record_Company HAVING COUNT(Orchestra_ID) >= ALL (SELECT COUNT(Orchestra_ID) FROM orchestra GROUP BY Record_Company)",
        "SELECT Record_Company FROM orchestra GROUP BY Record_Company HAVING COUNT(Orchestra_ID) = (SELECT MAX(COUNT(Orchestra_ID)) FROM orchestra GROUP BY Record_Company)"
      ]
    ]
  },
  {
    "id": 853,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT Record_Company, COUNT(*) AS NumOrchestras FROM orchestra GROUP BY Record_Company ORDER BY NumOrchestras DESC LIMIT 1",
        "SELECT TOP 1 Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(Orchestra_ID) DESC",
        "SELECT Record_Company FROM (SELECT Record_Company, COUNT(*) as Total FROM orchestra GROUP BY Record_Company) AS subquery ORDER BY Total DESC LIMIT 1",
        "SELECT Record_Company, MAX(Count) FROM (SELECT Record_Company, COUNT(*) AS Count FROM orchestra GROUP BY Record_Company) AS Counts",
        "SELECT Record_Company FROM orchestra GROUP BY Record_Company HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM orchestra GROUP BY Record_Company) tmp)",
        "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(Orchestra_ID) DESC FETCH FIRST 1 ROWS ONLY",
        "SELECT Record_Company, COUNT(*) AS NumberOfOrchestras FROM orchestra GROUP BY Record_Company ORDER BY NumberOfOrchestras DESC FETCH FIRST ROW ONLY",
        "SELECT Record_Company FROM orchestra GROUP BY Record_Company HAVING COUNT(Orchestra_ID) = (SELECT MAX(Cnt) FROM (SELECT COUNT(Orchestra_ID) AS Cnt FROM orchestra GROUP BY Record_Company) sub)",
        "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1 OFFSET 0"
      ]
    ]
  },
  {
    "id": 854,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "SELECT o.Orchestra FROM orchestra o LEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE p.Orchestra_ID IS NULL",
        "SELECT o.Orchestra FROM orchestra o WHERE NOT EXISTS (SELECT 1 FROM performance p WHERE p.Orchestra_ID = o.Orchestra_ID)",
        "SELECT Orchestra FROM orchestra WHERE NOT EXISTS (SELECT * FROM performance WHERE Orchestra_ID = orchestra.Orchestra_ID)",
        "SELECT o.Orchestra FROM orchestra o WHERE o.Orchestra_ID NOT IN (SELECT DISTINCT p.Orchestra_ID FROM performance p)",
        "SELECT DISTINCT o.Orchestra FROM orchestra o WHERE o.Orchestra_ID NOT IN (SELECT p.Orchestra_ID FROM performance p)",
        "SELECT o.Orchestra FROM orchestra o WHERE o.Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID)",
        "SELECT Orchestra FROM orchestra EXCEPT SELECT Orchestra_ID FROM performance",
        "SELECT o.Orchestra FROM orchestra o WHERE o.Orchestra_ID NOT IN (SELECT p.Orchestra_ID FROM performance p WHERE p.Orchestra_ID IS NOT NULL)",
        "SELECT o.Orchestra FROM orchestra o LEFT OUTER JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE p.Orchestra_ID IS NULL"
      ]
    ]
  },
  {
    "id": 855,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "SELECT o.Orchestra FROM orchestra o LEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE p.Orchestra_ID IS NULL",
        "SELECT o.Orchestra FROM orchestra o WHERE NOT EXISTS (SELECT 1 FROM performance p WHERE p.Orchestra_ID = o.Orchestra_ID)",
        "SELECT Orchestra FROM orchestra EXCEPT SELECT Orchestra_ID FROM performance",
        "SELECT o.Orchestra FROM orchestra o WHERE o.Orchestra_ID NOT IN (SELECT DISTINCT p.Orchestra_ID FROM performance p)",
        "SELECT Orchestra FROM orchestra o WHERE o.Orchestra_ID NOT IN (SELECT p.Orchestra_ID FROM performance p)",
        "SELECT DISTINCT o.Orchestra FROM orchestra o WHERE o.Orchestra_ID NOT IN (SELECT p.Orchestra_ID FROM performance p)",
        "SELECT o.Orchestra FROM orchestra o WHERE o.Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID)",
        "SELECT o.Orchestra FROM orchestra o WHERE NOT EXISTS (SELECT NULL FROM performance p WHERE p.Orchestra_ID = o.Orchestra_ID)",
        "SELECT o.Orchestra FROM orchestra o WHERE o.Orchestra_ID NOT IN (SELECT p.Orchestra_ID FROM performance p WHERE p.Orchestra_ID IS NOT NULL)"
      ]
    ]
  },
  {
    "id": 856,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
        "SELECT a.Record_Company FROM orchestra a JOIN orchestra b ON a.Record_Company = b.Record_Company WHERE a.Year_of_Founded < 2003 AND b.Year_of_Founded > 2003",
        "SELECT DISTINCT Record_Company FROM orchestra WHERE Record_Company IN (SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003) AND Record_Company IN (SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003)",
        "WITH Before2003 AS (SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003), After2003 AS (SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003) SELECT Record_Company FROM Before2003 WHERE Record_Company IN (SELECT Record_Company FROM After2003)",
        "SELECT Record_Company FROM orchestra WHERE Record_Company IN (SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003) INTERSECT SELECT Record_Company FROM orchestra WHERE Record_Company IN (SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003)",
        "SELECT o1.Record_Company FROM orchestra o1, orchestra o2 WHERE o1.Record_Company = o2.Record_Company AND o1.Year_of_Founded < 2003 AND o2.Year_of_Founded > 2003",
        "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 AND Record_Company IN (SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003)",
        "SELECT DISTINCT o.Record_Company FROM orchestra o WHERE EXISTS (SELECT 1 FROM orchestra WHERE Record_Company = o.Record_Company AND Year_of_Founded < 2003) AND EXISTS (SELECT 1 FROM orchestra WHERE Record_Company = o.Record_Company AND Year_of_Founded > 2003)",
        "SELECT Record_Company FROM (SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 UNION ALL SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003) GROUP BY Record_Company HAVING COUNT(*) > 1",
        "SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 AND Record_Company IN (SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003)"
      ]
    ]
  },
  {
    "id": 857,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT Record_Company FROM orchestra WHERE Record_Company IN (SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003) INTERSECT SELECT Record_Company FROM orchestra WHERE Record_Company IN (SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003)",
        "SELECT DISTINCT o1.Record_Company FROM orchestra o1 JOIN orchestra o2 ON o1.Record_Company = o2.Record_Company WHERE o1.Year_of_Founded < 2003 AND o2.Year_of_Founded > 2003",
        "SELECT o.Record_Company FROM orchestra o WHERE o.Record_Company IN (SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003) AND o.Record_Company IN (SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003)",
        "WITH Before2003 AS (SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003), After2003 AS (SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003) SELECT Record_Company FROM Before2003 WHERE Record_Company IN (SELECT Record_Company FROM After2003)",
        "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 AND Record_Company IN (SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003)",
        "SELECT a.Record_Company FROM orchestra a, orchestra b WHERE a.Record_Company = b.Record_Company AND a.Year_of_Founded < 2003 AND b.Year_of_Founded > 2003",
        "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
        "SELECT DISTINCT Record_Company FROM orchestra WHERE Record_Company IN (SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003) AND Record_Company IN (SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003)",
        "SELECT Record_Company FROM (SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 UNION SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003) AS SubQuery WHERE Record_Company IN (SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003) AND Record_Company IN (SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003)",
        "SELECT Record_Company FROM orchestra WHERE Record_Company IN (SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003) AND EXISTS (SELECT 1 FROM orchestra WHERE Record_Company = orchestra.Record_Company AND Year_of_Founded > 2003)"
      ]
    ]
  },
  {
    "id": 858,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')",
        "SELECT COUNT(Orchestra_ID) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'",
        "SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'",
        "SELECT COUNT(*) AS NumberOfOrchestras FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')",
        "SELECT COUNT(1) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'",
        "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'CD' UNION SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'DVD'",
        "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format LIKE 'CD' OR Major_Record_Format LIKE 'DVD'",
        "SELECT COUNT(Orchestra) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')",
        "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'CD' UNION ALL SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'DVD'",
        "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD') GROUP BY Major_Record_Format"
      ]
    ]
  },
  {
    "id": 859,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')",
        "SELECT COUNT(*) FROM (SELECT Orchestra_ID FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD' GROUP BY Orchestra_ID)",
        "SELECT COUNT(Orchestra_ID) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'",
        "SELECT COUNT(UNIQUE Orchestra_ID) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'",
        "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD') GROUP BY Orchestra_ID",
        "SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format LIKE 'CD' OR Major_Record_Format LIKE 'DVD'",
        "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'CD' UNION SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'DVD'",
        "SELECT COUNT(Orchestra_ID) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD') GROUP BY Orchestra_ID",
        "SELECT COUNT(*) FROM (SELECT DISTINCT Orchestra_ID FROM orchestra WHERE Major_Record_Format = 'CD' UNION SELECT DISTINCT Orchestra_ID FROM orchestra WHERE Major_Record_Format = 'DVD')",
        "SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format = 'CD' UNION ALL SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format = 'DVD'"
      ]
    ]
  },
  {
    "id": 860,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(Performance_ID) > 1)",
        "SELECT o.Year_of_Founded FROM orchestra o JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Orchestra_ID HAVING COUNT(p.Performance_ID) > 1",
        "SELECT o.Year_of_Founded FROM orchestra o WHERE EXISTS (SELECT 1 FROM performance p WHERE p.Orchestra_ID = o.Orchestra_ID GROUP BY p.Orchestra_ID HAVING COUNT(p.Performance_ID) > 1)",
        "SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(*) > 1)",
        "SELECT DISTINCT o.Year_of_Founded FROM orchestra o INNER JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Orchestra_ID, o.Year_of_Founded HAVING COUNT(p.Performance_ID) > 1",
        "SELECT o.Year_of_Founded FROM orchestra o WHERE o.Orchestra_ID IN (SELECT p.Orchestra_ID FROM performance p GROUP BY p.Orchestra_ID HAVING COUNT(p.Performance_ID) > 1)",
        "SELECT Year_of_Founded FROM orchestra o WHERE (SELECT COUNT(*) FROM performance p WHERE p.Orchestra_ID = o.Orchestra_ID) > 1",
        "SELECT o.Year_of_Founded FROM orchestra o, performance p WHERE o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Orchestra_ID HAVING COUNT(p.Performance_ID) > 1",
        "SELECT o.Year_of_Founded FROM orchestra o JOIN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(Performance_ID) > 1) p ON o.Orchestra_ID = p.Orchestra_ID",
        "SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT p.Orchestra_ID FROM performance p GROUP BY p.Orchestra_ID HAVING COUNT(p.Performance_ID) > 1)"
      ]
    ]
  },
  {
    "id": 861,
    "db_id": "orchestra",
    "infer_predictions": [
      [
        "SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(*) > 1)",
        "SELECT o.Year_of_Founded FROM orchestra o JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Orchestra_ID HAVING COUNT(p.Performance_ID) > 1",
        "SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(Performance_ID) > 1)",
        "SELECT o.Year_of_Founded FROM orchestra o WHERE EXISTS (SELECT 1 FROM performance p WHERE p.Orchestra_ID = o.Orchestra_ID GROUP BY p.Orchestra_ID HAVING COUNT(*) > 1)",
        "SELECT DISTINCT o.Year_of_Founded FROM orchestra o INNER JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Orchestra_ID HAVING COUNT(p.Performance_ID) > 1",
        "SELECT o.Year_of_Founded FROM orchestra o WHERE o.Orchestra_ID IN (SELECT p.Orchestra_ID FROM performance p GROUP BY p.Orchestra_ID HAVING COUNT(p.Performance_ID) > 1)",
        "SELECT Year_of_Founded FROM orchestra o WHERE (SELECT COUNT(*) FROM performance p WHERE p.Orchestra_ID = o.Orchestra_ID) > 1",
        "SELECT o.Year_of_Founded FROM orchestra o, performance p WHERE o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Orchestra_ID HAVING COUNT(p.Performance_ID) > 1",
        "SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT p.Orchestra_ID FROM performance p GROUP BY p.Orchestra_ID HAVING COUNT(*) > 1)",
        "SELECT o.Year_of_Founded FROM orchestra o WHERE o.Orchestra_ID IN (SELECT p.Orchestra_ID FROM performance p GROUP BY p.Orchestra_ID HAVING COUNT(p.Performance_ID) > 1)"
      ]
    ]
  },
  {
    "id": 862,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Highschooler",
        "SELECT COUNT(ID) FROM Highschooler",
        "SELECT COUNT(DISTINCT ID) FROM Highschooler",
        "SELECT COUNT(1) FROM Highschooler",
        "SELECT COUNT(Highschooler.ID) FROM Highschooler",
        "SELECT COUNT(DISTINCT Highschooler.ID) FROM Highschooler",
        "SELECT COUNT(*) AS total_highschoolers FROM Highschooler",
        "SELECT COUNT(ID) AS total_students FROM Highschooler",
        "SELECT COUNT(*) FROM Highschooler WHERE ID IS NOT NULL",
        "SELECT COUNT(DISTINCT ID) AS count_of_highschoolers FROM Highschooler"
      ]
    ]
  },
  {
    "id": 863,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Highschooler",
        "SELECT COUNT(ID) FROM Highschooler",
        "SELECT COUNT(1) FROM Highschooler",
        "SELECT COUNT(Highschooler.ID) FROM Highschooler",
        "SELECT COUNT(*) AS NumberOfHighschoolers FROM Highschooler",
        "SELECT COUNT(DISTINCT ID) FROM Highschooler",
        "SELECT COUNT(Highschooler.*) FROM Highschooler",
        "SELECT COUNT(*) FROM Highschooler WHERE ID IS NOT NULL",
        "SELECT COUNT(*) FROM Highschooler GROUP BY grade",
        "SELECT COUNT(*) FROM Highschooler H"
      ]
    ]
  },
  {
    "id": 864,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT name, grade FROM Highschooler",
        "SELECT Highschooler.name, Highschooler.grade FROM Highschooler",
        "SELECT h.name, h.grade FROM Highschooler h",
        "SELECT `name`, `grade` FROM `Highschooler`",
        "SELECT Highschooler.name AS StudentName, Highschooler.grade AS StudentGrade FROM Highschooler",
        "SELECT name AS 'Name', grade AS 'Grade' FROM Highschooler",
        "SELECT * FROM Highschooler SELECT name, grade",
        "SELECT Highschooler.name, Highschooler.grade FROM Highschooler ORDER BY name",
        "SELECT name, grade FROM Highschooler ORDER BY grade DESC",
        "SELECT DISTINCT name, grade FROM Highschooler"
      ]
    ]
  },
  {
    "id": 865,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT name, grade FROM Highschooler",
        "SELECT Highschooler.name, Highschooler.grade FROM Highschooler",
        "SELECT h.name, h.grade FROM Highschooler h",
        "SELECT `name`, `grade` FROM `Highschooler`",
        "SELECT Highschooler.name AS StudentName, Highschooler.grade AS StudentGrade FROM Highschooler",
        "SELECT name AS Name, grade AS Grade FROM Highschooler",
        "SELECT * FROM Highschooler SELECT name, grade",
        "SELECT Highschooler.name, Highschooler.grade FROM Highschooler ORDER BY name",
        "SELECT name, grade FROM Highschooler WHERE grade IS NOT NULL",
        "SELECT DISTINCT name, grade FROM Highschooler"
      ]
    ]
  },
  {
    "id": 866,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT DISTINCT grade FROM Highschooler",
        "SELECT grade FROM Highschooler GROUP BY grade",
        "SELECT DISTINCT Highschooler.grade FROM Highschooler",
        "SELECT Highschooler.grade FROM Highschooler GROUP BY Highschooler.grade",
        "SELECT DISTINCT(Highschooler.grade) FROM Highschooler",
        "SELECT DISTINCT grade FROM Highschooler ORDER BY grade",
        "SELECT grade FROM Highschooler GROUP BY grade ORDER BY grade",
        "SELECT DISTINCT Highschooler.grade FROM Highschooler ORDER BY Highschooler.grade",
        "SELECT DISTINCT(Highschooler.grade) FROM Highschooler ORDER BY Highschooler.grade",
        "SELECT DISTINCT grade FROM Highschooler ORDER BY grade ASC"
      ]
    ]
  },
  {
    "id": 867,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT name, grade FROM Highschooler",
        "SELECT Highschooler.name, Highschooler.grade FROM Highschooler",
        "SELECT h.name, h.grade FROM Highschooler h",
        "SELECT `name`, `grade` FROM `Highschooler`",
        "SELECT Highschooler.name AS StudentName, Highschooler.grade AS StudentGrade FROM Highschooler",
        "SELECT name AS 'Name', grade AS 'Grade' FROM Highschooler",
        "SELECT * FROM Highschooler SELECT name, grade",
        "SELECT Highschooler.name, Highschooler.grade FROM Highschooler ORDER BY name",
        "SELECT name, grade FROM Highschooler WHERE grade IS NOT NULL",
        "SELECT DISTINCT name, grade FROM Highschooler"
      ]
    ]
  },
  {
    "id": 868,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT grade FROM Highschooler WHERE name = 'Kyle'",
        "SELECT Highschooler.grade FROM Highschooler WHERE Highschooler.name = 'Kyle'",
        "SELECT h.grade FROM Highschooler h WHERE h.name = 'Kyle'",
        "SELECT grade FROM Highschooler WHERE name LIKE 'Kyle'",
        "SELECT DISTINCT grade FROM Highschooler WHERE name = 'Kyle'",
        "SELECT Highschooler.grade FROM Highschooler WHERE Highschooler.name LIKE 'Kyle'",
        "SELECT h.grade FROM Highschooler AS h WHERE h.name = 'Kyle'",
        "SELECT grade FROM Highschooler WHERE name = 'Kyle' AND grade IS NOT NULL",
        "SELECT grade FROM Highschooler WHERE name = 'Kyle' ORDER BY grade",
        "SELECT grade FROM Highschooler WHERE name = 'Kyle' GROUP BY grade"
      ]
    ]
  },
  {
    "id": 869,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT grade FROM Highschooler WHERE name = 'Kyle'",
        "SELECT Highschooler.grade FROM Highschooler WHERE Highschooler.name = 'Kyle'",
        "SELECT h.grade FROM Highschooler h WHERE h.name = 'Kyle'",
        "SELECT DISTINCT grade FROM Highschooler WHERE name = 'Kyle'",
        "SELECT grade FROM Highschooler WHERE name LIKE 'Kyle'",
        "SELECT grade FROM Highschooler WHERE name = 'Kyle' GROUP BY grade",
        "SELECT Highschooler.grade FROM Highschooler WHERE Highschooler.name LIKE 'Kyle'",
        "SELECT h.grade FROM Highschooler h WHERE h.name LIKE 'Kyle'",
        "SELECT DISTINCT Highschooler.grade FROM Highschooler WHERE Highschooler.name = 'Kyle'",
        "SELECT DISTINCT h.grade FROM Highschooler h WHERE h.name = 'Kyle'"
      ]
    ]
  },
  {
    "id": 870,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT name FROM Highschooler WHERE grade = 10",
        "SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10",
        "SELECT name FROM Highschooler WHERE grade = '10'",
        "SELECT Highschooler.name FROM Highschooler WHERE grade = '10'",
        "SELECT DISTINCT name FROM Highschooler WHERE grade = 10",
        "SELECT DISTINCT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10",
        "SELECT name FROM Highschooler WHERE grade = 10 ORDER BY name",
        "SELECT Highschooler.name FROM Highschooler WHERE grade = 10 ORDER BY Highschooler.name",
        "SELECT name FROM Highschooler WHERE grade = 10 ORDER BY name ASC",
        "SELECT Highschooler.name FROM Highschooler WHERE grade = 10 ORDER BY Highschooler.name ASC"
      ]
    ]
  },
  {
    "id": 871,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT name FROM Highschooler WHERE grade = 10",
        "SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10",
        "SELECT name FROM Highschooler WHERE grade = '10'",
        "SELECT Highschooler.name FROM Highschooler WHERE grade = '10'",
        "SELECT DISTINCT name FROM Highschooler WHERE grade = 10",
        "SELECT DISTINCT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10",
        "SELECT name FROM Highschooler WHERE grade = 10 ORDER BY name",
        "SELECT Highschooler.name FROM Highschooler WHERE grade = 10 ORDER BY Highschooler.name",
        "SELECT name FROM Highschooler WHERE grade = 10 ORDER BY name ASC",
        "SELECT Highschooler.name FROM Highschooler WHERE grade = 10 ORDER BY Highschooler.name ASC"
      ]
    ]
  },
  {
    "id": 872,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT ID FROM Highschooler WHERE name = 'Kyle'",
        "SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.name = 'Kyle'",
        "SELECT h.ID FROM Highschooler h WHERE h.name = 'Kyle'",
        "SELECT ID FROM Highschooler WHERE name LIKE 'Kyle'",
        "SELECT DISTINCT ID FROM Highschooler WHERE name = 'Kyle'",
        "SELECT Highschooler.ID FROM Highschooler WHERE name = 'Kyle' AND grade IS NOT NULL",
        "SELECT ID FROM Highschooler WHERE name = 'Kyle' AND ID IS NOT NULL",
        "SELECT * FROM Highschooler WHERE name = 'Kyle' AND ID IS NOT NULL",
        "SELECT ID FROM Highschooler WHERE name = 'Kyle' ORDER BY ID",
        "SELECT ID FROM Highschooler WHERE name = 'Kyle' GROUP BY ID"
      ]
    ]
  },
  {
    "id": 873,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT ID FROM Highschooler WHERE name = 'Kyle'",
        "SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.name = 'Kyle'",
        "SELECT h.ID FROM Highschooler h WHERE h.name = 'Kyle'",
        "SELECT ID FROM Highschooler WHERE name LIKE 'Kyle'",
        "SELECT DISTINCT ID FROM Highschooler WHERE name = 'Kyle'",
        "SELECT Highschooler.ID FROM Highschooler WHERE name = 'Kyle'",
        "SELECT ID FROM Highschooler WHERE name = 'Kyle' AND grade IS NOT NULL",
        "SELECT ID FROM Highschooler WHERE name = 'Kyle' ORDER BY ID",
        "SELECT * FROM Highschooler WHERE name = 'Kyle' AND grade > 0",
        "SELECT ID FROM Highschooler WHERE name = 'Kyle' AND ID IS NOT NULL"
      ]
    ]
  },
  {
    "id": 874,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)",
        "SELECT COUNT(ID) FROM Highschooler WHERE grade BETWEEN 9 AND 10",
        "SELECT COUNT(*) AS count FROM Highschooler WHERE grade = 9 OR grade = 10",
        "SELECT COUNT(DISTINCT ID) FROM Highschooler WHERE grade = 9 OR grade = 10",
        "SELECT COUNT(*) FROM Highschooler WHERE grade >= 9 AND grade <= 10",
        "SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)",
        "SELECT COUNT(*) FROM Highschooler WHERE grade = 9 UNION ALL SELECT COUNT(*) FROM Highschooler WHERE grade = 10",
        "SELECT SUM(CASE WHEN grade IN (9, 10) THEN 1 ELSE 0 END) FROM Highschooler",
        "SELECT COUNT(*) FROM Highschooler WHERE grade IN (SELECT grade FROM Highschooler WHERE grade = 9 OR grade = 10)",
        "SELECT COUNT(*) FROM Highschooler WHERE grade IN (SELECT DISTINCT grade FROM Highschooler WHERE grade BETWEEN 9 AND 10)"
      ]
    ]
  },
  {
    "id": 875,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)",
        "SELECT COUNT(ID) FROM Highschooler WHERE grade = 9 OR grade = 10",
        "SELECT COUNT(*) AS NumberOfStudents FROM Highschooler WHERE grade BETWEEN 9 AND 10",
        "SELECT COUNT(*) FROM Highschooler WHERE grade >= 9 AND grade <= 10",
        "SELECT COUNT(ID) AS TotalHighschoolers FROM Highschooler WHERE grade IN (9, 10)",
        "SELECT COUNT(*) FROM Highschooler WHERE grade = 9 UNION ALL SELECT COUNT(*) FROM Highschooler WHERE grade = 10",
        "SELECT SUM(CASE WHEN grade = 9 OR grade = 10 THEN 1 ELSE 0 END) FROM Highschooler",
        "SELECT COUNT(*) FROM Highschooler GROUP BY grade HAVING grade = 9 OR grade = 10",
        "SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10) GROUP BY grade",
        "SELECT COUNT(*) FROM Highschooler WHERE grade = 9 UNION SELECT COUNT(*) FROM Highschooler WHERE grade = 10"
      ]
    ]
  },
  {
    "id": 876,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT grade, COUNT(ID) AS num_highschoolers FROM Highschooler GROUP BY grade",
        "SELECT grade, COUNT(*) AS count FROM Highschooler GROUP BY grade",
        "SELECT Highschooler.grade, COUNT(Highschooler.ID) AS total FROM Highschooler GROUP BY Highschooler.grade",
        "SELECT grade, COUNT(ID) FROM Highschooler GROUP BY grade",
        "SELECT COUNT(ID), grade FROM Highschooler GROUP BY grade",
        "SELECT grade, COUNT(ID) AS NumberOfStudents FROM Highschooler GROUP BY grade ORDER BY grade",
        "SELECT Highschooler.grade, COUNT(*) FROM Highschooler GROUP BY Highschooler.grade",
        "SELECT grade, COUNT(ID) AS StudentCount FROM Highschooler GROUP BY grade ORDER BY grade DESC",
        "SELECT grade, COUNT(ID) AS TotalHighschoolers FROM Highschooler GROUP BY grade ORDER BY COUNT(ID) DESC",
        "SELECT grade, COUNT(ID) FROM Highschooler GROUP BY grade ORDER BY grade ASC"
      ]
    ]
  },
  {
    "id": 877,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT grade, COUNT(ID) AS count FROM Highschooler GROUP BY grade",
        "SELECT grade, COUNT(*) AS total FROM Highschooler GROUP BY grade",
        "SELECT Highschooler.grade, COUNT(Highschooler.ID) AS NumberOfStudents FROM Highschooler GROUP BY Highschooler.grade",
        "SELECT grade, COUNT(ID) FROM Highschooler GROUP BY grade",
        "SELECT COUNT(ID), grade FROM Highschooler GROUP BY grade",
        "SELECT grade, COUNT(ID) AS student_count FROM Highschooler GROUP BY grade ORDER BY grade",
        "SELECT Highschooler.grade, COUNT(*) FROM Highschooler GROUP BY Highschooler.grade",
        "SELECT grade, COUNT(ID) AS total_students FROM Highschooler GROUP BY grade ORDER BY grade ASC",
        "SELECT grade, COUNT(ID) FROM Highschooler GROUP BY grade ORDER BY COUNT(ID) DESC",
        "SELECT grade, COUNT(ID) AS count_of_students FROM Highschooler GROUP BY grade ORDER BY grade"
      ]
    ]
  },
  {
    "id": 878,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) = (SELECT MAX(count) FROM (SELECT COUNT(ID) AS count FROM Highschooler GROUP BY grade) AS counts)",
        "SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(ID) DESC LIMIT 1",
        "WITH GradeCounts AS (SELECT grade, COUNT(ID) AS count FROM Highschooler GROUP BY grade) SELECT grade FROM GradeCounts WHERE count = (SELECT MAX(count) FROM GradeCounts)",
        "SELECT H.grade FROM Highschooler H GROUP BY H.grade HAVING COUNT(H.ID) = (SELECT MAX(C.cnt) FROM (SELECT COUNT(ID) AS cnt FROM Highschooler GROUP BY grade) C)",
        "SELECT grade FROM (SELECT grade, COUNT(ID) AS num_students FROM Highschooler GROUP BY grade) AS GradeSummary WHERE num_students = (SELECT MAX(num_students) FROM GradeSummary)",
        "SELECT TOP 1 WITH TIES grade FROM Highschooler GROUP BY grade ORDER BY COUNT(ID) DESC",
        "SELECT grade, COUNT(*) AS StudentCount FROM Highschooler GROUP BY grade HAVING COUNT(*) = (SELECT MAX(StudentCount) FROM (SELECT COUNT(*) AS StudentCount FROM Highschooler GROUP BY grade) temp)",
        "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= ALL (SELECT COUNT(ID) FROM Highschooler GROUP BY grade)",
        "SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(ID) DESC FETCH FIRST 1 ROWS WITH TIES",
        "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) = (SELECT COUNT(*) FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 879,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(ID) DESC LIMIT 1",
        "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) = (SELECT MAX(cnt) FROM (SELECT COUNT(ID) AS cnt FROM Highschooler GROUP BY grade) AS subquery)",
        "SELECT TOP 1 grade FROM Highschooler GROUP BY grade ORDER BY COUNT(ID) DESC",
        "SELECT grade FROM (SELECT grade, COUNT(ID) AS total FROM Highschooler GROUP BY grade ORDER BY total DESC LIMIT 1) AS most_popular",
        "SELECT grade, COUNT(ID) AS count FROM Highschooler GROUP BY grade ORDER BY count DESC LIMIT 1",
        "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= ALL (SELECT COUNT(ID) FROM Highschooler GROUP BY grade)",
        "WITH GradeCounts AS (SELECT grade, COUNT(ID) AS count FROM Highschooler GROUP BY grade) SELECT grade FROM GradeCounts WHERE count = (SELECT MAX(count) FROM GradeCounts)",
        "SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY",
        "SELECT grade, COUNT(*) AS NumberOfStudents FROM Highschooler GROUP BY grade ORDER BY NumberOfStudents DESC LIMIT 1",
        "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) = (SELECT COUNT(ID) FROM Highschooler GROUP BY grade ORDER BY COUNT(ID) DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 880,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4",
        "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4",
        "SELECT H.grade FROM Highschooler H GROUP BY H.grade HAVING COUNT(H.ID) >= 4",
        "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(DISTINCT ID) >= 4",
        "SELECT grade, COUNT(ID) AS student_count FROM Highschooler GROUP BY grade HAVING student_count >= 4",
        "SELECT grade FROM (SELECT grade, COUNT(ID) AS num_students FROM Highschooler GROUP BY grade) AS subquery WHERE num_students >= 4",
        "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4 ORDER BY grade",
        "SELECT DISTINCT grade FROM Highschooler WHERE grade IN (SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4)",
        "SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4",
        "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4 ORDER BY COUNT(ID) DESC"
      ]
    ]
  },
  {
    "id": 881,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4",
        "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4",
        "SELECT Highschooler.grade FROM Highschooler GROUP BY Highschooler.grade HAVING COUNT(Highschooler.ID) >= 4",
        "SELECT H.grade FROM Highschooler H GROUP BY H.grade HAVING COUNT(H.ID) >= 4",
        "SELECT grade, COUNT(ID) AS num_students FROM Highschooler GROUP BY grade HAVING num_students >= 4",
        "SELECT grade FROM (SELECT grade, COUNT(ID) AS student_count FROM Highschooler GROUP BY grade) AS subquery WHERE student_count >= 4",
        "SELECT DISTINCT grade FROM Highschooler WHERE grade IN (SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4)",
        "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4 ORDER BY grade",
        "SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4",
        "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4"
      ]
    ]
  },
  {
    "id": 882,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT Highschooler.ID, COUNT(DISTINCT Friend.student_id) + COUNT(DISTINCT Friend.friend_id) AS total_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id OR Highschooler.ID = Friend.friend_id GROUP BY Highschooler.ID",
        "SELECT H.ID, (SELECT COUNT(*) FROM Friend WHERE student_id = H.ID OR friend_id = H.ID) AS total_friends FROM Highschooler H",
        "SELECT ID, (SELECT COUNT(*) FROM Friend F WHERE F.student_id = Highschooler.ID) + (SELECT COUNT(*) FROM Friend F WHERE F.friend_id = Highschooler.ID) AS total_friends FROM Highschooler",
        "SELECT Highschooler.ID, COUNT(F1.student_id) + COUNT(F2.friend_id) AS total_friends FROM Highschooler LEFT JOIN Friend F1 ON Highschooler.ID = F1.student_id LEFT JOIN Friend F2 ON Highschooler.ID = F2.friend_id GROUP BY Highschooler.ID",
        "SELECT ID, COUNT(*) AS total_friends FROM (SELECT student_id AS ID FROM Friend UNION ALL SELECT friend_id AS ID FROM Friend) AS AllFriends WHERE ID = Highschooler.ID GROUP BY ID",
        "SELECT Highschooler.ID, COUNT(*) AS total_friends FROM Friend WHERE student_id = Highschooler.ID OR friend_id = Highschooler.ID GROUP BY Highschooler.ID",
        "SELECT H.ID, IFNULL(F.total, 0) AS total_friends FROM Highschooler H LEFT JOIN (SELECT student_id, COUNT(*) AS total FROM Friend GROUP BY student_id UNION ALL SELECT friend_id, COUNT(*) FROM Friend GROUP BY friend_id) F ON H.ID = F.student_id OR H.ID = F.friend_id GROUP BY H.ID",
        "SELECT Highschooler.ID, (COUNT(DISTINCT Friend.student_id) + COUNT(DISTINCT Friend.friend_id)) / 2 AS total_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id OR Highschooler.ID = Friend.friend_id GROUP BY Highschooler.ID",
        "SELECT Highschooler.ID, COUNT(Friend.student_id) AS initiated_friends, COUNT(Friend.friend_id) AS received_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id OR Highschooler.ID = Friend.friend_id GROUP BY Highschooler.ID",
        "SELECT Highschooler.ID, SUM(CASE WHEN Friend.student_id = Highschooler.ID THEN 1 ELSE 0 END) + SUM(CASE WHEN Friend.friend_id = Highschooler.ID THEN 1 ELSE 0 END) AS total_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id OR Highschooler.ID = Friend.friend_id GROUP BY Highschooler.ID"
      ]
    ]
  },
  {
    "id": 883,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT H.ID, COUNT(DISTINCT F1.friend_id) + COUNT(DISTINCT F2.student_id) AS total_friends FROM Highschooler H LEFT JOIN Friend F1 ON H.ID = F1.student_id LEFT JOIN Friend F2 ON H.ID = F2.friend_id GROUP BY H.ID",
        "SELECT H.name, (SELECT COUNT(*) FROM Friend WHERE student_id = H.ID) + (SELECT COUNT(*) FROM Friend WHERE friend_id = H.ID) AS total_friends FROM Highschooler H",
        "SELECT H.ID, COUNT(DISTINCT F.friend_id) AS total_friends FROM Highschooler H JOIN Friend F ON H.ID = F.student_id OR H.ID = F.friend_id GROUP BY H.ID",
        "SELECT H.ID, COUNT(DISTINCT CASE WHEN F.student_id = H.ID THEN F.friend_id ELSE F.student_id END) AS total_friends FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id OR H.ID = F.friend_id GROUP BY H.ID",
        "SELECT H.ID, COUNT(DISTINCT F1.friend_id) AS initiated_friends, COUNT(DISTINCT F2.student_id) AS received_friends FROM Highschooler H LEFT JOIN Friend F1 ON H.ID = F1.student_id LEFT JOIN Friend F2 ON H.ID = F2.friend_id GROUP BY H.ID",
        "SELECT H.ID, COUNT(*) AS total_friends FROM Highschooler H, Friend F WHERE H.ID = F.student_id OR H.ID = F.friend_id GROUP BY H.ID",
        "SELECT H.ID, COUNT(DISTINCT F1.friend_id) + COUNT(DISTINCT F2.student_id) AS total_friends FROM Highschooler H LEFT JOIN Friend F1 ON H.ID = F1.student_id LEFT JOIN Friend F2 ON H.ID = F2.friend_id GROUP BY H.ID HAVING COUNT(DISTINCT F1.friend_id) > 0 OR COUNT(DISTINCT F2.student_id) > 0",
        "SELECT H.ID, COUNT(DISTINCT F.friend_id) AS total_friends FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID UNION SELECT H.ID, COUNT(DISTINCT F.student_id) FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.friend_id GROUP BY H.ID",
        "SELECT H.ID, COUNT(DISTINCT F1.friend_id) AS friends_initiated, COUNT(DISTINCT F2.student_id) AS friends_received, (COUNT(DISTINCT F1.friend_id) + COUNT(DISTINCT F2.student_id)) AS total_friends FROM Highschooler H LEFT JOIN Friend F1 ON H.ID = F1.student_id LEFT JOIN Friend F2 ON H.ID = F2.friend_id GROUP BY H.ID",
        "SELECT H.ID, COUNT(DISTINCT F.friend_id) AS total_friends FROM (SELECT student_id AS ID, friend_id FROM Friend UNION ALL SELECT friend_id, student_id FROM Friend) F JOIN Highschooler H ON H.ID = F.ID GROUP BY H.ID"
      ]
    ]
  },
  {
    "id": 884,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT H.name, COUNT(F.friend_id) AS num_friends FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.name",
        "SELECT name, COUNT(friend_id) AS friends_count FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY name",
        "SELECT Highschooler.name, COUNT(*) AS total_friends FROM Highschooler INNER JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name",
        "SELECT h.name, COUNT(f.friend_id) AS friend_total FROM Highschooler h, Friend f WHERE h.ID = f.student_id GROUP BY h.name",
        "SELECT name, COUNT(friend_id) FROM Highschooler, Friend WHERE Highschooler.ID = Friend.student_id GROUP BY name",
        "SELECT Highschooler.name AS student_name, COUNT(Friend.friend_id) AS number_of_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name",
        "SELECT h.name, COUNT(f.friend_id) FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id GROUP BY h.name",
        "SELECT name, COUNT(DISTINCT friend_id) AS friends_count FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY name",
        "SELECT Highschooler.name, COUNT(Friend.friend_id) AS num_of_friends FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name ORDER BY Highschooler.name",
        "SELECT h.name AS StudentName, COUNT(f.friend_id) AS FriendsCount FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.name ORDER BY h.name ASC"
      ]
    ]
  },
  {
    "id": 885,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT H.name, COUNT(F.friend_id) AS num_friends FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.name",
        "SELECT name, COUNT(friend_id) AS friends_count FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY name",
        "SELECT Highschooler.name, COUNT(*) AS total_friends FROM Highschooler INNER JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name",
        "SELECT h.name, COUNT(f.friend_id) FROM Highschooler h, Friend f WHERE h.ID = f.student_id GROUP BY h.name",
        "SELECT name, COUNT(friend_id) FROM Highschooler, Friend WHERE Highschooler.ID = Friend.student_id GROUP BY name",
        "SELECT Highschooler.name AS student_name, COUNT(Friend.friend_id) AS friend_count FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name",
        "SELECT h.name, (SELECT COUNT(*) FROM Friend f WHERE f.student_id = h.ID) AS num_of_friends FROM Highschooler h",
        "SELECT name, (SELECT COUNT(friend_id) FROM Friend WHERE student_id = Highschooler.ID) AS number_of_friends FROM Highschooler",
        "SELECT Highschooler.name, COUNT(DISTINCT Friend.friend_id) AS friends_initiated FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name",
        "SELECT h.name, COUNT(f.friend_id) AS friends_started FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.name ORDER BY h.name"
      ]
    ]
  },
  {
    "id": 886,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT H.name FROM Highschooler H WHERE H.ID = (SELECT F.student_id FROM Friend F GROUP BY F.student_id UNION ALL SELECT F.friend_id FROM Friend F GROUP BY F.friend_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id UNION ALL SELECT friend_id FROM Friend GROUP BY friend_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT H.name FROM Highschooler H JOIN (SELECT student_id AS ID FROM Friend UNION ALL SELECT friend_id AS ID FROM Friend) AS F ON H.ID = F.ID GROUP BY H.ID ORDER BY COUNT(F.ID) DESC LIMIT 1",
        "SELECT TOP 1 H.name FROM Highschooler H INNER JOIN (SELECT student_id FROM Friend UNION ALL SELECT friend_id FROM Friend) AS F ON H.ID = F.student_id GROUP BY H.name ORDER BY COUNT(*) DESC",
        "SELECT H.name FROM Highschooler H WHERE H.ID = (SELECT TOP 1 ID FROM (SELECT student_id AS ID FROM Friend UNION ALL SELECT friend_id AS ID FROM Friend) AS F GROUP BY ID ORDER BY COUNT(*) DESC)",
        "SELECT name FROM Highschooler WHERE ID = (SELECT ID FROM (SELECT student_id AS ID FROM Friend UNION ALL SELECT friend_id AS ID FROM Friend) F GROUP BY ID ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT H.name FROM Highschooler H JOIN (SELECT student_id FROM Friend UNION ALL SELECT friend_id FROM Friend) F ON H.ID = F.student_id GROUP BY H.name ORDER BY COUNT(*) DESC FETCH FIRST 1 ROW ONLY",
        "SELECT H.name FROM Highschooler H WHERE H.ID = (SELECT ID FROM (SELECT student_id AS ID, COUNT(*) AS cnt FROM Friend GROUP BY student_id UNION ALL SELECT friend_id AS ID, COUNT(*) AS cnt FROM Friend GROUP BY friend_id) F GROUP BY ID ORDER BY SUM(cnt) DESC LIMIT 1)",
        "SELECT H.name FROM (SELECT student_id AS ID FROM Friend UNION ALL SELECT friend_id AS ID FROM Friend) F JOIN Highschooler H ON F.ID = H.ID GROUP BY H.ID, H.name ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT H.name FROM Highschooler H WHERE H.ID = (SELECT ID FROM (SELECT student_id AS ID FROM Friend UNION ALL SELECT friend_id AS ID FROM Friend) F GROUP BY ID ORDER BY COUNT(*) DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 887,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT H.name FROM Highschooler H WHERE H.ID IN (SELECT F.student_id FROM Friend F GROUP BY F.student_id HAVING COUNT(F.friend_id) = (SELECT MAX(num_friends) FROM (SELECT COUNT(friend_id) AS num_friends FROM Friend GROUP BY student_id) AS subquery))",
        "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(friend_id) = (SELECT MAX(num_friends) FROM (SELECT student_id, COUNT(friend_id) AS num_friends FROM Friend GROUP BY student_id) AS counts))",
        "SELECT H.name FROM Highschooler H JOIN (SELECT student_id, COUNT(friend_id) AS num_friends FROM Friend GROUP BY student_id) F ON H.ID = F.student_id WHERE F.num_friends = (SELECT MAX(num_friends) FROM (SELECT COUNT(friend_id) AS num_friends FROM Friend GROUP BY student_id) AS subquery)",
        "SELECT H.name FROM Highschooler H WHERE H.ID IN (SELECT student_id FROM (SELECT student_id, COUNT(friend_id) AS num_friends FROM Friend GROUP BY student_id HAVING num_friends = (SELECT MAX(num_friends) FROM (SELECT COUNT(friend_id) AS num_friends FROM Friend GROUP BY student_id) AS subquery)) AS F)",
        "SELECT name FROM Highschooler WHERE ID = (SELECT student_id FROM Friend GROUP BY student_id ORDER BY COUNT(friend_id) DESC LIMIT 1)",
        "SELECT H.name FROM Highschooler H WHERE EXISTS (SELECT 1 FROM Friend F WHERE H.ID = F.student_id GROUP BY F.student_id HAVING COUNT(F.friend_id) = (SELECT MAX(num_friends) FROM (SELECT COUNT(friend_id) AS num_friends FROM Friend GROUP BY student_id) AS subquery))",
        "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) FROM Friend GROUP BY student_id) AS counts))",
        "SELECT H.name FROM Highschooler H INNER JOIN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(friend_id) = (SELECT MAX(COUNT(friend_id)) FROM Friend GROUP BY student_id)) F ON H.ID = F.student_id",
        "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(friend_id) >= ALL (SELECT COUNT(friend_id) FROM Friend GROUP BY student_id))",
        "SELECT H.name FROM Highschooler H WHERE H.ID IN (SELECT F.student_id FROM Friend F GROUP BY F.student_id HAVING COUNT(F.friend_id) = (SELECT MAX(num_friends) FROM (SELECT student_id, COUNT(friend_id) AS num_friends FROM Friend GROUP BY student_id) F))"
      ]
    ]
  },
  {
    "id": 888,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT H.name FROM Highschooler H WHERE (SELECT COUNT(*) FROM Friend F WHERE F.student_id = H.ID OR F.friend_id = H.ID) >= 3",
        "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(friend_id) + (SELECT COUNT(*) FROM Friend WHERE friend_id = student_id) >= 3)",
        "SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id OR H.ID = F.friend_id GROUP BY H.ID HAVING COUNT(DISTINCT F.student_id) + COUNT(DISTINCT F.friend_id) >= 6",
        "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend UNION ALL SELECT friend_id FROM Friend GROUP BY student_id HAVING COUNT(*) >= 3)",
        "SELECT DISTINCT H.name FROM Highschooler H, Friend F WHERE H.ID = F.student_id OR H.ID = F.friend_id GROUP BY H.ID HAVING COUNT(*) >= 3",
        "SELECT H.name FROM Highschooler H WHERE EXISTS (SELECT 1 FROM Friend F WHERE F.student_id = H.ID OR F.friend_id = H.ID GROUP BY F.student_id, F.friend_id HAVING COUNT(*) >= 3)",
        "SELECT H.name FROM Highschooler H INNER JOIN (SELECT student_id FROM Friend UNION ALL SELECT friend_id FROM Friend) AS F ON H.ID = F.student_id GROUP BY H.ID HAVING COUNT(*) >= 3",
        "SELECT H.name FROM Highschooler H WHERE (SELECT COUNT(*) FROM Friend WHERE student_id = H.ID) + (SELECT COUNT(*) FROM Friend WHERE friend_id = H.ID) >= 3",
        "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend GROUP BY student_id HAVING COUNT(*) >= 3)",
        "SELECT H.name FROM Highschooler H WHERE (SELECT COUNT(DISTINCT student_id) + COUNT(DISTINCT friend_id) FROM Friend WHERE student_id = H.ID OR friend_id = H.ID) >= 3"
      ]
    ]
  },
  {
    "id": 889,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT H.name FROM Highschooler H WHERE (SELECT COUNT(*) FROM Friend F WHERE F.student_id = H.ID OR F.friend_id = H.ID) >= 3",
        "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) >= 3 UNION SELECT friend_id FROM Friend GROUP BY friend_id HAVING COUNT(*) >= 3)",
        "SELECT DISTINCT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id OR H.ID = F.friend_id GROUP BY H.ID HAVING COUNT(H.ID) >= 3",
        "SELECT H.name FROM Highschooler H WHERE H.ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(friend_id) >= 3 UNION ALL SELECT friend_id FROM Friend GROUP BY friend_id HAVING COUNT(student_id) >= 3)",
        "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend UNION ALL SELECT friend_id FROM Friend) GROUP BY ID HAVING COUNT(*) >= 3",
        "SELECT H.name FROM Highschooler H INNER JOIN (SELECT student_id FROM Friend UNION ALL SELECT friend_id FROM Friend) AS F ON H.ID = F.student_id GROUP BY H.ID HAVING COUNT(*) >= 3",
        "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend HAVING COUNT(*) >= 3 GROUP BY student_id, friend_id)",
        "SELECT H.name FROM Highschooler H WHERE EXISTS (SELECT 1 FROM Friend F WHERE F.student_id = H.ID OR F.friend_id = H.ID GROUP BY F.student_id, F.friend_id HAVING COUNT(*) >= 3)",
        "SELECT H.name FROM Highschooler H JOIN (SELECT student_id FROM Friend UNION ALL SELECT friend_id FROM Friend) F ON H.ID = F.student_id GROUP BY H.ID HAVING COUNT(F.student_id) >= 3",
        "SELECT H.name FROM Highschooler H WHERE (SELECT COUNT(*) FROM Friend WHERE student_id = H.ID OR friend_id = H.ID) >= 3"
      ]
    ]
  },
  {
    "id": 890,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT H1.ID, H2.name FROM Highschooler H1 JOIN Friend F ON H1.ID = F.student_id JOIN Highschooler H2 ON F.friend_id = H2.ID WHERE H1.name = 'Kyle'",
        "SELECT student.ID, friend.name FROM Highschooler AS student INNER JOIN Friend ON student.ID = Friend.student_id INNER JOIN Highschooler AS friend ON Friend.friend_id = friend.ID WHERE student.name = 'Kyle'",
        "SELECT hs1.ID AS StudentID, hs2.name AS FriendName FROM Highschooler hs1, Friend f, Highschooler hs2 WHERE hs1.ID = f.student_id AND f.friend_id = hs2.ID AND hs1.name = 'Kyle'",
        "SELECT a.ID, b.name FROM Highschooler a, Friend f, Highschooler b WHERE a.ID = f.student_id AND f.friend_id = b.ID AND a.name = 'Kyle'",
        "SELECT Highschooler.ID, Friends.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id JOIN Highschooler AS Friends ON Friend.friend_id = Friends.ID WHERE Highschooler.name = 'Kyle'",
        "SELECT h1.ID, h2.name FROM Highschooler h1 JOIN Friend ON h1.ID = Friend.student_id JOIN Highschooler h2 ON Friend.friend_id = h2.ID WHERE h1.name = 'Kyle' ORDER BY h2.name",
        "SELECT `Student ID`, `Friend Name` FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id JOIN Highschooler AS Friends ON Friend.friend_id = Friends.ID WHERE Highschooler.name = 'Kyle'",
        "SELECT DISTINCT h1.ID, h2.name FROM Highschooler h1 INNER JOIN Friend f ON h1.ID = f.student_id INNER JOIN Highschooler h2 ON f.friend_id = h2.ID WHERE h1.name = 'Kyle'",
        "SELECT Highschooler.ID AS 'Student ID', Friend_Highschooler.name AS 'Friend Name' FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id JOIN Highschooler AS Friend_Highschooler ON Friend.friend_id = Friend_Highschooler.ID WHERE Highschooler.name = 'Kyle'",
        "SELECT h.ID, f.name FROM Highschooler h JOIN Friend fr ON h.ID = fr.student_id JOIN Highschooler f ON fr.friend_id = f.ID WHERE h.name = 'Kyle' ORDER BY f.name ASC"
      ]
    ]
  },
  {
    "id": 891,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT H1.ID, H2.name FROM Highschooler H1 JOIN Friend F ON H1.ID = F.student_id JOIN Highschooler H2 ON F.friend_id = H2.ID WHERE H1.name = 'Kyle'",
        "SELECT student.ID AS StudentID, friend.name AS FriendName FROM Highschooler student INNER JOIN Friend ON student.ID = Friend.student_id INNER JOIN Highschooler friend ON Friend.friend_id = friend.ID WHERE student.name = 'Kyle'",
        "SELECT a.ID, b.name FROM Highschooler a, Friend f, Highschooler b WHERE a.ID = f.student_id AND f.friend_id = b.ID AND a.name = 'Kyle'",
        "SELECT hs1.ID AS KyleID, hs2.name AS FriendName FROM Highschooler hs1, Friend fr, Highschooler hs2 WHERE hs1.ID = fr.student_id AND fr.friend_id = hs2.ID AND hs1.name = 'Kyle' ORDER BY hs1.ID",
        "SELECT hs.ID, friend.name FROM Highschooler hs JOIN Friend ON hs.ID = Friend.student_id JOIN Highschooler friend ON Friend.friend_id = friend.ID WHERE hs.name = 'Kyle'",
        "SELECT DISTINCT hs.ID, fr.name FROM Highschooler hs JOIN Friend ON hs.ID = Friend.student_id JOIN Highschooler fr ON Friend.friend_id = fr.ID WHERE hs.name = 'Kyle'",
        "SELECT kyle.ID, friends.name FROM Highschooler kyle JOIN Friend ON kyle.ID = Friend.student_id JOIN Highschooler friends ON Friend.friend_id = friends.ID WHERE kyle.name = 'Kyle'",
        "SELECT k.ID, f.name FROM Highschooler k, Highschooler f, Friend fr WHERE k.ID = fr.student_id AND fr.friend_id = f.ID AND k.name = 'Kyle'",
        "SELECT student_id AS KyleID, friend.name AS FriendName FROM Friend JOIN Highschooler student ON student.ID = Friend.student_id JOIN Highschooler friend ON Friend.friend_id = friend.ID WHERE student.name = 'Kyle'",
        "SELECT Highschooler.ID, Friends.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id JOIN Highschooler AS Friends ON Friend.friend_id = Friends.ID WHERE Highschooler.name = 'Kyle'"
      ]
    ]
  },
  {
    "id": 892,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT H.ID, COUNT(F.friend_id) AS num_friends FROM Highschooler H JOIN Friend F ON H.ID = F.student_id WHERE H.name = 'Kyle' GROUP BY H.ID",
        "SELECT highschooler.ID, COUNT(friend.friend_id) AS friends_count FROM highschooler INNER JOIN friend ON highschooler.ID = friend.student_id WHERE highschooler.name = 'Kyle' GROUP BY highschooler.ID",
        "SELECT hs.ID, COUNT(fr.friend_id) AS total_friends FROM Highschooler hs, Friend fr WHERE hs.ID = fr.student_id AND hs.name = 'Kyle' GROUP BY hs.ID",
        "SELECT student_id, COUNT(*) AS number_of_friends FROM Friend WHERE student_id IN (SELECT ID FROM Highschooler WHERE name = 'Kyle') GROUP BY student_id",
        "SELECT a.ID, COUNT(b.friend_id) AS friend_count FROM Highschooler a LEFT JOIN Friend b ON a.ID = b.student_id WHERE a.name = 'Kyle' GROUP BY a.ID",
        "SELECT ID, (SELECT COUNT(*) FROM Friend WHERE student_id = Highschooler.ID) AS friends FROM Highschooler WHERE name = 'Kyle'",
        "SELECT Highschooler.ID, IFNULL(friend_count, 0) AS number_of_friends FROM Highschooler LEFT JOIN (SELECT student_id, COUNT(*) AS friend_count FROM Friend GROUP BY student_id) F ON Highschooler.ID = F.student_id WHERE Highschooler.name = 'Kyle'",
        "SELECT ID, COUNT(Friend.friend_id) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.name = 'Kyle' GROUP BY Highschooler.ID",
        "SELECT Highschooler.ID, COUNT(DISTINCT Friend.friend_id) AS friends FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.name = 'Kyle' GROUP BY Highschooler.ID",
        "SELECT h.ID, COUNT(f.friend_id) FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id WHERE h.name = 'Kyle' GROUP BY h.ID"
      ]
    ]
  },
  {
    "id": 893,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT H.ID, COUNT(F.friend_id) AS num_friends FROM Highschooler H JOIN Friend F ON H.ID = F.student_id WHERE H.name = 'Kyle' GROUP BY H.ID",
        "SELECT Highschooler.ID, COUNT(Friend.friend_id) AS total_friends FROM Highschooler INNER JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.name = 'Kyle' GROUP BY Highschooler.ID",
        "SELECT student_id, COUNT(*) AS friend_count FROM Friend WHERE student_id IN (SELECT ID FROM Highschooler WHERE name = 'Kyle') GROUP BY student_id",
        "SELECT h.ID, COUNT(f.friend_id) AS friends_count FROM Highschooler h, Friend f WHERE h.ID = f.student_id AND h.name = 'Kyle' GROUP BY h.ID",
        "SELECT h.ID AS StudentID, COUNT(f.friend_id) AS NumberOfFriends FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id WHERE h.name = 'Kyle' GROUP BY h.ID",
        "SELECT ID, (SELECT COUNT(*) FROM Friend WHERE student_id = Highschooler.ID) AS Friends FROM Highschooler WHERE name = 'Kyle'",
        "SELECT h.ID, IFNULL(f.friend_count, 0) AS total_friends FROM Highschooler h LEFT JOIN (SELECT student_id, COUNT(*) AS friend_count FROM Friend GROUP BY student_id) f ON h.ID = f.student_id WHERE h.name = 'Kyle'",
        "SELECT Highschooler.ID, COUNT(DISTINCT Friend.friend_id) AS friend_total FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.name = 'Kyle' GROUP BY Highschooler.ID",
        "SELECT h.ID, COUNT(f.friend_id) FROM Highschooler h JOIN Friend f ON h.ID = f.student_id WHERE h.name = 'Kyle' GROUP BY h.ID ORDER BY h.ID",
        "SELECT student_id AS KyleID, COUNT(friend_id) AS TotalFriends FROM Friend WHERE student_id IN (SELECT ID FROM Highschooler WHERE name = 'Kyle') GROUP BY student_id"
      ]
    ]
  },
  {
    "id": 894,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
        "SELECT h.ID FROM Highschooler h WHERE NOT EXISTS (SELECT 1 FROM Friend f WHERE f.student_id = h.ID)",
        "SELECT Highschooler.ID FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.student_id IS NULL",
        "SELECT ID FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "SELECT h.ID FROM Highschooler h WHERE h.ID NOT IN (SELECT f.student_id FROM Friend f)",
        "SELECT DISTINCT ID FROM Highschooler WHERE ID NOT IN (SELECT DISTINCT student_id FROM Friend)",
        "SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT Friend.student_id FROM Friend)",
        "SELECT ID FROM Highschooler h WHERE NOT EXISTS (SELECT NULL FROM Friend f WHERE f.student_id = h.ID)",
        "SELECT h.ID FROM Highschooler h WHERE h.ID NOT IN (SELECT f.student_id FROM Friend f WHERE f.student_id IS NOT NULL)",
        "SELECT Highschooler.ID FROM Highschooler LEFT OUTER JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.student_id IS NULL"
      ]
    ]
  },
  {
    "id": 895,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
        "SELECT h.ID FROM Highschooler h WHERE NOT EXISTS (SELECT 1 FROM Friend f WHERE f.student_id = h.ID)",
        "SELECT Highschooler.ID FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.student_id IS NULL",
        "SELECT ID FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "SELECT h.ID FROM Highschooler h WHERE h.ID NOT IN (SELECT f.student_id FROM Friend f)",
        "SELECT DISTINCT ID FROM Highschooler WHERE ID NOT IN (SELECT DISTINCT student_id FROM Friend)",
        "SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT Friend.student_id FROM Friend)",
        "SELECT ID FROM Highschooler h WHERE NOT EXISTS (SELECT NULL FROM Friend f WHERE f.student_id = h.ID)",
        "SELECT h.ID FROM Highschooler h LEFT OUTER JOIN Friend f ON h.ID = f.student_id WHERE f.student_id IS NULL",
        "SELECT Highschooler.ID FROM Highschooler WHERE NOT EXISTS (SELECT * FROM Friend WHERE Friend.student_id = Highschooler.ID)"
      ]
    ]
  },
  {
    "id": 896,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)",
        "SELECT H.name FROM Highschooler H WHERE H.ID NOT IN (SELECT F.student_id FROM Friend F UNION SELECT F.friend_id FROM Friend F)",
        "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT DISTINCT student_id FROM Friend UNION ALL SELECT DISTINCT friend_id FROM Friend)",
        "SELECT Highschooler.name FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id OR Highschooler.ID = Friend.friend_id WHERE Friend.student_id IS NULL AND Friend.friend_id IS NULL",
        "SELECT name FROM Highschooler WHERE NOT EXISTS (SELECT 1 FROM Friend WHERE Friend.student_id = Highschooler.ID OR Friend.friend_id = Highschooler.ID)",
        "SELECT H.name FROM Highschooler H LEFT OUTER JOIN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend) F ON H.ID = F.student_id WHERE F.student_id IS NULL",
        "SELECT name FROM Highschooler EXCEPT SELECT name FROM Highschooler, Friend WHERE Highschooler.ID = Friend.student_id OR Highschooler.ID = Friend.friend_id",
        "SELECT H.name FROM Highschooler H WHERE NOT EXISTS (SELECT NULL FROM Friend F WHERE F.student_id = H.ID OR F.friend_id = H.ID)",
        "SELECT DISTINCT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)",
        "SELECT name FROM Highschooler H WHERE H.ID NOT IN (SELECT F.student_id FROM Friend F UNION SELECT F.friend_id FROM Friend F)"
      ]
    ]
  },
  {
    "id": 897,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)",
        "SELECT H.name FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id OR H.ID = F.friend_id WHERE F.student_id IS NULL AND F.friend_id IS NULL",
        "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend) AND ID NOT IN (SELECT friend_id FROM Friend)",
        "SELECT H.name FROM Highschooler H WHERE NOT EXISTS (SELECT 1 FROM Friend F WHERE F.student_id = H.ID OR F.friend_id = H.ID)",
        "SELECT name FROM Highschooler EXCEPT SELECT name FROM Highschooler, Friend WHERE Highschooler.ID = Friend.student_id OR Highschooler.ID = Friend.friend_id",
        "SELECT DISTINCT name FROM Highschooler WHERE ID NOT IN (SELECT DISTINCT student_id FROM Friend) AND ID NOT IN (SELECT DISTINCT friend_id FROM Friend)",
        "SELECT name FROM Highschooler H WHERE H.ID NOT IN (SELECT F.student_id FROM Friend F UNION ALL SELECT F.friend_id FROM Friend F)",
        "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION ALL SELECT friend_id FROM Friend)",
        "SELECT H.name FROM Highschooler H WHERE H.ID NOT IN (SELECT F.student_id FROM Friend F) AND H.ID NOT IN (SELECT F.friend_id FROM Friend F)",
        "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend) UNION SELECT name FROM Highschooler WHERE ID NOT IN (SELECT friend_id FROM Friend)"
      ]
    ]
  },
  {
    "id": 898,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT student_id FROM Friend WHERE student_id IN (SELECT liked_id FROM Likes)",
        "SELECT F.student_id FROM Friend F JOIN Likes L ON F.student_id = L.liked_id",
        "SELECT DISTINCT student_id FROM Friend WHERE student_id IN (SELECT liked_id FROM Likes)",
        "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "SELECT F.student_id FROM Friend F INNER JOIN Likes L ON F.student_id = L.liked_id",
        "SELECT student_id FROM Friend F WHERE EXISTS (SELECT 1 FROM Likes L WHERE L.liked_id = F.student_id)",
        "SELECT student_id FROM Friend WHERE student_id IN (SELECT DISTINCT liked_id FROM Likes)",
        "SELECT DISTINCT F.student_id FROM Friend F, Likes L WHERE F.student_id = L.liked_id",
        "SELECT student_id FROM (SELECT student_id FROM Friend UNION SELECT liked_id FROM Likes) AS SubQuery WHERE student_id IN (SELECT liked_id FROM Likes)",
        "SELECT student_id FROM Friend WHERE student_id IN (SELECT liked_id FROM Likes GROUP BY liked_id HAVING COUNT(*) > 0)"
      ]
    ]
  },
  {
    "id": 899,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT ID FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend) AND ID IN (SELECT liked_id FROM Likes)",
        "SELECT DISTINCT H.ID FROM Highschooler H JOIN Friend F ON H.ID = F.student_id JOIN Likes L ON H.ID = L.liked_id",
        "SELECT H.ID FROM Highschooler H WHERE EXISTS (SELECT 1 FROM Friend F WHERE F.student_id = H.ID) AND EXISTS (SELECT 1 FROM Likes L WHERE L.liked_id = H.ID)",
        "SELECT H.ID FROM Highschooler H INNER JOIN Friend F ON H.ID = F.student_id INNER JOIN Likes L ON H.ID = L.liked_id",
        "SELECT H.ID FROM Highschooler H WHERE H.ID IN (SELECT F.student_id FROM Friend F) INTERSECT SELECT H.ID FROM Highschooler H WHERE H.ID IN (SELECT L.liked_id FROM Likes L)",
        "SELECT student_id FROM Friend WHERE student_id IN (SELECT liked_id FROM Likes)",
        "SELECT H.ID FROM Highschooler H, Friend F, Likes L WHERE H.ID = F.student_id AND H.ID = L.liked_id",
        "SELECT DISTINCT student_id FROM Friend F WHERE EXISTS (SELECT 1 FROM Likes L WHERE L.liked_id = F.student_id)",
        "SELECT H.ID FROM Highschooler H WHERE H.ID IN (SELECT F.student_id FROM Friend F) AND H.ID IN (SELECT L.liked_id FROM Likes L)",
        "SELECT DISTINCT H.ID FROM Highschooler H WHERE H.ID IN (SELECT student_id FROM Friend) AND H.ID IN (SELECT liked_id FROM Likes)"
      ]
    ]
  },
  {
    "id": 900,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT H.name FROM Highschooler H WHERE H.ID IN (SELECT F.student_id FROM Friend F) AND H.ID IN (SELECT L.liked_id FROM Likes L)",
        "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend) INTERSECT SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes)",
        "SELECT DISTINCT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend) AND ID IN (SELECT liked_id FROM Likes)",
        "SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id JOIN Likes L ON H.ID = L.liked_id",
        "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE student_id IN (SELECT liked_id FROM Likes))",
        "SELECT name FROM Highschooler WHERE EXISTS (SELECT 1 FROM Friend WHERE student_id = Highschooler.ID) AND EXISTS (SELECT 1 FROM Likes WHERE liked_id = Highschooler.ID)",
        "SELECT H.name FROM Highschooler H WHERE EXISTS (SELECT * FROM Friend F WHERE F.student_id = H.ID) AND EXISTS (SELECT * FROM Likes L WHERE L.liked_id = H.ID)",
        "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend UNION SELECT liked_id FROM Likes)",
        "SELECT DISTINCT H.name FROM Highschooler H, Friend F, Likes L WHERE H.ID = F.student_id AND H.ID = L.liked_id",
        "SELECT name FROM Highschooler WHERE ID IN (SELECT F.student_id FROM Friend F, Likes L WHERE F.student_id = L.liked_id)"
      ]
    ]
  },
  {
    "id": 901,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT H.name FROM Highschooler H WHERE H.ID IN (SELECT F.student_id FROM Friend F) AND H.ID IN (SELECT L.liked_id FROM Likes L)",
        "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend) INTERSECT SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes)",
        "SELECT DISTINCT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id JOIN Likes L ON H.ID = L.liked_id",
        "SELECT H.name FROM Highschooler H WHERE EXISTS (SELECT 1 FROM Friend F WHERE F.student_id = H.ID) AND EXISTS (SELECT 1 FROM Likes L WHERE L.liked_id = H.ID)",
        "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend UNION SELECT liked_id FROM Likes)",
        "SELECT H.name FROM Highschooler H INNER JOIN Friend F ON H.ID = F.student_id INNER JOIN Likes L ON H.ID = L.liked_id",
        "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE student_id IN (SELECT liked_id FROM Likes))",
        "SELECT H.name FROM Highschooler H, Friend F, Likes L WHERE H.ID = F.student_id AND H.ID = L.liked_id",
        "SELECT DISTINCT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend) AND ID IN (SELECT liked_id FROM Likes)",
        "SELECT name FROM Highschooler WHERE ID IN (SELECT F.student_id FROM Friend F WHERE F.student_id IN (SELECT L.liked_id FROM Likes L))"
      ]
    ]
  },
  {
    "id": 902,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT ID, (SELECT COUNT(*) FROM Likes WHERE student_id = H.ID) + (SELECT COUNT(*) FROM Likes WHERE liked_id = H.ID) AS total_likes FROM Highschooler H",
        "SELECT H.ID, COALESCE(LG.likes_given, 0) + COALESCE(LR.likes_received, 0) AS total_likes FROM Highschooler H LEFT JOIN (SELECT student_id, COUNT(*) AS likes_given FROM Likes GROUP BY student_id) LG ON H.ID = LG.student_id LEFT JOIN (SELECT liked_id, COUNT(*) AS likes_received FROM Likes GROUP BY liked_id) LR ON H.ID = LR.liked_id",
        "SELECT H.ID, IFNULL(LG.likes_given, 0) + IFNULL(LR.likes_received, 0) AS total_likes FROM Highschooler H LEFT JOIN (SELECT student_id, COUNT(*) AS likes_given FROM Likes GROUP BY student_id) LG ON H.ID = LG.student_id LEFT JOIN (SELECT liked_id, COUNT(*) AS likes_received FROM Likes GROUP BY liked_id) LR ON H.ID = LR.liked_id",
        "SELECT H.ID, (SELECT COUNT(*) FROM Likes WHERE student_id = H.ID) AS likes_given, (SELECT COUNT(*) FROM Likes WHERE liked_id = H.ID) AS likes_received FROM Highschooler H",
        "SELECT H.ID, SUM(CASE WHEN L.student_id = H.ID THEN 1 ELSE 0 END) + SUM(CASE WHEN L.liked_id = H.ID THEN 1 ELSE 0 END) AS total_likes FROM Highschooler H LEFT JOIN Likes L ON H.ID = L.student_id OR H.ID = L.liked_id GROUP BY H.ID",
        "SELECT H.ID, COUNT(DISTINCT L1.student_id) + COUNT(DISTINCT L2.liked_id) AS total_likes FROM Highschooler H LEFT JOIN Likes L1 ON H.ID = L1.student_id LEFT JOIN Likes L2 ON H.ID = L2.liked_id GROUP BY H.ID",
        "SELECT H.ID, COUNT(L.student_id) AS likes_given, COUNT(L.liked_id) AS likes_received FROM Highschooler H LEFT JOIN Likes L ON H.ID = L.student_id OR H.ID = L.liked_id GROUP BY H.ID",
        "SELECT H.ID, (SELECT COUNT(*) FROM Likes L WHERE L.student_id = H.ID OR L.liked_id = H.ID) AS total_likes FROM Highschooler H",
        "SELECT H.ID, COUNT(L.student_id) + COUNT(L.liked_id) AS total_likes FROM Highschooler H LEFT JOIN Likes L ON H.ID = L.student_id OR H.ID = L.liked_id GROUP BY H.ID",
        "SELECT H.ID, COUNT(*) AS total_likes FROM Highschooler H, Likes L WHERE H.ID = L.student_id OR H.ID = L.liked_id GROUP BY H.ID"
      ]
    ]
  },
  {
    "id": 903,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT H.ID, COUNT(DISTINCT L1.student_id) AS likes_given, COUNT(DISTINCT L2.liked_id) AS likes_received FROM Highschooler H LEFT JOIN Likes L1 ON H.ID = L1.student_id LEFT JOIN Likes L2 ON H.ID = L2.liked_id GROUP BY H.ID",
        "SELECT Highschooler.ID, (SELECT COUNT(*) FROM Likes WHERE student_id = Highschooler.ID) AS likes_given, (SELECT COUNT(*) FROM Likes WHERE liked_id = Highschooler.ID) AS likes_received FROM Highschooler",
        "SELECT ID, SUM(CASE WHEN student_id = ID THEN 1 ELSE 0 END) AS likes_given, SUM(CASE WHEN liked_id = ID THEN 1 ELSE 0 END) AS likes_received FROM Highschooler LEFT JOIN Likes ON ID = student_id OR ID = liked_id GROUP BY ID",
        "SELECT H.ID, COUNT(L1.student_id) AS likes_given, COUNT(L2.liked_id) AS likes_received FROM Highschooler H LEFT JOIN Likes L1 ON H.ID = L1.student_id LEFT JOIN Likes L2 ON H.ID = L2.liked_id WHERE L1.student_id IS NOT NULL OR L2.liked_id IS NOT NULL GROUP BY H.ID",
        "SELECT H.ID, COUNT(L.student_id) AS likes_given, COUNT(L.liked_id) AS likes_received FROM Highschooler H LEFT JOIN Likes L ON H.ID = L.student_id OR H.ID = L.liked_id GROUP BY H.ID",
        "SELECT ID, (SELECT COUNT(*) FROM Likes WHERE student_id = ID) AS likes_given, (SELECT COUNT(*) FROM Likes WHERE liked_id = ID) AS likes_received FROM Highschooler ORDER BY ID",
        "SELECT H.ID, IFNULL(LG.likes_given, 0) AS likes_given, IFNULL(LR.likes_received, 0) AS likes_received FROM Highschooler H LEFT JOIN (SELECT student_id, COUNT(*) AS likes_given FROM Likes GROUP BY student_id) LG ON H.ID = LG.student_id LEFT JOIN (SELECT liked_id, COUNT(*) AS likes_received FROM Likes GROUP BY liked_id) LR ON H.ID = LR.liked_id",
        "SELECT H.ID, COUNT(DISTINCT L.student_id) AS likes_given, COUNT(DISTINCT L.liked_id) AS likes_received FROM Highschooler H LEFT JOIN Likes L ON H.ID = L.student_id OR H.ID = L.liked_id GROUP BY H.ID HAVING COUNT(L.student_id) > 0 OR COUNT(L.liked_id) > 0",
        "SELECT H.ID, LG.likes_given, LR.likes_received FROM Highschooler H LEFT JOIN (SELECT student_id, COUNT(*) AS likes_given FROM Likes GROUP BY student_id) LG ON H.ID = LG.student_id LEFT JOIN (SELECT liked_id, COUNT(*) AS likes_received FROM Likes GROUP BY liked_id) LR ON H.ID = LR.liked_id",
        "SELECT H.ID, COUNT(L.student_id) AS likes_given, COUNT(L.liked_id) AS likes_received FROM Highschooler H JOIN Likes L ON H.ID = L.student_id OR H.ID = L.liked_id GROUP BY H.ID"
      ]
    ]
  },
  {
    "id": 904,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT H.name, COUNT(DISTINCT L1.student_id) AS likes_given, COUNT(DISTINCT L2.liked_id) AS likes_received FROM Highschooler H LEFT JOIN Likes L1 ON H.ID = L1.student_id LEFT JOIN Likes L2 ON H.ID = L2.liked_id GROUP BY H.name",
        "SELECT H.name, (SELECT COUNT(*) FROM Likes WHERE student_id = H.ID) AS likes_given, (SELECT COUNT(*) FROM Likes WHERE liked_id = H.ID) AS likes_received FROM Highschooler H",
        "SELECT name, SUM(likes_given) AS total_likes_given, SUM(likes_received) AS total_likes_received FROM (SELECT H.name, IF(L.student_id = H.ID, 1, 0) AS likes_given, IF(L.liked_id = H.ID, 1, 0) AS likes_received FROM Highschooler H, Likes L) AS subquery GROUP BY name",
        "SELECT H.name, COUNT(L1.student_id) AS likes_given, COUNT(L2.liked_id) AS likes_received FROM Highschooler H JOIN Likes L1 ON H.ID = L1.student_id JOIN Likes L2 ON H.ID = L2.liked_id GROUP BY H.name",
        "SELECT H.name, COUNT(L1.student_id) AS likes_given, COUNT(L2.liked_id) AS likes_received FROM Highschooler H LEFT JOIN Likes L1 ON H.ID = L1.student_id LEFT JOIN Likes L2 ON H.ID = L2.liked_id WHERE L1.student_id IS NOT NULL OR L2.liked_id IS NOT NULL GROUP BY H.name",
        "SELECT H.name, (SELECT COUNT(*) FROM Likes L WHERE L.student_id = H.ID) AS likes_given, (SELECT COUNT(*) FROM Likes L WHERE L.liked_id = H.ID) AS likes_received FROM Highschooler H ORDER BY H.name",
        "SELECT H.name, G.likes_given, R.likes_received FROM Highschooler H LEFT JOIN (SELECT student_id, COUNT(*) AS likes_given FROM Likes GROUP BY student_id) G ON H.ID = G.student_id LEFT JOIN (SELECT liked_id, COUNT(*) AS likes_received FROM Likes GROUP BY liked_id) R ON H.ID = R.liked_id",
        "SELECT H.name, COUNT(L.student_id) AS likes_given, COUNT(L.liked_id) AS likes_received FROM Highschooler H, Likes L WHERE H.ID = L.student_id OR H.ID = L.liked_id GROUP BY H.name",
        "SELECT H.name, COUNT(L1.student_id) AS likes_given, COUNT(L2.liked_id) AS likes_received FROM Highschooler H LEFT JOIN Likes L1 ON H.ID = L1.student_id LEFT JOIN Likes L2 ON H.ID = L2.liked_id GROUP BY H.name HAVING likes_given > 0 OR likes_received > 0",
        "SELECT H.name, COUNT(L.student_id) AS likes_given, COUNT(L.liked_id) AS likes_received FROM Highschooler H LEFT JOIN Likes L ON H.ID = L.student_id OR H.ID = L.liked_id GROUP BY H.name"
      ]
    ]
  },
  {
    "id": 905,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT H.name, COUNT(DISTINCT L1.liked_id) AS likes_given, COUNT(DISTINCT L2.student_id) AS likes_received FROM Highschooler H LEFT JOIN Likes L1 ON H.ID = L1.student_id LEFT JOIN Likes L2 ON H.ID = L2.liked_id GROUP BY H.name",
        "SELECT name, SUM(given) AS likes_given, SUM(received) AS likes_received FROM (SELECT H.name AS name, COUNT(L1.liked_id) AS given, 0 AS received FROM Highschooler H JOIN Likes L1 ON H.ID = L1.student_id GROUP BY H.name UNION ALL SELECT H.name, 0, COUNT(L2.student_id) FROM Highschooler H JOIN Likes L2 ON H.ID = L2.liked_id GROUP BY H.name) AS T GROUP BY name",
        "SELECT H.name, (SELECT COUNT(*) FROM Likes WHERE student_id = H.ID) AS likes_given, (SELECT COUNT(*) FROM Likes WHERE liked_id = H.ID) AS likes_received FROM Highschooler H",
        "SELECT H.name, COUNT(L1.liked_id) AS likes_given, COUNT(L2.student_id) AS likes_received FROM Highschooler H LEFT JOIN Likes L1 ON H.ID = L1.student_id LEFT JOIN Likes L2 ON H.ID = L2.liked_id GROUP BY H.ID, H.name",
        "SELECT H.name, COUNT(L1.liked_id) + COUNT(L2.student_id) AS total_likes FROM Highschooler H LEFT JOIN Likes L1 ON H.ID = L1.student_id LEFT JOIN Likes L2 ON H.ID = L2.liked_id GROUP BY H.name",
        "SELECT H.name, COUNT(L1.liked_id) AS likes_given, COUNT(L2.student_id) AS likes_received FROM Highschooler H, Likes L1, Likes L2 WHERE H.ID = L1.student_id AND H.ID = L2.liked_id GROUP BY H.name",
        "SELECT H.name, IFNULL(LG.likes_given, 0) AS likes_given, IFNULL(LR.likes_received, 0) AS likes_received FROM Highschooler H LEFT JOIN (SELECT student_id, COUNT(*) AS likes_given FROM Likes GROUP BY student_id) LG ON H.ID = LG.student_id LEFT JOIN (SELECT liked_id, COUNT(*) AS likes_received FROM Likes GROUP BY liked_id) LR ON H.ID = LR.liked_id",
        "SELECT H.name, G.likes_given, R.likes_received FROM Highschooler H LEFT JOIN (SELECT student_id, COUNT(*) AS likes_given FROM Likes GROUP BY student_id) G ON H.ID = G.student_id LEFT JOIN (SELECT liked_id, COUNT(*) AS likes_received FROM Likes GROUP BY liked_id) R ON H.ID = R.liked_id",
        "SELECT H.name, COALESCE(LG.likes_given, 0) AS likes_given, COALESCE(LR.likes_received, 0) AS likes_received FROM Highschooler H LEFT JOIN (SELECT student_id, COUNT(liked_id) AS likes_given FROM Likes GROUP BY student_id) LG ON H.ID = LG.student_id LEFT JOIN (SELECT liked_id, COUNT(student_id) AS likes_received FROM Likes GROUP BY liked_id) LR ON H.ID = LR.liked_id",
        "SELECT H.name, COUNT(L1.liked_id) AS likes_given, COUNT(L2.student_id) AS likes_received FROM Highschooler H LEFT OUTER JOIN Likes L1 ON H.ID = L1.student_id LEFT OUTER JOIN Likes L2 ON H.ID = L2.liked_id GROUP BY H.name ORDER BY H.name"
      ]
    ]
  },
  {
    "id": 906,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT H.name FROM Highschooler H WHERE H.ID IN (SELECT L.liked_id FROM Likes L GROUP BY L.liked_id HAVING COUNT(*) = (SELECT MAX(like_count) FROM (SELECT COUNT(*) AS like_count FROM Likes GROUP BY liked_id) AS counts))",
        "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes GROUP BY liked_id HAVING COUNT(liked_id) = (SELECT MAX(like_count) FROM (SELECT COUNT(*) AS like_count FROM Likes GROUP BY liked_id) AS subquery))",
        "SELECT H.name FROM Highschooler H JOIN (SELECT liked_id, COUNT(*) AS like_count FROM Likes GROUP BY liked_id) AS L ON H.ID = L.liked_id WHERE L.like_count = (SELECT MAX(like_count) FROM (SELECT COUNT(*) AS like_count FROM Likes GROUP BY liked_id) AS subquery)",
        "SELECT name FROM Highschooler WHERE ID = (SELECT liked_id FROM Likes GROUP BY liked_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT H.name FROM Highschooler H, (SELECT liked_id FROM Likes GROUP BY liked_id HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM Likes GROUP BY liked_id)) AS MaxLikes WHERE H.ID = MaxLikes.liked_id",
        "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes GROUP BY liked_id HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Likes GROUP BY liked_id))",
        "SELECT H.name FROM Highschooler H INNER JOIN (SELECT liked_id FROM Likes GROUP BY liked_id HAVING COUNT(*) = (SELECT MAX(like_count) FROM (SELECT COUNT(*) AS like_count FROM Likes GROUP BY liked_id) AS subquery)) AS MostLiked ON H.ID = MostLiked.liked_id",
        "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes GROUP BY liked_id HAVING COUNT(liked_id) = (SELECT MAX(like_count) FROM (SELECT COUNT(liked_id) AS like_count FROM Likes GROUP BY liked_id) AS subquery))",
        "SELECT H.name FROM Highschooler H WHERE EXISTS (SELECT 1 FROM Likes L WHERE H.ID = L.liked_id GROUP BY L.liked_id HAVING COUNT(L.liked_id) = (SELECT MAX(like_count) FROM (SELECT COUNT(*) AS like_count FROM Likes GROUP BY liked_id) AS subquery))",
        "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes GROUP BY liked_id HAVING COUNT(*) = (SELECT MAX(like_count) FROM (SELECT COUNT(*) AS like_count FROM Likes GROUP BY liked_id) AS subquery))"
      ]
    ]
  },
  {
    "id": 907,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT H.name FROM Highschooler H JOIN Likes L ON H.ID = L.liked_id GROUP BY H.ID, H.name HAVING COUNT(*) = (SELECT MAX(like_count) FROM (SELECT COUNT(*) AS like_count FROM Likes GROUP BY liked_id) AS subquery)",
        "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes GROUP BY liked_id HAVING COUNT(liked_id) = (SELECT MAX(counts) FROM (SELECT COUNT(liked_id) AS counts FROM Likes GROUP BY liked_id) AS counts_table))",
        "SELECT H.name FROM Highschooler H WHERE H.ID IN (SELECT L.liked_id FROM Likes L GROUP BY L.liked_id HAVING COUNT(L.liked_id) = (SELECT MAX(like_count) FROM (SELECT COUNT(*) AS like_count FROM Likes GROUP BY liked_id) AS subquery))",
        "SELECT name FROM Highschooler WHERE ID = (SELECT liked_id FROM Likes GROUP BY liked_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT H.name FROM Highschooler H INNER JOIN (SELECT liked_id, COUNT(*) AS cnt FROM Likes GROUP BY liked_id) AS L ON H.ID = L.liked_id WHERE L.cnt = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Likes GROUP BY liked_id) AS subquery)",
        "SELECT H.name FROM Highschooler H, (SELECT liked_id FROM Likes GROUP BY liked_id HAVING COUNT(*) = (SELECT MAX(like_count) FROM (SELECT COUNT(*) AS like_count FROM Likes GROUP BY liked_id) AS subquery)) AS MaxLikes WHERE H.ID = MaxLikes.liked_id",
        "SELECT H.name FROM Highschooler H WHERE EXISTS (SELECT 1 FROM Likes L WHERE L.liked_id = H.ID GROUP BY L.liked_id HAVING COUNT(*) = (SELECT MAX(like_count) FROM (SELECT COUNT(*) AS like_count FROM Likes GROUP BY liked_id) AS subquery))",
        "SELECT H.name FROM Highschooler H JOIN (SELECT liked_id FROM Likes GROUP BY liked_id HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM Likes GROUP BY liked_id)) AS MostLiked ON H.ID = MostLiked.liked_id",
        "SELECT TOP 1 WITH TIES H.name FROM Highschooler H JOIN Likes L ON H.ID = L.liked_id GROUP BY H.ID, H.name ORDER BY COUNT(*) DESC",
        "SELECT H.name FROM Highschooler H WHERE H.ID IN (SELECT liked_id FROM Likes GROUP BY liked_id HAVING COUNT(*) = (SELECT MAX(like_count) FROM (SELECT COUNT(*) AS like_count FROM Likes GROUP BY liked_id) AS subquery))"
      ]
    ]
  },
  {
    "id": 908,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT H.name FROM Highschooler H JOIN Likes L ON H.ID = L.liked_id GROUP BY H.ID, H.name HAVING COUNT(L.liked_id) >= 2",
        "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes GROUP BY liked_id HAVING COUNT(*) >= 2)",
        "SELECT Highschooler.name FROM Highschooler INNER JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Highschooler.ID HAVING COUNT(Likes.liked_id) >= 2",
        "SELECT DISTINCT H.name FROM Highschooler H, Likes L WHERE H.ID = L.liked_id GROUP BY H.ID HAVING COUNT(L.liked_id) >= 2",
        "SELECT H.name FROM Highschooler H WHERE (SELECT COUNT(*) FROM Likes L WHERE L.liked_id = H.ID) >= 2",
        "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes GROUP BY liked_id HAVING COUNT(liked_id) >= 2)",
        "SELECT H.name FROM Highschooler H JOIN (SELECT liked_id FROM Likes GROUP BY liked_id HAVING COUNT(*) >= 2) AS Sub ON H.ID = Sub.liked_id",
        "SELECT H.name FROM Highschooler H WHERE EXISTS (SELECT 1 FROM Likes L WHERE L.liked_id = H.ID GROUP BY L.liked_id HAVING COUNT(*) >= 2)",
        "SELECT name FROM (SELECT Highschooler.name, COUNT(Likes.liked_id) AS like_count FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Highschooler.ID) AS result WHERE like_count >= 2",
        "SELECT H.name FROM Highschooler AS H INNER JOIN Likes AS L ON H.ID = L.liked_id GROUP BY H.ID, H.name HAVING COUNT(*) >= 2"
      ]
    ]
  },
  {
    "id": 909,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT H.name FROM Highschooler H WHERE H.ID IN (SELECT L.liked_id FROM Likes L GROUP BY L.liked_id HAVING COUNT(*) >= 2)",
        "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes GROUP BY liked_id HAVING COUNT(liked_id) >= 2)",
        "SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Likes.liked_id HAVING COUNT(Likes.liked_id) >= 2",
        "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes GROUP BY liked_id HAVING COUNT(*) > 1)",
        "SELECT DISTINCT H.name FROM Highschooler H INNER JOIN Likes L ON H.ID = L.liked_id GROUP BY L.liked_id HAVING COUNT(L.liked_id) >= 2",
        "SELECT H.name FROM Highschooler H, Likes L WHERE H.ID = L.liked_id GROUP BY L.liked_id HAVING COUNT(L.liked_id) >= 2",
        "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes HAVING COUNT(*) >= 2 GROUP BY liked_id)",
        "SELECT H.name FROM Highschooler H WHERE EXISTS (SELECT 1 FROM Likes L WHERE L.liked_id = H.ID GROUP BY L.liked_id HAVING COUNT(*) >= 2)",
        "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes GROUP BY liked_id HAVING COUNT(liked_id) > 1)",
        "SELECT H.name FROM Highschooler H JOIN (SELECT liked_id FROM Likes GROUP BY liked_id HAVING COUNT(*) >= 2) AS L ON H.ID = L.liked_id"
      ]
    ]
  },
  {
    "id": 910,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT H.name FROM Highschooler H WHERE H.grade > 5 AND (SELECT COUNT(*) FROM Friend F WHERE F.student_id = H.ID OR F.friend_id = H.ID) >= 2",
        "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(friend_id) >= 2 UNION SELECT friend_id FROM Friend GROUP BY friend_id HAVING COUNT(student_id) >= 2) AND grade > 5",
        "SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id OR H.ID = F.friend_id GROUP BY H.ID HAVING COUNT(DISTINCT F.student_id) + COUNT(DISTINCT F.friend_id) >= 4 AND H.grade > 5",
        "SELECT DISTINCT H.name FROM Highschooler H, Friend F WHERE H.ID = F.student_id AND H.grade > 5 GROUP BY H.ID HAVING COUNT(F.friend_id) >= 2",
        "SELECT H.name FROM Highschooler H WHERE H.grade > 5 AND H.ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) >= 2 UNION ALL SELECT friend_id FROM Friend GROUP BY friend_id HAVING COUNT(*) >= 2)",
        "SELECT H.name FROM Highschooler H INNER JOIN (SELECT student_id FROM Friend UNION ALL SELECT friend_id FROM Friend) AS F ON H.ID = F.student_id WHERE H.grade > 5 GROUP BY H.ID HAVING COUNT(F.student_id) >= 2",
        "SELECT name FROM Highschooler WHERE grade > 5 AND ID IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend HAVING COUNT(*) >= 2)",
        "SELECT H.name FROM Highschooler H WHERE H.grade > 5 AND EXISTS (SELECT 1 FROM Friend F WHERE (F.student_id = H.ID OR F.friend_id = H.ID) GROUP BY F.student_id, F.friend_id HAVING COUNT(*) >= 2)",
        "SELECT H.name FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id OR H.ID = F.friend_id WHERE H.grade > 5 GROUP BY H.ID HAVING COUNT(F.student_id) + COUNT(F.friend_id) >= 4",
        "SELECT H.name FROM Highschooler H WHERE H.grade > 5 AND (SELECT COUNT(*) FROM Friend WHERE student_id = H.ID OR friend_id = H.ID) >= 2"
      ]
    ]
  },
  {
    "id": 911,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT H.name FROM Highschooler H WHERE H.grade > 5 AND (SELECT COUNT(*) FROM Friend F WHERE F.student_id = H.ID OR F.friend_id = H.ID) >= 2",
        "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(friend_id) >= 2 UNION SELECT friend_id FROM Friend GROUP BY friend_id HAVING COUNT(student_id) >= 2) AND grade > 5",
        "SELECT DISTINCT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id OR H.ID = F.friend_id WHERE H.grade > 5 GROUP BY H.ID HAVING COUNT(F.student_id) + COUNT(F.friend_id) >= 2",
        "SELECT H.name FROM Highschooler H WHERE H.grade > 5 AND H.ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) >= 2 UNION ALL SELECT friend_id FROM Friend GROUP BY friend_id HAVING COUNT(*) >= 2)",
        "SELECT H.name FROM Highschooler H INNER JOIN (SELECT student_id FROM Friend UNION ALL SELECT friend_id FROM Friend) AS F ON H.ID = F.student_id WHERE H.grade > 5 GROUP BY H.ID HAVING COUNT(F.student_id) >= 2",
        "SELECT name FROM Highschooler WHERE grade > 5 AND ID IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend GROUP BY student_id, friend_id HAVING COUNT(*) >= 2)",
        "SELECT H.name FROM Highschooler H, Friend F WHERE H.grade > 5 AND (H.ID = F.student_id OR H.ID = F.friend_id) GROUP BY H.ID HAVING COUNT(DISTINCT F.student_id) + COUNT(DISTINCT F.friend_id) >= 2",
        "SELECT name FROM Highschooler WHERE grade > 5 AND ID IN (SELECT student_id FROM (SELECT student_id, COUNT(*) AS cnt FROM Friend GROUP BY student_id UNION SELECT friend_id, COUNT(*) AS cnt FROM Friend GROUP BY friend_id) AS F WHERE cnt >= 2)",
        "SELECT H.name FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id OR H.ID = F.friend_id WHERE H.grade > 5 GROUP BY H.ID HAVING COUNT(F.student_id) >= 2 OR COUNT(F.friend_id) >= 2",
        "SELECT H.name FROM Highschooler H WHERE H.grade > 5 AND EXISTS (SELECT 1 FROM Friend F WHERE (F.student_id = H.ID OR F.friend_id = H.ID) GROUP BY F.student_id, F.friend_id HAVING COUNT(*) >= 2)"
      ]
    ]
  },
  {
    "id": 912,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT H.ID, COUNT(L.liked_id) AS likes_count FROM Highschooler H JOIN Likes L ON H.ID = L.liked_id WHERE H.name = 'Kyle' GROUP BY H.ID",
        "SELECT highschooler.ID, COUNT(likes.liked_id) AS total_likes FROM highschooler INNER JOIN likes ON highschooler.ID = likes.liked_id WHERE highschooler.name = 'Kyle' GROUP BY highschooler.ID",
        "SELECT ID, COUNT(liked_id) AS num_likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id WHERE name = 'Kyle' GROUP BY ID",
        "SELECT h.ID, COUNT(*) AS likes_received FROM Highschooler h LEFT JOIN Likes l ON h.ID = l.liked_id WHERE h.name = 'Kyle' GROUP BY h.ID",
        "SELECT h.ID, IFNULL(COUNT(l.liked_id), 0) AS likes_count FROM Highschooler h LEFT JOIN Likes l ON h.ID = l.liked_id AND h.name = 'Kyle' GROUP BY h.ID",
        "SELECT ID, (SELECT COUNT(*) FROM Likes WHERE liked_id = Highschooler.ID) AS likes_count FROM Highschooler WHERE name = 'Kyle'",
        "SELECT Highschooler.ID, COUNT(Likes.liked_id) AS TotalLikes FROM Highschooler, Likes WHERE Highschooler.ID = Likes.liked_id AND Highschooler.name = 'Kyle' GROUP BY Highschooler.ID",
        "SELECT ID, COUNT(liked_id) FROM Highschooler h JOIN Likes l ON h.ID = l.liked_id WHERE h.name = 'Kyle' GROUP BY h.ID",
        "SELECT h.ID, COUNT(l.liked_id) AS likes FROM Highschooler h, Likes l WHERE h.ID = l.liked_id AND h.name = 'Kyle' GROUP BY h.ID",
        "SELECT h.ID AS StudentID, COUNT(l.liked_id) AS LikesCount FROM Highschooler h INNER JOIN Likes l ON h.ID = l.liked_id WHERE h.name = 'Kyle' GROUP BY h.ID"
      ]
    ]
  },
  {
    "id": 913,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT H.ID, COUNT(L.liked_id) AS likes_count FROM Highschooler H JOIN Likes L ON H.ID = L.liked_id WHERE H.name = 'Kyle' GROUP BY H.ID",
        "SELECT highschooler.ID, COUNT(likes.liked_id) AS total_likes FROM highschooler INNER JOIN likes ON highschooler.ID = likes.liked_id WHERE highschooler.name = 'Kyle' GROUP BY highschooler.ID",
        "SELECT hs.ID, COUNT(*) AS num_likes FROM Highschooler hs JOIN Likes lk ON hs.ID = lk.liked_id WHERE hs.name = 'Kyle' GROUP BY hs.ID",
        "SELECT id_table.ID, COUNT(likes_table.liked_id) AS like_count FROM Highschooler id_table LEFT JOIN Likes likes_table ON id_table.ID = likes_table.liked_id WHERE id_table.name = 'Kyle' GROUP BY id_table.ID",
        "SELECT H.ID AS StudentID, COUNT(L.liked_id) AS NumberOfLikes FROM Highschooler AS H LEFT JOIN Likes AS L ON H.ID = L.liked_id WHERE H.name = 'Kyle' GROUP BY H.ID",
        "SELECT student_id, COUNT(liked_id) AS likes_received FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id WHERE name = 'Kyle' GROUP BY student_id",
        "SELECT ID, COUNT(liked_id) FROM Highschooler, Likes WHERE Highschooler.ID = Likes.liked_id AND Highschooler.name = 'Kyle' GROUP BY ID",
        "SELECT H.ID, COUNT(L.liked_id) AS TotalLikes FROM Highschooler H, Likes L WHERE H.ID = L.liked_id AND H.name = 'Kyle' GROUP BY H.ID",
        "SELECT student_id, total_likes FROM (SELECT Highschooler.ID AS student_id, COUNT(Likes.liked_id) AS total_likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id WHERE Highschooler.name = 'Kyle' GROUP BY Highschooler.ID) AS result",
        "SELECT DISTINCT H.ID, (SELECT COUNT(*) FROM Likes WHERE liked_id = H.ID) AS likes_count FROM Highschooler H WHERE H.name = 'Kyle'"
      ]
    ]
  },
  {
    "id": 914,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT AVG(H.grade) FROM Highschooler H WHERE H.ID IN (SELECT F.student_id FROM Friend F UNION SELECT F.friend_id FROM Friend F)",
        "SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend UNION ALL SELECT friend_id FROM Friend)",
        "SELECT AVG(H.grade) FROM Highschooler H JOIN Friend F ON H.ID = F.student_id OR H.ID = F.friend_id",
        "SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend UNION SELECT DISTINCT friend_id FROM Friend)",
        "SELECT AVG(grade) FROM Highschooler WHERE Highschooler.ID IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)",
        "SELECT AVG(H.grade) FROM Highschooler H INNER JOIN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend) AS F ON H.ID = F.student_id OR H.ID = F.friend_id",
        "SELECT AVG(grade) FROM Highschooler WHERE EXISTS (SELECT 1 FROM Friend WHERE Highschooler.ID = Friend.student_id OR Highschooler.ID = Friend.friend_id)",
        "SELECT AVG(H.grade) FROM Highschooler H WHERE H.ID IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend GROUP BY student_id, friend_id)",
        "SELECT AVG(grade) FROM (SELECT grade FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)) AS SubQuery",
        "SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend) GROUP BY ID"
      ]
    ]
  },
  {
    "id": 915,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT AVG(H.grade) FROM Highschooler H WHERE H.ID IN (SELECT F.student_id FROM Friend F UNION SELECT F.friend_id FROM Friend F)",
        "SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend UNION ALL SELECT friend_id FROM Friend)",
        "SELECT AVG(H.grade) FROM Highschooler H JOIN Friend F ON H.ID = F.student_id OR H.ID = F.friend_id",
        "SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend UNION SELECT DISTINCT friend_id FROM Friend)",
        "SELECT AVG(grade) FROM (SELECT grade FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)) AS SubQuery",
        "SELECT AVG(grade) FROM Highschooler WHERE EXISTS (SELECT 1 FROM Friend WHERE Highschooler.ID = Friend.student_id OR Highschooler.ID = Friend.friend_id)",
        "SELECT AVG(grade) FROM Highschooler H WHERE H.ID IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend GROUP BY student_id, friend_id)",
        "SELECT AVG(H.grade) FROM Highschooler H INNER JOIN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend) AS F ON H.ID = F.student_id OR H.ID = F.friend_id",
        "SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend HAVING COUNT(*) > 0)",
        "SELECT AVG(grade) FROM Highschooler H WHERE EXISTS (SELECT NULL FROM Friend F WHERE H.ID = F.student_id UNION SELECT NULL FROM Friend F WHERE H.ID = F.friend_id)"
      ]
    ]
  },
  {
    "id": 916,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)",
        "SELECT MIN(H.grade) FROM Highschooler H WHERE NOT EXISTS (SELECT 1 FROM Friend F WHERE F.student_id = H.ID OR F.friend_id = H.ID)",
        "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend) AND ID NOT IN (SELECT friend_id FROM Friend)",
        "SELECT MIN(H.grade) FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id OR H.ID = F.friend_id WHERE F.student_id IS NULL AND F.friend_id IS NULL",
        "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT DISTINCT student_id FROM Friend UNION SELECT DISTINCT friend_id FROM Friend)",
        "SELECT MIN(grade) FROM Highschooler AS H WHERE NOT EXISTS (SELECT * FROM Friend AS F WHERE F.student_id = H.ID OR F.friend_id = H.ID)",
        "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION ALL SELECT friend_id FROM Friend)",
        "SELECT MIN(grade) FROM Highschooler H WHERE H.ID NOT IN (SELECT F.student_id FROM Friend F UNION SELECT F.friend_id FROM Friend F)",
        "SELECT MIN(grade) FROM Highschooler WHERE ID NOT EXISTS (SELECT NULL FROM Friend WHERE student_id = Highschooler.ID OR friend_id = Highschooler.ID)",
        "SELECT MIN(grade) FROM Highschooler WHERE NOT EXISTS (SELECT NULL FROM Friend WHERE student_id = Highschooler.ID UNION SELECT NULL FROM Friend WHERE friend_id = Highschooler.ID)"
      ]
    ]
  },
  {
    "id": 917,
    "db_id": "network_1",
    "infer_predictions": [
      [
        "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)",
        "SELECT MIN(H.grade) FROM Highschooler H WHERE H.ID NOT IN (SELECT F.student_id FROM Friend F UNION SELECT F.friend_id FROM Friend F)",
        "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT DISTINCT student_id FROM Friend UNION ALL SELECT DISTINCT friend_id FROM Friend)",
        "SELECT MIN(grade) FROM Highschooler WHERE NOT EXISTS (SELECT 1 FROM Friend F WHERE F.student_id = Highschooler.ID OR F.friend_id = Highschooler.ID)",
        "SELECT MIN(grade) FROM Highschooler AS H LEFT JOIN (SELECT student_id, friend_id FROM Friend) AS F ON H.ID = F.student_id OR H.ID = F.friend_id WHERE F.student_id IS NULL AND F.friend_id IS NULL",
        "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend) AND ID NOT IN (SELECT friend_id FROM Friend)",
        "SELECT MIN(H.grade) FROM Highschooler H LEFT OUTER JOIN Friend F ON H.ID = F.student_id OR H.ID = F.friend_id WHERE F.student_id IS NULL",
        "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend GROUP BY student_id, friend_id)",
        "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend HAVING COUNT(*) > 0)",
        "SELECT MIN(grade) FROM Highschooler H WHERE NOT EXISTS (SELECT NULL FROM Friend F WHERE F.student_id = H.ID OR F.friend_id = H.ID)"
      ]
    ]
  },
  {
    "id": 918,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT DISTINCT O.state FROM Owners O JOIN Professionals P ON O.state = P.state",
        "SELECT state FROM Owners WHERE state IN (SELECT state FROM Professionals)",
        "SELECT O.state FROM Owners O, Professionals P WHERE O.state = P.state GROUP BY O.state",
        "SELECT DISTINCT state FROM Owners WHERE EXISTS (SELECT 1 FROM Professionals WHERE Professionals.state = Owners.state)",
        "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "SELECT DISTINCT O.state FROM Owners O INNER JOIN Professionals P ON O.state = P.state",
        "SELECT DISTINCT state FROM (SELECT state FROM Owners UNION ALL SELECT state FROM Professionals) AS states GROUP BY state HAVING COUNT(*) > 1",
        "SELECT DISTINCT O.state FROM Owners O WHERE O.state IN (SELECT P.state FROM Professionals P)",
        "SELECT DISTINCT state FROM Owners WHERE state IN (SELECT DISTINCT state FROM Professionals)",
        "SELECT DISTINCT O.state FROM Owners O WHERE EXISTS (SELECT P.state FROM Professionals P WHERE P.state = O.state)"
      ]
    ]
  },
  {
    "id": 919,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT DISTINCT O.state FROM Owners O, Professionals P WHERE O.state = P.state",
        "SELECT state FROM Owners WHERE state IN (SELECT state FROM Professionals)",
        "SELECT O.state FROM Owners O JOIN Professionals P ON O.state = P.state GROUP BY O.state",
        "SELECT DISTINCT state FROM Owners WHERE EXISTS (SELECT 1 FROM Professionals WHERE Professionals.state = Owners.state)",
        "SELECT DISTINCT O.state FROM Owners O INNER JOIN Professionals P ON O.state = P.state",
        "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "SELECT DISTINCT O.state FROM Owners O WHERE O.state IN (SELECT DISTINCT P.state FROM Professionals P)",
        "SELECT DISTINCT state FROM (SELECT state FROM Owners UNION ALL SELECT state FROM Professionals) AS states GROUP BY state HAVING COUNT(*) > 1",
        "SELECT DISTINCT O.state FROM Owners O WHERE EXISTS (SELECT P.state FROM Professionals P WHERE P.state = O.state)",
        "SELECT DISTINCT state FROM Owners WHERE state IN (SELECT DISTINCT state FROM Professionals)"
      ]
    ]
  },
  {
    "id": 920,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT AVG(D.age) FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id",
        "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)",
        "SELECT AVG(D.age) AS AverageAge FROM Dogs D INNER JOIN Treatments T ON D.dog_id = T.dog_id",
        "SELECT AVG(age) FROM Dogs WHERE EXISTS (SELECT 1 FROM Treatments WHERE Treatments.dog_id = Dogs.dog_id)",
        "SELECT AVG(D.age) FROM Dogs D, Treatments T WHERE D.dog_id = T.dog_id",
        "SELECT AVG(age) FROM (SELECT age FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id) AS SubQuery",
        "SELECT AVG(D.age) FROM Dogs D WHERE D.dog_id IN (SELECT T.dog_id FROM Treatments T)",
        "SELECT AVG(age) FROM Dogs D WHERE D.dog_id IN (SELECT dog_id FROM Treatments GROUP BY dog_id)",
        "SELECT AVG(D.age) FROM Dogs D INNER JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY D.dog_id",
        "SELECT AVG(D.age) AS Average_Age FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY T.dog_id HAVING COUNT(T.treatment_id) > 0"
      ]
    ]
  },
  {
    "id": 921,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT AVG(D.age) FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id",
        "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)",
        "SELECT AVG(D.age) AS Average_Age FROM Dogs D, Treatments T WHERE D.dog_id = T.dog_id",
        "SELECT AVG(age) FROM Dogs WHERE EXISTS (SELECT 1 FROM Treatments WHERE Treatments.dog_id = Dogs.dog_id)",
        "SELECT AVG(D.age) FROM Dogs D INNER JOIN Treatments T ON D.dog_id = T.dog_id",
        "SELECT AVG(Dogs.age) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id",
        "SELECT AVG(age) FROM (SELECT age FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id) AS SubQuery",
        "SELECT AVG(D.age) FROM Dogs D WHERE D.dog_id IN (SELECT dog_id FROM Treatments)",
        "SELECT AVG(age) FROM Dogs D INNER JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY D.dog_id",
        "SELECT AVG(D.age) FROM Dogs D LEFT JOIN Treatments T ON D.dog_id = T.dog_id WHERE T.dog_id IS NOT NULL"
      ]
    ]
  },
  {
    "id": 922,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT P.professional_id, P.last_name, P.cell_number FROM Professionals P LEFT JOIN Treatments T ON P.professional_id = T.professional_id GROUP BY P.professional_id, P.last_name, P.cell_number HAVING P.state = 'Indiana' OR COUNT(T.treatment_id) > 2",
        "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT P.professional_id, P.last_name, P.cell_number FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id GROUP BY P.professional_id HAVING COUNT(T.treatment_id) > 2",
        "SELECT P.professional_id, P.last_name, P.cell_number FROM Professionals P WHERE P.state = 'Indiana' OR P.professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
        "SELECT DISTINCT P.professional_id, P.last_name, P.cell_number FROM Professionals P, Treatments T WHERE P.professional_id = T.professional_id AND (P.state = 'Indiana' OR (SELECT COUNT(*) FROM Treatments WHERE professional_id = P.professional_id) > 2)",
        "SELECT P.professional_id, P.last_name, P.cell_number FROM Professionals P WHERE EXISTS (SELECT 1 FROM Treatments T WHERE T.professional_id = P.professional_id HAVING COUNT(*) > 2) OR P.state = 'Indiana'",
        "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
        "SELECT P.professional_id, P.last_name, P.cell_number FROM Professionals P WHERE P.state = 'Indiana' UNION ALL SELECT P.professional_id, P.last_name, P.cell_number FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id GROUP BY P.professional_id HAVING COUNT(T.treatment_id) > 2",
        "SELECT P.professional_id, P.last_name, P.cell_number FROM Professionals P WHERE P.state = 'Indiana' OR (SELECT COUNT(*) FROM Treatments WHERE professional_id = P.professional_id) > 2",
        "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments HAVING COUNT(treatment_id) > 2 GROUP BY professional_id)",
        "SELECT P.professional_id, P.last_name, P.cell_number FROM Professionals P LEFT JOIN Treatments T ON P.professional_id = T.professional_id WHERE P.state = 'Indiana' OR COUNT(T.treatment_id) > 2 GROUP BY P.professional_id, P.last_name, P.cell_number"
      ]
    ]
  },
  {
    "id": 923,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT P.professional_id, P.last_name, P.cell_number FROM Professionals P WHERE P.state = 'Indiana' OR P.professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
        "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT professional_id, last_name, cell_number FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
        "SELECT P.professional_id, P.last_name, P.cell_number FROM Professionals P LEFT JOIN Treatments T ON P.professional_id = T.professional_id GROUP BY P.professional_id HAVING P.state = 'Indiana' OR COUNT(T.treatment_id) > 2",
        "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(treatment_id) > 2)",
        "SELECT P.professional_id, P.last_name, P.cell_number FROM Professionals P WHERE P.state = 'Indiana' OR EXISTS (SELECT 1 FROM Treatments T WHERE T.professional_id = P.professional_id GROUP BY T.professional_id HAVING COUNT(*) > 2)",
        "SELECT DISTINCT P.professional_id, P.last_name, P.cell_number FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id WHERE P.state = 'Indiana' OR COUNT(T.treatment_id) OVER (PARTITION BY P.professional_id) > 2",
        "SELECT P.professional_id, P.last_name, P.cell_number FROM Professionals P WHERE P.state = 'Indiana' OR (SELECT COUNT(*) FROM Treatments T WHERE T.professional_id = P.professional_id) > 2",
        "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments HAVING COUNT(*) > 2 GROUP BY professional_id)",
        "SELECT P.professional_id, P.last_name, P.cell_number FROM Professionals P LEFT JOIN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2) T ON P.professional_id = T.professional_id WHERE P.state = 'Indiana' OR T.professional_id IS NOT NULL",
        "SELECT P.professional_id, P.last_name, P.cell_number FROM Professionals P WHERE P.state = 'Indiana' OR P.professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)"
      ]
    ]
  },
  {
    "id": 924,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT name FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments GROUP BY dog_id HAVING SUM(cost_of_treatment) > 1000)",
        "SELECT D.name FROM Dogs D WHERE D.dog_id NOT IN (SELECT T.dog_id FROM Treatments T GROUP BY T.dog_id HAVING SUM(T.cost_of_treatment) > 1000)",
        "SELECT Dogs.name FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.dog_id HAVING COALESCE(SUM(Treatments.cost_of_treatment), 0) <= 1000",
        "SELECT name FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments GROUP BY dog_id HAVING SUM(cost_of_treatment) > 1000)",
        "SELECT Dogs.name FROM Dogs WHERE NOT EXISTS (SELECT 1 FROM Treatments WHERE Treatments.dog_id = Dogs.dog_id GROUP BY Treatments.dog_id HAVING SUM(Treatments.cost_of_treatment) > 1000)",
        "SELECT name FROM Dogs D WHERE NOT EXISTS (SELECT NULL FROM Treatments T WHERE T.dog_id = D.dog_id GROUP BY T.dog_id HAVING SUM(T.cost_of_treatment) > 1000)",
        "SELECT name FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments GROUP BY dog_id HAVING SUM(cost_of_treatment) > 1000)",
        "SELECT D.name FROM Dogs D LEFT JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY D.dog_id HAVING IFNULL(SUM(T.cost_of_treatment), 0) <= 1000",
        "SELECT name FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments GROUP BY dog_id HAVING SUM(cost_of_treatment) > 1000)",
        "SELECT name FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments GROUP BY dog_id HAVING SUM(cost_of_treatment) > 1000)"
      ]
    ]
  },
  {
    "id": 925,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT D.name FROM Dogs D WHERE D.dog_id NOT IN (SELECT T.dog_id FROM Treatments T GROUP BY T.dog_id HAVING SUM(T.cost_of_treatment) > 1000)",
        "SELECT name FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments GROUP BY dog_id HAVING SUM(cost_of_treatment) <= 1000)",
        "SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.dog_id, Dogs.name HAVING SUM(Treatments.cost_of_treatment) <= 1000",
        "SELECT name FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments GROUP BY dog_id HAVING SUM(cost_of_treatment) <= 1000)",
        "SELECT D.name FROM Dogs D LEFT JOIN (SELECT dog_id, SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY dog_id) T ON D.dog_id = T.dog_id WHERE T.total_cost <= 1000 OR T.total_cost IS NULL",
        "SELECT name FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments GROUP BY dog_id HAVING SUM(cost_of_treatment) > 1000)",
        "SELECT Dogs.name FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.dog_id HAVING SUM(Treatments.cost_of_treatment) <= 1000",
        "SELECT D.name FROM Dogs D WHERE NOT EXISTS (SELECT 1 FROM Treatments T WHERE T.dog_id = D.dog_id GROUP BY T.dog_id HAVING SUM(T.cost_of_treatment) > 1000)",
        "SELECT name FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments GROUP BY dog_id HAVING SUM(cost_of_treatment) <= 1000)",
        "SELECT D.name FROM Dogs D LEFT JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY D.dog_id HAVING COALESCE(SUM(T.cost_of_treatment), 0) <= 1000"
      ]
    ]
  },
  {
    "id": 926,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT first_name FROM Professionals WHERE first_name NOT IN (SELECT name FROM Dogs) UNION SELECT first_name FROM Owners WHERE first_name NOT IN (SELECT name FROM Dogs)",
        "SELECT DISTINCT first_name FROM Professionals WHERE first_name NOT IN (SELECT DISTINCT name FROM Dogs) UNION SELECT DISTINCT first_name FROM Owners WHERE first_name NOT IN (SELECT DISTINCT name FROM Dogs)",
        "SELECT P.first_name FROM Professionals P WHERE NOT EXISTS (SELECT 1 FROM Dogs D WHERE D.name = P.first_name) UNION SELECT O.first_name FROM Owners O WHERE NOT EXISTS (SELECT 1 FROM Dogs D WHERE D.name = O.first_name)",
        "SELECT first_name FROM (SELECT first_name FROM Professionals UNION ALL SELECT first_name FROM Owners) AS Combined WHERE first_name NOT IN (SELECT name FROM Dogs)",
        "WITH HumanNames AS (SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners) SELECT first_name FROM HumanNames WHERE first_name NOT IN (SELECT name FROM Dogs)",
        "SELECT first_name FROM Professionals EXCEPT SELECT name FROM Dogs UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "SELECT DISTINCT first_name FROM (SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners) AS AllFirstNames WHERE first_name NOT IN (SELECT name FROM Dogs)",
        "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "SELECT first_name FROM (SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners) AS UniqueNames WHERE NOT EXISTS (SELECT 1 FROM Dogs WHERE Dogs.name = UniqueNames.first_name)",
        "SELECT first_name FROM Professionals WHERE first_name NOT IN (SELECT name FROM Dogs) UNION ALL SELECT first_name FROM Owners WHERE first_name NOT IN (SELECT name FROM Dogs)"
      ]
    ]
  },
  {
    "id": 927,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT first_name FROM Professionals WHERE first_name NOT IN (SELECT name FROM Dogs) UNION SELECT first_name FROM Owners WHERE first_name NOT IN (SELECT name FROM Dogs)",
        "SELECT DISTINCT first_name FROM (SELECT first_name FROM Professionals UNION ALL SELECT first_name FROM Owners) AS combined WHERE first_name NOT IN (SELECT name FROM Dogs)",
        "SELECT first_name FROM (SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners) AS unique_names WHERE first_name NOT IN (SELECT DISTINCT name FROM Dogs)",
        "SELECT first_name FROM Professionals WHERE first_name NOT IN (SELECT DISTINCT name FROM Dogs) UNION ALL SELECT first_name FROM Owners WHERE first_name NOT IN (SELECT DISTINCT name FROM Dogs)",
        "SELECT DISTINCT first_name FROM Professionals WHERE first_name NOT IN (SELECT name FROM Dogs) UNION SELECT DISTINCT first_name FROM Owners WHERE first_name NOT IN (SELECT name FROM Dogs)",
        "SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs UNION SELECT first_name FROM Professionals EXCEPT SELECT name FROM Dogs",
        "WITH DogNames AS (SELECT DISTINCT name FROM Dogs) SELECT first_name FROM Professionals WHERE first_name NOT IN (SELECT name FROM DogNames) UNION SELECT first_name FROM Owners WHERE first_name NOT IN (SELECT name FROM DogNames)",
        "SELECT p.first_name FROM Professionals p WHERE NOT EXISTS (SELECT 1 FROM Dogs d WHERE d.name = p.first_name) UNION SELECT o.first_name FROM Owners o WHERE NOT EXISTS (SELECT 1 FROM Dogs d WHERE d.name = o.first_name)",
        "SELECT first_name FROM (SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners) AS all_names WHERE NOT EXISTS (SELECT 1 FROM Dogs WHERE name = all_names.first_name)",
        "SELECT DISTINCT first_name FROM Professionals WHERE NOT EXISTS (SELECT 1 FROM Dogs WHERE Dogs.name = Professionals.first_name) UNION SELECT DISTINCT first_name FROM Owners WHERE NOT EXISTS (SELECT 1 FROM Dogs WHERE Dogs.name = Owners.first_name)"
      ]
    ]
  },
  {
    "id": 928,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT P.professional_id, P.role_code, P.email_address FROM Professionals P WHERE P.professional_id NOT IN (SELECT T.professional_id FROM Treatments T)",
        "SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments)",
        "SELECT P.professional_id, P.role_code, P.email_address FROM Professionals P LEFT JOIN Treatments T ON P.professional_id = T.professional_id WHERE T.professional_id IS NULL",
        "SELECT professional_id, role_code, email_address FROM Professionals WHERE NOT EXISTS (SELECT 1 FROM Treatments WHERE Treatments.professional_id = Professionals.professional_id)",
        "SELECT P.professional_id, P.role_code, P.email_address FROM Professionals P WHERE NOT EXISTS (SELECT NULL FROM Treatments T WHERE T.professional_id = P.professional_id)",
        "SELECT professional_id, role_code, email_address FROM Professionals EXCEPT SELECT professional_id, role_code, email_address FROM Professionals, Treatments WHERE Professionals.professional_id = Treatments.professional_id",
        "SELECT DISTINCT P.professional_id, P.role_code, P.email_address FROM Professionals P WHERE P.professional_id NOT IN (SELECT professional_id FROM Treatments)",
        "SELECT P.professional_id, P.role_code, P.email_address FROM Professionals P WHERE P.professional_id NOT IN (SELECT T.professional_id FROM Treatments T WHERE T.professional_id IS NOT NULL)",
        "SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments WHERE professional_id IS NOT NULL)",
        "SELECT P.professional_id, P.role_code, P.email_address FROM Professionals P LEFT OUTER JOIN Treatments T ON P.professional_id = T.professional_id WHERE T.professional_id IS NULL"
      ]
    ]
  },
  {
    "id": 929,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
        "SELECT P.professional_id, P.role_code, P.email_address FROM Professionals P WHERE NOT EXISTS (SELECT 1 FROM Treatments T WHERE T.professional_id = P.professional_id)",
        "SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments)",
        "SELECT P.professional_id, P.role_code, P.email_address FROM Professionals P LEFT JOIN Treatments T ON P.professional_id = T.professional_id WHERE T.professional_id IS NULL",
        "SELECT professional_id, role_code, email_address FROM Professionals EXCEPT SELECT professional_id, role_code, email_address FROM Professionals, Treatments WHERE Professionals.professional_id = Treatments.professional_id",
        "SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments WHERE professional_id IS NOT NULL)",
        "SELECT DISTINCT P.professional_id, P.role_code, P.email_address FROM Professionals P WHERE P.professional_id NOT IN (SELECT professional_id FROM Treatments)",
        "SELECT P.professional_id, P.role_code, P.email_address FROM Professionals P WHERE P.professional_id NOT IN (SELECT T.professional_id FROM Treatments T)",
        "SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT EXISTS (SELECT professional_id FROM Treatments WHERE Treatments.professional_id = Professionals.professional_id)",
        "SELECT P.professional_id, P.role_code, P.email_address FROM Professionals P WHERE NOT EXISTS (SELECT NULL FROM Treatments T WHERE T.professional_id = P.professional_id)"
      ]
    ]
  },
  {
    "id": 930,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT O.owner_id, O.first_name, O.last_name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id GROUP BY O.owner_id, O.first_name, O.last_name HAVING COUNT(D.dog_id) = (SELECT MAX(dog_count) FROM (SELECT COUNT(dog_id) AS dog_count FROM Dogs GROUP BY owner_id) AS subquery)",
        "SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs GROUP BY owner_id HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Dogs GROUP BY owner_id))",
        "SELECT O.owner_id, O.first_name, O.last_name FROM Owners O WHERE EXISTS (SELECT 1 FROM Dogs D WHERE D.owner_id = O.owner_id GROUP BY D.owner_id HAVING COUNT(D.dog_id) = (SELECT MAX(COUNT(D.dog_id)) FROM Dogs GROUP BY owner_id))",
        "SELECT O.owner_id, O.first_name, O.last_name FROM Owners O INNER JOIN (SELECT owner_id, COUNT(dog_id) AS num_dogs FROM Dogs GROUP BY owner_id) D ON O.owner_id = D.owner_id WHERE D.num_dogs = (SELECT MAX(num_dogs) FROM (SELECT COUNT(dog_id) AS num_dogs FROM Dogs GROUP BY owner_id) AS subquery)",
        "WITH DogCounts AS (SELECT owner_id, COUNT(*) AS count FROM Dogs GROUP BY owner_id), MaxCount AS (SELECT MAX(count) AS max_count FROM DogCounts) SELECT O.owner_id, O.first_name, O.last_name FROM Owners O JOIN DogCounts DC ON O.owner_id = DC.owner_id JOIN MaxCount MC ON DC.count = MC.max_count",
        "SELECT O.owner_id, O.first_name, O.last_name FROM Owners O, Dogs D WHERE O.owner_id = D.owner_id GROUP BY O.owner_id, O.first_name, O.last_name HAVING COUNT(D.dog_id) = (SELECT MAX(COUNT(D.dog_id)) FROM Dogs GROUP BY owner_id)",
        "SELECT O.owner_id, O.first_name, O.last_name FROM Owners O JOIN (SELECT owner_id FROM Dogs GROUP BY owner_id HAVING COUNT(dog_id) = (SELECT MAX(COUNT(dog_id)) FROM Dogs GROUP BY owner_id)) D ON O.owner_id = D.owner_id",
        "SELECT O.owner_id, O.first_name, O.last_name FROM Owners O WHERE O.owner_id IN (SELECT owner_id FROM Dogs GROUP BY owner_id ORDER BY COUNT(dog_id) DESC LIMIT 1)",
        "SELECT O.owner_id, O.first_name, O.last_name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id GROUP BY O.owner_id, O.first_name, O.last_name ORDER BY COUNT(D.dog_id) DESC LIMIT 1",
        "SELECT O.owner_id, O.first_name, O.last_name FROM Owners O WHERE O.owner_id IN (SELECT owner_id FROM Dogs GROUP BY owner_id HAVING COUNT(dog_id) >= ALL (SELECT COUNT(dog_id) FROM Dogs GROUP BY owner_id))"
      ]
    ]
  },
  {
    "id": 931,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT O.owner_id, O.first_name, O.last_name FROM Owners O JOIN (SELECT owner_id, COUNT(*) AS num_dogs FROM Dogs GROUP BY owner_id) D ON O.owner_id = D.owner_id WHERE D.num_dogs = (SELECT MAX(num_dogs) FROM (SELECT COUNT(*) AS num_dogs FROM Dogs GROUP BY owner_id) T)",
        "SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs GROUP BY owner_id HAVING COUNT(dog_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(dog_id) AS cnt FROM Dogs GROUP BY owner_id) AS subquery))",
        "SELECT O.owner_id, O.first_name, O.last_name FROM Owners O WHERE O.owner_id IN (SELECT owner_id FROM Dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT O.owner_id, O.first_name, O.last_name FROM Owners O INNER JOIN (SELECT owner_id FROM Dogs GROUP BY owner_id HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Dogs GROUP BY owner_id)) D ON O.owner_id = D.owner_id",
        "SELECT O.owner_id, O.first_name, O.last_name FROM Owners O WHERE EXISTS (SELECT 1 FROM Dogs D WHERE D.owner_id = O.owner_id GROUP BY D.owner_id HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Dogs GROUP BY owner_id))",
        "SELECT O.owner_id, O.first_name, O.last_name FROM Owners O, (SELECT owner_id, COUNT(*) AS dog_count FROM Dogs GROUP BY owner_id) AS D WHERE O.owner_id = D.owner_id AND D.dog_count = (SELECT MAX(dog_count) FROM (SELECT COUNT(*) AS dog_count FROM Dogs GROUP BY owner_id) AS subquery)",
        "SELECT O.owner_id, O.first_name, O.last_name FROM Owners O WHERE O.owner_id IN (SELECT owner_id FROM Dogs GROUP BY owner_id HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM Dogs GROUP BY owner_id))",
        "SELECT O.owner_id, O.first_name, O.last_name FROM Owners O JOIN (SELECT owner_id, COUNT(*) AS dog_count FROM Dogs GROUP BY owner_id) D ON O.owner_id = D.owner_id WHERE D.dog_count = (SELECT MAX(dog_count) FROM (SELECT COUNT(*) AS dog_count FROM Dogs GROUP BY owner_id) T)",
        "SELECT O.owner_id, O.first_name, O.last_name FROM Owners O WHERE O.owner_id IN (SELECT owner_id FROM Dogs GROUP BY owner_id HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Dogs GROUP BY owner_id))",
        "SELECT O.owner_id, O.first_name, O.last_name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id GROUP BY O.owner_id, O.first_name, O.last_name HAVING COUNT(D.dog_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(dog_id) AS cnt FROM Dogs GROUP BY owner_id) AS subquery)"
      ]
    ]
  },
  {
    "id": 932,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT P.professional_id, P.role_code, P.first_name FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id GROUP BY P.professional_id HAVING COUNT(T.treatment_id) >= 2",
        "SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) >= 2)",
        "SELECT P.professional_id, P.role_code, P.first_name FROM Professionals P INNER JOIN Treatments T ON P.professional_id = T.professional_id GROUP BY P.professional_id HAVING COUNT(T.treatment_id) > 1",
        "SELECT DISTINCT P.professional_id, P.role_code, P.first_name FROM Professionals P, Treatments T WHERE P.professional_id = T.professional_id GROUP BY P.professional_id, P.role_code, P.first_name HAVING COUNT(T.treatment_id) >= 2",
        "SELECT P.professional_id, P.role_code, P.first_name FROM Professionals P WHERE EXISTS (SELECT 1 FROM Treatments T WHERE T.professional_id = P.professional_id GROUP BY T.professional_id HAVING COUNT(T.treatment_id) >= 2)",
        "SELECT P.professional_id, P.role_code, P.first_name FROM Professionals P JOIN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) >= 2) T ON P.professional_id = T.professional_id",
        "SELECT P.professional_id, P.role_code, P.first_name FROM Professionals P WHERE P.professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(treatment_id) >= 2)",
        "SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(treatment_id) > 1)",
        "SELECT P.professional_id, P.role_code, P.first_name FROM Professionals P INNER JOIN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) >= 2) AS T ON P.professional_id = T.professional_id",
        "SELECT P.professional_id, P.role_code, P.first_name FROM Professionals P, Treatments T WHERE P.professional_id = T.professional_id GROUP BY P.professional_id HAVING COUNT(DISTINCT T.treatment_id) >= 2"
      ]
    ]
  },
  {
    "id": 933,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT P.professional_id, P.role_code, P.first_name FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id GROUP BY P.professional_id, P.role_code, P.first_name HAVING COUNT(T.treatment_id) >= 2",
        "SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) >= 2)",
        "SELECT P.professional_id, P.role_code, P.first_name FROM Professionals P WHERE EXISTS (SELECT 1 FROM Treatments T WHERE T.professional_id = P.professional_id GROUP BY T.professional_id HAVING COUNT(T.treatment_id) >= 2)",
        "SELECT P.professional_id, P.role_code, P.first_name FROM Professionals P INNER JOIN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(treatment_id) >= 2) T ON P.professional_id = T.professional_id",
        "SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(treatment_id) >= 2)",
        "SELECT DISTINCT P.professional_id, P.role_code, P.first_name FROM Professionals P, Treatments T WHERE P.professional_id = T.professional_id GROUP BY P.professional_id, P.role_code, P.first_name HAVING COUNT(T.treatment_id) >= 2",
        "SELECT P.professional_id, P.role_code, P.first_name FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id GROUP BY P.professional_id HAVING COUNT(T.treatment_id) >= 2",
        "SELECT P.professional_id, P.role_code, P.first_name FROM Professionals P WHERE P.professional_id IN (SELECT T.professional_id FROM Treatments T GROUP BY T.professional_id HAVING COUNT(*) >= 2)",
        "SELECT P.professional_id, P.role_code, P.first_name FROM Professionals P LEFT JOIN Treatments T ON P.professional_id = T.professional_id GROUP BY P.professional_id, P.role_code, P.first_name HAVING COUNT(T.treatment_id) >= 2",
        "SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(treatment_id) >= 2)"
      ]
    ]
  },
  {
    "id": 934,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT B.breed_name FROM Breeds B JOIN Dogs D ON B.breed_code = D.breed_code GROUP BY B.breed_code HAVING COUNT(D.dog_id) = (SELECT MAX(counted) FROM (SELECT COUNT(D.dog_id) AS counted FROM Dogs GROUP BY breed_code) AS counts)",
        "SELECT breed_name FROM Breeds WHERE breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Dogs GROUP BY breed_code) AS subquery))",
        "SELECT B.breed_name FROM Breeds B WHERE EXISTS (SELECT 1 FROM Dogs D WHERE D.breed_code = B.breed_code GROUP BY D.breed_code HAVING COUNT(D.dog_id) = (SELECT MAX(COUNT(D.dog_id)) FROM Dogs D GROUP BY D.breed_code))",
        "SELECT breed_name FROM Breeds WHERE breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1)",
        "WITH DogCounts AS (SELECT breed_code, COUNT(*) AS num_dogs FROM Dogs GROUP BY breed_code), MaxCount AS (SELECT MAX(num_dogs) AS max_dogs FROM DogCounts) SELECT B.breed_name FROM Breeds B JOIN DogCounts DC ON B.breed_code = DC.breed_code WHERE DC.num_dogs = (SELECT max_dogs FROM MaxCount)",
        "SELECT B.breed_name FROM Breeds B INNER JOIN (SELECT breed_code, COUNT(*) AS dog_count FROM Dogs GROUP BY breed_code) D ON B.breed_code = D.breed_code WHERE D.dog_count = (SELECT MAX(dog_count) FROM (SELECT COUNT(*) AS dog_count FROM Dogs GROUP BY breed_code) AS subquery)",
        "SELECT B.breed_name FROM Breeds B, Dogs D WHERE B.breed_code = D.breed_code GROUP BY B.breed_code HAVING COUNT(D.dog_id) = (SELECT MAX(COUNT(D.dog_id)) FROM Dogs GROUP BY breed_code)",
        "SELECT B.breed_name FROM Breeds B WHERE B.breed_code IN (SELECT D.breed_code FROM Dogs D GROUP BY D.breed_code HAVING COUNT(D.dog_id) = (SELECT MAX(COUNT(D.dog_id)) FROM Dogs GROUP BY breed_code))",
        "SELECT B.breed_name FROM Breeds B JOIN (SELECT breed_code FROM Dogs GROUP BY breed_code HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Dogs GROUP BY breed_code)) D ON B.breed_code = D.breed_code",
        "SELECT B.breed_name FROM Breeds B WHERE B.breed_code = (SELECT D.breed_code FROM Dogs D GROUP BY D.breed_code ORDER BY COUNT(*) DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 935,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT B.breed_name FROM Breeds B JOIN Dogs D ON B.breed_code = D.breed_code GROUP BY B.breed_name HAVING COUNT(D.dog_id) = (SELECT MAX(Cnt) FROM (SELECT COUNT(dog_id) AS Cnt FROM Dogs GROUP BY breed_code) T)",
        "SELECT breed_name FROM Breeds WHERE breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Dogs GROUP BY breed_code) Sub))",
        "SELECT breed_name FROM Breeds WHERE breed_code = (SELECT TOP 1 breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC)",
        "WITH DogCounts AS (SELECT breed_code, COUNT(*) AS NumDogs FROM Dogs GROUP BY breed_code), MaxCount AS (SELECT MAX(NumDogs) AS MaxNum FROM DogCounts) SELECT B.breed_name FROM Breeds B JOIN DogCounts D ON B.breed_code = D.breed_code WHERE D.NumDogs = (SELECT MaxNum FROM MaxCount)",
        "SELECT B.breed_name FROM Breeds B, (SELECT breed_code, COUNT(*) AS total FROM Dogs GROUP BY breed_code) AS D WHERE B.breed_code = D.breed_code AND D.total = (SELECT MAX(total) FROM (SELECT COUNT(*) AS total FROM Dogs GROUP BY breed_code) T)",
        "SELECT breed_name FROM Breeds WHERE breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code HAVING COUNT(dog_id) = (SELECT COUNT(dog_id) FROM Dogs GROUP BY breed_code ORDER BY COUNT(dog_id) DESC LIMIT 1))",
        "SELECT B.breed_name FROM Breeds B INNER JOIN (SELECT breed_code FROM Dogs GROUP BY breed_code HAVING COUNT(dog_id) = (SELECT MAX(Cnt) FROM (SELECT COUNT(dog_id) AS Cnt FROM Dogs GROUP BY breed_code) A)) D ON B.breed_code = D.breed_code",
        "SELECT breed_name FROM Breeds WHERE breed_code IN (SELECT breed_code FROM (SELECT breed_code, RANK() OVER (ORDER BY COUNT(*) DESC) AS rnk FROM Dogs GROUP BY breed_code) tmp WHERE rnk = 1)",
        "SELECT B.breed_name FROM Breeds B WHERE EXISTS (SELECT 1 FROM Dogs D WHERE B.breed_code = D.breed_code GROUP BY D.breed_code HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Dogs GROUP BY breed_code) Sub))",
        "SELECT B.breed_name FROM Breeds B WHERE B.breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM Dogs GROUP BY breed_code))"
      ]
    ]
  },
  {
    "id": 936,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT O.owner_id, O.last_name FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id JOIN Treatments AS T ON D.dog_id = T.dog_id GROUP BY O.owner_id, O.last_name HAVING COUNT(T.treatment_id) = (SELECT MAX(num_treatments) FROM (SELECT O.owner_id, COUNT(T.treatment_id) AS num_treatments FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id JOIN Treatments AS T ON D.dog_id = T.dog_id GROUP BY O.owner_id) AS subquery)",
        "SELECT owner_id, last_name FROM (SELECT O.owner_id, O.last_name, COUNT(T.treatment_id) AS num_treatments FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY O.owner_id, O.last_name) AS treatment_counts WHERE num_treatments = (SELECT MAX(num_treatments) FROM (SELECT COUNT(T.treatment_id) AS num_treatments FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY O.owner_id) AS max_counts)",
        "WITH TreatmentCounts AS (SELECT O.owner_id, O.last_name, COUNT(T.treatment_id) AS num_treatments FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY O.owner_id, O.last_name) SELECT owner_id, last_name FROM TreatmentCounts WHERE num_treatments = (SELECT MAX(num_treatments) FROM TreatmentCounts)",
        "SELECT O.owner_id, O.last_name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY O.owner_id, O.last_name ORDER BY COUNT(T.treatment_id) DESC LIMIT 1",
        "SELECT O.owner_id, O.last_name, COUNT(*) AS TreatmentCount FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY O.owner_id, O.last_name HAVING TreatmentCount = (SELECT MAX(TreatmentCount) FROM (SELECT COUNT(*) AS TreatmentCount FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id) AS SubQuery)",
        "SELECT TOP 1 WITH TIES O.owner_id, O.last_name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY O.owner_id, O.last_name ORDER BY COUNT(T.treatment_id) DESC",
        "SELECT O.owner_id, O.last_name FROM Owners O, Dogs D, Treatments T WHERE O.owner_id = D.owner_id AND D.dog_id = T.dog_id GROUP BY O.owner_id, O.last_name HAVING COUNT(T.treatment_id) = (SELECT MAX(COUNT(T.treatment_id)) FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id)",
        "SELECT O.owner_id, O.last_name FROM Owners O INNER JOIN Dogs D ON O.owner_id = D.owner_id INNER JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY O.owner_id, O.last_name HAVING COUNT(T.treatment_id) = (SELECT MAX(num_treatments) FROM (SELECT COUNT(T.treatment_id) AS num_treatments FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id) AS subquery)",
        "SELECT O.owner_id, O.last_name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY O.owner_id, O.last_name HAVING COUNT(T.treatment_id) >= ALL (SELECT COUNT(T.treatment_id) FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id)",
        "SELECT O.owner_id, O.last_name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY O.owner_id, O.last_name HAVING COUNT(T.treatment_id) = (SELECT MAX(num_treatments) FROM (SELECT COUNT(T.treatment_id) AS num_treatments FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id) AS subquery)"
      ]
    ]
  },
  {
    "id": 937,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT O.owner_id, O.last_name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY O.owner_id, O.last_name HAVING SUM(T.cost_of_treatment) = (SELECT MAX(total_spent) FROM (SELECT SUM(T.cost_of_treatment) AS total_spent FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id) AS TotalSpending)",
        "SELECT owner_id, last_name FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY owner_id HAVING SUM(cost_of_treatment) = (SELECT MAX(total_cost) FROM (SELECT owner_id, SUM(cost_of_treatment) AS total_cost FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY owner_id) AS Costs))",
        "SELECT O.owner_id, O.last_name FROM Owners O WHERE EXISTS (SELECT 1 FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id WHERE D.owner_id = O.owner_id GROUP BY D.owner_id HAVING SUM(T.cost_of_treatment) = (SELECT MAX(total_cost) FROM (SELECT owner_id, SUM(cost_of_treatment) AS total_cost FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY owner_id) AS Costs))",
        "SELECT O.owner_id, O.last_name FROM Owners O, (SELECT owner_id, SUM(cost_of_treatment) AS total_cost FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY owner_id) AS Spending WHERE O.owner_id = Spending.owner_id AND Spending.total_cost = (SELECT MAX(total_cost) FROM (SELECT owner_id, SUM(cost_of_treatment) AS total_cost FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY owner_id) AS Costs)",
        "SELECT O.owner_id, O.last_name FROM Owners O JOIN (SELECT owner_id, SUM(cost_of_treatment) AS total_cost FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY owner_id HAVING SUM(cost_of_treatment) = (SELECT MAX(total_cost) FROM (SELECT owner_id, SUM(cost_of_treatment) AS total_cost FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY owner_id) AS Costs)) AS MaxSpending ON O.owner_id = MaxSpending.owner_id",
        "SELECT O.owner_id, O.last_name FROM Owners O WHERE O.owner_id IN (SELECT owner_id FROM (SELECT owner_id, SUM(cost_of_treatment) AS total_cost FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY owner_id) AS Spending WHERE total_cost = (SELECT MAX(total_cost) FROM (SELECT owner_id, SUM(cost_of_treatment) AS total_cost FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY owner_id) AS Costs))",
        "SELECT O.owner_id, O.last_name FROM Owners O INNER JOIN (SELECT D.owner_id, SUM(T.cost_of_treatment) AS total_spent FROM Dogs D INNER JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY D.owner_id) AS Spending ON O.owner_id = Spending.owner_id WHERE Spending.total_spent = (SELECT MAX(total_spent) FROM (SELECT D.owner_id, SUM(T.cost_of_treatment) AS total_spent FROM Dogs D INNER JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY D.owner_id) AS TotalSpending)",
        "SELECT O.owner_id, O.last_name FROM Owners O WHERE O.owner_id IN (SELECT D.owner_id FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY D.owner_id HAVING SUM(T.cost_of_treatment) = (SELECT MAX(total_spent) FROM (SELECT D.owner_id, SUM(T.cost_of_treatment) AS total_spent FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY D.owner_id) AS TotalSpending))",
        "SELECT O.owner_id, O.last_name FROM Owners O JOIN (SELECT D.owner_id, SUM(T.cost_of_treatment) AS total_spent FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY D.owner_id) AS Spending ON O.owner_id = Spending.owner_id WHERE Spending.total_spent = (SELECT MAX(total_spent) FROM (SELECT D.owner_id, SUM(T.cost_of_treatment) AS total_spent FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY D.owner_id) AS TotalSpending)",
        "SELECT O.owner_id, O.last_name FROM Owners O WHERE EXISTS (SELECT 1 FROM Dogs D INNER JOIN Treatments T ON D.dog_id = T.dog_id WHERE D.owner_id = O.owner_id GROUP BY D.owner_id HAVING SUM(T.cost_of_treatment) = (SELECT MAX(total_spent) FROM (SELECT D.owner_id, SUM(T.cost_of_treatment) AS total_spent FROM Dogs D INNER JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY D.owner_id) AS TotalSpending))"
      ]
    ]
  },
  {
    "id": 938,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN (SELECT treatment_type_code, SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY treatment_type_code) AS T2 ON T1.treatment_type_code = T2.treatment_type_code WHERE T2.total_cost = (SELECT MIN(total_cost) FROM (SELECT SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY treatment_type_code) AS T3)",
        "SELECT description FROM Treatment_Types WHERE treatment_type_code IN (SELECT treatment_type_code FROM Treatments GROUP BY treatment_type_code HAVING SUM(cost_of_treatment) = (SELECT MIN(SUM(cost_of_treatment)) FROM Treatments GROUP BY treatment_type_code))",
        "SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_code IN (SELECT treatment_type_code FROM (SELECT treatment_type_code, SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY treatment_type_code) tmp WHERE total_cost = (SELECT MIN(total_cost) FROM (SELECT SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY treatment_type_code) tmp2))",
        "SELECT T.description FROM Treatment_Types T INNER JOIN (SELECT treatment_type_code, MIN(total_cost) AS min_cost FROM (SELECT treatment_type_code, SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY treatment_type_code) AS Sub GROUP BY treatment_type_code) AS S ON T.treatment_type_code = S.treatment_type_code",
        "SELECT description FROM Treatment_Types WHERE treatment_type_code = (SELECT treatment_type_code FROM Treatments GROUP BY treatment_type_code ORDER BY SUM(cost_of_treatment) ASC LIMIT 1)",
        "SELECT T.treatment_type_description FROM Treatment_Types T WHERE EXISTS (SELECT 1 FROM Treatments WHERE Treatments.treatment_type_code = T.treatment_type_code GROUP BY treatment_type_code HAVING SUM(cost_of_treatment) = (SELECT MIN(SUM(cost_of_treatment)) FROM Treatments GROUP BY treatment_type_code))",
        "SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_code IN (SELECT treatment_type_code FROM Treatments GROUP BY treatment_type_code HAVING SUM(cost_of_treatment) = (SELECT MIN(total_cost) FROM (SELECT SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY treatment_type_code) AS Sub))",
        "SELECT T.treatment_type_description FROM Treatment_Types T JOIN (SELECT treatment_type_code, SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY treatment_type_code HAVING total_cost = (SELECT MIN(total_cost) FROM (SELECT SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY treatment_type_code) AS Sub)) AS S ON T.treatment_type_code = S.treatment_type_code",
        "SELECT T.treatment_type_description FROM Treatment_Types T, (SELECT treatment_type_code, SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY treatment_type_code) AS S WHERE T.treatment_type_code = S.treatment_type_code AND S.total_cost = (SELECT MIN(total_cost) FROM (SELECT SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY treatment_type_code) AS Sub)",
        "SELECT T.treatment_type_description FROM Treatment_Types T WHERE T.treatment_type_code IN (SELECT treatment_type_code FROM Treatments GROUP BY treatment_type_code HAVING SUM(cost_of_treatment) = (SELECT MIN(SUM(cost_of_treatment)) FROM Treatments GROUP BY treatment_type_code))"
      ]
    ]
  },
  {
    "id": 939,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code HAVING SUM(T2.cost_of_treatment) = (SELECT MIN(total_cost) FROM (SELECT SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY treatment_type_code) AS SubQuery)",
        "SELECT description FROM Treatment_Types WHERE treatment_type_code IN (SELECT treatment_type_code FROM Treatments GROUP BY treatment_type_code ORDER BY SUM(cost_of_treatment) ASC LIMIT 1)",
        "SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_code = (SELECT treatment_type_code FROM Treatments GROUP BY treatment_type_code ORDER BY SUM(cost_of_treatment) ASC LIMIT 1)",
        "SELECT T1.treatment_type_description FROM Treatment_Types T1 INNER JOIN (SELECT treatment_type_code, SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY treatment_type_code) T2 ON T1.treatment_type_code = T2.treatment_type_code WHERE T2.total_cost = (SELECT MIN(total_cost) FROM (SELECT SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY treatment_type_code) T3)",
        "SELECT T1.treatment_type_description FROM Treatment_Types T1 WHERE EXISTS (SELECT 1 FROM Treatments T2 WHERE T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code HAVING SUM(T2.cost_of_treatment) = (SELECT MIN(SUM(cost_of_treatment)) FROM Treatments GROUP BY treatment_type_code))",
        "SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_code IN (SELECT treatment_type_code FROM Treatments GROUP BY treatment_type_code HAVING SUM(cost_of_treatment) = (SELECT MIN(SUM(cost_of_treatment)) FROM Treatments GROUP BY treatment_type_code))",
        "SELECT T1.treatment_type_description FROM Treatment_Types T1 JOIN (SELECT treatment_type_code, MIN(total_cost) AS min_cost FROM (SELECT treatment_type_code, SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY treatment_type_code) AS Sub GROUP BY treatment_type_code) T2 ON T1.treatment_type_code = T2.treatment_type_code",
        "SELECT T1.treatment_type_description FROM Treatment_Types T1 WHERE T1.treatment_type_code = (SELECT T2.treatment_type_code FROM Treatments T2 GROUP BY T2.treatment_type_code HAVING SUM(T2.cost_of_treatment) = (SELECT MIN(SUM(T3.cost_of_treatment)) FROM Treatments T3 GROUP BY T3.treatment_type_code))",
        "SELECT description FROM Treatment_Types WHERE treatment_type_code = (SELECT treatment_type_code FROM (SELECT treatment_type_code, SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY treatment_type_code ORDER BY total_cost ASC LIMIT 1) AS LowestCost)",
        "SELECT T1.treatment_type_description FROM Treatment_Types T1 INNER JOIN (SELECT treatment_type_code FROM Treatments GROUP BY treatment_type_code HAVING SUM(cost_of_treatment) = (SELECT MIN(SUM(cost_of_treatment)) FROM Treatments GROUP BY treatment_type_code)) T2 ON T1.treatment_type_code = T2.treatment_type_code"
      ]
    ]
  },
  {
    "id": 940,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT O.owner_id, O.zip_code, SUM(T.cost_of_treatment) AS total_spent FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY O.owner_id, O.zip_code ORDER BY total_spent DESC LIMIT 1",
        "SELECT owner_id, zip_code FROM Owners WHERE owner_id IN (SELECT D.owner_id FROM Dogs D INNER JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY D.owner_id ORDER BY SUM(T.cost_of_treatment) DESC LIMIT 1)",
        "SELECT TOP 1 O.owner_id, O.zip_code, SUM(T.cost_of_treatment) AS TotalCost FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Treatments T ON T.dog_id = D.dog_id GROUP BY O.owner_id, O.zip_code ORDER BY TotalCost DESC",
        "SELECT O.owner_id, O.zip_code FROM Owners O WHERE O.owner_id = (SELECT D.owner_id FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY D.owner_id ORDER BY SUM(T.cost_of_treatment) DESC LIMIT 1)",
        "SELECT O.owner_id, O.zip_code, TotalCost FROM Owners O JOIN (SELECT D.owner_id, SUM(T.cost_of_treatment) AS TotalCost FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY D.owner_id) AS Sub ON O.owner_id = Sub.owner_id ORDER BY TotalCost DESC LIMIT 1",
        "SELECT O.owner_id, O.zip_code FROM Owners O INNER JOIN (SELECT D.owner_id, SUM(T.cost_of_treatment) AS TotalSpent FROM Dogs D INNER JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY D.owner_id) AS Spending ON O.owner_id = Spending.owner_id ORDER BY Spending.TotalSpent DESC FETCH FIRST 1 ROW ONLY",
        "WITH TotalSpending AS (SELECT D.owner_id, SUM(T.cost_of_treatment) AS TotalCost FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY D.owner_id) SELECT O.owner_id, O.zip_code FROM Owners O JOIN TotalSpending TS ON O.owner_id = TS.owner_id ORDER BY TS.TotalCost DESC LIMIT 1",
        "SELECT O.owner_id, O.zip_code, MAX(TotalCost) FROM Owners O JOIN (SELECT D.owner_id, SUM(T.cost_of_treatment) AS TotalCost FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY D.owner_id) AS Costs ON O.owner_id = Costs.owner_id GROUP BY O.owner_id, O.zip_code",
        "SELECT FIRST_VALUE(O.owner_id) OVER (ORDER BY SUM(T.cost_of_treatment) DESC), FIRST_VALUE(O.zip_code) OVER (ORDER BY SUM(T.cost_of_treatment) DESC) FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY O.owner_id, O.zip_code",
        "SELECT O.owner_id, O.zip_code FROM Owners O, Dogs D, Treatments T WHERE O.owner_id = D.owner_id AND D.dog_id = T.dog_id GROUP BY O.owner_id, O.zip_code ORDER BY SUM(T.cost_of_treatment) DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 941,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT O.owner_id, O.zip_code FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id JOIN Treatments AS T ON D.dog_id = T.dog_id GROUP BY O.owner_id, O.zip_code HAVING SUM(T.cost_of_treatment) = (SELECT MAX(total_spent) FROM (SELECT SUM(cost_of_treatment) AS total_spent FROM Treatments GROUP BY dog_id) AS SubQuery)",
        "SELECT owner_id, zip_code FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY owner_id HAVING SUM(cost_of_treatment) = (SELECT MAX(total_cost) FROM (SELECT owner_id, SUM(cost_of_treatment) AS total_cost FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY owner_id) AS TotalCosts))",
        "SELECT O.owner_id, O.zip_code FROM Owners O WHERE O.owner_id IN (SELECT D.owner_id FROM Dogs D INNER JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY D.owner_id HAVING SUM(T.cost_of_treatment) >= ALL (SELECT SUM(T2.cost_of_treatment) FROM Treatments T2 JOIN Dogs D2 ON T2.dog_id = D2.dog_id GROUP BY D2.owner_id))",
        "SELECT O.owner_id, O.zip_code FROM Owners O WHERE EXISTS (SELECT 1 FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id WHERE D.owner_id = O.owner_id GROUP BY D.owner_id HAVING SUM(T.cost_of_treatment) = (SELECT MAX(total_spent) FROM (SELECT SUM(cost_of_treatment) AS total_spent FROM Treatments GROUP BY dog_id) AS SubQuery))",
        "SELECT O.owner_id, O.zip_code FROM Owners O JOIN (SELECT D.owner_id, SUM(T.cost_of_treatment) AS total_spent FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY D.owner_id) AS Spending ON O.owner_id = Spending.owner_id WHERE Spending.total_spent = (SELECT MAX(total_spent) FROM (SELECT SUM(T.cost_of_treatment) AS total_spent FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY D.owner_id) AS TotalSpending)",
        "SELECT O.owner_id, O.zip_code FROM Owners O, (SELECT owner_id, SUM(cost_of_treatment) AS total_spent FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY owner_id) AS Spending WHERE O.owner_id = Spending.owner_id AND Spending.total_spent = (SELECT MAX(total_spent) FROM (SELECT owner_id, SUM(cost_of_treatment) AS total_spent FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY owner_id) AS TotalSpending)",
        "SELECT O.owner_id, O.zip_code FROM Owners O WHERE O.owner_id IN (SELECT D.owner_id FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY D.owner_id ORDER BY SUM(T.cost_of_treatment) DESC LIMIT 1)",
        "SELECT owner_id, zip_code FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY owner_id ORDER BY SUM(cost_of_treatment) DESC LIMIT 1)",
        "SELECT O.owner_id, O.zip_code FROM Owners O JOIN (SELECT D.owner_id FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY D.owner_id HAVING SUM(T.cost_of_treatment) = (SELECT MAX(total_cost) FROM (SELECT SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY dog_id) AS TotalCost)) AS MaxSpenders ON O.owner_id = MaxSpenders.owner_id",
        "SELECT O.owner_id, O.zip_code FROM Owners O WHERE O.owner_id IN (SELECT D.owner_id FROM Dogs D INNER JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY D.owner_id HAVING SUM(T.cost_of_treatment) = (SELECT MAX(total_cost) FROM (SELECT owner_id, SUM(cost_of_treatment) AS total_cost FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY owner_id) AS TotalCost))"
      ]
    ]
  },
  {
    "id": 942,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT p.professional_id, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2",
        "SELECT Professionals.professional_id, Professionals.cell_number FROM Professionals INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id, Professionals.cell_number HAVING COUNT(DISTINCT Treatments.treatment_type_code) >= 2",
        "SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)",
        "SELECT p.professional_id, p.cell_number FROM Professionals p, Treatments t WHERE p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2",
        "SELECT DISTINCT p.professional_id, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE (SELECT COUNT(DISTINCT t.treatment_type_code) FROM Treatments WHERE Treatments.professional_id = p.professional_id) >= 2",
        "SELECT p.professional_id, p.cell_number FROM Professionals p INNER JOIN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2) t ON p.professional_id = t.professional_id",
        "SELECT p.professional_id, p.cell_number FROM Professionals p WHERE EXISTS (SELECT 1 FROM Treatments t WHERE t.professional_id = p.professional_id GROUP BY t.professional_id HAVING COUNT(DISTINCT t.treatment_type_code) >= 2)",
        "SELECT p.professional_id, p.cell_number FROM Professionals p INNER JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2",
        "SELECT p.professional_id, p.cell_number FROM Professionals p WHERE p.professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)",
        "SELECT p.professional_id, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2"
      ]
    ]
  },
  {
    "id": 943,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT P.professional_id, P.cell_number FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id GROUP BY P.professional_id HAVING COUNT(DISTINCT T.treatment_type_code) >= 2",
        "SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)",
        "SELECT P.professional_id, P.cell_number FROM Professionals P WHERE EXISTS (SELECT 1 FROM Treatments T WHERE T.professional_id = P.professional_id GROUP BY T.professional_id HAVING COUNT(DISTINCT T.treatment_type_code) >= 2)",
        "SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) > 1)",
        "SELECT P.professional_id, P.cell_number FROM Professionals P INNER JOIN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2) T ON P.professional_id = T.professional_id",
        "SELECT DISTINCT P.professional_id, P.cell_number FROM Professionals P, Treatments T WHERE P.professional_id = T.professional_id GROUP BY P.professional_id, P.cell_number HAVING COUNT(DISTINCT T.treatment_type_code) >= 2",
        "SELECT P.professional_id, P.cell_number FROM Professionals P WHERE (SELECT COUNT(DISTINCT T.treatment_type_code) FROM Treatments T WHERE T.professional_id = P.professional_id) >= 2",
        "SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)",
        "SELECT P.professional_id, P.cell_number FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id GROUP BY P.professional_id HAVING COUNT(DISTINCT T.treatment_type_code) > 1",
        "SELECT P.professional_id, P.cell_number FROM Professionals P WHERE P.professional_id IN (SELECT T.professional_id FROM Treatments T GROUP BY T.professional_id HAVING COUNT(DISTINCT T.treatment_type_code) >= 2)"
      ]
    ]
  },
  {
    "id": 944,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT P.first_name, P.last_name FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id WHERE T.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)",
        "SELECT first_name, last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments))",
        "SELECT DISTINCT P.first_name, P.last_name FROM Professionals P, Treatments T WHERE P.professional_id = T.professional_id AND T.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)",
        "SELECT first_name, last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING AVG(cost_of_treatment) < (SELECT AVG(cost_of_treatment) FROM Treatments))",
        "SELECT P.first_name, P.last_name FROM Professionals P INNER JOIN Treatments T ON P.professional_id = T.professional_id GROUP BY P.professional_id HAVING AVG(T.cost_of_treatment) < (SELECT AVG(cost_of_treatment) FROM Treatments)",
        "SELECT first_name, last_name FROM Professionals WHERE EXISTS (SELECT 1 FROM Treatments WHERE professional_id = Professionals.professional_id AND cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments))",
        "SELECT P.first_name, P.last_name FROM Professionals P WHERE P.professional_id IN (SELECT T.professional_id FROM Treatments T WHERE T.cost_of_treatment < (SELECT AVG(T2.cost_of_treatment) FROM Treatments T2))",
        "SELECT first_name, last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments) GROUP BY professional_id)",
        "SELECT P.first_name, P.last_name FROM Professionals P WHERE EXISTS (SELECT NULL FROM Treatments T WHERE T.professional_id = P.professional_id AND T.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments))",
        "SELECT first_name, last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments HAVING MIN(cost_of_treatment) < (SELECT AVG(cost_of_treatment) FROM Treatments) GROUP BY professional_id)"
      ]
    ]
  },
  {
    "id": 945,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT P.first_name, P.last_name FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id WHERE T.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)",
        "SELECT first_name, last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments))",
        "SELECT DISTINCT P.first_name, P.last_name FROM Professionals P, Treatments T WHERE P.professional_id = T.professional_id AND T.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)",
        "SELECT P.first_name, P.last_name FROM Professionals P INNER JOIN Treatments T ON P.professional_id = T.professional_id GROUP BY P.professional_id HAVING MIN(T.cost_of_treatment) < (SELECT AVG(cost_of_treatment) FROM Treatments)",
        "SELECT first_name, last_name FROM Professionals WHERE EXISTS (SELECT 1 FROM Treatments WHERE professional_id = Professionals.professional_id AND cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments))",
        "SELECT P.first_name, P.last_name FROM Professionals P WHERE P.professional_id IN (SELECT T.professional_id FROM Treatments T GROUP BY T.professional_id HAVING MIN(T.cost_of_treatment) < (SELECT AVG(cost_of_treatment) FROM Treatments))",
        "SELECT first_name, last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING AVG(cost_of_treatment) < (SELECT AVG(cost_of_treatment) FROM Treatments))",
        "SELECT P.first_name, P.last_name FROM Professionals P WHERE EXISTS (SELECT NULL FROM Treatments T WHERE T.professional_id = P.professional_id AND T.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments))",
        "SELECT first_name, last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments) GROUP BY professional_id)",
        "SELECT P.first_name, P.last_name FROM Professionals P INNER JOIN Treatments T ON P.professional_id = T.professional_id WHERE T.cost_of_treatment < (SELECT AVG(T2.cost_of_treatment) FROM Treatments T2)"
      ]
    ]
  },
  {
    "id": 946,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id",
        "SELECT t.date_of_treatment, p.first_name FROM Treatments t INNER JOIN Professionals p ON t.professional_id = p.professional_id",
        "SELECT date_of_treatment, first_name FROM Treatments, Professionals WHERE Treatments.professional_id = Professionals.professional_id",
        "SELECT a.date_of_treatment, b.first_name FROM Treatments AS a JOIN Professionals AS b ON a.professional_id = b.professional_id",
        "SELECT Treatments.date_of_treatment AS TreatmentDate, Professionals.first_name AS ProfessionalName FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id",
        "SELECT date_of_treatment, first_name FROM Treatments INNER JOIN Professionals ON Treatments.professional_id = Professionals.professional_id",
        "SELECT t.date_of_treatment AS Date, p.first_name AS Name FROM Treatments t, Professionals p WHERE t.professional_id = p.professional_id",
        "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments LEFT JOIN Professionals ON Treatments.professional_id = Professionals.professional_id",
        "SELECT date_of_treatment, first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id ORDER BY date_of_treatment",
        "SELECT DISTINCT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id"
      ]
    ]
  },
  {
    "id": 947,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id",
        "SELECT date_of_treatment, first_name FROM Treatments INNER JOIN Professionals ON Treatments.professional_id = Professionals.professional_id",
        "SELECT t.date_of_treatment, p.first_name FROM Treatments t, Professionals p WHERE t.professional_id = p.professional_id",
        "SELECT a.date_of_treatment, b.first_name FROM Treatments AS a JOIN Professionals AS b ON a.professional_id = b.professional_id",
        "SELECT Treatments.date_of_treatment AS TreatmentDate, Professionals.first_name AS ProfessionalFirstName FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id",
        "SELECT date_of_treatment, first_name FROM Treatments, Professionals WHERE Treatments.professional_id = Professionals.professional_id",
        "SELECT t.date_of_treatment, p.first_name FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id",
        "SELECT TreatmentDate, ProfessionalFirstName FROM (SELECT date_of_treatment AS TreatmentDate, professional_id FROM Treatments) AS T JOIN (SELECT professional_id, first_name AS ProfessionalFirstName FROM Professionals) AS P ON T.professional_id = P.professional_id",
        "SELECT DISTINCT date_of_treatment, first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id",
        "SELECT date_of_treatment AS 'Date of Treatment', first_name AS 'Professional First Name' FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id"
      ]
    ]
  },
  {
    "id": 948,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
        "SELECT t.cost_of_treatment, tt.treatment_type_description FROM Treatments t INNER JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code",
        "SELECT cost_of_treatment, treatment_type_description FROM Treatments, Treatment_Types WHERE Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
        "SELECT a.cost_of_treatment AS Cost, b.treatment_type_description AS Description FROM Treatments a JOIN Treatment_Types b ON a.treatment_type_code = b.treatment_type_code",
        "SELECT `cost_of_treatment`, `treatment_type_description` FROM `Treatments` INNER JOIN `Treatment_Types` ON `Treatments`.`treatment_type_code` = `Treatment_Types`.`treatment_type_code`",
        "SELECT cost_of_treatment AS TreatmentCost, treatment_type_description AS Description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
        "SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments, Treatment_Types WHERE Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
        "SELECT T1.cost_of_treatment, T2.treatment_type_description FROM Treatments T1 JOIN Treatment_Types T2 ON T1.treatment_type_code = T2.treatment_type_code",
        "SELECT cost_of_treatment, treatment_type_description FROM Treatments JOIN Treatment_Types USING(treatment_type_code)",
        "SELECT Treatments.cost_of_treatment AS 'Cost', Treatment_Types.treatment_type_description AS 'Description' FROM Treatments LEFT JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code"
      ]
    ]
  },
  {
    "id": 949,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT T.cost_of_treatment, TT.treatment_type_description FROM Treatments T JOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code",
        "SELECT cost_of_treatment, treatment_type_description FROM Treatments INNER JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
        "SELECT Treatments.cost_of_treatment AS Cost, Treatment_Types.treatment_type_description AS Description FROM Treatments, Treatment_Types WHERE Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
        "SELECT a.cost_of_treatment, b.treatment_type_description FROM Treatments a, Treatment_Types b WHERE a.treatment_type_code = b.treatment_type_code",
        "SELECT `cost_of_treatment`, `treatment_type_description` FROM `Treatments` JOIN `Treatment_Types` ON `Treatments`.`treatment_type_code` = `Treatment_Types`.`treatment_type_code`",
        "SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments LEFT JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
        "SELECT cost_of_treatment AS TreatmentCost, treatment_type_description AS TreatmentDescription FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
        "SELECT T1.cost_of_treatment, T2.treatment_type_description FROM Treatments T1 INNER JOIN Treatment_Types T2 ON T1.treatment_type_code = T2.treatment_type_code",
        "SELECT cost_of_treatment, treatment_type_description FROM Treatments CROSS JOIN Treatment_Types USING(treatment_type_code)",
        "SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments FULL OUTER JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code"
      ]
    ]
  },
  {
    "id": 950,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT O.first_name, O.last_name, S.size_description FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Sizes S ON D.size_code = S.size_code",
        "SELECT first_name, last_name, size_description FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id INNER JOIN Sizes ON Dogs.size_code = Sizes.size_code",
        "SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners, Dogs, Sizes WHERE Owners.owner_id = Dogs.owner_id AND Dogs.size_code = Sizes.size_code",
        "SELECT O.first_name AS OwnerFirstName, O.last_name AS OwnerLastName, S.size_description AS DogSize FROM Owners O, Dogs D, Sizes S WHERE O.owner_id = D.owner_id AND D.size_code = S.size_code",
        "SELECT DISTINCT O.first_name, O.last_name, S.size_description FROM Owners O LEFT JOIN Dogs D ON O.owner_id = D.owner_id LEFT JOIN Sizes S ON D.size_code = S.size_code",
        "SELECT first_name, last_name, size_description FROM Owners JOIN Dogs USING(owner_id) JOIN Sizes USING(size_code)",
        "SELECT O.first_name, O.last_name, GROUP_CONCAT(DISTINCT S.size_description ORDER BY S.size_description) AS Sizes FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Sizes S ON D.size_code = S.size_code GROUP BY O.owner_id",
        "SELECT first_name, last_name, size_description FROM Owners, Dogs, Sizes WHERE Owners.owner_id = Dogs.owner_id AND Dogs.size_code = Sizes.size_code ORDER BY first_name, last_name",
        "SELECT O.first_name, O.last_name, S.size_description FROM Owners O INNER JOIN Dogs D ON O.owner_id = D.owner_id INNER JOIN Sizes S ON D.size_code = S.size_code ORDER BY O.last_name, O.first_name",
        "SELECT DISTINCT O.first_name, O.last_name, S.size_description FROM Owners O, Dogs D, Sizes S WHERE O.owner_id = D.owner_id AND D.size_code = S.size_code ORDER BY O.first_name, O.last_name, S.size_description"
      ]
    ]
  },
  {
    "id": 951,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT O.first_name, O.last_name, S.size_description FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Sizes S ON D.size_code = S.size_code",
        "SELECT first_name, last_name, size_description FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id INNER JOIN Sizes ON Dogs.size_code = Sizes.size_code",
        "SELECT first_name AS OwnerFirstName, last_name AS OwnerLastName, size_description AS DogSize FROM Owners, Dogs, Sizes WHERE Owners.owner_id = Dogs.owner_id AND Dogs.size_code = Sizes.size_code",
        "SELECT O.first_name, O.last_name, S.size_description FROM Owners O, Dogs D, Sizes S WHERE O.owner_id = D.owner_id AND D.size_code = S.size_code",
        "SELECT first_name, last_name, size_description FROM Owners JOIN Dogs USING(owner_id) JOIN Sizes USING(size_code)",
        "SELECT O.first_name, O.last_name, S.size_description FROM Owners O LEFT JOIN Dogs D ON O.owner_id = D.owner_id LEFT JOIN Sizes S ON D.size_code = S.size_code",
        "SELECT DISTINCT O.first_name, O.last_name, S.size_description FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Sizes S ON D.size_code = S.size_code",
        "SELECT first_name, last_name, size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code ORDER BY last_name, first_name",
        "SELECT O.first_name, O.last_name, S.size_description FROM Owners O CROSS JOIN Dogs D ON O.owner_id = D.owner_id CROSS JOIN Sizes S ON D.size_code = S.size_code",
        "SELECT first_name, last_name, size_description FROM Owners, Dogs, Sizes WHERE Owners.owner_id = Dogs.owner_id AND Dogs.size_code = Sizes.size_code ORDER BY Owners.last_name ASC, Owners.first_name ASC"
      ]
    ]
  },
  {
    "id": 952,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id",
        "SELECT O.first_name, D.name FROM Owners O INNER JOIN Dogs D ON O.owner_id = D.owner_id",
        "SELECT first_name, name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id",
        "SELECT first_name AS OwnerFirstName, name AS DogName FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id",
        "SELECT O.first_name, D.name FROM Owners AS O, Dogs AS D WHERE O.owner_id = D.owner_id",
        "SELECT first_name, name FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id",
        "SELECT O.first_name, D.name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id",
        "SELECT first_name, name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id",
        "SELECT DISTINCT O.first_name, D.name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id",
        "SELECT first_name AS Owner, name AS Dog FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY first_name"
      ]
    ]
  },
  {
    "id": 953,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT O.first_name, D.name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id",
        "SELECT first_name, name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id",
        "SELECT first_name AS OwnerFirstName, name AS DogName FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id",
        "SELECT O.first_name, D.name FROM Owners AS O INNER JOIN Dogs AS D ON O.owner_id = D.owner_id",
        "SELECT first_name, name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id",
        "SELECT O.first_name AS OwnerFirstName, D.name AS DogName FROM Owners O, Dogs D WHERE O.owner_id = D.owner_id",
        "SELECT first_name, name FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id",
        "SELECT Owners.first_name, Dogs.name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id",
        "SELECT O.first_name, D.name FROM Owners O, Dogs D WHERE O.owner_id = D.owner_id",
        "SELECT first_name, name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id"
      ]
    ]
  },
  {
    "id": 954,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code HAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT COUNT(*) as count FROM Dogs GROUP BY breed_code) as counts))",
        "SELECT D.name, T.date_of_treatment FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id WHERE D.breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1)",
        "SELECT name, date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE breed_code IN (SELECT breed_code FROM (SELECT breed_code, COUNT(*) as cnt FROM Dogs GROUP BY breed_code ORDER BY cnt ASC) as subquery WHERE cnt = (SELECT MIN(cnt) FROM (SELECT COUNT(*) as cnt FROM Dogs GROUP BY breed_code) as subquery2))",
        "SELECT name, date_of_treatment FROM Dogs, Treatments WHERE Dogs.dog_id = Treatments.dog_id AND Dogs.breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Dogs GROUP BY breed_code))",
        "SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(dog_id) ASC LIMIT 1)",
        "SELECT name, date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1)",
        "SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code IN (SELECT TOP 1 breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC)",
        "SELECT name, date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Dogs GROUP BY breed_code))",
        "SELECT name, date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code IN (SELECT breed_code FROM (SELECT breed_code, COUNT(*) as count FROM Dogs GROUP BY breed_code ORDER BY count) WHERE count = (SELECT MIN(count) FROM (SELECT COUNT(*) as count FROM Dogs GROUP BY breed_code)))",
        "SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Dogs GROUP BY breed_code))"
      ]
    ]
  },
  {
    "id": 955,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT D.name, T.date_of_treatment FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id WHERE D.breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1)",
        "SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1)",
        "SELECT name, date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE breed_code = (SELECT TOP 1 breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*))",
        "SELECT D.name, T.date_of_treatment FROM Dogs D INNER JOIN Treatments T ON D.dog_id = T.dog_id WHERE D.breed_code IN (SELECT TOP 1 breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*))",
        "SELECT name, date_of_treatment FROM Dogs, Treatments WHERE Dogs.dog_id = Treatments.dog_id AND Dogs.breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Dogs GROUP BY breed_code))",
        "SELECT D.name, T.date_of_treatment FROM Dogs D, Treatments T WHERE D.dog_id = T.dog_id AND D.breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Dogs GROUP BY breed_code))",
        "SELECT name, date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code IN (SELECT breed_code FROM (SELECT breed_code, COUNT(*) AS cnt FROM Dogs GROUP BY breed_code ORDER BY cnt ASC) AS subquery WHERE cnt = (SELECT MIN(cnt) FROM (SELECT COUNT(*) AS cnt FROM Dogs GROUP BY breed_code) AS subquery2))",
        "SELECT D.name, T.date_of_treatment FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id WHERE D.breed_code IN (SELECT breed_code FROM (SELECT breed_code, COUNT(*) AS cnt FROM Dogs GROUP BY breed_code ORDER BY cnt) WHERE cnt = (SELECT MIN(cnt) FROM (SELECT COUNT(*) AS cnt FROM Dogs GROUP BY breed_code)))",
        "SELECT name, date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) FETCH FIRST 1 ROWS ONLY)",
        "SELECT D.name, T.date_of_treatment FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id WHERE D.breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) FETCH FIRST 1 ROWS ONLY)"
      ]
    ]
  },
  {
    "id": 956,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT O.first_name, D.name FROM Dogs D INNER JOIN Owners O ON D.owner_id = O.owner_id WHERE O.state = 'Virginia'",
        "SELECT first_name, name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id AND state = 'Virginia'",
        "SELECT O.first_name AS OwnerFirstName, D.name AS DogName FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id WHERE O.state = 'VA'",
        "SELECT first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia'",
        "SELECT O.first_name, D.name FROM Owners O, Dogs D WHERE O.owner_id = D.owner_id AND O.state = 'Virginia'",
        "SELECT first_name, name FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE state = 'Virginia'",
        "SELECT O.first_name, D.name FROM Owners O LEFT JOIN Dogs D ON O.owner_id = D.owner_id WHERE O.state = 'Virginia'",
        "SELECT first_name, name FROM Owners JOIN Dogs USING(owner_id) WHERE state = 'Virginia'",
        "SELECT O.first_name, D.name FROM Owners O RIGHT JOIN Dogs D ON O.owner_id = D.owner_id WHERE O.state = 'Virginia'",
        "SELECT first_name, name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id AND Owners.state = 'Virginia'"
      ]
    ]
  },
  {
    "id": 957,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT O.first_name, D.name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id WHERE O.state = 'Virginia'",
        "SELECT first_name, name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id AND state = 'Virginia'",
        "SELECT O.first_name AS OwnerFirstName, D.name AS DogName FROM Owners O INNER JOIN Dogs D ON O.owner_id = D.owner_id WHERE O.state = 'VA'",
        "SELECT first_name, name FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE state = 'Virginia'",
        "SELECT O.first_name, D.name FROM Owners O, Dogs D WHERE O.owner_id = D.owner_id AND O.state = 'Virginia'",
        "SELECT first_name, name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia'",
        "SELECT O.first_name, D.name FROM Owners O LEFT JOIN Dogs D ON O.owner_id = D.owner_id WHERE O.state = 'Virginia'",
        "SELECT first_name, name FROM Owners O RIGHT JOIN Dogs D ON O.owner_id = D.owner_id WHERE O.state = 'Virginia'",
        "SELECT DISTINCT O.first_name, D.name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id WHERE O.state = 'Virginia'",
        "SELECT O.first_name AS Owner, D.name AS Dog FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id WHERE O.state = 'Virginia' ORDER BY O.first_name"
      ]
    ]
  },
  {
    "id": 958,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id",
        "SELECT date_arrived, date_departed FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)",
        "SELECT D.date_arrived, D.date_departed FROM Dogs D INNER JOIN Treatments T ON D.dog_id = T.dog_id",
        "SELECT date_arrived, date_departed FROM Dogs WHERE EXISTS (SELECT 1 FROM Treatments WHERE Treatments.dog_id = Dogs.dog_id)",
        "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs, Treatments WHERE Dogs.dog_id = Treatments.dog_id",
        "SELECT D.date_arrived, D.date_departed FROM Dogs D, Treatments T WHERE D.dog_id = T.dog_id",
        "SELECT date_arrived, date_departed FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id",
        "SELECT DISTINCT date_arrived, date_departed FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)",
        "SELECT date_arrived, date_departed FROM Dogs WHERE dog_id IN (SELECT DISTINCT dog_id FROM Treatments)",
        "SELECT date_arrived, date_departed FROM Dogs D WHERE EXISTS (SELECT NULL FROM Treatments T WHERE T.dog_id = D.dog_id)"
      ]
    ]
  },
  {
    "id": 959,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT D.date_arrived, D.date_departed FROM Dogs D INNER JOIN Treatments T ON D.dog_id = T.dog_id",
        "SELECT date_arrived, date_departed FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)",
        "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id",
        "SELECT d.date_arrived, d.date_departed FROM Dogs d, Treatments t WHERE d.dog_id = t.dog_id",
        "SELECT date_arrived, date_departed FROM Dogs WHERE EXISTS (SELECT 1 FROM Treatments WHERE Treatments.dog_id = Dogs.dog_id)",
        "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.dog_id",
        "SELECT DISTINCT date_arrived, date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id",
        "SELECT date_arrived, date_departed FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.dog_id IS NOT NULL",
        "SELECT d.date_arrived, d.date_departed FROM Dogs d WHERE EXISTS (SELECT NULL FROM Treatments t WHERE t.dog_id = d.dog_id)",
        "SELECT date_arrived, date_departed FROM Dogs WHERE dog_id IN (SELECT DISTINCT dog_id FROM Treatments)"
      ]
    ]
  },
  {
    "id": 960,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT O.last_name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id WHERE D.date_of_birth = (SELECT MAX(date_of_birth) FROM Dogs)",
        "SELECT last_name FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs WHERE date_of_birth = (SELECT MAX(date_of_birth) FROM Dogs))",
        "SELECT O.last_name FROM Owners O, Dogs D WHERE O.owner_id = D.owner_id AND D.date_of_birth = (SELECT MAX(date_of_birth) FROM Dogs)",
        "SELECT last_name FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs ORDER BY date_of_birth DESC LIMIT 1)",
        "SELECT O.last_name FROM Owners O INNER JOIN Dogs D ON O.owner_id = D.owner_id WHERE D.date_of_birth = (SELECT MAX(D2.date_of_birth) FROM Dogs D2)",
        "SELECT last_name FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.date_of_birth = (SELECT MAX(date_of_birth) FROM Dogs)",
        "SELECT last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs WHERE date_of_birth = (SELECT MAX(date_of_birth) FROM Dogs))",
        "SELECT O.last_name FROM Owners O WHERE EXISTS (SELECT 1 FROM Dogs D WHERE D.owner_id = O.owner_id AND D.date_of_birth = (SELECT MAX(date_of_birth) FROM Dogs))",
        "SELECT last_name FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs WHERE date_of_birth = (SELECT MAX(date_of_birth) FROM Dogs GROUP BY owner_id))",
        "SELECT O.last_name FROM Owners O WHERE O.owner_id IN (SELECT D.owner_id FROM Dogs D WHERE D.date_of_birth = (SELECT MAX(date_of_birth) FROM Dogs))"
      ]
    ]
  },
  {
    "id": 961,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT O.last_name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id WHERE D.date_of_birth = (SELECT MAX(date_of_birth) FROM Dogs)",
        "SELECT last_name FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs WHERE date_of_birth = (SELECT MAX(date_of_birth) FROM Dogs))",
        "SELECT O.last_name FROM Owners O, Dogs D WHERE O.owner_id = D.owner_id AND D.date_of_birth = (SELECT MAX(date_of_birth) FROM Dogs)",
        "SELECT last_name FROM Owners WHERE owner_id IN (SELECT D.owner_id FROM Dogs D WHERE D.date_of_birth = (SELECT MAX(D.date_of_birth) FROM Dogs))",
        "SELECT O.last_name FROM Owners O INNER JOIN Dogs D ON O.owner_id = D.owner_id WHERE D.date_of_birth = (SELECT MAX(date_of_birth) FROM Dogs GROUP BY date_of_birth)",
        "SELECT last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs ORDER BY date_of_birth DESC LIMIT 1)",
        "SELECT O.last_name FROM Owners O WHERE EXISTS (SELECT 1 FROM Dogs D WHERE D.owner_id = O.owner_id AND D.date_of_birth = (SELECT MAX(date_of_birth) FROM Dogs))",
        "SELECT DISTINCT O.last_name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id WHERE D.date_of_birth = (SELECT MAX(date_of_birth) FROM Dogs)",
        "SELECT last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs WHERE date_of_birth = (SELECT MAX(date_of_birth) FROM Dogs))",
        "SELECT O.last_name FROM Owners O WHERE O.owner_id IN (SELECT D.owner_id FROM Dogs D WHERE D.date_of_birth = (SELECT MAX(date_of_birth) FROM Dogs))"
      ]
    ]
  },
  {
    "id": 962,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin')",
        "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
        "SELECT Professionals.email_address FROM Professionals WHERE Professionals.state = 'Hawaii' OR Professionals.state = 'Wisconsin'",
        "SELECT P.email_address FROM Professionals P WHERE P.state = 'Hawaii' OR P.state = 'Wisconsin'",
        "SELECT email_address FROM Professionals WHERE state = 'HI' OR state = 'WI'",
        "SELECT email_address FROM Professionals WHERE state IN ('HI', 'WI')",
        "SELECT DISTINCT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin')",
        "SELECT DISTINCT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
        "SELECT email_address FROM Professionals WHERE state LIKE 'Hawaii' OR state LIKE 'Wisconsin'",
        "SELECT email_address FROM Professionals WHERE state = 'HI' OR state = 'WI'"
      ]
    ]
  },
  {
    "id": 963,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin')",
        "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
        "SELECT Professionals.email_address FROM Professionals WHERE Professionals.state = 'Hawaii' OR Professionals.state = 'Wisconsin'",
        "SELECT p.email_address FROM Professionals p WHERE p.state = 'Hawaii' OR p.state = 'Wisconsin'",
        "SELECT email_address FROM Professionals WHERE state = 'HI' OR state = 'WI'",
        "SELECT email_address FROM Professionals WHERE state IN ('HI', 'WI')",
        "SELECT DISTINCT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin')",
        "SELECT DISTINCT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
        "SELECT email_address FROM Professionals WHERE state LIKE 'Hawaii' OR state LIKE 'Wisconsin'",
        "SELECT email_address FROM Professionals WHERE state IN (SELECT state FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin')"
      ]
    ]
  },
  {
    "id": 964,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT date_arrived, date_departed FROM Dogs",
        "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs",
        "SELECT `date_arrived`, `date_departed` FROM `Dogs`",
        "SELECT date_arrived AS Arrival_Date, date_departed AS Departure_Date FROM Dogs",
        "SELECT Dogs.date_arrived AS Arrival, Dogs.date_departed AS Departure FROM Dogs",
        "SELECT date_arrived, date_departed FROM Dogs WHERE date_arrived IS NOT NULL AND date_departed IS NOT NULL",
        "SELECT * FROM Dogs WHERE date_arrived IS NOT NULL AND date_departed IS NOT NULL",
        "SELECT date_arrived, date_departed FROM Dogs ORDER BY date_arrived",
        "SELECT date_arrived, date_departed FROM Dogs WHERE date_arrived IS NOT NULL",
        "SELECT date_arrived, date_departed FROM Dogs WHERE date_departed IS NOT NULL"
      ]
    ]
  },
  {
    "id": 965,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT date_arrived, date_departed FROM Dogs",
        "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs",
        "SELECT `date_arrived`, `date_departed` FROM `Dogs`",
        "SELECT date_arrived AS ArrivalDate, date_departed AS DepartureDate FROM Dogs",
        "SELECT Dogs.date_arrived AS Arrival, Dogs.date_departed AS Departure FROM Dogs",
        "SELECT d.date_arrived, d.date_departed FROM Dogs d",
        "SELECT date_arrived, date_departed FROM Dogs ORDER BY date_arrived",
        "SELECT * FROM Dogs SELECT date_arrived, date_departed",
        "SELECT date_arrived, date_departed FROM Dogs WHERE date_arrived IS NOT NULL AND date_departed IS NOT NULL",
        "SELECT date_arrived, date_departed FROM Dogs WHERE date_arrived IS NOT NULL"
      ]
    ]
  },
  {
    "id": 966,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT T1.dog_id) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
        "SELECT COUNT(DISTINCT dog_id) FROM Treatments",
        "SELECT COUNT(DISTINCT Dogs.dog_id) FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id",
        "SELECT COUNT(UNIQUE T2.dog_id) FROM Dogs T1 INNER JOIN Treatments T2 ON T1.dog_id = T2.dog_id",
        "SELECT COUNT(*) FROM (SELECT DISTINCT dog_id FROM Treatments) AS unique_dogs",
        "SELECT COUNT(DISTINCT T2.dog_id) FROM Treatments T2 JOIN Dogs T1 ON T2.dog_id = T1.dog_id",
        "SELECT COUNT(DISTINCT dog_id) FROM Treatments WHERE dog_id IN (SELECT dog_id FROM Dogs)",
        "SELECT COUNT(DISTINCT T1.dog_id) FROM Dogs T1, Treatments T2 WHERE T1.dog_id = T2.dog_id",
        "SELECT COUNT(DISTINCT T2.dog_id) FROM Dogs T1 RIGHT JOIN Treatments T2 ON T1.dog_id = T2.dog_id",
        "SELECT COUNT(DISTINCT T2.dog_id) FROM Treatments T2 LEFT JOIN Dogs T1 ON T2.dog_id = T1.dog_id"
      ]
    ]
  },
  {
    "id": 967,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT Dogs.dog_id) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id",
        "SELECT COUNT(UNIQUE Dogs.dog_id) FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id",
        "SELECT COUNT(*) FROM (SELECT DISTINCT dog_id FROM Treatments) AS UniqueDogs",
        "SELECT COUNT(DISTINCT dog_id) FROM Treatments",
        "SELECT COUNT(DISTINCT T1.dog_id) FROM Dogs AS T1, Treatments AS T2 WHERE T1.dog_id = T2.dog_id",
        "SELECT COUNT(*) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)",
        "SELECT COUNT(DISTINCT dog_id) FROM Dogs WHERE EXISTS (SELECT 1 FROM Treatments WHERE Treatments.dog_id = Dogs.dog_id)",
        "SELECT COUNT(DISTINCT Treatments.dog_id) FROM Treatments",
        "SELECT COUNT(DISTINCT dog_id) FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id",
        "SELECT COUNT(*) FROM (SELECT dog_id FROM Treatments GROUP BY dog_id) AS TreatedDogs"
      ]
    ]
  },
  {
    "id": 968,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT professional_id) FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments)",
        "SELECT COUNT(DISTINCT T1.professional_id) FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
        "SELECT COUNT(DISTINCT professional_id) FROM Treatments",
        "SELECT COUNT(*) FROM (SELECT DISTINCT professional_id FROM Treatments) AS unique_professionals",
        "SELECT COUNT(UNIQUE professional_id) FROM Treatments",
        "SELECT COUNT(DISTINCT T1.professional_id) FROM Professionals T1 INNER JOIN Treatments T2 ON T1.professional_id = T2.professional_id",
        "SELECT COUNT(DISTINCT professional_id) FROM Professionals WHERE EXISTS (SELECT 1 FROM Treatments WHERE Treatments.professional_id = Professionals.professional_id)",
        "SELECT COUNT(DISTINCT professional_id) FROM Treatments GROUP BY professional_id",
        "SELECT COUNT(*) FROM (SELECT professional_id FROM Treatments GROUP BY professional_id) AS counted_professionals",
        "SELECT COUNT(DISTINCT professional_id) FROM Professionals P WHERE P.professional_id IN (SELECT professional_id FROM Treatments)"
      ]
    ]
  },
  {
    "id": 969,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT T1.professional_id) FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
        "SELECT COUNT(DISTINCT professional_id) FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments)",
        "SELECT COUNT(DISTINCT P.professional_id) FROM Professionals P INNER JOIN Treatments T ON P.professional_id = T.professional_id",
        "SELECT COUNT(UNIQUE Professionals.professional_id) FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id",
        "SELECT COUNT(*) FROM (SELECT DISTINCT professional_id FROM Treatments) AS unique_professionals",
        "SELECT COUNT(DISTINCT pro.professional_id) FROM Professionals pro, Treatments treat WHERE pro.professional_id = treat.professional_id",
        "SELECT COUNT(DISTINCT pro_id) FROM (SELECT professional_id AS pro_id FROM Treatments) AS subquery",
        "SELECT COUNT(DISTINCT T.professional_id) FROM Treatments T WHERE EXISTS (SELECT 1 FROM Professionals P WHERE P.professional_id = T.professional_id)",
        "SELECT COUNT(DISTINCT professional_id) FROM Professionals WHERE EXISTS (SELECT 1 FROM Treatments WHERE Treatments.professional_id = Professionals.professional_id)",
        "SELECT DISTINCT COUNT(professional_id) FROM Treatments GROUP BY professional_id HAVING COUNT(dog_id) > 0"
      ]
    ]
  },
  {
    "id": 970,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'",
        "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%' ORDER BY city",
        "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%' GROUP BY role_code, street, city, state",
        "SELECT P.role_code, P.street, P.city, P.state FROM Professionals P WHERE P.city LIKE '%West%'",
        "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%' AND state IS NOT NULL",
        "SELECT DISTINCT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'",
        "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%' ORDER BY state, city",
        "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%' ORDER BY role_code",
        "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%' ORDER BY street",
        "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%' ORDER BY city DESC"
      ]
    ]
  },
  {
    "id": 971,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'",
        "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%' ORDER BY city",
        "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%' GROUP BY city, state, street, role_code",
        "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%' ORDER BY state DESC",
        "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%' ORDER BY role_code ASC",
        "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%' ORDER BY street DESC",
        "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%' ORDER BY city ASC, state ASC",
        "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%' ORDER BY city DESC, state DESC",
        "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%' ORDER BY role_code DESC, street ASC",
        "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%' ORDER BY role_code ASC, street DESC"
      ]
    ]
  },
  {
    "id": 972,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'",
        "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE 'North%'",
        "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North'",
        "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%' ORDER BY last_name",
        "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%' ORDER BY first_name",
        "SELECT O.first_name, O.last_name, O.email_address FROM Owners O WHERE O.state LIKE '%North%'",
        "SELECT first_name AS FirstName, last_name AS LastName, email_address AS Email FROM Owners WHERE state LIKE '%North%'",
        "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%' AND email_address IS NOT NULL",
        "SELECT DISTINCT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'",
        "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%' AND email_address <> ''"
      ]
    ]
  },
  {
    "id": 973,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'",
        "SELECT first_name, last_name, email_address FROM Owners WHERE state ILIKE '%North%'",
        "SELECT O.first_name, O.last_name, O.email_address FROM Owners O WHERE O.state LIKE '%North%'",
        "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE 'North%'",
        "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North'",
        "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%' COLLATE NOCASE",
        "SELECT first_name, last_name, email_address FROM Owners WHERE UPPER(state) LIKE UPPER('%North%')",
        "SELECT first_name, last_name, email_address FROM Owners WHERE LOWER(state) LIKE LOWER('%North%')",
        "SELECT first_name, last_name, email_address FROM Owners WHERE state CONTAINS 'North'",
        "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%' ESCAPE '\\'"
      ]
    ]
  },
  {
    "id": 974,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)",
        "SELECT COUNT(dog_id) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)",
        "SELECT COUNT(*) AS Below_Average_Age FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)",
        "SELECT COUNT(*) FROM Dogs D WHERE D.age < (SELECT AVG(age) FROM Dogs)",
        "SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(D.age) FROM Dogs D)",
        "SELECT COUNT(D.dog_id) FROM Dogs D WHERE D.age < (SELECT AVG(age) FROM Dogs)",
        "SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs AS D)",
        "SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(D.age) FROM Dogs D WHERE D.age IS NOT NULL)",
        "SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs WHERE age IS NOT NULL)",
        "SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(D.age) FROM Dogs D WHERE D.age > 0)"
      ]
    ]
  },
  {
    "id": 975,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)",
        "SELECT COUNT(dog_id) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)",
        "WITH AverageAge AS (SELECT AVG(age) AS avg_age FROM Dogs) SELECT COUNT(*) FROM Dogs, AverageAge WHERE Dogs.age < AverageAge.avg_age",
        "SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(Dogs.age) FROM Dogs)",
        "SELECT COUNT(*) AS BelowAverageAgeCount FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs AS SubQuery)",
        "SELECT COUNT(*) FROM Dogs D1 WHERE D1.age < (SELECT AVG(D2.age) FROM Dogs D2)",
        "SELECT COUNT(Dogs.dog_id) FROM Dogs WHERE Dogs.age < (SELECT AVG(age) FROM Dogs GROUP BY age)",
        "SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) AS AverageAge FROM Dogs)",
        "WITH AvgAge AS (SELECT AVG(age) AS Average FROM Dogs) SELECT COUNT(*) FROM Dogs WHERE age < (SELECT Average FROM AvgAge)",
        "SELECT COUNT(*) FROM Dogs D WHERE D.age < (SELECT AVG(age) FROM Dogs)"
      ]
    ]
  },
  {
    "id": 976,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT MAX(cost_of_treatment) FROM Treatments WHERE date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments)",
        "SELECT cost_of_treatment FROM Treatments WHERE date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments) ORDER BY cost_of_treatment DESC LIMIT 1",
        "SELECT TOP 1 cost_of_treatment FROM Treatments WHERE date_of_treatment IN (SELECT MAX(date_of_treatment) FROM Treatments) ORDER BY cost_of_treatment DESC",
        "SELECT cost_of_treatment FROM Treatments WHERE date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments) ORDER BY cost_of_treatment DESC FETCH FIRST ROW ONLY",
        "WITH RecentTreatment AS (SELECT MAX(date_of_treatment) AS RecentDate FROM Treatments) SELECT MAX(cost_of_treatment) FROM Treatments, RecentTreatment WHERE Treatments.date_of_treatment = RecentTreatment.RecentDate",
        "SELECT MAX(T.cost_of_treatment) FROM Treatments T JOIN (SELECT MAX(date_of_treatment) AS MaxDate FROM Treatments) M ON T.date_of_treatment = M.MaxDate",
        "SELECT MAX(cost_of_treatment) FROM Treatments WHERE date_of_treatment = (SELECT date_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1)",
        "SELECT cost_of_treatment FROM Treatments WHERE date_of_treatment = (SELECT date_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1) ORDER BY cost_of_treatment DESC LIMIT 1",
        "SELECT MAX(cost_of_treatment) FROM (SELECT cost_of_treatment, date_of_treatment FROM Treatments ORDER BY date_of_treatment DESC, cost_of_treatment DESC LIMIT 1) AS LatestTreatment",
        "SELECT cost_of_treatment FROM (SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC, cost_of_treatment DESC LIMIT 1) AS MaxCostRecentTreatment"
      ]
    ]
  },
  {
    "id": 977,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT cost_of_treatment FROM Treatments WHERE date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments)",
        "SELECT T.cost_of_treatment FROM Treatments T WHERE T.date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments)",
        "SELECT cost_of_treatment FROM Treatments WHERE date_of_treatment IN (SELECT MAX(date_of_treatment) FROM Treatments)",
        "SELECT Treatments.cost_of_treatment FROM Treatments WHERE Treatments.date_of_treatment = (SELECT MAX(Treatments.date_of_treatment) FROM Treatments)",
        "SELECT cost_of_treatment FROM Treatments WHERE date_of_treatment = (SELECT MAX(T.date_of_treatment) FROM Treatments T)",
        "SELECT T1.cost_of_treatment FROM Treatments T1 JOIN (SELECT MAX(date_of_treatment) AS MaxDate FROM Treatments) T2 ON T1.date_of_treatment = T2.MaxDate",
        "SELECT cost_of_treatment FROM Treatments WHERE date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments GROUP BY date_of_treatment)",
        "SELECT cost_of_treatment FROM Treatments WHERE date_of_treatment = (SELECT date_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1)",
        "SELECT T.cost_of_treatment FROM Treatments T WHERE T.date_of_treatment = (SELECT date_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1)",
        "SELECT cost_of_treatment FROM Treatments WHERE date_of_treatment = (SELECT TOP 1 date_of_treatment FROM Treatments ORDER BY date_of_treatment DESC)"
      ]
    ]
  },
  {
    "id": 978,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)",
        "SELECT COUNT(DISTINCT dog_id) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)",
        "SELECT COUNT(dog_id) FROM Dogs d WHERE NOT EXISTS (SELECT 1 FROM Treatments t WHERE t.dog_id = d.dog_id)",
        "SELECT COUNT(*) FROM Dogs d LEFT JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.dog_id IS NULL",
        "SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT DISTINCT dog_id FROM Treatments WHERE dog_id IS NOT NULL)",
        "SELECT COUNT(*) FROM Dogs d WHERE d.dog_id NOT IN (SELECT t.dog_id FROM Treatments t)",
        "SELECT COUNT(dog_id) FROM Dogs WHERE NOT EXISTS (SELECT NULL FROM Treatments WHERE Dogs.dog_id = Treatments.dog_id)",
        "SELECT COUNT(*) FROM Dogs AS d WHERE NOT EXISTS (SELECT * FROM Treatments AS t WHERE t.dog_id = d.dog_id)",
        "SELECT COUNT(*) FROM Dogs d WHERE d.dog_id NOT IN (SELECT DISTINCT t.dog_id FROM Treatments t WHERE t.dog_id IS NOT NULL)",
        "SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments WHERE dog_id IS NOT NULL)"
      ]
    ]
  },
  {
    "id": 979,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)",
        "SELECT COUNT(DISTINCT dog_id) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)",
        "SELECT COUNT(dog_id) FROM Dogs d WHERE NOT EXISTS (SELECT 1 FROM Treatments t WHERE t.dog_id = d.dog_id)",
        "SELECT COUNT(*) FROM Dogs d LEFT JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.dog_id IS NULL",
        "SELECT COUNT(DISTINCT d.dog_id) FROM Dogs d LEFT OUTER JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.dog_id IS NULL",
        "SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT DISTINCT dog_id FROM Treatments WHERE dog_id IS NOT NULL)",
        "SELECT COUNT(*) FROM Dogs d WHERE NOT EXISTS (SELECT NULL FROM Treatments t WHERE t.dog_id = d.dog_id)",
        "SELECT COUNT(*) FROM (SELECT dog_id FROM Dogs EXCEPT SELECT dog_id FROM Treatments) AS UntreatedDogs",
        "SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments GROUP BY dog_id)",
        "SELECT COUNT(*) FROM Dogs d WHERE d.dog_id NOT IN (SELECT t.dog_id FROM Treatments t)"
      ]
    ]
  },
  {
    "id": 980,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT o.owner_id) FROM Owners o LEFT JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.owner_id IS NULL;",
        "SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs);",
        "SELECT COUNT(owner_id) FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs);",
        "SELECT COUNT(DISTINCT Owners.owner_id) FROM Owners LEFT OUTER JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.owner_id IS NULL;",
        "SELECT COUNT(*) FROM (SELECT owner_id FROM Owners EXCEPT SELECT owner_id FROM Dogs) AS Temp;",
        "SELECT COUNT(DISTINCT o.owner_id) FROM Owners o WHERE NOT EXISTS (SELECT 1 FROM Dogs d WHERE d.owner_id = o.owner_id);",
        "SELECT COUNT(*) FROM Owners o WHERE o.owner_id NOT IN (SELECT d.owner_id FROM Dogs d);",
        "SELECT COUNT(DISTINCT owner_id) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE owner_id IS NOT NULL);",
        "SELECT COUNT(owner_id) FROM Owners o WHERE NOT EXISTS (SELECT NULL FROM Dogs d WHERE d.owner_id = o.owner_id);",
        "SELECT COUNT(DISTINCT o.owner_id) FROM Owners o LEFT JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.dog_id IS NULL;"
      ]
    ]
  },
  {
    "id": 981,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE abandoned_yn = 'N')",
        "SELECT COUNT(owner_id) FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs WHERE abandoned_yn = 'N')",
        "SELECT COUNT(DISTINCT O.owner_id) FROM Owners O LEFT JOIN Dogs D ON O.owner_id = D.owner_id WHERE D.owner_id IS NULL OR D.abandoned_yn = 'N'",
        "SELECT COUNT(*) FROM Owners WHERE NOT EXISTS (SELECT 1 FROM Dogs WHERE Owners.owner_id = Dogs.owner_id AND abandoned_yn = 'N')",
        "SELECT COUNT(*) FROM Owners O WHERE NOT EXISTS (SELECT NULL FROM Dogs D WHERE D.owner_id = O.owner_id AND D.abandoned_yn = 'N')",
        "SELECT COUNT(1) FROM Owners O WHERE O.owner_id NOT IN (SELECT owner_id FROM Dogs WHERE abandoned_yn = 'N')",
        "SELECT COUNT(owner_id) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE abandoned_yn = 'N' GROUP BY owner_id)",
        "SELECT COUNT(*) FROM Owners O WHERE O.owner_id NOT IN (SELECT D.owner_id FROM Dogs D WHERE D.abandoned_yn = 'N')",
        "SELECT COUNT(DISTINCT owner_id) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE abandoned_yn = 'N')",
        "SELECT COUNT(*) FROM (SELECT owner_id FROM Owners EXCEPT SELECT owner_id FROM Dogs WHERE abandoned_yn = 'N') AS SubQuery"
      ]
    ]
  },
  {
    "id": 982,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
        "SELECT COUNT(professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments)",
        "SELECT COUNT(DISTINCT professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
        "SELECT COUNT(*) FROM Professionals P WHERE NOT EXISTS (SELECT 1 FROM Treatments T WHERE T.professional_id = P.professional_id)",
        "SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments WHERE professional_id IS NOT NULL)",
        "SELECT COUNT(professional_id) FROM Professionals WHERE NOT EXISTS (SELECT NULL FROM Treatments WHERE Treatments.professional_id = Professionals.professional_id)",
        "SELECT COUNT(*) FROM Professionals LEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.professional_id IS NULL",
        "SELECT COUNT(*) FROM Professionals P WHERE P.professional_id NOT IN (SELECT T.professional_id FROM Treatments T)",
        "SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments GROUP BY professional_id)",
        "SELECT COUNT(professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments WHERE professional_id IS NOT NULL GROUP BY professional_id)"
      ]
    ]
  },
  {
    "id": 983,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
        "SELECT COUNT(professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments)",
        "SELECT COUNT(DISTINCT professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
        "SELECT COUNT(*) FROM Professionals P WHERE NOT EXISTS (SELECT 1 FROM Treatments T WHERE T.professional_id = P.professional_id)",
        "SELECT COUNT(professional_id) FROM Professionals WHERE NOT EXISTS (SELECT NULL FROM Treatments WHERE Treatments.professional_id = Professionals.professional_id)",
        "SELECT COUNT(*) FROM Professionals LEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.professional_id IS NULL",
        "SELECT COUNT(DISTINCT Professionals.professional_id) FROM Professionals LEFT OUTER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.professional_id IS NULL",
        "SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments WHERE professional_id IS NOT NULL)",
        "SELECT COUNT(*) FROM Professionals AS P WHERE NOT EXISTS (SELECT * FROM Treatments AS T WHERE T.professional_id = P.professional_id)",
        "SELECT COUNT(professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments GROUP BY professional_id)"
      ]
    ]
  },
  {
    "id": 984,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1",
        "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1",
        "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1'",
        "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = '1'",
        "SELECT name AS DogName, age AS DogAge, weight AS DogWeight FROM Dogs WHERE abandoned_yn = 1",
        "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = TRUE",
        "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 'YES'",
        "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 'true'",
        "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE abandoned_yn = TRUE",
        "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE abandoned_yn = 'YES'"
      ]
    ]
  },
  {
    "id": 985,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1",
        "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1",
        "SELECT name AS DogName, age AS DogAge, weight AS DogWeight FROM Dogs WHERE abandoned_yn = '1'",
        "SELECT d.name, d.age, d.weight FROM Dogs d WHERE d.abandoned_yn = 1",
        "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1'",
        "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE abandoned_yn = '1'",
        "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1 ORDER BY name",
        "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1 AND age IS NOT NULL",
        "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1 AND weight IS NOT NULL",
        "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1 AND age > 0"
      ]
    ]
  },
  {
    "id": 986,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT AVG(age) FROM Dogs",
        "SELECT AVG(Dogs.age) AS AverageAge FROM Dogs",
        "SELECT AVG(age) AS Average_Age FROM Dogs",
        "SELECT AVG(Dogs.age) FROM Dogs",
        "SELECT AVG(age) FROM Dogs WHERE age IS NOT NULL",
        "SELECT AVG(Dogs.age) AS avg_age FROM Dogs",
        "SELECT AVG(age) AS AverageAge FROM Dogs WHERE age > 0",
        "SELECT AVG(Dogs.age) FROM Dogs WHERE Dogs.age IS NOT NULL",
        "SELECT AVG(age) FROM Dogs WHERE age > 0",
        "SELECT AVG(Dogs.age) AS Average_Age FROM Dogs WHERE Dogs.age > 0"
      ]
    ]
  },
  {
    "id": 987,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT AVG(age) FROM Dogs",
        "SELECT AVG(Dogs.age) AS Average_Age FROM Dogs",
        "SELECT AVG(age) AS AverageAge FROM Dogs",
        "SELECT AVG(Dogs.age) FROM Dogs",
        "SELECT AVG(age) FROM Dogs WHERE age IS NOT NULL",
        "SELECT AVG(Dogs.age) FROM Dogs WHERE Dogs.age IS NOT NULL",
        "SELECT AVG(age) AS AvgAge FROM Dogs",
        "SELECT AVG(age) FROM Dogs WHERE age > 0",
        "SELECT AVG(Dogs.age) FROM Dogs WHERE Dogs.age > 0",
        "SELECT AVG(age) AS Average_Age FROM Dogs WHERE age IS NOT NULL"
      ]
    ]
  },
  {
    "id": 988,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT MAX(age) FROM Dogs",
        "SELECT age FROM Dogs ORDER BY age DESC LIMIT 1",
        "SELECT TOP 1 age FROM Dogs ORDER BY age DESC",
        "SELECT age FROM Dogs WHERE age = (SELECT MAX(age) FROM Dogs)",
        "SELECT MAX(Dogs.age) AS OldestAge FROM Dogs",
        "SELECT age AS OldestDogAge FROM Dogs ORDER BY age DESC FETCH FIRST ROW ONLY",
        "SELECT * FROM (SELECT age FROM Dogs ORDER BY age DESC) WHERE ROWNUM = 1",
        "SELECT age FROM Dogs WHERE age IN (SELECT MAX(age) FROM Dogs)",
        "SELECT TOP (1) age FROM Dogs ORDER BY age DESC",
        "SELECT age FROM Dogs ORDER BY age DESC LIMIT 1 OFFSET 0"
      ]
    ]
  },
  {
    "id": 989,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT MAX(age) FROM Dogs",
        "SELECT age FROM Dogs ORDER BY age DESC LIMIT 1",
        "SELECT TOP 1 age FROM Dogs ORDER BY age DESC",
        "SELECT age FROM Dogs WHERE age = (SELECT MAX(age) FROM Dogs)",
        "SELECT MAX(Dogs.age) AS OldestAge FROM Dogs",
        "SELECT age AS OldestDogAge FROM Dogs ORDER BY age DESC FETCH FIRST ROW ONLY",
        "SELECT * FROM (SELECT age FROM Dogs ORDER BY age DESC) WHERE ROWNUM = 1",
        "SELECT age FROM Dogs WHERE age IN (SELECT MAX(age) FROM Dogs)",
        "SELECT MAX(age) AS MaximumAge FROM Dogs GROUP BY age ORDER BY age DESC LIMIT 1",
        "SELECT age FROM Dogs ORDER BY age DESC, dog_id ASC LIMIT 1"
      ]
    ]
  },
  {
    "id": 990,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT charge_type, charge_amount FROM Charges",
        "SELECT charge_type, SUM(charge_amount) AS TotalAmount FROM Charges GROUP BY charge_type",
        "SELECT charge_type, AVG(charge_amount) AS AverageAmount FROM Charges GROUP BY charge_type",
        "SELECT DISTINCT charge_type, charge_amount FROM Charges",
        "SELECT charge_type, charge_amount FROM Charges ORDER BY charge_type",
        "SELECT charge_type, charge_amount FROM Charges GROUP BY charge_type, charge_amount",
        "SELECT C.charge_type, C.charge_amount FROM Charges C",
        "SELECT charge_type AS Type, charge_amount AS Amount FROM Charges",
        "SELECT * FROM Charges",
        "SELECT charge_type, MAX(charge_amount) FROM Charges GROUP BY charge_type"
      ]
    ]
  },
  {
    "id": 991,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT charge_type, charge_amount FROM Charges",
        "SELECT Charges.charge_type, Charges.charge_amount FROM Charges",
        "SELECT c.charge_type, c.charge_amount FROM Charges AS c",
        "SELECT charge_type AS Type, charge_amount AS Amount FROM Charges",
        "SELECT DISTINCT charge_type, charge_amount FROM Charges",
        "SELECT charge_type, SUM(charge_amount) FROM Charges GROUP BY charge_type",
        "SELECT charge_type, charge_amount FROM Charges ORDER BY charge_type",
        "SELECT * FROM Charges",
        "SELECT charge_type, AVG(charge_amount) FROM Charges GROUP BY charge_type",
        "SELECT charge_type, MAX(charge_amount) FROM Charges GROUP BY charge_type"
      ]
    ]
  },
  {
    "id": 992,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT MAX(charge_amount) FROM Charges",
        "SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1",
        "SELECT TOP 1 charge_amount FROM Charges ORDER BY charge_amount DESC",
        "SELECT charge_amount FROM Charges WHERE charge_amount = (SELECT MAX(charge_amount) FROM Charges)",
        "SELECT charge_amount AS HighestCharge FROM Charges ORDER BY charge_amount DESC FETCH FIRST ROW ONLY",
        "SELECT charge_amount FROM Charges WHERE charge_amount IN (SELECT MAX(charage_amount) FROM Charges)",
        "SELECT MAX(Charges.charge_amount) AS MostExpensive FROM Charges",
        "SELECT charge_amount FROM Charges ORDER BY charge_amount DESC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING",
        "SELECT charge_amount FROM Charges HAVING charge_amount = MAX(charge_amount)",
        "SELECT charge_amount FROM (SELECT charge_amount FROM Charges ORDER BY charge_amount DESC) WHERE ROWNUM = 1"
      ]
    ]
  },
  {
    "id": 993,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT MAX(charge_amount) FROM Charges",
        "SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1",
        "SELECT TOP 1 charge_amount FROM Charges ORDER BY charge_amount DESC",
        "SELECT charge_amount FROM Charges WHERE charge_amount = (SELECT MAX(charge_amount) FROM Charges)",
        "SELECT charge_amount FROM Charges ORDER BY charge_amount DESC FETCH FIRST ROW ONLY",
        "SELECT charge_amount FROM Charges WHERE charge_amount IN (SELECT MAX(charge_amount) FROM Charges)",
        "SELECT MAX(charge_amount) AS HighestCharge FROM Charges",
        "SELECT charge_amount FROM Charges ORDER BY charge_amount DESC, charge_type ASC LIMIT 1",
        "SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1 OFFSET 0",
        "SELECT charge_amount FROM Charges WHERE charge_amount = (SELECT MAX(charge_amount) FROM Charges LIMIT 1)"
      ]
    ]
  },
  {
    "id": 994,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT email_address, cell_number, home_phone FROM Professionals",
        "SELECT p.email_address, p.cell_number, p.home_phone FROM Professionals p",
        "SELECT Professionals.email_address AS Email, Professionals.cell_number AS CellPhone, Professionals.home_phone AS HomePhone FROM Professionals",
        "SELECT email_address AS Email, cell_number AS Cell, home_phone AS Home FROM Professionals",
        "SELECT * FROM Professionals WHERE email_address IS NOT NULL AND cell_number IS NOT NULL AND home_phone IS NOT NULL",
        "SELECT email_address, cell_number, home_phone FROM Professionals WHERE email_address <> '' AND cell_number <> '' AND home_phone <> ''",
        "SELECT DISTINCT email_address, cell_number, home_phone FROM Professionals",
        "SELECT email_address, cell_number, home_phone FROM Professionals ORDER BY email_address",
        "SELECT email_address, cell_number, home_phone FROM Professionals GROUP BY email_address, cell_number, home_phone",
        "SELECT email_address, cell_number, home_phone FROM Professionals WHERE email_address IS NOT NULL"
      ]
    ]
  },
  {
    "id": 995,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT email_address, cell_number, home_phone FROM Professionals",
        "SELECT p.email_address, p.cell_number, p.home_phone FROM Professionals p",
        "SELECT Professionals.email_address AS Email, Professionals.cell_number AS CellPhone, Professionals.home_phone AS HomePhone FROM Professionals",
        "SELECT email_address AS Email, cell_number AS CellPhone, home_phone AS HomePhone FROM Professionals",
        "SELECT * FROM Professionals WHERE email_address IS NOT NULL AND cell_number IS NOT NULL AND home_phone IS NOT NULL",
        "SELECT email_address, cell_number, home_phone FROM Professionals WHERE email_address <> '' AND cell_number <> '' AND home_phone <> ''",
        "SELECT DISTINCT email_address, cell_number, home_phone FROM Professionals",
        "SELECT email_address, cell_number, home_phone FROM Professionals ORDER BY email_address",
        "SELECT email_address, cell_number, home_phone FROM Professionals GROUP BY email_address, cell_number, home_phone",
        "SELECT email_address, cell_number, home_phone FROM Professionals WHERE email_address IS NOT NULL"
      ]
    ]
  },
  {
    "id": 996,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT DISTINCT B.breed_name, S.size_description FROM Breeds B JOIN Dogs D ON B.breed_code = D.breed_code JOIN Sizes S ON D.size_code = S.size_code",
        "SELECT DISTINCT breed_name, size_description FROM Breeds, Sizes, Dogs WHERE Breeds.breed_code = Dogs.breed_code AND Sizes.size_code = Dogs.size_code",
        "SELECT DISTINCT breed_name AS BreedType, size_description AS SizeType FROM Breeds INNER JOIN Dogs ON Breeds.breed_code = Dogs.breed_code INNER JOIN Sizes ON Dogs.size_code = Sizes.size_code",
        "SELECT DISTINCT B.breed_name, S.size_description FROM Dogs D INNER JOIN Breeds B ON D.breed_code = B.breed_code INNER JOIN Sizes S ON D.size_code = S.size_code",
        "SELECT DISTINCT breed_name, size_description FROM Breeds JOIN Dogs USING(breed_code) JOIN Sizes USING(size_code)",
        "SELECT DISTINCT B.breed_name, S.size_description FROM Breeds B, Sizes S, Dogs D WHERE B.breed_code = D.breed_code AND S.size_code = D.size_code",
        "SELECT DISTINCT breed_name, size_description FROM Breeds CROSS JOIN Sizes JOIN Dogs ON Breeds.breed_code = Dogs.breed_code AND Sizes.size_code = Dogs.size_code",
        "SELECT DISTINCT B.breed_name, S.size_description FROM Dogs D, Breeds B, Sizes S WHERE D.breed_code = B.breed_code AND D.size_code = S.size_code",
        "SELECT DISTINCT B.breed_name AS Breed, S.size_description AS Size FROM Breeds B LEFT JOIN Dogs D ON B.breed_code = D.breed_code LEFT JOIN Sizes S ON D.size_code = S.size_code",
        "SELECT DISTINCT breed_name, size_description FROM Breeds, Sizes WHERE EXISTS (SELECT 1 FROM Dogs WHERE Breeds.breed_code = Dogs.breed_code AND Sizes.size_code = Dogs.size_code)"
      ]
    ]
  },
  {
    "id": 997,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT DISTINCT B.breed_name, S.size_description FROM Dogs D JOIN Breeds B ON D.breed_code = B.breed_code JOIN Sizes S ON D.size_code = S.size_code",
        "SELECT DISTINCT breed_name, size_description FROM Breeds INNER JOIN Dogs ON Breeds.breed_code = Dogs.breed_code INNER JOIN Sizes ON Dogs.size_code = Sizes.size_code",
        "SELECT DISTINCT breed_name AS BreedType, size_description AS SizeType FROM Breeds, Sizes, Dogs WHERE Breeds.breed_code = Dogs.breed_code AND Sizes.size_code = Dogs.size_code",
        "SELECT DISTINCT B.breed_name, S.size_description FROM Dogs AS D, Breeds AS B, Sizes AS S WHERE D.breed_code = B.breed_code AND D.size_code = S.size_code",
        "SELECT DISTINCT breed_name, size_description FROM Breeds JOIN Dogs USING(breed_code) JOIN Sizes USING(size_code)",
        "SELECT DISTINCT B.breed_name AS Breed, S.size_description AS Size FROM Breeds B, Sizes S, Dogs D WHERE B.breed_code = D.breed_code AND S.size_code = D.size_code",
        "SELECT DISTINCT breed_name, size_description FROM Breeds b, Sizes s JOIN Dogs d ON b.breed_code = d.breed_code AND s.size_code = d.size_code",
        "SELECT DISTINCT B.breed_name, S.size_description FROM Dogs D LEFT JOIN Breeds B ON D.breed_code = B.breed_code LEFT JOIN Sizes S ON D.size_code = S.size_code",
        "SELECT DISTINCT breed_name, size_description FROM Breeds CROSS JOIN Sizes JOIN Dogs ON Breeds.breed_code = Dogs.breed_code AND Sizes.size_code = Dogs.size_code",
        "SELECT DISTINCT B.breed_name, S.size_description FROM Dogs D RIGHT JOIN Breeds B ON D.breed_code = B.breed_code RIGHT JOIN Sizes S ON D.size_code = S.size_code"
      ]
    ]
  },
  {
    "id": 998,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT P.first_name, TT.treatment_type_description FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id JOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code",
        "SELECT first_name, treatment_type_description FROM Professionals INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id INNER JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
        "SELECT first_name, treatment_type_description FROM Professionals, Treatments, Treatment_Types WHERE Professionals.professional_id = Treatments.professional_id AND Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
        "SELECT P.first_name AS FirstName, TT.treatment_type_description AS TreatmentDescription FROM Professionals P, Treatments T, Treatment_Types TT WHERE P.professional_id = T.professional_id AND T.treatment_type_code = TT.treatment_type_code",
        "SELECT DISTINCT P.first_name, TT.treatment_type_description FROM Professionals P LEFT JOIN Treatments T ON P.professional_id = T.professional_id LEFT JOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code",
        "SELECT P.first_name, TT.treatment_type_description FROM Professionals P RIGHT JOIN Treatments T ON P.professional_id = T.professional_id RIGHT JOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code",
        "SELECT first_name, treatment_type_description FROM Professionals JOIN Treatments USING (professional_id) JOIN Treatment_Types USING (treatment_type_code)",
        "SELECT first_name, treatment_type_description FROM Professionals CROSS JOIN Treatments ON Professionals.professional_id = Treatments.professional_id CROSS JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
        "SELECT P.first_name, TT.treatment_type_description FROM Professionals P INNER JOIN Treatments T ON P.professional_id = T.professional_id INNER JOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code ORDER BY P.first_name",
        "SELECT first_name, treatment_type_description FROM Professionals NATURAL JOIN Treatments NATURAL JOIN Treatment_Types"
      ]
    ]
  },
  {
    "id": 999,
    "db_id": "dog_kennels",
    "infer_predictions": [
      [
        "SELECT P.first_name, TT.treatment_type_description FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id JOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code",
        "SELECT first_name, treatment_type_description FROM Professionals INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id INNER JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
        "SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals, Treatments, Treatment_Types WHERE Professionals.professional_id = Treatments.professional_id AND Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
        "SELECT P.first_name AS FirstName, TT.treatment_type_description AS TreatmentDescription FROM Professionals P, Treatments T, Treatment_Types TT WHERE P.professional_id = T.professional_id AND T.treatment_type_code = TT.treatment_type_code",
        "SELECT DISTINCT first_name, treatment_type_description FROM Professionals JOIN Treatments USING (professional_id) JOIN Treatment_Types USING (treatment_type_code)",
        "SELECT first_name, treatment_type_description FROM Professionals P LEFT JOIN Treatments T ON P.professional_id = T.professional_id LEFT JOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code",
        "SELECT first_name, treatment_type_description FROM Professionals CROSS JOIN Treatments ON Professionals.professional_id = Treatments.professional_id CROSS JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
        "SELECT first_name, treatment_type_description FROM Professionals P RIGHT JOIN Treatments T ON P.professional_id = T.professional_id RIGHT JOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code",
        "SELECT P.first_name, TT.treatment_type_description FROM Professionals P INNER JOIN Treatments T ON P.professional_id = T.professional_id INNER JOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code ORDER BY P.first_name",
        "SELECT first_name, treatment_type_description FROM Professionals NATURAL JOIN Treatments NATURAL JOIN Treatment_Types"
      ]
    ]
  },
  {
    "id": 1000,
    "db_id": "singer",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM singer",
        "SELECT COUNT(Singer_ID) FROM singer",
        "SELECT COUNT(DISTINCT Singer_ID) FROM singer",
        "SELECT COUNT(1) FROM singer",
        "SELECT COUNT(Singer_ID) AS NumberOfSingers FROM singer",
        "SELECT COUNT(*) AS TotalSingers FROM singer",
        "SELECT COUNT(DISTINCT Name) FROM singer",
        "SELECT COUNT(*) FROM (SELECT DISTINCT Singer_ID FROM singer) AS UniqueSingers",
        "SELECT COUNT(*) FROM singer GROUP BY Singer_ID",
        "SELECT COUNT(*) FROM singer WHERE Singer_ID IS NOT NULL"
      ]
    ]
  },
  {
    "id": 1001,
    "db_id": "singer",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM singer",
        "SELECT COUNT(Singer_ID) FROM singer",
        "SELECT COUNT(1) FROM singer",
        "SELECT COUNT(Singer_ID) AS TotalSingers FROM singer",
        "SELECT COUNT(*) AS NumberOfSingers FROM singer",
        "SELECT COUNT(DISTINCT Singer_ID) FROM singer",
        "SELECT COUNT(DISTINCT Name) FROM singer",
        "SELECT COUNT(*) FROM singer GROUP BY Singer_ID",
        "SELECT COUNT(*) FROM singer WHERE Singer_ID IS NOT NULL",
        "SELECT COUNT(*) AS Total_Count FROM singer"
      ]
    ]
  },
  {
    "id": 1002,
    "db_id": "singer",
    "infer_predictions": [
      [
        "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC, Name ASC",
        "SELECT Name FROM singer ORDER BY Net_Worth_Millions, Name",
        "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC, Name",
        "SELECT Name FROM singer ORDER BY Net_Worth_Millions, Name ASC",
        "SELECT s.Name FROM singer s ORDER BY s.Net_Worth_Millions ASC, s.Name ASC",
        "SELECT s.Name FROM singer s ORDER BY s.Net_Worth_Millions, s.Name",
        "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC, Name COLLATE NOCASE ASC",
        "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC, UPPER(Name) ASC",
        "SELECT Name FROM singer ORDER BY CAST(Net_Worth_Millions AS DECIMAL) ASC, Name ASC",
        "SELECT Name FROM singer ORDER BY CONVERT(DECIMAL, Net_Worth_Millions) ASC, Name ASC"
      ]
    ]
  },
  {
    "id": 1003,
    "db_id": "singer",
    "infer_predictions": [
      [
        "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC, Singer_ID ASC",
        "SELECT Name FROM singer ORDER BY Net_Worth_Millions, Singer_ID",
        "SELECT Name FROM singer SORT BY Net_Worth_Millions ASCENDING, Singer_ID ASCENDING",
        "SELECT Name FROM singer WHERE Net_Worth_Millions IS NOT NULL ORDER BY Net_Worth_Millions ASC, Singer_ID ASC",
        "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC, Singer_ID",
        "SELECT Name FROM singer ORDER BY Net_Worth_Millions, Singer_ID ASC",
        "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASCENDING, Singer_ID ASCENDING",
        "SELECT Name FROM singer ORDER BY CAST(Net_Worth_Millions AS DECIMAL) ASC, CAST(Singer_ID AS INT) ASC",
        "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC, Singer_ID ASCENDING",
        "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASCENDING, Singer_ID"
      ]
    ]
  },
  {
    "id": 1004,
    "db_id": "singer",
    "infer_predictions": [
      [
        "SELECT Birth_Year, Citizenship FROM singer",
        "SELECT singer.Birth_Year, singer.Citizenship FROM singer",
        "SELECT Birth_Year AS Year_of_Birth, Citizenship AS Nationality FROM singer",
        "SELECT s.Birth_Year, s.Citizenship FROM singer s",
        "SELECT Birth_Year, Citizenship FROM singer ORDER BY Birth_Year",
        "SELECT DISTINCT Birth_Year, Citizenship FROM singer",
        "SELECT Birth_Year, Citizenship FROM singer WHERE Birth_Year IS NOT NULL",
        "SELECT Birth_Year, Citizenship FROM singer GROUP BY Birth_Year, Citizenship",
        "SELECT * FROM singer WHERE Birth_Year IS NOT NULL AND Citizenship IS NOT NULL",
        "SELECT Birth_Year, Citizenship FROM singer WHERE Citizenship <> ''"
      ]
    ]
  },
  {
    "id": 1005,
    "db_id": "singer",
    "infer_predictions": [
      [
        "SELECT Birth_Year, Citizenship FROM singer",
        "SELECT singer.Birth_Year, singer.Citizenship FROM singer",
        "SELECT Birth_Year AS Year_of_Birth, Citizenship AS Nationality FROM singer",
        "SELECT s.Birth_Year, s.Citizenship FROM singer s",
        "SELECT DISTINCT Birth_Year, Citizenship FROM singer",
        "SELECT Birth_Year, Citizenship FROM singer ORDER BY Birth_Year",
        "SELECT Birth_Year, Citizenship FROM singer GROUP BY Birth_Year, Citizenship",
        "SELECT * FROM (SELECT Birth_Year, Citizenship FROM singer) AS BirthDetails",
        "SELECT Birth_Year, Citizenship FROM singer WHERE Birth_Year IS NOT NULL AND Citizenship IS NOT NULL",
        "SELECT Birth_Year AS 'Birth Year', Citizenship AS 'Country of Citizenship' FROM singer"
      ]
    ]
  },
  {
    "id": 1006,
    "db_id": "singer",
    "infer_predictions": [
      [
        "SELECT Name FROM singer WHERE Citizenship <> 'France'",
        "SELECT Name FROM singer WHERE NOT Citizenship = 'France'",
        "SELECT Name FROM singer WHERE Citizenship != 'France'",
        "SELECT Name FROM singer WHERE Citizenship NOT IN ('France')",
        "SELECT Name FROM singer WHERE Citizenship NOT LIKE 'France'",
        "SELECT Name FROM singer WHERE Citizenship IS NOT 'France'",
        "SELECT Name FROM singer WHERE Citizenship NOT EQUALS 'France'",
        "SELECT Name FROM singer WHERE Citizenship IS DISTINCT FROM 'France'",
        "SELECT Name FROM singer WHERE 'France' <> Citizenship",
        "SELECT Name FROM singer WHERE 'France' NOT IN (Citizenship)"
      ]
    ]
  },
  {
    "id": 1007,
    "db_id": "singer",
    "infer_predictions": [
      [
        "SELECT Name FROM singer WHERE Citizenship <> 'French'",
        "SELECT Name FROM singer WHERE NOT Citizenship = 'French'",
        "SELECT Name FROM singer WHERE Citizenship != 'French'",
        "SELECT Name FROM singer WHERE Citizenship NOT IN ('French')",
        "SELECT Name FROM singer WHERE Citizenship NOT LIKE 'French'",
        "SELECT Name FROM singer WHERE Citizenship IS NOT 'French'",
        "SELECT Name FROM singer WHERE Citizenship NOT EQUALS 'French'",
        "SELECT Name FROM singer WHERE Citizenship IS DISTINCT FROM 'French'",
        "SELECT Name FROM singer WHERE NOT (Citizenship = 'French')",
        "SELECT Name FROM singer WHERE Citizenship NOT EQUAL TO 'French'"
      ]
    ]
  },
  {
    "id": 1008,
    "db_id": "singer",
    "infer_predictions": [
      [
        "SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949)",
        "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
        "SELECT Name FROM singer WHERE Birth_Year BETWEEN 1948 AND 1949",
        "SELECT s.Name FROM singer s WHERE s.Birth_Year = 1948 OR s.Birth_Year = 1949",
        "SELECT Name FROM singer WHERE Birth_Year >= 1948 AND Birth_Year <= 1949",
        "SELECT DISTINCT Name FROM singer WHERE Birth_Year IN (1948, 1949)",
        "SELECT Name FROM singer WHERE Birth_Year = 1948 UNION SELECT Name FROM singer WHERE Birth_Year = 1949",
        "SELECT Name FROM singer WHERE Birth_Year = 1948 UNION ALL SELECT Name FROM singer WHERE Birth_Year = 1949",
        "SELECT s.Name FROM singer s WHERE s.Birth_Year IN (1948, 1949)",
        "SELECT Name FROM singer WHERE Birth_Year = ANY (ARRAY[1948, 1949])"
      ]
    ]
  },
  {
    "id": 1009,
    "db_id": "singer",
    "infer_predictions": [
      [
        "SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949)",
        "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
        "SELECT singer.Name FROM singer WHERE singer.Birth_Year = 1948 OR singer.Birth_Year = 1949",
        "SELECT s.Name FROM singer s WHERE s.Birth_Year = 1948 OR s.Birth_Year = 1949",
        "SELECT Name FROM singer WHERE Birth_Year BETWEEN 1948 AND 1949",
        "SELECT DISTINCT Name FROM singer WHERE Birth_Year IN (1948, 1949)",
        "SELECT Name FROM singer WHERE Birth_Year = 1948 UNION SELECT Name FROM singer WHERE Birth_Year = 1949",
        "SELECT Name FROM singer WHERE Birth_Year >= 1948 AND Birth_Year <= 1949",
        "SELECT Name FROM singer WHERE Birth_Year = ANY (ARRAY[1948, 1949])",
        "SELECT Name FROM singer WHERE Birth_Year IN (SELECT Birth_Year FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949)"
      ]
    ]
  },
  {
    "id": 1010,
    "db_id": "singer",
    "infer_predictions": [
      [
        "SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer)",
        "SELECT s.Name FROM singer s WHERE s.Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer)",
        "SELECT Name FROM singer WHERE Net_Worth_Millions IN (SELECT MAX(Net_Worth_Millions) FROM singer)",
        "SELECT Name FROM singer s JOIN (SELECT MAX(Net_Worth_Millions) AS max_net_worth FROM singer) m ON s.Net_Worth_Millions = m.max_net_worth",
        "SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer AS s)",
        "SELECT s.Name FROM singer s WHERE s.Net_Worth_Millions = (SELECT MAX(s2.Net_Worth_Millions) FROM singer s2)",
        "SELECT Name FROM singer s1 WHERE s1.Net_Worth_Millions >= ALL (SELECT s2.Net_Worth_Millions FROM singer s2)",
        "SELECT Name FROM singer WHERE Net_Worth_Millions >= ALL (SELECT Net_Worth_Millions FROM singer)",
        "SELECT TOP 1 WITH TIES Name FROM singer ORDER BY Net_Worth_Millions DESC",
        "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1011,
    "db_id": "singer",
    "infer_predictions": [
      [
        "SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer)",
        "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "SELECT s.Name FROM singer s WHERE s.Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer)",
        "SELECT Name FROM singer WHERE Net_Worth_Millions IN (SELECT MAX(Net_Worth_Millions) FROM singer)",
        "SELECT TOP 1 Name FROM singer ORDER BY Net_Worth_Millions DESC",
        "SELECT Name FROM singer s ORDER BY s.Net_Worth_Millions DESC FETCH FIRST 1 ROWS ONLY",
        "SELECT Name FROM singer AS s WHERE s.Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer AS sub)",
        "SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer GROUP BY Net_Worth_Millions)",
        "SELECT Name FROM (SELECT Name, RANK() OVER (ORDER BY Net_Worth_Millions DESC) AS rank FROM singer) WHERE rank = 1",
        "SELECT Name FROM singer s WHERE s.Net_Worth_Millions >= ALL (SELECT Net_Worth_Millions FROM singer)"
      ]
    ]
  },
  {
    "id": 1012,
    "db_id": "singer",
    "infer_predictions": [
      [
        "SELECT Citizenship, COUNT(Singer_ID) AS NumberOfSingers FROM singer GROUP BY Citizenship",
        "SELECT Citizenship, COUNT(*) AS NumberOfSingers FROM singer GROUP BY Citizenship",
        "SELECT Citizenship, COUNT(Singer_ID) FROM singer GROUP BY Citizenship",
        "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship",
        "SELECT s.Citizenship, COUNT(s.Singer_ID) AS NumberOfSingers FROM singer s GROUP BY s.Citizenship",
        "SELECT s.Citizenship, COUNT(*) AS NumberOfSingers FROM singer s GROUP BY s.Citizenship",
        "SELECT Citizenship, COUNT(Singer_ID) AS TotalSingers FROM singer GROUP BY Citizenship ORDER BY Citizenship",
        "SELECT Citizenship, COUNT(*) AS TotalSingers FROM singer GROUP BY Citizenship ORDER BY Citizenship",
        "SELECT s.Citizenship, COUNT(s.Singer_ID) FROM singer s GROUP BY s.Citizenship",
        "SELECT s.Citizenship, COUNT(*) FROM singer s GROUP BY s.Citizenship"
      ]
    ]
  },
  {
    "id": 1013,
    "db_id": "singer",
    "infer_predictions": [
      [
        "SELECT Citizenship, COUNT(*) AS NumberOfSingers FROM singer GROUP BY Citizenship",
        "SELECT Citizenship, COUNT(Singer_ID) AS SingerCount FROM singer GROUP BY Citizenship",
        "SELECT Citizenship, COUNT(Singer_ID) FROM singer GROUP BY Citizenship",
        "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship",
        "SELECT Citizenship, COUNT(Singer_ID) AS TotalSingers FROM singer GROUP BY Citizenship",
        "SELECT Citizenship, COUNT(*) AS Total FROM singer GROUP BY Citizenship",
        "SELECT Citizenship, COUNT(Singer_ID) AS CountOfSingers FROM singer GROUP BY Citizenship",
        "SELECT Citizenship, COUNT(*) AS Count FROM singer GROUP BY Citizenship",
        "SELECT Citizenship, COUNT(Singer_ID) AS NumberOfSingers FROM singer GROUP BY Citizenship",
        "SELECT Citizenship, COUNT(*) AS SingerCount FROM singer GROUP BY Citizenship"
      ]
    ]
  },
  {
    "id": 1014,
    "db_id": "singer",
    "infer_predictions": [
      [
        "SELECT Citizenship FROM singer GROUP BY Citizenship HAVING COUNT(*) = (SELECT MAX(frequency) FROM (SELECT COUNT(*) AS frequency FROM singer GROUP BY Citizenship) AS subquery)",
        "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT Citizenship FROM (SELECT Citizenship, COUNT(*) AS frequency FROM singer GROUP BY Citizenship) AS frequencies WHERE frequency = (SELECT MAX(frequency) FROM (SELECT COUNT(*) AS frequency FROM singer GROUP BY Citizenship) AS subquery)",
        "WITH Citizenship_Frequencies AS (SELECT Citizenship, COUNT(*) AS Frequency FROM singer GROUP BY Citizenship) SELECT Citizenship FROM Citizenship_Frequencies WHERE Frequency = (SELECT MAX(Frequency) FROM Citizenship_Frequencies)",
        "SELECT Citizenship FROM singer GROUP BY Citizenship HAVING COUNT(Citizenship) = (SELECT MAX(COUNT(Citizenship)) FROM singer GROUP BY Citizenship)",
        "SELECT TOP 1 WITH TIES Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC",
        "SELECT Citizenship FROM singer GROUP BY Citizenship HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM singer GROUP BY Citizenship)",
        "SELECT S.Citizenship FROM singer S JOIN (SELECT Citizenship, COUNT(*) AS Count FROM singer GROUP BY Citizenship) AS T ON S.Citizenship = T.Citizenship WHERE T.Count = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM singer GROUP BY Citizenship) AS subquery)",
        "SELECT Citizenship FROM singer GROUP BY Citizenship HAVING COUNT(*) = (SELECT COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT DISTINCT Citizenship FROM singer WHERE (SELECT COUNT(*) FROM singer AS S WHERE S.Citizenship = singer.Citizenship) = (SELECT MAX(frequency) FROM (SELECT COUNT(*) AS frequency FROM singer GROUP BY Citizenship) AS subquery)"
      ]
    ]
  },
  {
    "id": 1015,
    "db_id": "singer",
    "infer_predictions": [
      [
        "SELECT Citizenship, COUNT(*) AS count FROM singer GROUP BY Citizenship",
        "SELECT Citizenship, COUNT(Singer_ID) AS NumberOfSingers FROM singer GROUP BY Citizenship",
        "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship",
        "SELECT Citizenship, COUNT(Singer_ID) FROM singer GROUP BY Citizenship",
        "SELECT s.Citizenship, COUNT(*) AS Total FROM singer s GROUP BY s.Citizenship",
        "SELECT s.Citizenship, COUNT(s.Singer_ID) AS Total FROM singer s GROUP BY s.Citizenship",
        "SELECT Citizenship, COUNT(*) AS TotalCount FROM singer GROUP BY Citizenship ORDER BY TotalCount DESC",
        "SELECT Citizenship, COUNT(Singer_ID) AS TotalSingers FROM singer GROUP BY Citizenship ORDER BY TotalSingers DESC",
        "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC",
        "SELECT Citizenship, COUNT(Singer_ID) FROM singer GROUP BY Citizenship ORDER BY COUNT(Singer_ID) DESC"
      ]
    ]
  },
  {
    "id": 1016,
    "db_id": "singer",
    "infer_predictions": [
      [
        "SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship",
        "SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "SELECT s.Citizenship, MAX(s.Net_Worth_Millions) AS Maximum_Net_Worth FROM singer s GROUP BY s.Citizenship",
        "SELECT Citizenship, MAX(Net_Worth_Millions) AS MaxNetWorth FROM singer GROUP BY Citizenship ORDER BY Citizenship",
        "SELECT Citizenship, MAX(Net_Worth_Millions) AS Highest_Net_Worth FROM singer GROUP BY Citizenship ORDER BY MAX(Net_Worth_Millions) DESC",
        "SELECT s.Citizenship, MAX(s.Net_Worth_Millions) FROM singer s GROUP BY s.Citizenship ORDER BY s.Citizenship",
        "SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship HAVING MAX(Net_Worth_Millions) IS NOT NULL",
        "SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship ORDER BY MAX(Net_Worth_Millions) DESC",
        "SELECT DISTINCT Citizenship, MAX(Net_Worth_Millions) OVER (PARTITION BY Citizenship) AS Max_Net_Worth FROM singer",
        "SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC"
      ]
    ]
  },
  {
    "id": 1017,
    "db_id": "singer",
    "infer_predictions": [
      [
        "SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship",
        "SELECT s.Citizenship, MAX(s.Net_Worth_Millions) FROM singer s GROUP BY s.Citizenship",
        "SELECT Citizenship, MAX(Net_Worth_Millions) AS MaximumNetWorth FROM singer GROUP BY Citizenship",
        "SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship",
        "SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY MAX(Net_Worth_Millions) DESC",
        "SELECT Citizenship, MAX(Net_Worth_Millions) AS MaxNetWorth FROM singer GROUP BY Citizenship ORDER BY MaxNetWorth DESC",
        "SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC",
        "SELECT Citizenship, MAX(Net_Worth_Millions) AS MaxNetWorth FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC",
        "SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY MAX(Net_Worth_Millions) ASC"
      ]
    ]
  },
  {
    "id": 1018,
    "db_id": "singer",
    "infer_predictions": [
      [
        "SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID",
        "SELECT s.Title, si.Name FROM song s INNER JOIN singer si ON s.Singer_ID = si.Singer_ID",
        "SELECT Title, Name FROM song, singer WHERE song.Singer_ID = singer.Singer_ID",
        "SELECT song.Title AS SongTitle, singer.Name AS SingerName FROM song, singer WHERE song.Singer_ID = singer.Singer_ID",
        "SELECT Title, Name FROM song INNER JOIN singer ON song.Singer_ID = singer.Singer_ID",
        "SELECT s.Title, si.Name FROM song AS s, singer AS si WHERE s.Singer_ID = si.Singer_ID",
        "SELECT song.Title, singer.Name FROM song LEFT JOIN singer ON song.Singer_ID = singer.Singer_ID",
        "SELECT Title, Name FROM song s JOIN singer si ON s.Singer_ID = si.Singer_ID",
        "SELECT s.Title AS Song, si.Name AS Singer FROM song s JOIN singer si ON s.Singer_ID = si.Singer_ID",
        "SELECT song.Title, singer.Name FROM song RIGHT JOIN singer ON song.Singer_ID = singer.Singer_ID"
      ]
    ]
  },
  {
    "id": 1019,
    "db_id": "singer",
    "infer_predictions": [
      [
        "SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID",
        "SELECT s.Title AS SongTitle, si.Name AS SingerName FROM song s INNER JOIN singer si ON s.Singer_ID = si.Singer_ID",
        "SELECT Title, Name FROM song, singer WHERE song.Singer_ID = singer.Singer_ID",
        "SELECT song.Title AS 'Song Title', singer.Name AS 'Singer Name' FROM song INNER JOIN singer ON song.Singer_ID = singer.Singer_ID",
        "SELECT Title, Name FROM song INNER JOIN singer ON song.Singer_ID = singer.Singer_ID",
        "SELECT s.Title, si.Name FROM song s, singer si WHERE s.Singer_ID = si.Singer_ID",
        "SELECT song.Title, singer.Name FROM song, singer WHERE song.Singer_ID = singer.Singer_ID",
        "SELECT Title AS Song, Name AS Singer FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID",
        "SELECT s.Title, si.Name FROM song s JOIN singer si ON s.Singer_ID = si.Singer_ID",
        "SELECT song.Title, singer.Name FROM song LEFT JOIN singer ON song.Singer_ID = singer.Singer_ID"
      ]
    ]
  },
  {
    "id": 1020,
    "db_id": "singer",
    "infer_predictions": [
      [
        "SELECT DISTINCT s.Name FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID WHERE sg.Sales > 300000",
        "SELECT DISTINCT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 300000)",
        "SELECT DISTINCT Name FROM singer s INNER JOIN song sg ON s.Singer_ID = sg.Singer_ID WHERE sg.Sales > 300000",
        "SELECT DISTINCT s.Name FROM singer s, song sg WHERE s.Singer_ID = sg.Singer_ID AND sg.Sales > 300000",
        "SELECT DISTINCT s.Name FROM singer s WHERE EXISTS (SELECT 1 FROM song sg WHERE sg.Singer_ID = s.Singer_ID AND sg.Sales > 300000)",
        "SELECT DISTINCT s.Name FROM singer s WHERE s.Singer_ID IN (SELECT sg.Singer_ID FROM song sg WHERE sg.Sales > 300000)",
        "SELECT DISTINCT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 300000 GROUP BY Singer_ID HAVING COUNT(*) > 0)",
        "SELECT DISTINCT s.Name FROM singer s LEFT JOIN song sg ON s.Singer_ID = sg.Singer_ID WHERE sg.Sales > 300000",
        "SELECT DISTINCT s.Name FROM singer s RIGHT JOIN song sg ON s.Singer_ID = sg.Singer_ID WHERE sg.Sales > 300000",
        "SELECT DISTINCT s.Name FROM singer s CROSS JOIN song sg WHERE s.Singer_ID = sg.Singer_ID AND sg.Sales > 300000"
      ]
    ]
  },
  {
    "id": 1021,
    "db_id": "singer",
    "infer_predictions": [
      [
        "SELECT DISTINCT s.Name FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID WHERE sg.Sales > 300000",
        "SELECT DISTINCT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 300000)",
        "SELECT DISTINCT Name FROM singer s INNER JOIN song sg ON s.Singer_ID = sg.Singer_ID AND sg.Sales > 300000",
        "SELECT DISTINCT s.Name FROM singer s, song sg WHERE s.Singer_ID = sg.Singer_ID AND sg.Sales > 300000",
        "SELECT DISTINCT Name FROM singer WHERE EXISTS (SELECT 1 FROM song WHERE Singer_ID = singer.Singer_ID AND Sales > 300000)",
        "SELECT DISTINCT s.Name FROM singer s WHERE s.Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 300000)",
        "SELECT DISTINCT Name FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID WHERE sg.Sales > 300000 GROUP BY s.Name",
        "SELECT DISTINCT s.Name FROM singer s LEFT JOIN song sg ON s.Singer_ID = sg.Singer_ID WHERE sg.Sales > 300000",
        "SELECT DISTINCT s.Name FROM singer s WHERE EXISTS (SELECT NULL FROM song sg WHERE sg.Singer_ID = s.Singer_ID AND sg.Sales > 300000)",
        "SELECT DISTINCT s.Name FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID GROUP BY s.Name HAVING MAX(sg.Sales) > 300000"
      ]
    ]
  },
  {
    "id": 1022,
    "db_id": "singer",
    "infer_predictions": [
      [
        "SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(*) > 1)",
        "SELECT s.Name FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID GROUP BY s.Singer_ID HAVING COUNT(sg.Song_ID) > 1",
        "SELECT singer.Name FROM singer INNER JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Singer_ID HAVING COUNT(song.Song_ID) > 1",
        "SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(Song_ID) > 1)",
        "SELECT DISTINCT s.Name FROM singer s, song sg WHERE s.Singer_ID = sg.Singer_ID GROUP BY s.Singer_ID HAVING COUNT(sg.Song_ID) > 1",
        "SELECT s.Name FROM singer s WHERE EXISTS (SELECT 1 FROM song sg WHERE sg.Singer_ID = s.Singer_ID GROUP BY sg.Singer_ID HAVING COUNT(*) > 1)",
        "SELECT s.Name FROM singer s WHERE (SELECT COUNT(*) FROM song sg WHERE sg.Singer_ID = s.Singer_ID) > 1",
        "SELECT s.Name FROM singer s JOIN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(*) > 1) sg ON s.Singer_ID = sg.Singer_ID",
        "SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM (SELECT Singer_ID, COUNT(*) AS cnt FROM song GROUP BY Singer_ID) AS subquery WHERE cnt > 1)",
        "SELECT s.Name FROM singer s WHERE s.Singer_ID IN (SELECT sg.Singer_ID FROM song sg GROUP BY sg.Singer_ID HAVING COUNT(sg.Song_ID) > 1)"
      ]
    ]
  },
  {
    "id": 1023,
    "db_id": "singer",
    "infer_predictions": [
      [
        "SELECT S.Name FROM singer S JOIN song SO ON S.Singer_ID = SO.Singer_ID GROUP BY S.Singer_ID HAVING COUNT(SO.Song_ID) > 1",
        "SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(*) > 1)",
        "SELECT singer.Name FROM singer INNER JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Singer_ID HAVING COUNT(song.Song_ID) > 1",
        "SELECT DISTINCT s.Name FROM singer s, song so WHERE s.Singer_ID = so.Singer_ID GROUP BY s.Singer_ID HAVING COUNT(so.Song_ID) > 1",
        "SELECT s.Name FROM singer s WHERE EXISTS (SELECT 1 FROM song so WHERE so.Singer_ID = s.Singer_ID GROUP BY so.Singer_ID HAVING COUNT(*) > 1)",
        "SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(Song_ID) > 1)",
        "SELECT s.Name FROM singer s JOIN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(*) > 1) ss ON s.Singer_ID = ss.Singer_ID",
        "SELECT s.Name FROM singer s WHERE (SELECT COUNT(*) FROM song so WHERE so.Singer_ID = s.Singer_ID) > 1",
        "SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM (SELECT Singer_ID, COUNT(*) AS cnt FROM song GROUP BY Singer_ID) AS subquery WHERE cnt > 1)",
        "SELECT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Singer_ID HAVING COUNT(DISTINCT so.Song_ID) > 1"
      ]
    ]
  },
  {
    "id": 1024,
    "db_id": "singer",
    "infer_predictions": [
      [
        "SELECT s.Name, SUM(so.Sales) AS Total_Sales FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Name",
        "SELECT Name, SUM(Sales) AS Total_Sales FROM singer INNER JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY Name",
        "SELECT singer.Name, SUM(song.Sales) FROM singer, song WHERE singer.Singer_ID = song.Singer_ID GROUP BY singer.Name",
        "SELECT s.Name AS Singer_Name, SUM(so.Sales) AS Total_Sales FROM singer s, song so WHERE s.Singer_ID = so.Singer_ID GROUP BY s.Name",
        "SELECT Name, Total_Sales FROM (SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name) AS Sales_Info",
        "SELECT s.Name, Aggregate_Sales FROM singer s LEFT JOIN (SELECT Singer_ID, SUM(Sales) AS Aggregate_Sales FROM song GROUP BY Singer_ID) so ON s.Singer_ID = so.Singer_ID",
        "SELECT s.Name, IFNULL(SUM(so.Sales), 0) AS Total_Sales FROM singer s LEFT JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Name",
        "SELECT s.Name, COALESCE(SUM(so.Sales), 0) AS Total_Sales FROM singer s LEFT OUTER JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Name",
        "SELECT Name, SUM(Sales) AS Total_Sales FROM singer JOIN song USING(Singer_ID) GROUP BY Name",
        "SELECT s.Name AS Singer_Name, SUM(so.Sales) AS Total_Sales FROM singer AS s JOIN song AS so ON s.Singer_ID = so.Singer_ID GROUP BY s.Name ORDER BY s.Name"
      ]
    ]
  },
  {
    "id": 1025,
    "db_id": "singer",
    "infer_predictions": [
      [
        "SELECT s.Name, SUM(so.Sales) AS Total_Sales FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Singer_ID, s.Name",
        "SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer INNER JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name",
        "SELECT Name, Total_Sales FROM (SELECT Singer_ID, SUM(Sales) AS Total_Sales FROM song GROUP BY Singer_ID) AS Song_Sales JOIN singer ON singer.Singer_ID = Song_Sales.Singer_ID",
        "SELECT s.Name, SUM(so.Sales) FROM singer s, song so WHERE s.Singer_ID = so.Singer_ID GROUP BY s.Singer_ID, s.Name",
        "SELECT s.Name AS Singer_Name, Aggregate_Sales.Total_Sales FROM singer s LEFT JOIN (SELECT Singer_ID, SUM(Sales) AS Total_Sales FROM song GROUP BY Singer_ID) AS Aggregate_Sales ON s.Singer_ID = Aggregate_Sales.Singer_ID",
        "SELECT s.Name, IFNULL(SUM(so.Sales), 0) AS Total_Sales FROM singer s LEFT JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Singer_ID, s.Name",
        "SELECT s.Name, COALESCE(SUM(so.Sales), 0) AS Total_Sales FROM singer s LEFT JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Singer_ID, s.Name",
        "SELECT s.Name, Total_Sales FROM singer s JOIN (SELECT Singer_ID, SUM(Sales) AS Total_Sales FROM song GROUP BY Singer_ID) so ON s.Singer_ID = so.Singer_ID",
        "SELECT s.Name AS Singer_Name, SUM(so.Sales) AS Total_Sales FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Singer_ID, s.Name ORDER BY s.Name",
        "SELECT s.Name, SUM(so.Sales) AS Total_Sales FROM singer s LEFT OUTER JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Singer_ID, s.Name HAVING SUM(so.Sales) IS NOT NULL"
      ]
    ]
  },
  {
    "id": 1026,
    "db_id": "singer",
    "infer_predictions": [
      [
        "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song)",
        "SELECT s.Name FROM singer s LEFT JOIN song sg ON s.Singer_ID = sg.Singer_ID WHERE sg.Singer_ID IS NULL",
        "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "SELECT s.Name FROM singer s WHERE NOT EXISTS (SELECT 1 FROM song sg WHERE sg.Singer_ID = s.Singer_ID)",
        "SELECT Name FROM singer s WHERE s.Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "SELECT s.Name FROM singer s WHERE s.Singer_ID NOT EXISTS (SELECT Singer_ID FROM song)",
        "SELECT Name FROM singer WHERE Singer_ID NOT EXISTS (SELECT DISTINCT Singer_ID FROM song)",
        "SELECT s.Name FROM singer s WHERE NOT EXISTS (SELECT NULL FROM song sg WHERE sg.Singer_ID = s.Singer_ID)",
        "SELECT Name FROM singer AS s WHERE NOT EXISTS (SELECT * FROM song AS sg WHERE sg.Singer_ID = s.Singer_ID)",
        "SELECT s.Name FROM singer s LEFT OUTER JOIN song sg ON s.Singer_ID = sg.Singer_ID WHERE sg.Singer_ID IS NULL"
      ]
    ]
  },
  {
    "id": 1027,
    "db_id": "singer",
    "infer_predictions": [
      [
        "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "SELECT s.Name FROM singer s LEFT JOIN song sg ON s.Singer_ID = sg.Singer_ID WHERE sg.Singer_ID IS NULL",
        "SELECT Name FROM singer WHERE NOT EXISTS (SELECT 1 FROM song WHERE song.Singer_ID = singer.Singer_ID)",
        "SELECT s.Name FROM singer s WHERE s.Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "SELECT Name FROM singer s WHERE s.Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song)",
        "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song WHERE Singer_ID IS NOT NULL)",
        "SELECT s.Name FROM singer s WHERE NOT EXISTS (SELECT NULL FROM song sg WHERE sg.Singer_ID = s.Singer_ID)",
        "SELECT Name FROM singer AS s WHERE NOT EXISTS (SELECT * FROM song AS sg WHERE sg.Singer_ID = s.Singer_ID)",
        "SELECT s.Name FROM singer s WHERE s.Singer_ID NOT IN (SELECT sg.Singer_ID FROM song sg)",
        "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song WHERE Singer_ID IS NOT NULL)"
      ]
    ]
  },
  {
    "id": 1028,
    "db_id": "singer",
    "infer_predictions": [
      [
        "SELECT Citizenship FROM singer WHERE Citizenship IN (SELECT Citizenship FROM singer WHERE Birth_Year < 1945) INTERSECT SELECT Citizenship FROM singer WHERE Citizenship IN (SELECT Citizenship FROM singer WHERE Birth_Year > 1955)",
        "SELECT DISTINCT s1.Citizenship FROM singer s1 JOIN singer s2 ON s1.Citizenship = s2.Citizenship WHERE s1.Birth_Year < 1945 AND s2.Birth_Year > 1955",
        "SELECT s.Citizenship FROM singer s WHERE s.Citizenship IN (SELECT Citizenship FROM singer WHERE Birth_Year < 1945) AND s.Citizenship IN (SELECT Citizenship FROM singer WHERE Birth_Year > 1955)",
        "WITH Before1945 AS (SELECT Citizenship FROM singer WHERE Birth_Year < 1945), After1955 AS (SELECT Citizenship FROM singer WHERE Birth_Year > 1955) SELECT Citizenship FROM Before1945 WHERE Citizenship IN (SELECT Citizenship FROM After1955)",
        "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 AND Citizenship IN (SELECT Citizenship FROM singer WHERE Birth_Year > 1955)",
        "SELECT common.Citizenship FROM (SELECT Citizenship FROM singer WHERE Birth_Year < 1945) AS common JOIN (SELECT Citizenship FROM singer WHERE Birth_Year > 1955) AS recent ON common.Citizenship = recent.Citizenship",
        "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
        "SELECT s.Citizenship FROM singer s WHERE EXISTS (SELECT 1 FROM singer WHERE Citizenship = s.Citizenship AND Birth_Year < 1945) AND EXISTS (SELECT 1 FROM singer WHERE Citizenship = s.Citizenship AND Birth_Year > 1955)",
        "SELECT DISTINCT Citizenship FROM singer WHERE Citizenship IN (SELECT Citizenship FROM singer WHERE Birth_Year < 1945) AND Citizenship IN (SELECT Citizenship FROM singer WHERE Birth_Year > 1955)",
        "SELECT Citizenship FROM (SELECT Citizenship FROM singer WHERE Birth_Year < 1945 UNION ALL SELECT Citizenship FROM singer WHERE Birth_Year > 1955) AS SubQuery GROUP BY Citizenship HAVING COUNT(*) > 1"
      ]
    ]
  },
  {
    "id": 1029,
    "db_id": "singer",
    "infer_predictions": [
      [
        "SELECT Citizenship FROM singer WHERE Citizenship IN (SELECT Citizenship FROM singer WHERE Birth_Year < 1945) INTERSECT SELECT Citizenship FROM singer WHERE Citizenship IN (SELECT Citizenship FROM singer WHERE Birth_Year > 1955)",
        "SELECT DISTINCT s1.Citizenship FROM singer s1 JOIN singer s2 ON s1.Citizenship = s2.Citizenship WHERE s1.Birth_Year < 1945 AND s2.Birth_Year > 1955",
        "SELECT s.Citizenship FROM singer s WHERE s.Birth_Year < 1945 AND s.Citizenship IN (SELECT Citizenship FROM singer WHERE Birth_Year > 1955)",
        "WITH EarlySingers AS (SELECT Citizenship FROM singer WHERE Birth_Year < 1945), LateSingers AS (SELECT Citizenship FROM singer WHERE Birth_Year > 1955) SELECT Citizenship FROM EarlySingers WHERE Citizenship IN (SELECT Citizenship FROM LateSingers)",
        "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 AND Citizenship IN (SELECT Citizenship FROM singer WHERE Birth_Year > 1955)",
        "SELECT s.Citizenship FROM singer s WHERE EXISTS (SELECT 1 FROM singer WHERE Citizenship = s.Citizenship AND Birth_Year < 1945) AND EXISTS (SELECT 1 FROM singer WHERE Citizenship = s.Citizenship AND Birth_Year > 1955)",
        "SELECT Citizenship FROM (SELECT Citizenship FROM singer WHERE Birth_Year < 1945 UNION ALL SELECT Citizenship FROM singer WHERE Birth_Year > 1955) GROUP BY Citizenship HAVING COUNT(*) > 1",
        "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
        "SELECT DISTINCT Citizenship FROM singer WHERE Citizenship IN (SELECT Citizenship FROM singer WHERE Birth_Year < 1945) AND Citizenship IN (SELECT Citizenship FROM singer WHERE Birth_Year > 1955)",
        "SELECT s.Citizenship FROM singer s INNER JOIN singer t ON s.Citizenship = t.Citizenship WHERE s.Birth_Year < 1945 AND t.Birth_Year > 1955"
      ]
    ]
  },
  {
    "id": 1030,
    "db_id": "real_estate_properties",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Other_Available_Features",
        "SELECT COUNT(feature_id) FROM Other_Available_Features",
        "SELECT COUNT(DISTINCT feature_id) FROM Other_Available_Features",
        "SELECT COUNT(1) FROM Other_Available_Features",
        "SELECT COUNT(feature_id) AS TotalFeatures FROM Other_Available_Features",
        "SELECT COUNT(*) AS TotalCount FROM Other_Available_Features",
        "SELECT COUNT(DISTINCT feature_id) AS UniqueFeatureCount FROM Other_Available_Features",
        "SELECT COUNT(*) FROM Other_Available_Features WHERE feature_id IS NOT NULL",
        "SELECT COUNT(feature_id) FROM Other_Available_Features WHERE feature_id IS NOT NULL",
        "SELECT COUNT(DISTINCT feature_id) FROM Other_Available_Features WHERE feature_id IS NOT NULL"
      ]
    ]
  },
  {
    "id": 1031,
    "db_id": "real_estate_properties",
    "infer_predictions": [
      [
        "SELECT RFT.feature_type_name FROM Ref_Feature_Types RFT JOIN Other_Available_Features OAF ON RFT.feature_type_code = OAF.feature_type_code WHERE OAF.feature_name = 'AirCon'",
        "SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code IN (SELECT feature_type_code FROM Other_Available_Features WHERE feature_name = 'AirCon')",
        "SELECT RFT.feature_type_name FROM Ref_Feature_Types AS RFT INNER JOIN Other_Available_Features AS OAF ON RFT.feature_type_code = OAF.feature_type_code WHERE OAF.feature_name = 'AirCon'",
        "SELECT feature_type_name FROM Ref_Feature_Types, Other_Available_Features WHERE Ref_Feature_Types.feature_type_code = Other_Available_Features.feature_type_code AND Other_Available_Features.feature_name = 'AirCon'",
        "SELECT DISTINCT feature_type_name FROM Ref_Feature_Types JOIN Other_Available_Features ON Ref_Feature_Types.feature_type_code = Other_Available_Features.feature_type_code WHERE Other_Available_Features.feature_name = 'AirCon'",
        "SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code = (SELECT feature_type_code FROM Other_Available_Features WHERE feature_name = 'AirCon')",
        "SELECT RFT.feature_type_name FROM Ref_Feature_Types RFT, Other_Available_Features OAF WHERE RFT.feature_type_code = OAF.feature_type_code AND OAF.feature_name = 'AirCon'",
        "SELECT feature_type_name FROM Ref_Feature_Types INNER JOIN Other_Available_Features ON Ref_Feature_Types.feature_type_code = Other_Available_Features.feature_type_code WHERE Other_Available_Features.feature_name = 'AirCon'",
        "SELECT TOP 1 feature_type_name FROM Ref_Feature_Types JOIN Other_Available_Features ON Ref_Feature_Types.feature_type_code = Other_Available_Features.feature_type_code WHERE Other_Available_Features.feature_name = 'AirCon'",
        "SELECT feature_type_name FROM Ref_Feature_Types RFT WHERE EXISTS (SELECT 1 FROM Other_Available_Features OAF WHERE OAF.feature_type_code = RFT.feature_type_code AND OAF.feature_name = 'AirCon')"
      ]
    ]
  },
  {
    "id": 1032,
    "db_id": "real_estate_properties",
    "infer_predictions": [
      [
        "SELECT R.property_type_description FROM Ref_Property_Types R JOIN Properties P ON R.property_type_code = P.property_type_code",
        "SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code IN (SELECT property_type_code FROM Properties)",
        "SELECT DISTINCT R.property_type_description FROM Ref_Property_Types R, Properties P WHERE R.property_type_code = P.property_type_code",
        "SELECT R.property_type_description FROM Ref_Property_Types R INNER JOIN Properties P ON R.property_type_code = P.property_type_code",
        "SELECT property_type_description FROM Ref_Property_Types WHERE EXISTS (SELECT 1 FROM Properties WHERE Ref_Property_Types.property_type_code = Properties.property_type_code)",
        "SELECT R.property_type_description FROM Ref_Property_Types AS R JOIN Properties AS P ON R.property_type_code = P.property_type_code",
        "SELECT property_type_description FROM Ref_Property_Types JOIN Properties USING(property_type_code)",
        "SELECT R.property_type_description FROM Ref_Property_Types R WHERE R.property_type_code IN (SELECT property_type_code FROM Properties P)",
        "SELECT property_type_description FROM Ref_Property_Types, Properties WHERE Ref_Property_Types.property_type_code = Properties.property_type_code",
        "SELECT DISTINCT property_type_description FROM Ref_Property_Types R JOIN Properties P ON R.property_type_code = P.property_type_code"
      ]
    ]
  },
  {
    "id": 1033,
    "db_id": "real_estate_properties",
    "infer_predictions": [
      [
        "SELECT property_name FROM Properties WHERE (property_type_code = 'HSE' OR property_type_code = 'APT') AND room_count > 1",
        "SELECT property_name FROM Properties WHERE property_type_code IN ('HSE', 'APT') AND room_count > 1",
        "SELECT P.property_name FROM Properties P JOIN Ref_Property_Types R ON P.property_type_code = R.property_type_code WHERE R.property_type_description IN ('House', 'Apartment') AND P.room_count > 1",
        "SELECT property_name FROM Properties WHERE property_type_code IN (SELECT property_type_code FROM Ref_Property_Types WHERE property_type_description IN ('House', 'Apartment')) AND room_count > 1",
        "SELECT property_name FROM Properties WHERE (property_type_code = 'HSE' OR property_type_code = 'APT') AND room_count > 1 ORDER BY property_name",
        "SELECT DISTINCT property_name FROM Properties WHERE property_type_code IN ('HSE', 'APT') AND room_count > 1",
        "SELECT property_name FROM Properties WHERE property_type_code IN ('HSE', 'APT') AND room_count > 1 GROUP BY property_name",
        "SELECT P.property_name FROM Properties P WHERE EXISTS (SELECT 1 FROM Ref_Property_Types R WHERE R.property_type_code = P.property_type_code AND R.property_type_description IN ('House', 'Apartment')) AND P.room_count > 1",
        "SELECT property_name FROM Properties WHERE property_type_code IN ('HSE', 'APT') AND room_count > 1 AND property_name IS NOT NULL",
        "SELECT property_name FROM Properties WHERE property_type_code IN (SELECT property_type_code FROM Ref_Property_Types WHERE property_type_description = 'House' OR property_type_description = 'Apartment') AND room_count > 1"
      ]
    ]
  }
]