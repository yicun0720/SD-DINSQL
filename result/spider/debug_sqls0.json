[
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
    "gold": "select other_details from paragraphs where paragraph_text like 'korea'",
    "debug_answers1": [
      "SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details  FROM Paragraphs  WHERE Paragraph_Text LIKE '%Korea%'",
      "SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea'",
      "SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details  FROM Paragraphs  WHERE Paragraph_Text LIKE 'Korea%'",
      "SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details  FROM Paragraphs  WHERE Paragraph_Text LIKE '%Korea%'",
      "SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details  FROM Paragraphs  WHERE Paragraph_Text LIKE '%Korea%'",
      "SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details  FROM Paragraphs  WHERE Paragraph_Text LIKE '%Korea%'",
      "SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details  FROM Paragraphs  WHERE Paragraph_Text LIKE '%Korea%'",
      "SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details  FROM Paragraphs  WHERE Paragraph_Text LIKE '%Korea%'",
      "SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details  FROM Paragraphs  WHERE Paragraph_Text LIKE '%Korea%'",
      "SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'"
    ]
  },
  {
    "db_id": "network_1",
    "question": "Show name of all students who have some friends and also are liked by someone else.",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
    "debug_answers1": [
      "SELECT T1.name  FROM Highschooler AS T1  JOIN Friend AS T2 ON T1.ID = T2.student_id  JOIN Likes AS T3 ON T1.ID = T3.liked_id",
      "SELECT name  FROM Highschooler  WHERE ID IN (SELECT student_id FROM Friend)  AND ID IN (SELECT liked_id FROM Likes)",
      "SELECT H.name  FROM Highschooler H  JOIN Friend F ON H.ID = F.student_id  JOIN Likes L ON H.ID = L.liked_id",
      "SELECT name  FROM Highschooler  WHERE ID IN (SELECT student_id FROM Friend)  AND ID IN (SELECT liked_id FROM Likes)",
      "SELECT H.name  FROM Highschooler H  JOIN Friend F ON H.ID = F.student_id  JOIN Likes L ON H.ID = L.liked_id",
      "SELECT name  FROM Highschooler  WHERE ID IN (SELECT student_id FROM Friend)  AND ID IN (SELECT liked_id FROM Likes)",
      "SELECT H.name  FROM Highschooler H  JOIN Friend F ON H.ID = F.student_id  JOIN Likes L ON H.ID = L.liked_id",
      "SELECT name  FROM Highschooler  WHERE ID IN (SELECT student_id FROM Friend)  AND ID IN (SELECT liked_id FROM Likes)",
      "SELECT H.name  FROM Highschooler H  JOIN Friend F ON H.ID = F.student_id  JOIN Likes L ON H.ID = L.liked_id",
      "SELECT name  FROM Highschooler  WHERE ID IN (SELECT student_id FROM Friend)  AND ID IN (SELECT liked_id FROM Likes)"
    ]
  },
  {
    "db_id": "network_1",
    "question": "What are the names of high schoolers who both have friends and are liked?",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
    "debug_answers1": [
      "SELECT Highschooler.name  FROM Highschooler  WHERE Highschooler.ID IN (SELECT Friend.student_id FROM Friend)  AND Highschooler.ID IN (SELECT Likes.student_id FROM Likes)",
      "SELECT Highschooler.name  FROM Highschooler  WHERE Highschooler.ID IN (     SELECT Friend.student_id      FROM Friend      INTERSECT      SELECT Likes.student_id      FROM Likes )",
      "SELECT Highschooler.name  FROM Highschooler  WHERE Highschooler.ID IN (SELECT Friend.student_id FROM Friend)  AND Highschooler.ID IN (SELECT Likes.liked_id FROM Likes)",
      "SELECT Highschooler.name  FROM Highschooler  WHERE Highschooler.ID IN (SELECT Friend.student_id FROM Friend)  AND Highschooler.ID IN (SELECT Likes.liked_id FROM Likes)",
      "SELECT Highschooler.name  FROM Highschooler  WHERE Highschooler.ID IN (SELECT Friend.student_id FROM Friend)  AND Highschooler.ID IN (SELECT Likes.liked_id FROM Likes)",
      "SELECT Highschooler.name  FROM Highschooler  WHERE Highschooler.ID IN (SELECT Friend.student_id FROM Friend)  AND Highschooler.ID IN (SELECT Likes.liked_id FROM Likes)  AND Highschooler.ID IN (SELECT Likes.student_id FROM Likes)",
      "SELECT Highschooler.name  FROM Highschooler  WHERE Highschooler.ID IN (SELECT Friend.student_id FROM Friend)  AND Highschooler.ID IN (SELECT Likes.liked_id FROM Likes)",
      "SELECT Highschooler.name  FROM Highschooler  WHERE ID IN (SELECT student_id FROM Friend)  AND ID IN (SELECT liked_id FROM Likes)",
      "SELECT Highschooler.name  FROM Highschooler  WHERE Highschooler.ID IN (SELECT Friend.student_id FROM Friend)  AND Highschooler.ID IN (SELECT Likes.liked_id FROM Likes)",
      "SELECT Highschooler.name  FROM Highschooler  WHERE Highschooler.ID IN (SELECT Friend.student_id FROM Friend)  AND Highschooler.ID IN (SELECT Likes.liked_id FROM Likes)"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "List each owner's first name, last name, and the size of his for her dog.",
    "gold": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "debug_answers1": [
      "SELECT Owners.first_name, Owners.last_name, Sizes.size_description  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  JOIN Sizes ON Dogs.size_code = Sizes.size_code",
      "SELECT Owners.first_name, Owners.last_name, Sizes.size_description  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  JOIN Sizes ON Dogs.size_code = Sizes.size_code",
      "SELECT Owners.first_name, Owners.last_name, Sizes.size_description  FROM Owners  INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id  INNER JOIN Sizes ON Dogs.size_code = Sizes.size_code",
      "SELECT Owners.first_name, Owners.last_name, Sizes.size_description  FROM Owners  LEFT JOIN Dogs ON Owners.owner_id = Dogs.owner_id  LEFT JOIN Sizes ON Dogs.size_code = Sizes.size_code",
      "SELECT Owners.first_name, Owners.last_name, Sizes.size_description  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  JOIN Sizes ON Dogs.size_code = Sizes.size_code",
      "SELECT Owners.first_name, Owners.last_name, Sizes.size_description  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  JOIN Sizes ON Dogs.size_code = Sizes.size_code",
      "SELECT Owners.first_name, Owners.last_name, Sizes.size_description  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  JOIN Sizes ON Dogs.size_code = Sizes.size_code",
      "SELECT Owners.first_name, Owners.last_name, Sizes.size_description  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  JOIN Sizes ON Dogs.size_code = Sizes.size_code",
      "SELECT Owners.first_name, Owners.last_name, Sizes.size_description  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  JOIN Sizes ON Dogs.size_code = Sizes.size_code",
      "SELECT Owners.first_name, Owners.last_name, Sizes.size_description  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  JOIN Sizes ON Dogs.size_code = Sizes.size_code"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
    "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
    "debug_answers1": [
      "SELECT Students.first_name  FROM Students  JOIN Addresses ON Students.permanent_address_id = Addresses.address_id  WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'",
      "SELECT Students.first_name  FROM Students  JOIN Addresses ON Students.permanent_address_id = Addresses.address_id  WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'",
      "SELECT Students.first_name  FROM Students  JOIN Addresses ON Students.permanent_address_id = Addresses.address_id  WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'",
      "SELECT first_name  FROM Students  WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti')  OR cell_mobile_number = '09700166582'",
      "SELECT first_name  FROM Students  WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti')  OR cell_mobile_number = '09700166582'",
      "SELECT first_name  FROM Students  WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti')  OR cell_mobile_number = '09700166582'",
      "SELECT first_name  FROM Students  WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti')  OR cell_mobile_number = '09700166582'",
      "SELECT first_name  FROM Students  WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti')  AND cell_mobile_number = '09700166582'",
      "SELECT first_name  FROM Students  WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti')  OR cell_mobile_number = '09700166582'",
      "SELECT first_name  FROM Students  WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti')  OR cell_mobile_number = '09700166582'  ORDER BY first_name"
    ]
  },
  {
    "db_id": "car_1",
    "question": "How many car makers are there in france?",
    "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
    "debug_answers1": [
      "SELECT count(DISTINCT car_makers.Id) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France'",
      "SELECT count(*) FROM car_makers WHERE Country = (SELECT Id FROM countries WHERE CountryName = 'France')",
      "SELECT count(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')",
      "SELECT count(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')",
      "SELECT count(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')",
      "SELECT count(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')",
      "SELECT count(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')",
      "SELECT count(*)  FROM car_makers  WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')",
      "SELECT count(*)  FROM car_makers  WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')",
      "SELECT count(*)  FROM car_makers  WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
    "gold": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
    "debug_answers1": [
      "SELECT DISTINCT Model  FROM model_list  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN car_names ON model_list.ModelId = car_names.Model  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500",
      "SELECT DISTINCT Model  FROM model_list  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN car_names ON model_list.Model = car_names.Model  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500",
      "SELECT DISTINCT car_names.Model  FROM model_list  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN car_names ON car_names.Model = model_list.Model  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500",
      "SELECT DISTINCT model_list.Model  FROM model_list  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN car_names ON car_names.Model = model_list.Model  JOIN cars_data ON cars_data.Id = car_names.MakeId  WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500",
      "SELECT DISTINCT Model  FROM model_list  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN car_names ON model_list.Model = car_names.Model  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500",
      "SELECT DISTINCT car_names.Model  FROM model_list  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN car_names ON car_names.Model = model_list.Model  JOIN cars_data ON cars_data.Id = car_names.MakeId  WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500",
      "SELECT DISTINCT model_list.Model  FROM model_list  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN car_names ON car_names.Model = model_list.Model  JOIN cars_data ON cars_data.Id = car_names.MakeId  WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500",
      "SELECT DISTINCT Model  FROM model_list  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN car_names ON model_list.ModelId = car_names.Model  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500",
      "SELECT DISTINCT car_names.Model  FROM model_list  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN car_names ON car_names.Model = model_list.Model  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500",
      "SELECT DISTINCT model_list.Model  FROM model_list  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN car_names ON car_names.Model = model_list.Model  JOIN cars_data ON cars_data.Id = car_names.MakeId  WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "Find the average ranking for each player and their first name.",
    "gold": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
    "debug_answers1": [
      "SELECT players.first_name, AVG(rankings.ranking)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name",
      "SELECT players.first_name, AVG(rankings.ranking)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name",
      "SELECT p.first_name, AVG(r.ranking)  FROM players p  JOIN rankings r ON p.player_id = r.player_id  GROUP BY p.first_name",
      "SELECT p.first_name, AVG(r.ranking)  FROM players AS p  JOIN rankings AS r ON p.player_id = r.player_id  GROUP BY p.first_name",
      "SELECT players.first_name, AVG(rankings.ranking)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name",
      "SELECT players.first_name, AVG(rankings.ranking)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name",
      "SELECT p.first_name, AVG(r.ranking)  FROM players p  JOIN rankings r ON p.player_id = r.player_id  GROUP BY p.player_id, p.first_name",
      "SELECT p.first_name, AVG(r.ranking)  FROM players AS p  JOIN rankings AS r ON p.player_id = r.player_id  GROUP BY p.player_id, p.first_name",
      "SELECT players.first_name, AVG(rankings.ranking)  FROM players  INNER JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name",
      "SELECT players.first_name, AVG(rankings.ranking)  FROM players  INNER JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "What is the name of the conductor who has conducted the most orchestras?",
    "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "debug_answers1": [
      "SELECT Name FROM conductor GROUP BY Name ORDER BY COUNT(DISTINCT Orchestra_ID) DESC LIMIT 1",
      "SELECT conductor.Name  FROM conductor  JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID  GROUP BY conductor.Conductor_ID  ORDER BY COUNT(orchestra.Orchestra_ID) DESC  LIMIT 1",
      "SELECT conductor.Name  FROM conductor  JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID  GROUP BY conductor.Name  ORDER BY COUNT(orchestra.Orchestra_ID) DESC  LIMIT 1",
      "SELECT conductor.Name  FROM conductor  JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID  GROUP BY conductor.Name  ORDER BY COUNT(orchestra.Orchestra_ID) DESC  LIMIT 1",
      "SELECT conductor.Name  FROM conductor  JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID  GROUP BY conductor.Name  ORDER BY COUNT(orchestra.Orchestra_ID) DESC  LIMIT 1",
      "SELECT conductor.Name  FROM conductor  JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID  GROUP BY conductor.Name  ORDER BY COUNT(orchestra.Orchestra_ID) DESC  LIMIT 1",
      "SELECT conductor.Name  FROM conductor  JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID  GROUP BY conductor.Name  ORDER BY COUNT(orchestra.Orchestra_ID) DESC  LIMIT 1",
      "SELECT conductor.Name  FROM conductor  JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID  GROUP BY conductor.Name  ORDER BY COUNT(orchestra.Orchestra_ID) DESC  LIMIT 1",
      "SELECT conductor.Name  FROM conductor  JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID  GROUP BY conductor.Name  ORDER BY COUNT(orchestra.Orchestra_ID) DESC  LIMIT 1",
      "SELECT conductor.Name  FROM conductor  JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID  GROUP BY conductor.Name  ORDER BY COUNT(orchestra.Orchestra_ID) DESC  LIMIT 1"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
    "gold": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
    "debug_answers1": [
      "SELECT semester_id  FROM Student_Enrolment  WHERE degree_program_id = (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Masters')  INTERSECT  SELECT semester_id  FROM Student_Enrolment  WHERE degree_program_id = (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelors')",
      "SELECT semester_id  FROM Student_Enrolment  WHERE degree_program_id = (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Masters')  AND semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE degree_program_id = (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelors')) GROUP BY semester_id",
      "SELECT Semesters.semester_id  FROM Student_Enrolment  WHERE degree_program_id = (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Masters')  AND semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE degree_program_id = (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelors'))  GROUP BY Semesters.semester_id",
      "SELECT semester_id  FROM Student_Enrolment  WHERE degree_program_id = (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Masters')  AND semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE degree_program_id = (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelors'))  GROUP BY semester_id  HAVING COUNT(*) > 0",
      "SELECT semester_id  FROM Student_Enrolment  WHERE degree_program_id = (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Masters')  AND semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE degree_program_id = (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelors'))  GROUP BY semester_id  HAVING COUNT(DISTINCT degree_program_id) = 2  LIMIT 1",
      "SELECT semester_id  FROM Student_Enrolment  WHERE degree_program_id = (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Masters')  AND semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE degree_program_id = (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelors'))  GROUP BY semester_id  HAVING COUNT(DISTINCT degree_program_id) = 2  ORDER BY semester_id ASC  LIMIT 1",
      "SELECT Semesters.semester_id  FROM Student_Enrolment  WHERE degree_program_id = (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Masters')  AND semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE degree_program_id = (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelors'))  GROUP BY semester_id  HAVING COUNT(DISTINCT degree_program_id) = 2  ORDER BY semester_id DESC  LIMIT 1",
      "SELECT Semesters.semester_id  FROM Student_Enrolment  JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  JOIN Semesters ON Student_Enrolment.semester_id = Semesters.semester_id  WHERE Degree_Programs.degree_summary_name IN ('Masters', 'Bachelors') GROUP BY Semesters.semester_id HAVING COUNT(DISTINCT Degree_Programs.degree_summary_name) = 2",
      "SELECT Semesters.semester_id  FROM Student_Enrolment  WHERE degree_program_id = (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Masters')  AND semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE degree_program_id = (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelors'))  INTERSECT  SELECT semester_id FROM Student_Enrolment WHERE degree_program_id = (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelors')  AND semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE degree_program_id = (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Masters'))",
      "SELECT Semesters.semester_id  FROM Student_Enrolment  JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  JOIN Semesters ON Student_Enrolment.semester_id = Semesters.semester_id  WHERE Degree_Programs.degree_summary_name IN ('Masters', 'Bachelors') GROUP BY Semesters.semester_id HAVING COUNT(DISTINCT Degree_Programs.degree_summary_name) = 2 ORDER BY Semesters.semester_id ASC LIMIT 1"
    ]
  },
  {
    "db_id": "world_1",
    "question": "What are the country codes for countries that do not speak English?",
    "gold": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "debug_answers1": [
      "SELECT country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language <> 'English' OR countrylanguage.Language IS NULL",
      "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')",
      "SELECT country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language <> 'English' OR countrylanguage.Language IS NULL",
      "SELECT country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IS NULL OR countrylanguage.Language != 'English'",
      "SELECT country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language NOT LIKE '%English%' OR countrylanguage.Language IS NULL",
      "SELECT Code  FROM country  WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')",
      "SELECT country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language NOT LIKE 'English%' OR countrylanguage.Language IS NULL",
      "SELECT country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language NOT LIKE '%English%' OR countrylanguage.Language IS NULL",
      "SELECT country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language NOT LIKE '%English%' OR countrylanguage.Language IS NULL",
      "SELECT country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language NOT LIKE '%English%' OR countrylanguage.Language IS NULL"
    ]
  },
  {
    "db_id": "world_1",
    "question": "How many countries have a republic as their form of government?",
    "gold": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
    "debug_answers1": [
      "SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%republic%'",
      "SELECT COUNT(DISTINCT Code) FROM country WHERE GovernmentForm = 'Republic'",
      "SELECT COUNT(DISTINCT Code) FROM country WHERE GovernmentForm IN ('Republic', 'Federal Republic', 'People\\'s Republic')",
      "SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%republic%' OR GovernmentForm LIKE '%Republic%' AND GovernmentForm NOT LIKE '%Monarchy%'",
      "SELECT COUNT(DISTINCT Code) FROM country WHERE GovernmentForm LIKE '%republic%' AND GovernmentForm NOT LIKE '%monarchy%'",
      "SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%republic%'",
      "SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%republic%'",
      "SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%republic%'",
      "SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%republic%'",
      "SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%republic%'"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
    "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
    "debug_answers1": [
      "SELECT Students.first_name  FROM Students  JOIN Addresses ON Students.permanent_address_id = Addresses.address_id  WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'",
      "SELECT Students.first_name  FROM Students  JOIN Addresses ON Students.permanent_address_id = Addresses.address_id  WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'",
      "SELECT Students.first_name  FROM Students  JOIN Addresses ON Students.permanent_address_id = Addresses.address_id  WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'",
      "SELECT first_name  FROM Students  WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti')  OR cell_mobile_number = '09700166582'",
      "SELECT first_name  FROM Students  WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti')  OR cell_mobile_number = '09700166582'",
      "SELECT first_name  FROM Students  WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti')  OR cell_mobile_number = '09700166582'",
      "SELECT first_name  FROM Students  WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti')  OR cell_mobile_number = '09700166582'",
      "SELECT first_name  FROM Students  JOIN Addresses ON Students.permanent_address_id = Addresses.address_id  WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'",
      "SELECT first_name  FROM Students  WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti')  OR cell_mobile_number = '09700166582'",
      "SELECT first_name  FROM Students  WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti')  OR cell_mobile_number = '09700166582'  ORDER BY first_name"
    ]
  },
  {
    "db_id": "battle_death",
    "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
    "gold": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
    "debug_answers1": [
      "SELECT DISTINCT name  FROM battle  WHERE bulgarian_commander = 'Kaloyan'  AND latin_commander = 'Baldwin I'",
      "SELECT DISTINCT name  FROM battle  WHERE (bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I')",
      "SELECT DISTINCT name  FROM battle  WHERE (bulgarian_commander = 'Kaloyan')  AND (latin_commander = 'Baldwin I')",
      "SELECT DISTINCT name  FROM battle  WHERE (bulgarian_commander = 'Kaloyan')  AND (latin_commander = 'Baldwin I')",
      "SELECT DISTINCT name  FROM battle  WHERE bulgarian_commander = 'Kaloyan'  AND latin_commander = 'Baldwin I'",
      "SELECT DISTINCT name  FROM battle  WHERE (bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I')",
      "SELECT DISTINCT name  FROM battle  WHERE (bulgarian_commander = 'Kaloyan')  AND (latin_commander = 'Baldwin I')",
      "SELECT DISTINCT name  FROM battle  WHERE (bulgarian_commander = 'Kaloyan')  AND (latin_commander = 'Baldwin I')",
      "SELECT DISTINCT name  FROM battle  WHERE bulgarian_commander = 'Kaloyan'  AND latin_commander = 'Baldwin I'",
      "SELECT DISTINCT name  FROM battle  WHERE (bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I')"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the codes of template types that are not used for any document?",
    "gold": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
    "debug_answers1": [
      "SELECT DISTINCT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates)",
      "SELECT DISTINCT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates)",
      "SELECT DISTINCT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Code NOT IN (     SELECT Templates.Template_Type_Code      FROM Templates      JOIN Documents ON Templates.Template_ID = Documents.Template_ID )",
      "SELECT DISTINCT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Code NOT IN (     SELECT Template_Type_Code      FROM Templates      WHERE Templates.Template_ID IN (         SELECT Template_ID          FROM Documents     ) )",
      "SELECT DISTINCT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Code NOT IN (     SELECT Template_Type_Code      FROM Templates      WHERE Templates.Template_ID IN (         SELECT Template_ID          FROM Documents          WHERE Documents.Template_ID IS NOT NULL     ) )",
      "SELECT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Code NOT IN (     SELECT Template_Type_Code      FROM Templates      WHERE Templates.Template_ID IN (         SELECT Template_ID          FROM Documents          WHERE Documents.Template_ID = Templates.Template_ID     ) )",
      "SELECT DISTINCT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Code NOT IN (     SELECT DISTINCT Template_Type_Code      FROM Templates      WHERE Template_ID IN (         SELECT Template_ID          FROM Documents          WHERE Template_ID IS NOT NULL     ) )",
      "SELECT DISTINCT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Code NOT IN (     SELECT Template_Type_Code      FROM Templates      WHERE Templates.Template_ID IN (         SELECT Template_ID          FROM Documents          WHERE Documents.Template_ID = Templates.Template_ID     ) )",
      "SELECT DISTINCT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Code NOT IN (     SELECT Template_Type_Code      FROM Templates      WHERE Templates.Template_ID IN (         SELECT Template_ID          FROM Documents          WHERE Documents.Template_ID = Templates.Template_ID     ) )",
      "SELECT DISTINCT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Code NOT IN (     SELECT Template_Type_Code      FROM Templates      WHERE Templates.Template_ID IN (         SELECT Template_ID          FROM Documents          WHERE Documents.Template_ID = Templates.Template_ID     ) )"
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
    "debug_answers1": [
      "SELECT count(*)  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = 'United Airlines'  AND airports.City = 'Aberdeen'",
      "SELECT count(*)  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE flights.Airline = 'United Airlines'  AND airports.City = 'Aberdeen'",
      "SELECT count(*)  FROM flights  INNER JOIN airports ON flights.DestAirport = airports.AirportCode  INNER JOIN airlines ON flights.Airline = airlines.Abbreviation  WHERE airlines.Airline = 'United Airlines'  AND airports.City = 'Aberdeen'",
      "SELECT count(*)  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE flights.Airline = 'United Airlines'  AND airports.AirportName = 'Aberdeen'",
      "SELECT count(*) FROM flights  JOIN airlines ON flights.Airline = airlines.Airline  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airlines.Airline = 'United Airlines'  AND airports.AirportName = 'Aberdeen'",
      "SELECT count(*)  FROM flights  INNER JOIN airports ON flights.DestAirport = airports.AirportCode  INNER JOIN airlines ON flights.Airline = airlines.Abbreviation  WHERE airlines.Airline = 'United Airlines'  AND airports.AirportName = 'Aberdeen'",
      "SELECT count(*)  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE flights.Airline = 'United Airlines'  AND airports.City = 'Aberdeen'",
      "SELECT count(*)  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  JOIN airlines ON flights.Airline = airlines.Abbreviation  WHERE airlines.Airline = 'United Airlines'  AND airports.City = 'Aberdeen'",
      "SELECT count(*)  FROM flights  INNER JOIN airports ON flights.DestAirport = airports.AirportCode  INNER JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = 'United Airlines'  AND airports.City = 'Aberdeen'",
      "SELECT count(*)  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  JOIN airlines ON flights.Airline = airlines.Abbreviation  WHERE airlines.Airline = 'United Airlines'  AND airports.City = 'Aberdeen'"
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Which airlines have departing flights from both APG and CVO airports?",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
    "debug_answers1": [
      "SELECT DISTINCT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  WHERE flights.SourceAirport IN ('APG', 'CVO') GROUP BY airlines.Airline HAVING COUNT(DISTINCT flights.SourceAirport) = 2",
      "SELECT DISTINCT airlines.Airline  FROM airlines  JOIN flights AS F1 ON airlines.uid = F1.Airline  JOIN flights AS F2 ON airlines.uid = F2.Airline  JOIN airports AS A1 ON F1.SourceAirport = A1.AirportCode  JOIN airports AS A2 ON F2.SourceAirport = A2.AirportCode  WHERE A1.AirportName = 'APG' AND A2.AirportName = 'CVO'",
      "SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode IN ('APG', 'CVO') GROUP BY Airline HAVING COUNT(DISTINCT flights.SourceAirport) = 2",
      "SELECT DISTINCT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.AirportCode IN ('APG', 'CVO') GROUP BY airlines.Airline HAVING COUNT(DISTINCT airports.AirportCode) = 2",
      "SELECT Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  WHERE flights.SourceAirport IN ('APG', 'CVO')  GROUP BY Airline  HAVING COUNT(DISTINCT flights.SourceAirport) = 2",
      "SELECT DISTINCT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.AirportCode IN ('APG', 'CVO') GROUP BY airlines.Airline HAVING COUNT(DISTINCT airports.AirportCode) = 2",
      "SELECT DISTINCT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  WHERE flights.SourceAirport = 'APG'  AND EXISTS (SELECT * FROM flights WHERE Airline = airlines.uid AND SourceAirport = 'CVO')",
      "SELECT DISTINCT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  WHERE flights.SourceAirport = 'APG'  AND airlines.Airline IN (SELECT flights.Airline FROM flights WHERE flights.SourceAirport = 'CVO')",
      "SELECT DISTINCT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  WHERE flights.SourceAirport = 'APG'  AND airlines.Airline IN (SELECT flights.Airline FROM flights WHERE flights.SourceAirport = 'CVO' GROUP BY flights.Airline)",
      "SELECT DISTINCT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  WHERE flights.SourceAirport = 'APG'  AND airlines.Airline IN (     SELECT flights.Airline      FROM flights      WHERE flights.SourceAirport = 'CVO'      GROUP BY flights.Airline      HAVING COUNT(*) > 0 )"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the name of the course with the most students enrolled?",
    "gold": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
    "debug_answers1": [
      "SELECT Courses.course_name  FROM Courses  JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id  GROUP BY Courses.course_name  ORDER BY COUNT(Student_Enrolment_Courses.student_course_id) DESC  LIMIT 1",
      "SELECT Courses.course_name  FROM Courses  JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id  GROUP BY Courses.course_id  ORDER BY COUNT(Student_Enrolment_Courses.student_course_id) DESC  LIMIT 1",
      "SELECT Courses.course_name  FROM Courses  JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id  GROUP BY Courses.course_id  ORDER BY COUNT(Student_Enrolment_Courses.student_course_id) DESC  LIMIT 1",
      "SELECT Courses.course_name  FROM Courses  JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id  GROUP BY Courses.course_name  ORDER BY COUNT(Student_Enrolment_Courses.student_course_id) DESC  LIMIT 1",
      "SELECT Courses.course_name  FROM Courses  JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id  GROUP BY Courses.course_name  ORDER BY COUNT(Student_Enrolment_Courses.student_course_id) DESC  LIMIT 1",
      "SELECT Courses.course_name  FROM Courses  JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id  GROUP BY Courses.course_name  ORDER BY COUNT(Student_Enrolment_Courses.student_course_id) DESC  LIMIT 1",
      "SELECT Courses.course_name  FROM Courses  JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id  GROUP BY Courses.course_name  ORDER BY COUNT(Student_Enrolment_Courses.student_course_id) DESC  LIMIT 1",
      "SELECT Courses.course_name  FROM Courses  JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id  GROUP BY Courses.course_name  ORDER BY COUNT(Student_Enrolment_Courses.student_course_id) DESC  LIMIT 1",
      "SELECT Courses.course_name  FROM Courses  JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id  GROUP BY Courses.course_name  ORDER BY COUNT(Student_Enrolment_Courses.student_course_id) DESC  LIMIT 1"
    ]
  },
  {
    "db_id": "pets_1",
    "question": "What type of pet is the youngest animal, and how much does it weigh?",
    "gold": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
    "debug_answers1": [
      "SELECT PetType, pet_age, weight  FROM Pets  ORDER BY pet_age ASC, weight ASC  LIMIT 1",
      "SELECT PetType, pet_age, weight  FROM Pets  WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)  ORDER BY weight ASC  LIMIT 1",
      "SELECT PetType, weight  FROM Pets  WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)  ORDER BY weight ASC  LIMIT 1",
      "SELECT PetType, pet_age, weight  FROM Pets  WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)  ORDER BY weight ASC  LIMIT 1",
      "SELECT PetType, pet_age, weight  FROM Pets  WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)  ORDER BY weight ASC  LIMIT 1",
      "SELECT PetType, pet_age, weight  FROM Pets  WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)  ORDER BY weight ASC  LIMIT 1",
      "SELECT PetType, pet_age, weight  FROM Pets  WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)  ORDER BY weight ASC  LIMIT 1",
      "SELECT PetType, pet_age, weight  FROM Pets  WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)  ORDER BY weight ASC  LIMIT 1",
      "SELECT PetType, pet_age, weight  FROM Pets  WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)  ORDER BY weight ASC  LIMIT 1",
      "SELECT PetType, pet_age, weight  FROM Pets  WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)  ORDER BY weight ASC  LIMIT 1"
    ]
  },
  {
    "db_id": "battle_death",
    "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
    "gold": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",
    "debug_answers1": [
      "SELECT battle.name, battle.date  FROM battle  JOIN ship ON ship.lost_in_battle = battle.id  WHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta'",
      "SELECT battle.name, battle.date  FROM battle  JOIN ship ON ship.lost_in_battle = battle.id  WHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta'",
      "SELECT battle.name, battle.date  FROM battle  INNER JOIN ship ON ship.lost_in_battle = battle.id  WHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta'",
      "SELECT battle.name, battle.date  FROM battle  JOIN ship ON ship.lost_in_battle = battle.id  WHERE ship.name IN ('Lettice', 'HMS Atalanta')",
      "SELECT battle.name, battle.date  FROM battle  JOIN ship ON ship.lost_in_battle = battle.id  WHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta'",
      "SELECT battle.name, battle.date  FROM battle  INNER JOIN ship ON ship.lost_in_battle = battle.id  WHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta'",
      "SELECT battle.name, battle.date  FROM battle  JOIN ship ON ship.lost_in_battle = battle.id  WHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta'",
      "SELECT battle.name, battle.date  FROM battle  JOIN ship ON ship.lost_in_battle = battle.id  WHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta'",
      "SELECT battle.name, battle.date  FROM battle  INNER JOIN ship ON ship.lost_in_battle = battle.id  WHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta'",
      "SELECT battle.name, battle.date  FROM battle  JOIN ship ON ship.lost_in_battle = battle.id  WHERE ship.name IN ('Lettice', 'HMS Atalanta')"
    ]
  },
  {
    "db_id": "network_1",
    "question": "Give the name of the student with the most likes.",
    "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "debug_answers1": [
      "SELECT name  FROM Highschooler  WHERE ID = (     SELECT student_id      FROM Likes      GROUP BY student_id      ORDER BY count(*) DESC      LIMIT 1 )",
      "SELECT name  FROM Highschooler  WHERE ID = (     SELECT student_id      FROM Likes      GROUP BY student_id      HAVING count(*) = (         SELECT max(count(*))          FROM Likes          GROUP BY student_id     ) )",
      "SELECT name  FROM Highschooler  WHERE ID = (     SELECT student_id      FROM Likes      GROUP BY student_id      HAVING count(*) = (         SELECT max(count(*))          FROM Likes     ) )",
      "SELECT name  FROM Highschooler  WHERE ID = (     SELECT student_id      FROM Likes      GROUP BY student_id      HAVING count(*) = (         SELECT max(count(*))          FROM Likes          GROUP BY student_id          LIMIT 1     ) )",
      "SELECT name  FROM Highschooler  WHERE ID = (     SELECT student_id      FROM Likes      GROUP BY student_id      HAVING count(*) = (         SELECT max(count(*))          FROM Likes          GROUP BY student_id          LIMIT 1     ) )",
      "SELECT name  FROM Highschooler  WHERE ID = (     SELECT student_id      FROM Likes      GROUP BY student_id      HAVING count(*) = (         SELECT max(count(*))          FROM Likes          GROUP BY student_id          LIMIT 1     ) )",
      "SELECT name  FROM Highschooler  WHERE ID = (     SELECT student_id      FROM Likes      GROUP BY student_id      HAVING count(*) = (         SELECT max(count(*))          FROM Likes          GROUP BY student_id          LIMIT 1     ) )",
      "SELECT name  FROM Highschooler  WHERE ID = (     SELECT student_id      FROM Likes      GROUP BY student_id      HAVING count(*) = (         SELECT max(count(*))          FROM Likes          GROUP BY student_id          LIMIT 1     ) )",
      "SELECT name  FROM Highschooler  WHERE ID = (     SELECT student_id      FROM Likes      GROUP BY student_id      HAVING count(*) = (         SELECT max(count(*))          FROM Likes          GROUP BY student_id     ) )",
      "SELECT name  FROM Highschooler  WHERE ID = (     SELECT student_id      FROM Likes      GROUP BY student_id      HAVING count(*) = (         SELECT max(count(*))          FROM Likes     ) )"
    ]
  },
  {
    "db_id": "course_teach",
    "question": "What is the most commmon hometowns for teachers?",
    "gold": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
    "debug_answers1": [
      "SELECT Hometown, COUNT(*) AS count  FROM teacher  GROUP BY Hometown  ORDER BY count DESC  LIMIT 1",
      "SELECT Hometown, COUNT(*) AS count  FROM teacher  GROUP BY Hometown  HAVING count = (     SELECT MAX(count)      FROM (         SELECT Hometown, COUNT(*) AS count          FROM teacher          GROUP BY Hometown     ) AS temp )",
      "SELECT Hometown, COUNT(*) AS count  FROM teacher  GROUP BY Hometown  HAVING COUNT(*) = (SELECT MAX(count)                     FROM (SELECT Hometown, COUNT(*) AS count                           FROM teacher                           GROUP BY Hometown) AS temp)",
      "SELECT Hometown, COUNT(*) as count FROM teacher GROUP BY Hometown ORDER BY count DESC LIMIT 1",
      "SELECT Hometown, COUNT(*) as count  FROM teacher  GROUP BY Hometown  HAVING COUNT(*) = (SELECT MAX(count)                    FROM (SELECT Hometown, COUNT(*) as count                          FROM teacher                          GROUP BY Hometown))",
      "SELECT Hometown, COUNT(*) as count  FROM teacher  GROUP BY Hometown  ORDER BY count DESC  LIMIT 1",
      "SELECT Hometown, COUNT(*) AS count  FROM teacher  GROUP BY Hometown  HAVING COUNT(*) = (     SELECT COUNT(*)      FROM (         SELECT Hometown, COUNT(*) AS count          FROM teacher          GROUP BY Hometown     ) AS temp )",
      "SELECT Hometown, COUNT(*) AS count  FROM teacher  GROUP BY Hometown  HAVING COUNT(*) = (     SELECT MAX(count)      FROM (         SELECT Hometown, COUNT(*) AS count          FROM teacher          GROUP BY Hometown     ) AS temp )  ORDER BY count DESC LIMIT 1",
      "SELECT Hometown, COUNT(*) AS count  FROM teacher  GROUP BY Hometown  HAVING COUNT(*) = (     SELECT MAX(count)      FROM (         SELECT Hometown, COUNT(*) AS count          FROM teacher          GROUP BY Hometown     ) AS temp )  LIMIT 1",
      "SELECT Hometown, COUNT(*) AS count  FROM teacher  GROUP BY Hometown  HAVING COUNT(*) = (     SELECT MAX(count)      FROM (         SELECT Hometown, COUNT(*) AS count          FROM teacher          GROUP BY Hometown     ) AS temp )  LIMIT 1"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "Find the package choice and series name of the TV channel that has high definition TV.",
    "gold": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
    "debug_answers1": [
      "SELECT TV_Channel.Package_Option, TV_Channel.series_name  FROM TV_Channel  JOIN TV_series ON TV_Channel.id = TV_series.Channel  WHERE TV_Channel.Hight_definition_TV = true",
      "SELECT TV_Channel.Package_Option, TV_Channel.series_name  FROM TV_Channel  JOIN TV_series ON TV_Channel.id = TV_series.Channel  WHERE TV_Channel.Hight_definition_TV = true",
      "SELECT TV_Channel.Package_Option, TV_Channel.series_name  FROM TV_Channel  INNER JOIN TV_series ON TV_Channel.id = TV_series.Channel  WHERE TV_Channel.Hight_definition_TV = true",
      "SELECT TV_Channel.Package_Option, TV_Channel.series_name  FROM TV_Channel  JOIN TV_series ON TV_Channel.id = TV_series.Channel  WHERE TV_Channel.Hight_definition_TV = 1",
      "SELECT TV_Channel.Package_Option, TV_Channel.series_name  FROM TV_Channel  INNER JOIN TV_series ON TV_Channel.id = TV_series.Channel  WHERE TV_Channel.Hight_definition_TV = 1",
      "SELECT TV_Channel.Package_Option, TV_Channel.series_name  FROM TV_Channel  JOIN TV_series ON TV_Channel.id = TV_series.Channel  WHERE TV_Channel.Hight_definition_TV = 'true'",
      "SELECT TV_Channel.Package_Option, TV_Channel.series_name  FROM TV_Channel  INNER JOIN TV_series ON TV_Channel.id = TV_series.Channel  WHERE TV_Channel.Hight_definition_TV = 'true'",
      "SELECT TV_Channel.Package_Option, TV_Channel.series_name  FROM TV_Channel  JOIN TV_series ON TV_Channel.id = TV_series.Channel  WHERE TV_Channel.Hight_definition_TV = '1'",
      "SELECT TV_Channel.Package_Option, TV_Channel.series_name  FROM TV_Channel  INNER JOIN TV_series ON TV_Channel.id = TV_series.Channel  WHERE TV_Channel.Hight_definition_TV = '1'",
      "SELECT TV_Channel.Package_Option, TV_Channel.series_name  FROM TV_Channel  JOIN TV_series ON TV_Channel.id = TV_series.Channel  WHERE TV_Channel.Hight_definition_TV = 1"
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Which airlines have a flight with destination airport AHD?",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
    "debug_answers1": [
      "SELECT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.AirportCode = 'AHD'",
      "SELECT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.AirportCode = 'AHD'",
      "SELECT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.AirportCode = \"AHD\"",
      "SELECT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.AirportCode = 'AHD'",
      "SELECT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.AirportCode = \"AHD\"",
      "SELECT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.AirportCode = 'AHD'",
      "SELECT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.AirportCode = \"AHD\"",
      "SELECT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.AirportCode = 'AHD'",
      "SELECT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.AirportCode = \"AHD\"",
      "SELECT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.AirportCode = 'AHD'"
    ]
  },
  {
    "db_id": "singer",
    "question": "What are the names of the singers who are not French citizens?",
    "gold": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
    "debug_answers1": [
      "SELECT singer.Name FROM singer WHERE singer.Citizenship <> 'French'",
      "SELECT Name FROM singer WHERE Citizenship <> 'French'",
      "SELECT singer.Name FROM singer WHERE singer.Citizenship != 'French'",
      "SELECT Name FROM singer WHERE Citizenship <> 'French'",
      "SELECT Name FROM singer WHERE Citizenship <> 'French'",
      "SELECT Name FROM singer WHERE Citizenship <> 'French'",
      "SELECT Name FROM singer WHERE Citizenship <> 'French' OR Citizenship IS NULL",
      "SELECT Name FROM singer WHERE Citizenship <> 'French' OR Citizenship IS NULL",
      "SELECT Name FROM singer WHERE Citizenship <> 'French' OR Citizenship IS NULL",
      "SELECT Name FROM singer WHERE Citizenship <> 'French' OR Citizenship IS NULL"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the number of makers of care in France?",
    "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
    "debug_answers1": [
      "SELECT count(DISTINCT Id) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')",
      "SELECT count(DISTINCT car_makers.Id) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France'",
      "SELECT count(DISTINCT car_makers.Id)  FROM car_makers  JOIN countries ON car_makers.Country = countries.CountryId  WHERE countries.CountryName = 'France'",
      "SELECT count(DISTINCT car_makers.Id)  FROM car_makers  JOIN countries ON car_makers.Country = countries.CountryId  WHERE countries.CountryName = 'France'",
      "SELECT count(DISTINCT car_makers.Id)  FROM car_makers  INNER JOIN countries ON car_makers.Country = countries.CountryId  WHERE countries.CountryName = 'France'",
      "SELECT count(DISTINCT car_makers.Id)  FROM car_makers  INNER JOIN countries ON car_makers.Country = countries.CountryId  WHERE countries.CountryName = 'France'",
      "SELECT count(DISTINCT car_makers.Id)  FROM car_makers  LEFT JOIN countries ON car_makers.Country = countries.CountryId  WHERE countries.CountryName = 'France'",
      "SELECT count(DISTINCT car_makers.Id)  FROM car_makers  LEFT JOIN countries ON car_makers.Country = countries.CountryId  WHERE countries.CountryName = 'France'",
      "SELECT count(DISTINCT car_makers.Id)  FROM car_makers  JOIN countries ON car_makers.Country = countries.CountryId  WHERE countries.CountryName = 'France'",
      "SELECT count(DISTINCT car_makers.Id)  FROM car_makers  JOIN countries ON car_makers.Country = countries.CountryId  WHERE countries.CountryName = 'France'"
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Find all airlines that have at least 10 flights.",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
    "debug_answers1": [
      "SELECT Airline  FROM airlines  WHERE Abbreviation IN (SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10)",
      "SELECT Airline  FROM airlines  WHERE uid IN (SELECT Airline                FROM flights                GROUP BY Airline                HAVING COUNT(*) >= 10)",
      "SELECT Airline  FROM airlines  WHERE uid IN (SELECT Airline                FROM flights                GROUP BY Airline                HAVING COUNT(*) >= 10)",
      "SELECT Airline  FROM airlines  WHERE uid IN (SELECT Airline                FROM flights                GROUP BY Airline                HAVING COUNT(*) >= 10)",
      "SELECT Airline  FROM airlines  WHERE uid IN (SELECT Airline                FROM flights                GROUP BY Airline                HAVING COUNT(*) >= 10)",
      "SELECT Airline  FROM airlines  WHERE uid IN (SELECT Airline                FROM flights                GROUP BY Airline                HAVING COUNT(*) >= 10)",
      "SELECT Airline  FROM airlines  WHERE uid IN (SELECT Airline                FROM flights                GROUP BY Airline                HAVING COUNT(*) >= 10)",
      "SELECT Airline  FROM airlines  WHERE uid IN (SELECT Airline                FROM flights                GROUP BY Airline                HAVING COUNT(*) >= 10)",
      "SELECT Airline  FROM airlines  WHERE uid IN (SELECT Airline                FROM flights                GROUP BY Airline                HAVING COUNT(*) >= 10)",
      "SELECT Airline  FROM airlines  WHERE uid IN (SELECT Airline                FROM flights                GROUP BY Airline                HAVING COUNT(*) >= 10)"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Which address holds the most number of students currently? List the address id and all lines.",
    "gold": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
    "debug_answers1": [
      "SELECT Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3  FROM Addresses  JOIN Students ON Students.current_address_id = Addresses.address_id  GROUP BY Addresses.address_id  ORDER BY COUNT(Students.student_id) DESC  LIMIT 1",
      "SELECT Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3  FROM Addresses  JOIN Students ON Students.current_address_id = Addresses.address_id  GROUP BY Addresses.address_id  ORDER BY COUNT(*) DESC  LIMIT 1",
      "SELECT Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3  FROM Addresses  JOIN Students ON Students.current_address_id = Addresses.address_id  GROUP BY Addresses.address_id  HAVING COUNT(Students.student_id) = (     SELECT MAX(count)      FROM (         SELECT COUNT(*) AS count          FROM Students          GROUP BY current_address_id     ) AS counts )",
      "SELECT Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3  FROM Addresses  JOIN Students ON Students.current_address_id = Addresses.address_id  GROUP BY Addresses.address_id  HAVING COUNT(*) = (     SELECT MAX(count)      FROM (         SELECT COUNT(*) AS count          FROM Students          GROUP BY current_address_id     ) AS counts )",
      "SELECT Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3  FROM Addresses  JOIN Students ON Students.current_address_id = Addresses.address_id  GROUP BY Addresses.address_id  HAVING COUNT(Students.student_id) = (     SELECT MAX(count)      FROM (         SELECT COUNT(*) AS count          FROM Students          GROUP BY current_address_id     ) AS counts )  ORDER BY COUNT(Students.student_id) DESC  LIMIT 1",
      "SELECT Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3  FROM Addresses  JOIN Students ON Students.current_address_id = Addresses.address_id  GROUP BY Addresses.address_id  HAVING COUNT(*) = (     SELECT MAX(count)      FROM (         SELECT COUNT(*) AS count          FROM Students          GROUP BY current_address_id     ) AS counts )  LIMIT 1",
      "SELECT Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3  FROM Addresses  JOIN Students ON Students.current_address_id = Addresses.address_id  GROUP BY Addresses.address_id  ORDER BY COUNT(Students.student_id) DESC  LIMIT 1",
      "SELECT Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3  FROM Addresses  JOIN Students ON Students.current_address_id = Addresses.address_id  GROUP BY Addresses.address_id  ORDER BY COUNT(*) DESC  LIMIT 1",
      "SELECT Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3  FROM Addresses  JOIN Students ON Students.current_address_id = Addresses.address_id  GROUP BY Addresses.address_id  HAVING COUNT(Students.student_id) = (     SELECT MAX(count)      FROM (         SELECT COUNT(*) AS count          FROM Students          GROUP BY current_address_id     ) AS counts )  ORDER BY COUNT(Students.student_id) DESC  LIMIT 1",
      "SELECT Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3  FROM Addresses  JOIN Students ON Students.current_address_id = Addresses.address_id  GROUP BY Addresses.address_id  HAVING COUNT(*) = (     SELECT MAX(count)      FROM (         SELECT COUNT(*) AS count          FROM Students          GROUP BY current_address_id     ) AS counts )  ORDER BY COUNT(*) DESC  LIMIT 1"
    ]
  },
  {
    "db_id": "flight_2",
    "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
    "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
    "debug_answers1": [
      "SELECT count(*) FROM flights  JOIN airlines ON flights.Airline = airlines.Abbreviation  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airlines.Airline = 'United Airlines'  AND airports.AirportCode = 'ASY'",
      "SELECT count(*)  FROM flights  JOIN airlines ON flights.Airline = airlines.Airline  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airlines.Airline = 'United Airlines'  AND airports.AirportCode = 'ASY'",
      "SELECT count(*) FROM flights  INNER JOIN airlines ON flights.Airline = airlines.Abbreviation  INNER JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airlines.Airline = 'United Airlines'  AND airports.AirportCode = 'ASY'",
      "SELECT count(*)  FROM flights  JOIN airlines ON flights.Airline = airlines.Airline  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airlines.Airline = 'United Airlines'  AND airports.AirportCode = 'ASY'",
      "SELECT count(*) FROM flights  JOIN airlines ON flights.Airline = airlines.Abbreviation  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airlines.Airline = 'United Airlines'  AND airports.AirportCode = 'ASY'",
      "SELECT count(*) FROM flights  INNER JOIN airlines ON flights.Airline = airlines.Abbreviation  INNER JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airlines.Airline = 'United Airlines'  AND airports.AirportCode = 'ASY'",
      "SELECT count(*)  FROM flights  JOIN airlines ON flights.Airline = airlines.Airline  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airlines.Airline = 'United Airlines'  AND airports.AirportCode = 'ASY'",
      "SELECT count(*) FROM flights  JOIN airlines ON flights.Airline = airlines.Abbreviation  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airlines.Airline = 'United Airlines'  AND airports.AirportCode = 'ASY'",
      "SELECT count(*) FROM flights  INNER JOIN airlines ON flights.Airline = airlines.Abbreviation  INNER JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airlines.Airline = 'United Airlines'  AND airports.AirportCode = 'ASY'",
      "SELECT count(*)  FROM flights  JOIN airlines ON flights.Airline = airlines.Airline  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airlines.Airline = 'United Airlines'  AND airports.AirportCode = 'ASY'"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What other details can you tell me about students in reverse alphabetical order?",
    "gold": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
    "debug_answers1": [
      "SELECT Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details FROM Students ORDER BY Students.last_name DESC",
      "SELECT first_name, middle_name, last_name, other_student_details  FROM Students  ORDER BY last_name DESC",
      "SELECT last_name, middle_name, first_name, other_student_details  FROM Students  ORDER BY last_name DESC",
      "SELECT Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details FROM Students ORDER BY Students.last_name DESC, Students.first_name DESC",
      "SELECT first_name, middle_name, last_name, other_student_details  FROM Students  ORDER BY last_name DESC, first_name DESC",
      "SELECT last_name, middle_name, first_name, other_student_details  FROM Students  ORDER BY last_name DESC, first_name DESC",
      "SELECT Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details FROM Students ORDER BY Students.last_name DESC, Students.first_name DESC, Students.middle_name DESC",
      "SELECT first_name, middle_name, last_name, other_student_details  FROM Students  ORDER BY last_name DESC, first_name DESC, middle_name DESC",
      "SELECT last_name, middle_name, first_name, other_student_details  FROM Students  ORDER BY last_name DESC, first_name DESC, middle_name DESC",
      "SELECT Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details FROM Students ORDER BY Students.last_name DESC, Students.first_name DESC, Students.middle_name DESC, Students.other_student_details DESC"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
    "gold": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
    "debug_answers1": [
      "SELECT matches.minutes, players.first_name, players.last_name  FROM matches  JOIN players ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id WHERE matches.minutes = (SELECT max(minutes) FROM matches)",
      "SELECT players.first_name, players.last_name  FROM players  INNER JOIN matches ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id  WHERE matches.minutes = (SELECT max(minutes) FROM matches)",
      "SELECT players.first_name, players.last_name  FROM players  JOIN matches ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id  WHERE matches.minutes = (SELECT max(minutes) FROM matches)",
      "SELECT matches.minutes, players.first_name, players.last_name  FROM matches  JOIN players ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id WHERE matches.minutes = (SELECT max(minutes) FROM matches)",
      "SELECT players.first_name, players.last_name  FROM players  INNER JOIN matches ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id  WHERE matches.minutes = (SELECT max(minutes) FROM matches)",
      "SELECT players.first_name, players.last_name  FROM players  JOIN matches ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id  WHERE matches.minutes = (SELECT max(minutes) FROM matches)",
      "SELECT matches.minutes, players.first_name, players.last_name  FROM matches  JOIN players ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id  WHERE matches.minutes = (SELECT max(minutes) FROM matches)",
      "SELECT players.first_name, players.last_name  FROM players  INNER JOIN matches ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id  WHERE matches.minutes = (SELECT max(minutes) FROM matches)  GROUP BY players.player_id",
      "SELECT players.first_name, players.last_name  FROM players  JOIN matches ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id  WHERE matches.minutes = (SELECT max(minutes) FROM matches)  GROUP BY players.player_id",
      "SELECT matches.minutes, players.first_name, players.last_name  FROM matches  JOIN players ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id  WHERE matches.minutes = (SELECT max(minutes) FROM matches)  ORDER BY players.first_name, players.last_name"
    ]
  },
  {
    "db_id": "course_teach",
    "question": "Show names of teachers that teach at least two courses.",
    "gold": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
    "debug_answers1": [
      "SELECT teacher.Name  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  GROUP BY teacher.Name  HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2",
      "SELECT teacher.Name  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  GROUP BY teacher.Name  HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2",
      "SELECT teacher.Name  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  GROUP BY teacher.Name  HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2",
      "SELECT teacher.Name  FROM teacher  INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  GROUP BY teacher.Name  HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2",
      "SELECT teacher.Name  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  GROUP BY teacher.Name  HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2",
      "SELECT teacher.Name  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  GROUP BY teacher.Name  HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2",
      "SELECT teacher.Name  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  GROUP BY teacher.Name  HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2",
      "SELECT teacher.Name  FROM teacher  INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  GROUP BY teacher.Name  HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2",
      "SELECT teacher.Name  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  GROUP BY teacher.Name  HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2",
      "SELECT teacher.Name  FROM teacher  WHERE teacher.Teacher_ID IN (     SELECT course_arrange.Teacher_ID      FROM course_arrange      GROUP BY course_arrange.Teacher_ID      HAVING COUNT(*) >= 2 )"
    ]
  },
  {
    "db_id": "world_1",
    "question": "What are the countries that have greater surface area than any country in Europe?",
    "gold": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
    "debug_answers1": [
      "SELECT country.Name  FROM country  WHERE SurfaceArea > (SELECT max(SurfaceArea) FROM country WHERE Continent = 'Europe')",
      "SELECT country.Name  FROM country  WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')  AND Continent != 'Europe'",
      "SELECT country.Name  FROM country  WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')",
      "SELECT country.Name  FROM country  WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')",
      "SELECT country.Name  FROM country  WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')  AND Continent != 'Europe'",
      "SELECT country.Name  FROM country  WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')  AND Continent != 'Europe'",
      "SELECT country.Name  FROM country  WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')  AND Continent != 'Europe'  AND SurfaceArea > 0  ORDER BY SurfaceArea DESC",
      "SELECT country.Name  FROM country  WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')  AND Continent != 'Europe'  AND SurfaceArea > 0  ORDER BY SurfaceArea DESC  LIMIT 10",
      "SELECT country.Name  FROM country  WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')  AND Continent != 'Europe'  AND SurfaceArea > 0  ORDER BY SurfaceArea ASC",
      "SELECT country.Name  FROM country  WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')  AND Continent != 'Europe'  AND SurfaceArea > 0  ORDER BY SurfaceArea ASC  LIMIT 10"
    ]
  },
  {
    "db_id": "flight_2",
    "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
    "gold": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
    "debug_answers1": [
      "SELECT Abbreviation, Country  FROM airlines  WHERE uid = (     SELECT Airline      FROM flights      GROUP BY Airline      ORDER BY count(*) ASC      LIMIT 1 )",
      "SELECT Abbreviation, Country  FROM airlines  WHERE uid = (     SELECT Airline      FROM flights      GROUP BY Airline      HAVING count(*) = (         SELECT min(count(*))          FROM flights          GROUP BY Airline     ) )",
      "SELECT Abbreviation, Country  FROM airlines  WHERE uid = (     SELECT Airline      FROM flights      GROUP BY Airline      HAVING count(*) = (         SELECT min(count(*))          FROM flights          GROUP BY Airline     )      LIMIT 1 )",
      "SELECT Abbreviation, Country  FROM airlines  WHERE uid = (     SELECT Airline      FROM flights      GROUP BY Airline      HAVING count(*) = (         SELECT min(count(*))          FROM flights          GROUP BY Airline     ) )",
      "SELECT Abbreviation, Country  FROM airlines  WHERE uid = (     SELECT Airline      FROM flights      GROUP BY Airline      HAVING count(*) = (         SELECT min(count(*))          FROM flights          GROUP BY Airline     )      ORDER BY count(*) ASC      LIMIT 1 )",
      "SELECT Abbreviation, Country  FROM airlines  WHERE uid = (     SELECT Airline      FROM flights      GROUP BY Airline      HAVING count(*) = (         SELECT min(count(*))          FROM flights          GROUP BY Airline     )      LIMIT 1 )",
      "SELECT Abbreviation, Country  FROM airlines  WHERE uid = (     SELECT Airline      FROM flights      GROUP BY Airline      HAVING count(*) = (         SELECT min(count(*))          FROM flights          GROUP BY Airline     )      ORDER BY count(*) ASC      LIMIT 1 )",
      "SELECT Abbreviation, Country  FROM airlines  WHERE uid = (     SELECT Airline      FROM flights      GROUP BY Airline      HAVING count(*) = (         SELECT min(count(*))          FROM flights          GROUP BY Airline     ) )  ORDER BY count(*) ASC LIMIT 1",
      "SELECT Abbreviation, Country  FROM airlines  WHERE uid = (     SELECT Airline      FROM flights      GROUP BY Airline      HAVING count(*) = (         SELECT min(count(*))          FROM flights          GROUP BY Airline     )      LIMIT 1 )",
      "SELECT Abbreviation, Country  FROM airlines  WHERE uid = (     SELECT Airline      FROM flights      GROUP BY Airline      HAVING count(*) = (         SELECT min(count(*))          FROM flights          GROUP BY Airline     )      ORDER BY count(*) ASC      LIMIT 1 )"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
    "gold": "select distinct year from cars_data where weight between 3000 and 4000;",
    "debug_answers1": [
      "SELECT DISTINCT Year  FROM cars_data  WHERE Weight < 4000     OR Weight > 3000",
      "SELECT DISTINCT Year  FROM cars_data  WHERE Weight < 4000 OR Weight > 3000",
      "SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 OR Weight > 3000",
      "SELECT DISTINCT Year  FROM cars_data  WHERE Weight < 4000     OR Weight > 3000",
      "SELECT DISTINCT Year  FROM cars_data  WHERE Weight < 4000     OR Weight > 3000",
      "SELECT DISTINCT Year  FROM cars_data  WHERE Weight < 4000     OR Weight > 3000",
      "SELECT DISTINCT Year  FROM cars_data  WHERE Weight < 4000     OR Weight > 3000",
      "SELECT DISTINCT Year  FROM cars_data  WHERE Weight < 4000     OR Weight > 3000",
      "SELECT DISTINCT Year  FROM cars_data  WHERE Weight < 4000     OR Weight > 3000",
      "SELECT DISTINCT Year  FROM cars_data  WHERE Weight < 4000     OR Weight > 3000"
    ]
  },
  {
    "db_id": "flight_2",
    "question": "What are airlines that have some flight departing from airport 'AHD'?",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
    "debug_answers1": [
      "SELECT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.AirportCode = 'AHD'",
      "SELECT Airline  FROM airlines  WHERE uid IN (SELECT Airline FROM flights WHERE SourceAirport = 'AHD')",
      "SELECT DISTINCT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.AirportCode = 'AHD'",
      "SELECT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.AirportCode = 'AHD'",
      "SELECT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.AirportCode = 'AHD'",
      "SELECT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.AirportCode = 'AHD'",
      "SELECT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.AirportCode = 'AHD'",
      "SELECT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.AirportCode = 'AHD'",
      "SELECT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.AirportCode = 'AHD'",
      "SELECT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.AirportCode = 'AHD'"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "For each shop, return the number of employees working there and the name of the shop.",
    "gold": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
    "debug_answers1": [
      "SELECT COUNT(employee.Employee_ID) , shop.Name  FROM shop  JOIN hiring ON hiring.Shop_ID = shop.Shop_ID  JOIN employee ON hiring.Employee_ID = employee.Employee_ID  GROUP BY shop.Name",
      "SELECT COUNT(e.Employee_ID) , s.Name  FROM shop s  JOIN hiring h ON h.Shop_ID = s.Shop_ID  JOIN employee e ON h.Employee_ID = e.Employee_ID  GROUP BY s.Name",
      "SELECT COUNT(employee.Employee_ID) , shop.Name  FROM shop  JOIN hiring ON hiring.Shop_ID = shop.Shop_ID  JOIN employee ON hiring.Employee_ID = employee.Employee_ID  GROUP BY shop.Name",
      "SELECT COUNT(employee.Employee_ID) , shop.Name  FROM shop  JOIN hiring ON hiring.Shop_ID = shop.Shop_ID  JOIN employee ON hiring.Employee_ID = employee.Employee_ID  GROUP BY shop.Name",
      "SELECT COUNT(employee.Employee_ID) , shop.Name  FROM shop  INNER JOIN hiring ON hiring.Shop_ID = shop.Shop_ID  INNER JOIN employee ON hiring.Employee_ID = employee.Employee_ID  GROUP BY shop.Name",
      "SELECT COUNT(employee.Employee_ID) , shop.Name  FROM shop  LEFT JOIN hiring ON hiring.Shop_ID = shop.Shop_ID  LEFT JOIN employee ON hiring.Employee_ID = employee.Employee_ID  GROUP BY shop.Name",
      "SELECT COUNT(employee.Employee_ID) , shop.Name  FROM shop  LEFT JOIN hiring ON hiring.Shop_ID = shop.Shop_ID  LEFT JOIN employee ON hiring.Employee_ID = employee.Employee_ID  GROUP BY shop.Name",
      "SELECT COUNT(employee.Employee_ID) , shop.Name  FROM shop  JOIN hiring ON hiring.Shop_ID = shop.Shop_ID  JOIN employee ON hiring.Employee_ID = employee.Employee_ID  GROUP BY shop.Name",
      "SELECT COUNT(employee.Employee_ID) , shop.Name  FROM shop  JOIN hiring ON hiring.Shop_ID = shop.Shop_ID  JOIN employee ON hiring.Employee_ID = employee.Employee_ID  GROUP BY shop.Name",
      "SELECT COUNT(employee.Employee_ID) , shop.Name  FROM shop  JOIN hiring ON hiring.Shop_ID = shop.Shop_ID  JOIN employee ON hiring.Employee_ID = employee.Employee_ID  GROUP BY shop.Name"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What are the names and ids of every course with less than 2 sections?",
    "gold": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
    "debug_answers1": [
      "SELECT Courses.course_name, Courses.course_id  FROM Courses  WHERE Courses.course_id NOT IN (     SELECT Sections.course_id      FROM Sections      GROUP BY Sections.course_id      HAVING COUNT(*) >= 2 )",
      "SELECT Courses.course_name, Courses.course_id  FROM Courses  LEFT JOIN Sections ON Courses.course_id = Sections.course_id  GROUP BY Courses.course_id  HAVING COUNT(Sections.section_id) < 2",
      "SELECT Courses.course_name, Courses.course_id  FROM Courses  WHERE Courses.course_id IN (     SELECT Sections.course_id      FROM Sections      GROUP BY Sections.course_id      HAVING COUNT(*) < 2 )",
      "SELECT Courses.course_name, Courses.course_id  FROM Courses  WHERE Courses.course_id NOT IN (     SELECT Sections.course_id      FROM Sections      GROUP BY Sections.course_id      HAVING COUNT(*) >= 2 )",
      "SELECT Courses.course_name, Courses.course_id  FROM Courses  LEFT JOIN Sections ON Courses.course_id = Sections.course_id  GROUP BY Courses.course_id  HAVING COUNT(Sections.section_id) < 2",
      "SELECT Courses.course_name, Courses.course_id  FROM Courses  WHERE Courses.course_id IN (     SELECT Sections.course_id      FROM Sections      GROUP BY Sections.course_id      HAVING COUNT(*) < 2 )",
      "SELECT Courses.course_name, Courses.course_id  FROM Courses  WHERE Courses.course_id NOT IN (     SELECT Sections.course_id      FROM Sections      GROUP BY Sections.course_id      HAVING COUNT(*) >= 2 )",
      "SELECT Courses.course_name, Courses.course_id  FROM Courses  LEFT JOIN Sections ON Courses.course_id = Sections.course_id  GROUP BY Courses.course_id  HAVING COUNT(Sections.section_id) < 2",
      "SELECT Courses.course_name, Courses.course_id  FROM Courses  WHERE Courses.course_id IN (     SELECT Sections.course_id      FROM Sections      GROUP BY Sections.course_id      HAVING COUNT(*) < 2 )",
      "SELECT Courses.course_name, Courses.course_id  FROM Courses  WHERE Courses.course_id NOT IN (     SELECT Sections.course_id      FROM Sections      GROUP BY Sections.course_id      HAVING COUNT(*) >= 2 )"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
    "gold": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
    "debug_answers1": [
      "SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id JOIN Treatments ON Treatments.dog_id = Dogs.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1",
      "SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id JOIN Treatments ON Treatments.dog_id = Dogs.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1",
      "SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id JOIN Treatments ON Treatments.dog_id = Dogs.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1",
      "SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id JOIN Treatments ON Treatments.dog_id = Dogs.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1",
      "SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id JOIN Treatments ON Treatments.dog_id = Dogs.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1",
      "SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id JOIN Treatments ON Treatments.dog_id = Dogs.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1",
      "SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1",
      "SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id JOIN Treatments ON Treatments.dog_id = Dogs.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1",
      "SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1",
      "SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id JOIN Treatments ON Treatments.dog_id = Dogs.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What are all the makers and models?",
    "gold": "SELECT Maker ,  Model FROM MODEL_LIST;",
    "debug_answers1": [
      "SELECT car_makers.Maker, model_list.Model  FROM car_makers  JOIN model_list ON model_list.Maker = car_makers.Id",
      "SELECT car_makers.Maker, model_list.Model  FROM car_makers  JOIN model_list ON model_list.Maker = car_makers.Id",
      "SELECT car_makers.Maker, model_list.Model  FROM car_makers  JOIN model_list ON model_list.Maker = car_makers.Id  ORDER BY car_makers.Maker ASC, model_list.Model ASC",
      "SELECT car_makers.Maker, model_list.Model  FROM car_makers  JOIN model_list ON model_list.Maker = car_makers.Id  ORDER BY car_makers.Maker ASC, model_list.Model ASC",
      "SELECT car_makers.Maker, model_list.Model  FROM car_makers  JOIN model_list ON model_list.Maker = car_makers.Id",
      "SELECT car_makers.Maker, model_list.Model  FROM car_makers  JOIN model_list ON model_list.Maker = car_makers.Id  WHERE car_makers.Maker LIKE '%a%'",
      "SELECT car_makers.Maker, model_list.Model  FROM car_makers  JOIN model_list ON model_list.Maker = car_makers.Id",
      "SELECT car_makers.Maker, model_list.Model  FROM car_makers  JOIN model_list ON model_list.Maker = car_makers.Id",
      "SELECT car_makers.Maker, model_list.Model  FROM car_makers  JOIN model_list ON model_list.Maker = car_makers.Id  GROUP BY car_makers.Maker, model_list.Model",
      "SELECT car_makers.Maker, model_list.Model  FROM car_makers  JOIN model_list ON model_list.Maker = car_makers.Id"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "Show the name and the release year of the song by the youngest singer.",
    "gold": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
    "debug_answers1": [
      "SELECT singer.Name, singer.Song_Name, singer.Song_release_year  FROM singer  WHERE singer.Age = (SELECT MIN(singer.Age) FROM singer)",
      "SELECT singer.Name, singer.Song_Name, singer.Song_release_year  FROM singer  WHERE singer.Age = (SELECT MIN(singer.Age) FROM singer)  ORDER BY singer.Song_release_year ASC  LIMIT 1",
      "SELECT singer.Name, singer.Song_Name, singer.Song_release_year  FROM singer  WHERE singer.Age = (SELECT MIN(singer.Age) FROM singer)  ORDER BY singer.Song_release_year ASC  LIMIT 1",
      "SELECT singer.Name, singer.Song_Name, singer.Song_release_year  FROM singer  WHERE singer.Age = (SELECT MIN(singer.Age) FROM singer)  ORDER BY singer.Name ASC",
      "SELECT singer.Name, singer.Song_Name, singer.Song_release_year  FROM singer  WHERE singer.Age = (SELECT MIN(singer.Age) FROM singer)  ORDER BY singer.Song_release_year ASC",
      "SELECT singer.Name, singer.Song_Name, singer.Song_release_year  FROM singer  WHERE singer.Age = (SELECT MIN(singer.Age) FROM singer)  ORDER BY singer.Name ASC, singer.Song_release_year ASC",
      "SELECT singer.Name, singer.Song_Name, singer.Song_release_year  FROM singer  WHERE singer.Age = (SELECT MIN(singer.Age) FROM singer)  ORDER BY singer.Name ASC, singer.Song_release_year DESC",
      "SELECT singer.Name, singer.Song_Name, singer.Song_release_year  FROM singer  WHERE singer.Age = (SELECT MIN(singer.Age) FROM singer)  ORDER BY singer.Song_release_year ASC, singer.Name ASC",
      "SELECT singer.Name, singer.Song_Name, singer.Song_release_year  FROM singer  WHERE singer.Age = (SELECT MIN(singer.Age) FROM singer)  ORDER BY singer.Song_release_year ASC  LIMIT 1",
      "SELECT singer.Name, singer.Song_Name, singer.Song_release_year  FROM singer  WHERE singer.Age = (SELECT MIN(singer.Age) FROM singer)  ORDER BY singer.Age ASC  LIMIT 1"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What are the countries that are not playing cartoons written by Todd Casey?",
    "gold": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "debug_answers1": [
      "SELECT DISTINCT TV_Channel.Country  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Written_by != 'Todd Casey'",
      "SELECT DISTINCT TV_Channel.Country  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Written_by <> 'Todd Casey'",
      "SELECT DISTINCT TV_Channel.Country  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Written_by <> 'Todd Casey'",
      "SELECT DISTINCT TV_Channel.Country  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Written_by <> 'Todd Casey'",
      "SELECT DISTINCT TV_Channel.Country  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Written_by <> 'Todd Casey'",
      "SELECT DISTINCT TV_Channel.Country  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Written_by <> 'Todd Casey'",
      "SELECT TV_Channel.Country  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Written_by <> 'Todd Casey'",
      "SELECT DISTINCT TV_Channel.Country  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Written_by != 'Todd Casey'",
      "SELECT DISTINCT TV_Channel.Country  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Written_by <> 'Todd Casey'",
      "SELECT DISTINCT TV_Channel.Country  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Written_by <> 'Todd Casey'"
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Which airlines have a flight with source airport AHD?",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
    "debug_answers1": [
      "SELECT DISTINCT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.AirportCode = 'AHD'",
      "SELECT Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  WHERE flights.SourceAirport = 'AHD'",
      "SELECT Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  WHERE flights.SourceAirport = 'AHD'",
      "SELECT Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  WHERE flights.SourceAirport = 'AHD'",
      "SELECT Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  WHERE flights.SourceAirport = 'AHD'",
      "SELECT Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  WHERE flights.SourceAirport = 'AHD'",
      "SELECT Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  WHERE flights.SourceAirport = 'AHD'",
      "SELECT Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  WHERE flights.SourceAirport = 'AHD'",
      "SELECT Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  WHERE flights.SourceAirport = 'AHD'",
      "SELECT Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  WHERE flights.SourceAirport = 'AHD'"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the document id and name with greatest number of paragraphs?",
    "gold": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
    "debug_answers1": [
      "SELECT Documents.Document_ID, Documents.Document_Name  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID, Documents.Document_Name  ORDER BY COUNT(Paragraphs.Paragraph_ID) DESC  LIMIT 1",
      "SELECT D.Document_ID, D.Document_Name  FROM Documents D  JOIN Paragraphs P ON D.Document_ID = P.Document_ID  GROUP BY D.Document_ID, D.Document_Name  ORDER BY COUNT(P.Paragraph_ID) DESC  LIMIT 1",
      "SELECT Documents.Document_ID, Documents.Document_Name  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID, Documents.Document_Name  ORDER BY COUNT(Paragraphs.Paragraph_ID) DESC  LIMIT 1",
      "SELECT D.Document_ID, D.Document_Name  FROM Documents D  JOIN Paragraphs P ON D.Document_ID = P.Document_ID  GROUP BY D.Document_ID, D.Document_Name  ORDER BY COUNT(P.Paragraph_ID) DESC  LIMIT 1",
      "SELECT Documents.Document_ID, Documents.Document_Name  FROM Documents  INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID, Documents.Document_Name  ORDER BY COUNT(Paragraphs.Paragraph_ID) DESC  LIMIT 1",
      "SELECT D.Document_ID, D.Document_Name  FROM Documents D  INNER JOIN Paragraphs P ON D.Document_ID = P.Document_ID  GROUP BY D.Document_ID, D.Document_Name  ORDER BY COUNT(P.Paragraph_ID) DESC  LIMIT 1",
      "SELECT Documents.Document_ID, Documents.Document_Name  FROM Documents  LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID, Documents.Document_Name  ORDER BY COUNT(Paragraphs.Paragraph_ID) DESC  LIMIT 1",
      "SELECT D.Document_ID, D.Document_Name  FROM Documents D  LEFT JOIN Paragraphs P ON D.Document_ID = P.Document_ID  GROUP BY D.Document_ID, D.Document_Name  ORDER BY COUNT(P.Paragraph_ID) DESC  LIMIT 1",
      "SELECT Documents.Document_ID, Documents.Document_Name  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID, Documents.Document_Name  ORDER BY COUNT(Paragraphs.Paragraph_ID) DESC  LIMIT 1",
      "SELECT D.Document_ID, D.Document_Name  FROM Documents D  JOIN Paragraphs P ON D.Document_ID = P.Document_ID  GROUP BY D.Document_ID, D.Document_Name  ORDER BY COUNT(P.Paragraph_ID) DESC  LIMIT 1"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
    "gold": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
    "debug_answers1": [
      "SELECT Students.first_name, Students.middle_name, Students.last_name  FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  WHERE Degree_Programs.degree_summary_name = 'Bachelor'",
      "SELECT Students.first_name, Students.middle_name, Students.last_name  FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  WHERE Degree_Programs.degree_summary_name = 'Bachelor'",
      "SELECT Students.first_name, Students.middle_name, Students.last_name  FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  WHERE Degree_Programs.degree_summary_name = 'Bachelor'",
      "SELECT Students.first_name, Students.middle_name, Students.last_name  FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  WHERE Degree_Programs.degree_summary_name = 'Bachelor'",
      "SELECT Students.first_name, Students.middle_name, Students.last_name  FROM Students  INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  WHERE Degree_Programs.degree_summary_name = 'Bachelor'",
      "SELECT Students.first_name, Students.middle_name, Students.last_name  FROM Students  INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  WHERE Degree_Programs.degree_summary_name = 'Bachelor'",
      "SELECT Students.first_name, Students.middle_name, Students.last_name  FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  WHERE Degree_Programs.degree_summary_name = 'Bachelor'",
      "SELECT Students.first_name, Students.middle_name, Students.last_name  FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  WHERE Degree_Programs.degree_summary_name = 'Bachelor'",
      "SELECT Students.first_name, Students.middle_name, Students.last_name  FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  WHERE Degree_Programs.degree_summary_name = 'Bachelor'",
      "SELECT Students.first_name, Students.middle_name, Students.last_name  FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  WHERE Degree_Programs.degree_summary_name = 'Bachelor'"
    ]
  },
  {
    "db_id": "network_1",
    "question": "What is the name of the high schooler who has the greatest number of friends?",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "debug_answers1": [
      "SELECT name  FROM Highschooler  WHERE ID = (     SELECT student_id      FROM Friend      GROUP BY student_id      ORDER BY count(friend_id) DESC      LIMIT 1 )",
      "SELECT name  FROM Highschooler  WHERE ID = (     SELECT student_id      FROM Friend      GROUP BY student_id      ORDER BY count(*) DESC      LIMIT 1 )",
      "SELECT name  FROM Highschooler  WHERE ID = (     SELECT student_id      FROM Friend      GROUP BY student_id      ORDER BY count(*) DESC      LIMIT 1 )",
      "SELECT name  FROM Highschooler  WHERE ID = (     SELECT student_id      FROM Friend      GROUP BY student_id      ORDER BY count(*) DESC      LIMIT 1 )",
      "SELECT name  FROM Highschooler  WHERE ID = (     SELECT student_id      FROM Friend      GROUP BY student_id      ORDER BY count(*) DESC      LIMIT 1 )",
      "SELECT name  FROM Highschooler  WHERE ID = (     SELECT student_id      FROM Friend      GROUP BY student_id      ORDER BY count(*) DESC      LIMIT 1 )",
      "SELECT name  FROM Highschooler  WHERE ID = (     SELECT student_id      FROM Friend      GROUP BY student_id      ORDER BY count(*) DESC      LIMIT 1 )",
      "SELECT name  FROM Highschooler  WHERE ID = (     SELECT student_id      FROM Friend      GROUP BY student_id      ORDER BY count(*) DESC      LIMIT 1 )",
      "SELECT name  FROM Highschooler  WHERE ID = (     SELECT student_id      FROM Friend      GROUP BY student_id      ORDER BY count(*) DESC      LIMIT 1 )",
      "SELECT name  FROM Highschooler  WHERE ID = (     SELECT student_id      FROM Friend      GROUP BY student_id      ORDER BY count(*) DESC      LIMIT 1 )"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the average edispl for all volvos?",
    "gold": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
    "debug_answers1": [
      "SELECT avg(Edispl)  FROM cars_data  WHERE Id IN (SELECT MakeId               FROM car_names               WHERE Model IN (SELECT Model                               FROM model_list                               WHERE Maker IN (SELECT Id                                               FROM car_makers                                               WHERE Maker = 'volvo')))",
      "SELECT avg(cars_data.Edispl)  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.Maker = 'volvo'",
      "SELECT avg(cars_data.Edispl)  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.Maker = 'volvo'",
      "SELECT avg(cars_data.Edispl)  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.Maker = 'volvo'",
      "SELECT avg(cars_data.Edispl) FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.Maker = 'volvo'",
      "SELECT avg(cars_data.Edispl)  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.Maker = 'volvo'",
      "SELECT avg(cars_data.Edispl)  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.Maker = 'volvo'",
      "SELECT avg(cars_data.Edispl)  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.Maker = 'volvo'",
      "SELECT avg(cars_data.Edispl)  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.Maker = 'volvo'",
      "SELECT avg(cars_data.Edispl) FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.Maker = 'volvo'"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Who owns the youngest dog? Give me his or her last name.",
    "gold": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
    "debug_answers1": [
      "SELECT Owners.last_name  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  ORDER BY Dogs.age ASC  LIMIT 1",
      "SELECT Owners.last_name  FROM Owners  INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id  ORDER BY Dogs.age ASC  LIMIT 1",
      "SELECT Owners.last_name  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  ORDER BY Dogs.age ASC  LIMIT 1",
      "SELECT Owners.last_name  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  WHERE Dogs.age = (SELECT MIN(age) FROM Dogs)",
      "SELECT Owners.last_name FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.age = (SELECT MIN(age) FROM Dogs)",
      "SELECT Owners.last_name FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  WHERE Dogs.age = (SELECT MIN(age) FROM Dogs)",
      "SELECT Owners.last_name FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.age = (SELECT MIN(age) FROM Dogs)",
      "SELECT Owners.last_name  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  WHERE Dogs.age = (SELECT MIN(age) FROM Dogs)  LIMIT 1",
      "SELECT Owners.last_name  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  WHERE Dogs.age = (SELECT MIN(age) FROM Dogs)  ORDER BY Owners.last_name ASC  LIMIT 1",
      "SELECT Owners.last_name  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  WHERE Dogs.age = (SELECT MIN(age) FROM Dogs)  ORDER BY Owners.last_name DESC  LIMIT 1"
    ]
  },
  {
    "db_id": "course_teach",
    "question": "What are the names of the people who teach math courses?",
    "gold": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
    "debug_answers1": [
      "SELECT teacher.Name  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  JOIN course ON course.Course_ID = course_arrange.Course_ID  WHERE course.Course LIKE '%math%'",
      "SELECT teacher.Name  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  JOIN course ON course.Course_ID = course_arrange.Course_ID  WHERE course.Course LIKE '%math%'",
      "SELECT teacher.Name  FROM teacher  INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  INNER JOIN course ON course.Course_ID = course_arrange.Course_ID  WHERE course.Course LIKE '%math%'",
      "SELECT teacher.Name  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  JOIN course ON course.Course_ID = course_arrange.Course_ID  WHERE course.Course LIKE '%math%'",
      "SELECT teacher.Name  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  JOIN course ON course.Course_ID = course_arrange.Course_ID  WHERE course.Course LIKE '%math%'",
      "SELECT teacher.Name  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  JOIN course ON course.Course_ID = course_arrange.Course_ID  WHERE course.Course LIKE '%math%'",
      "SELECT teacher.Name  FROM teacher  INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  INNER JOIN course ON course.Course_ID = course_arrange.Course_ID  WHERE course.Course LIKE '%math%'",
      "SELECT teacher.Name  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  JOIN course ON course.Course_ID = course_arrange.Course_ID  WHERE course.Course LIKE '%math%'",
      "SELECT teacher.Name  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  JOIN course ON course.Course_ID = course_arrange.Course_ID  WHERE course.Course LIKE '%math%'",
      "SELECT teacher.Name  FROM teacher  INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  INNER JOIN course ON course.Course_ID = course_arrange.Course_ID  WHERE course.Course LIKE '%math%'"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
    "gold": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
    "debug_answers1": [
      "SELECT Language, COUNT(id) AS channel_count  FROM TV_Channel  GROUP BY Language  HAVING COUNT(id) = (SELECT COUNT(id)                     FROM TV_Channel                     GROUP BY Language                     ORDER BY COUNT(id) ASC                     LIMIT 1)",
      "SELECT Language, COUNT(id) AS channel_count  FROM TV_Channel  GROUP BY Language  HAVING COUNT(id) = (SELECT COUNT(id) AS channel_count                      FROM TV_Channel                      GROUP BY Language                      ORDER BY channel_count ASC                      LIMIT 1)  ORDER BY Language ASC",
      "SELECT Language, COUNT(id) AS channel_count  FROM TV_Channel  GROUP BY Language  HAVING COUNT(id) = (     SELECT MIN(channel_count)      FROM (         SELECT COUNT(id) AS channel_count          FROM TV_Channel          GROUP BY Language     ) AS subquery )  ORDER BY channel_count ASC",
      "SELECT Language, COUNT(id) AS channel_count  FROM TV_Channel  GROUP BY Language  HAVING COUNT(id) = (SELECT COUNT(id) AS channel_count                      FROM TV_Channel                      GROUP BY Language                      ORDER BY channel_count ASC                      LIMIT 1)  ORDER BY channel_count DESC",
      "SELECT Language, COUNT(id) AS channel_count  FROM TV_Channel  GROUP BY Language  HAVING COUNT(id) = (SELECT COUNT(id) AS channel_count                      FROM TV_Channel                      GROUP BY Language                      ORDER BY channel_count ASC                      LIMIT 1)  ORDER BY Language DESC",
      "SELECT Language, COUNT(id) AS channel_count  FROM TV_Channel  GROUP BY Language  HAVING COUNT(id) = (SELECT MIN(channel_count)                     FROM (SELECT COUNT(id) AS channel_count                           FROM TV_Channel                           GROUP BY Language) AS subquery)  ORDER BY channel_count ASC  LIMIT 1",
      "SELECT Language, COUNT(id) AS channel_count  FROM TV_Channel  GROUP BY Language  HAVING COUNT(id) = (SELECT MIN(channel_count)                     FROM (SELECT COUNT(id) AS channel_count                           FROM TV_Channel                           GROUP BY Language) AS subquery)  ORDER BY channel_count ASC  LIMIT 5",
      "SELECT Language, COUNT(id) AS channel_count  FROM TV_Channel  GROUP BY Language  HAVING COUNT(id) = (SELECT MIN(channel_count)                     FROM (SELECT COUNT(id) AS channel_count                           FROM TV_Channel                           GROUP BY Language) AS subquery)  ORDER BY channel_count ASC  LIMIT 1",
      "SELECT Language, COUNT(id) AS channel_count  FROM TV_Channel  GROUP BY Language  HAVING COUNT(id) = (SELECT MIN(channel_count)                     FROM (SELECT COUNT(id) AS channel_count                           FROM TV_Channel                           GROUP BY Language) AS subquery)",
      "SELECT Language, COUNT(id) AS channel_count  FROM TV_Channel  GROUP BY Language  HAVING COUNT(id) = (SELECT MIN(channel_count)                     FROM (SELECT COUNT(id) AS channel_count                           FROM TV_Channel                           GROUP BY Language) AS subquery)  ORDER BY channel_count  LIMIT 1"
    ]
  }
]