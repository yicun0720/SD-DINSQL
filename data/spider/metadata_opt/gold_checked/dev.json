[
    {
        "db_id": "concert_singer",
        "id": 0,
        "query": "SELECT count(*) FROM singer",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer"
        ],
        "question": "How many singers do we have?",
        "question_toks": [
            "How",
            "many",
            "singers",
            "do",
            "we",
            "have",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 1,
        "query": "SELECT count(*) FROM singer",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer"
        ],
        "question": "What is the total number of singers?",
        "question_toks": [
            "What",
            "is",
            "the",
            "total",
            "number",
            "of",
            "singers",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 2,
        "query": "SELECT name, country, age FROM singer ORDER BY age DESC, Singer_ID ASC",
        "query_toks": [
            "SELECT",
            "name,",
            "country,",
            "age",
            "FROM",
            "singer",
            "ORDER",
            "BY",
            "age",
            "DESC,",
            "Singer_ID",
            "ASC"
        ],
        "query_toks_no_value": [
            "select",
            "name,",
            "country,",
            "age",
            "from",
            "singer",
            "order",
            "by",
            "age",
            "desc,",
            "singer_id",
            "asc"
        ],
        "question": "Show name, country, and age for all singers, ordered by age from oldest to youngest, and then by Singer ID from lowest to highest.",
        "question_toks": [
            "Show",
            "name",
            ",",
            "country",
            ",",
            "and",
            "age",
            "for",
            "all",
            "singers",
            ",",
            "ordered",
            "by",
            "age",
            "from",
            "oldest",
            "to",
            "youngest",
            ",",
            "and",
            "then",
            "by",
            "Singer",
            "ID",
            "from",
            "lowest",
            "to",
            "highest",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 3,
        "query": "SELECT name, country, age FROM singer ORDER BY age DESC, Singer_ID ASC",
        "query_toks": [
            "SELECT",
            "name,",
            "country,",
            "age",
            "FROM",
            "singer",
            "ORDER",
            "BY",
            "age",
            "DESC,",
            "Singer_ID",
            "ASC"
        ],
        "query_toks_no_value": [
            "select",
            "name,",
            "country,",
            "age",
            "from",
            "singer",
            "order",
            "by",
            "age",
            "desc,",
            "singer_id",
            "asc"
        ],
        "question": "What are the names, countries, and ages for every singer in descending order of age, and in ascending order of Singer ID when ages are the same?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            ",",
            "countries",
            ",",
            "and",
            "ages",
            "for",
            "every",
            "singer",
            "in",
            "descending",
            "order",
            "of",
            "age",
            ",",
            "and",
            "in",
            "ascending",
            "order",
            "of",
            "Singer",
            "ID",
            "when",
            "ages",
            "are",
            "the",
            "same",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 4,
        "query": "SELECT avg(age) , min(age) , max(age) FROM singer WHERE country = 'France'",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "age",
            ")",
            ",",
            "min",
            "(",
            "age",
            ")",
            ",",
            "max",
            "(",
            "age",
            ")",
            "FROM",
            "singer",
            "WHERE",
            "country",
            "=",
            "'France",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "age",
            ")",
            ",",
            "min",
            "(",
            "age",
            ")",
            ",",
            "max",
            "(",
            "age",
            ")",
            "from",
            "singer",
            "where",
            "country",
            "=",
            "value"
        ],
        "question": "What is the average, minimum, and maximum age of all singers from France?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            ",",
            "minimum",
            ",",
            "and",
            "maximum",
            "age",
            "of",
            "all",
            "singers",
            "from",
            "France",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 5,
        "query": "SELECT avg(age) , min(age) , max(age) FROM singer WHERE country = 'France'",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "age",
            ")",
            ",",
            "min",
            "(",
            "age",
            ")",
            ",",
            "max",
            "(",
            "age",
            ")",
            "FROM",
            "singer",
            "WHERE",
            "country",
            "=",
            "'France",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "age",
            ")",
            ",",
            "min",
            "(",
            "age",
            ")",
            ",",
            "max",
            "(",
            "age",
            ")",
            "from",
            "singer",
            "where",
            "country",
            "=",
            "value"
        ],
        "question": "What is the average, minimum, and maximum age for all French singers?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            ",",
            "minimum",
            ",",
            "and",
            "maximum",
            "age",
            "for",
            "all",
            "French",
            "singers",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 6,
        "query": "SELECT song_name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer)",
        "query_toks": [
            "SELECT",
            "song_name,",
            "song_release_year",
            "FROM",
            "singer",
            "WHERE",
            "age",
            "=",
            "(",
            "SELECT",
            "MIN",
            "(",
            "age",
            ")",
            "FROM",
            "singer",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "song_name,",
            "song_release_year",
            "from",
            "singer",
            "where",
            "age",
            "=",
            "(",
            "select",
            "min",
            "(",
            "age",
            ")",
            "from",
            "singer",
            ")"
        ],
        "question": "Show the name and the release year of the song by the youngest singers.",
        "question_toks": [
            "Show",
            "the",
            "name",
            "and",
            "the",
            "release",
            "year",
            "of",
            "the",
            "song",
            "by",
            "the",
            "youngest",
            "singers",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 7,
        "query": "SELECT Song_Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)",
        "query_toks": [
            "SELECT",
            "Song_Name,",
            "Song_release_year",
            "FROM",
            "singer",
            "WHERE",
            "Age",
            "=",
            "(",
            "SELECT",
            "MIN",
            "(",
            "Age",
            ")",
            "FROM",
            "singer",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "song_name,",
            "song_release_year",
            "from",
            "singer",
            "where",
            "age",
            "=",
            "(",
            "select",
            "min",
            "(",
            "age",
            ")",
            "from",
            "singer",
            ")"
        ],
        "question": "List all names and release years of songs by all singers who are the youngest.",
        "question_toks": [
            "List",
            "all",
            "names",
            "and",
            "release",
            "years",
            "of",
            "songs",
            "by",
            "all",
            "singers",
            "who",
            "are",
            "the",
            "youngest",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 8,
        "query": "SELECT DISTINCT country FROM singer WHERE age > 20",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "country",
            "FROM",
            "singer",
            "WHERE",
            "age",
            ">",
            "20"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "country",
            "from",
            "singer",
            "where",
            "age",
            ">",
            "value"
        ],
        "question": "What are all distinct countries where singers above age 20 are from?",
        "question_toks": [
            "What",
            "are",
            "all",
            "distinct",
            "countries",
            "where",
            "singers",
            "above",
            "age",
            "20",
            "are",
            "from",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 9,
        "query": "SELECT DISTINCT country FROM singer WHERE age > 20",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "country",
            "FROM",
            "singer",
            "WHERE",
            "age",
            ">",
            "20"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "country",
            "from",
            "singer",
            "where",
            "age",
            ">",
            "value"
        ],
        "question": "What are  the different countries with singers above age 20?",
        "question_toks": [
            "What",
            "are",
            "the",
            "different",
            "countries",
            "with",
            "singers",
            "above",
            "age",
            "20",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 10,
        "query": "SELECT country , count(*) FROM singer GROUP BY country",
        "query_toks": [
            "SELECT",
            "country",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "singer",
            "GROUP",
            "BY",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "country",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer",
            "group",
            "by",
            "country"
        ],
        "question": "Show all countries and the number of singers in each country.",
        "question_toks": [
            "Show",
            "all",
            "countries",
            "and",
            "the",
            "number",
            "of",
            "singers",
            "in",
            "each",
            "country",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 11,
        "query": "SELECT country , count(*) FROM singer GROUP BY country",
        "query_toks": [
            "SELECT",
            "country",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "singer",
            "GROUP",
            "BY",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "country",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer",
            "group",
            "by",
            "country"
        ],
        "question": "How many singers are from each country?",
        "question_toks": [
            "How",
            "many",
            "singers",
            "are",
            "from",
            "each",
            "country",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 12,
        "query": "SELECT DISTINCT song_name FROM singer WHERE age > (SELECT avg(age) FROM singer)",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "song_name",
            "FROM",
            "singer",
            "WHERE",
            "age",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "singer",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "song_name",
            "from",
            "singer",
            "where",
            "age",
            ">",
            "(",
            "select",
            "avg",
            "(",
            "age",
            ")",
            "from",
            "singer",
            ")"
        ],
        "question": "List unique song titles by singers whose age is above the average.",
        "question_toks": [
            "List",
            "unique",
            "song",
            "titles",
            "by",
            "singers",
            "whose",
            "age",
            "is",
            "above",
            "the",
            "average",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 13,
        "query": "SELECT DISTINCT song_name FROM singer WHERE age > (SELECT avg(age) FROM singer)",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "song_name",
            "FROM",
            "singer",
            "WHERE",
            "age",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "singer",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "song_name",
            "from",
            "singer",
            "where",
            "age",
            ">",
            "(",
            "select",
            "avg",
            "(",
            "age",
            ")",
            "from",
            "singer",
            ")"
        ],
        "question": "List each distinct song name once whose singers are older than the average age.",
        "question_toks": [
            "List",
            "each",
            "distinct",
            "song",
            "name",
            "once",
            "whose",
            "singers",
            "are",
            "older",
            "than",
            "the",
            "average",
            "age",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 14,
        "query": "SELECT LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "query_toks": [
            "SELECT",
            "LOCATION",
            ",",
            "name",
            "FROM",
            "stadium",
            "WHERE",
            "capacity",
            "BETWEEN",
            "5000",
            "AND",
            "10000"
        ],
        "query_toks_no_value": [
            "select",
            "location",
            ",",
            "name",
            "from",
            "stadium",
            "where",
            "capacity",
            "between",
            "value",
            "and",
            "value"
        ],
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "question_toks": [
            "Show",
            "location",
            "and",
            "name",
            "for",
            "all",
            "stadiums",
            "with",
            "a",
            "capacity",
            "between",
            "5000",
            "and",
            "10000",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 15,
        "query": "SELECT LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "query_toks": [
            "SELECT",
            "LOCATION",
            ",",
            "name",
            "FROM",
            "stadium",
            "WHERE",
            "capacity",
            "BETWEEN",
            "5000",
            "AND",
            "10000"
        ],
        "query_toks_no_value": [
            "select",
            "location",
            ",",
            "name",
            "from",
            "stadium",
            "where",
            "capacity",
            "between",
            "value",
            "and",
            "value"
        ],
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "question_toks": [
            "What",
            "are",
            "the",
            "locations",
            "and",
            "names",
            "of",
            "all",
            "stations",
            "with",
            "capacity",
            "between",
            "5000",
            "and",
            "10000",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 16,
        "query": "SELECT MAX(Capacity), AVG(Capacity) FROM stadium",
        "query_toks": [
            "SELECT",
            "MAX",
            "(",
            "Capacity",
            ")",
            ",",
            "AVG",
            "(",
            "Capacity",
            ")",
            "FROM",
            "stadium"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "capacity",
            ")",
            ",",
            "avg",
            "(",
            "capacity",
            ")",
            "from",
            "stadium"
        ],
        "question": "What is the maximum capacity and the mean average capacity of all stadiums?",
        "question_toks": [
            "What",
            "is",
            "the",
            "maximum",
            "capacity",
            "and",
            "the",
            "mean",
            "average",
            "capacity",
            "of",
            "all",
            "stadiums",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 17,
        "query": "select avg(capacity) , max(capacity) from stadium",
        "query_toks": [
            "select",
            "avg",
            "(",
            "capacity",
            ")",
            ",",
            "max",
            "(",
            "capacity",
            ")",
            "from",
            "stadium"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "capacity",
            ")",
            ",",
            "max",
            "(",
            "capacity",
            ")",
            "from",
            "stadium"
        ],
        "question": "What is the maximum capacity and the mean average capacity for all stadiums?",
        "question_toks": [
            "What",
            "is",
            "the",
            "maximum",
            "capacity",
            "and",
            "the",
            "mean",
            "average",
            "capacity",
            "for",
            "all",
            "stadiums",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 18,
        "query": "SELECT name, capacity FROM stadium ORDER BY average DESC, Stadium_ID ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "name,",
            "capacity",
            "FROM",
            "stadium",
            "ORDER",
            "BY",
            "average",
            "DESC,",
            "Stadium_ID",
            "ASC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "name,",
            "capacity",
            "from",
            "stadium",
            "order",
            "by",
            "average",
            "desc,",
            "stadium_id",
            "asc",
            "limit",
            "value"
        ],
        "question": "What is the name and capacity for the stadium with the highest average attendance, prioritizing the lowest Stadium ID in case of a tie?",
        "question_toks": [
            "What",
            "is",
            "the",
            "name",
            "and",
            "capacity",
            "for",
            "the",
            "stadium",
            "with",
            "the",
            "highest",
            "average",
            "attendance",
            ",",
            "prioritizing",
            "the",
            "lowest",
            "Stadium",
            "ID",
            "in",
            "case",
            "of",
            "a",
            "tie",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 19,
        "query": "SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium)",
        "query_toks": [
            "SELECT",
            "name,",
            "capacity",
            "FROM",
            "stadium",
            "WHERE",
            "average",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "average",
            ")",
            "FROM",
            "stadium",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name,",
            "capacity",
            "from",
            "stadium",
            "where",
            "average",
            "=",
            "(",
            "select",
            "max",
            "(",
            "average",
            ")",
            "from",
            "stadium",
            ")"
        ],
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "question_toks": [
            "What",
            "is",
            "the",
            "name",
            "and",
            "capacity",
            "for",
            "the",
            "stadium",
            "with",
            "the",
            "highest",
            "average",
            "attendance",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 20,
        "query": "SELECT count(*) FROM concert WHERE YEAR = 2014 OR YEAR = 2015",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "concert",
            "WHERE",
            "YEAR",
            "=",
            "2014",
            "OR",
            "YEAR",
            "=",
            "2015"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "concert",
            "where",
            "year",
            "=",
            "value",
            "or",
            "year",
            "=",
            "value"
        ],
        "question": "How many concerts are there in year 2014 or 2015?",
        "question_toks": [
            "How",
            "many",
            "concerts",
            "are",
            "there",
            "in",
            "year",
            "2014",
            "or",
            "2015",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 21,
        "query": "SELECT count(*) FROM concert WHERE YEAR = 2014 OR YEAR = 2015",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "concert",
            "WHERE",
            "YEAR",
            "=",
            "2014",
            "OR",
            "YEAR",
            "=",
            "2015"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "concert",
            "where",
            "year",
            "=",
            "value",
            "or",
            "year",
            "=",
            "value"
        ],
        "question": "How many concerts occurred in 2014 or 2015?",
        "question_toks": [
            "How",
            "many",
            "concerts",
            "occurred",
            "in",
            "2014",
            "or",
            "2015",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 22,
        "query": "SELECT s.name as StadiumName, (SELECT COUNT(*) FROM concert WHERE stadium_id = s.stadium_id) AS NumberOfConcerts FROM stadium s",
        "query_toks": [
            "SELECT",
            "s.name",
            "as",
            "StadiumName,",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "concert",
            "WHERE",
            "stadium_id",
            "=",
            "s.stadium_id",
            ")",
            "AS",
            "NumberOfConcerts",
            "FROM",
            "stadium",
            "s"
        ],
        "query_toks_no_value": [
            "select",
            "s.name",
            "as",
            "stadiumname,",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "concert",
            "where",
            "stadium_id",
            "=",
            "s.stadium_id",
            ")",
            "as",
            "numberofconcerts",
            "from",
            "stadium",
            "s"
        ],
        "question": "Show the stadium name and the number of concerts in each stadium.",
        "question_toks": [
            "Show",
            "the",
            "stadium",
            "name",
            "and",
            "the",
            "number",
            "of",
            "concerts",
            "in",
            "each",
            "stadium",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 23,
        "query": "SELECT s.stadium_id, COUNT(c.concert_id) AS concert_count FROM stadium s LEFT JOIN concert c ON s.stadium_id = c.stadium_id GROUP BY s.stadium_id",
        "query_toks": [
            "SELECT",
            "s.stadium_id,",
            "COUNT",
            "(",
            "c.concert_id",
            ")",
            "AS",
            "concert_count",
            "FROM",
            "stadium",
            "s",
            "LEFT",
            "JOIN",
            "concert",
            "c",
            "ON",
            "s.stadium_id",
            "=",
            "c.stadium_id",
            "GROUP",
            "BY",
            "s.stadium_id"
        ],
        "query_toks_no_value": [
            "select",
            "s.stadium_id,",
            "count",
            "(",
            "c.concert_id",
            ")",
            "as",
            "concert_count",
            "from",
            "stadium",
            "s",
            "left",
            "join",
            "concert",
            "c",
            "on",
            "s.stadium_id",
            "=",
            "c.stadium_id",
            "group",
            "by",
            "s.stadium_id"
        ],
        "question": "For each stadium, display the number of concerts that take place there, identified by Stadium ID.",
        "question_toks": [
            "For",
            "each",
            "stadium",
            ",",
            "display",
            "the",
            "number",
            "of",
            "concerts",
            "that",
            "take",
            "place",
            "there",
            ",",
            "identified",
            "by",
            "Stadium",
            "ID",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 24,
        "query": "SELECT T2.name , T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year >= 2014 GROUP BY T2.stadium_id HAVING COUNT(*) = (SELECT COUNT(*) AS c FROM concert AS T3 JOIN stadium AS T4 ON T3.stadium_id = T4.stadium_id WHERE T3.year >= 2014 GROUP BY T4.stadium_id ORDER BY c desc LIMIT 1)",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "name",
            ",",
            "T2",
            ".",
            "capacity",
            "FROM",
            "concert",
            "AS",
            "T1",
            "JOIN",
            "stadium",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "stadium_id",
            "=",
            "T2",
            ".",
            "stadium_id",
            "WHERE",
            "T1",
            ".",
            "year",
            ">",
            "=",
            "2014",
            "GROUP",
            "BY",
            "T2",
            ".",
            "stadium_id",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "c",
            "FROM",
            "concert",
            "AS",
            "T3",
            "JOIN",
            "stadium",
            "AS",
            "T4",
            "ON",
            "T3",
            ".",
            "stadium_id",
            "=",
            "T4",
            ".",
            "stadium_id",
            "WHERE",
            "T3",
            ".",
            "year",
            ">",
            "=",
            "2014",
            "GROUP",
            "BY",
            "T4",
            ".",
            "stadium_id",
            "ORDER",
            "BY",
            "c",
            "desc",
            "LIMIT",
            "1",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "name",
            ",",
            "t2",
            ".",
            "capacity",
            "from",
            "concert",
            "as",
            "t1",
            "join",
            "stadium",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stadium_id",
            "=",
            "t2",
            ".",
            "stadium_id",
            "where",
            "t1",
            ".",
            "year",
            ">",
            "=",
            "value",
            "group",
            "by",
            "t2",
            ".",
            "stadium_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "c",
            "from",
            "concert",
            "as",
            "t3",
            "join",
            "stadium",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "stadium_id",
            "=",
            "t4",
            ".",
            "stadium_id",
            "where",
            "t3",
            ".",
            "year",
            ">",
            "=",
            "value",
            "group",
            "by",
            "t4",
            ".",
            "stadium_id",
            "order",
            "by",
            "c",
            "desc",
            "limit",
            "value",
            ")"
        ],
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "question_toks": [
            "Show",
            "the",
            "stadium",
            "name",
            "and",
            "capacity",
            "with",
            "most",
            "number",
            "of",
            "concerts",
            "in",
            "year",
            "2014",
            "or",
            "after",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 25,
        "query": "SELECT first.name, first.capacity FROM (SELECT s.name, s.capacity FROM stadium s, concert c WHERE s.stadium_id = c.stadium_id AND c.year > 2013 GROUP BY s.stadium_id HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) as count FROM concert GROUP BY stadium_id) as subquery)) AS first",
        "query_toks": [
            "SELECT",
            "first.name,",
            "first.capacity",
            "FROM",
            "(",
            "SELECT",
            "s.name,",
            "s.capacity",
            "FROM",
            "stadium",
            "s,",
            "concert",
            "c",
            "WHERE",
            "s.stadium_id",
            "=",
            "c.stadium_id",
            "AND",
            "c.year",
            ">",
            "2013",
            "GROUP",
            "BY",
            "s.stadium_id",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "count",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "as",
            "count",
            "FROM",
            "concert",
            "GROUP",
            "BY",
            "stadium_id",
            ")",
            "as",
            "subquery",
            ")",
            ")",
            "AS",
            "first"
        ],
        "query_toks_no_value": [
            "select",
            "first.name,",
            "first.capacity",
            "from",
            "(",
            "select",
            "s.name,",
            "s.capacity",
            "from",
            "stadium",
            "s,",
            "concert",
            "c",
            "where",
            "s.stadium_id",
            "=",
            "c.stadium_id",
            "and",
            "c.year",
            ">",
            "value",
            "group",
            "by",
            "s.stadium_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "count",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "count",
            "from",
            "concert",
            "group",
            "by",
            "stadium_id",
            ")",
            "as",
            "subquery",
            ")",
            ")",
            "as",
            "first"
        ],
        "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "question_toks": [
            "What",
            "is",
            "the",
            "name",
            "and",
            "capacity",
            "of",
            "the",
            "stadium",
            "with",
            "the",
            "most",
            "concerts",
            "after",
            "2013",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 26,
        "query": "SELECT Year FROM concert GROUP BY Year HAVING COUNT(*) = (SELECT MAX(c) FROM (SELECT COUNT(*) AS c FROM concert GROUP BY Year) AS max_count)",
        "query_toks": [
            "SELECT",
            "Year",
            "FROM",
            "concert",
            "GROUP",
            "BY",
            "Year",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "c",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "c",
            "FROM",
            "concert",
            "GROUP",
            "BY",
            "Year",
            ")",
            "AS",
            "max_count",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "year",
            "from",
            "concert",
            "group",
            "by",
            "year",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "c",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "c",
            "from",
            "concert",
            "group",
            "by",
            "year",
            ")",
            "as",
            "max_count",
            ")"
        ],
        "question": "Which years had most number of concerts?",
        "question_toks": [
            "Which",
            "years",
            "had",
            "most",
            "number",
            "of",
            "concerts",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 27,
        "query": "SELECT Year FROM concert GROUP BY Year HAVING count(*) = (SELECT count(*) as cnt FROM concert GROUP BY Year ORDER BY cnt DESC LIMIT 1)",
        "query_toks": [
            "SELECT",
            "Year",
            "FROM",
            "concert",
            "GROUP",
            "BY",
            "Year",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "as",
            "cnt",
            "FROM",
            "concert",
            "GROUP",
            "BY",
            "Year",
            "ORDER",
            "BY",
            "cnt",
            "DESC",
            "LIMIT",
            "1",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "year",
            "from",
            "concert",
            "group",
            "by",
            "year",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "cnt",
            "from",
            "concert",
            "group",
            "by",
            "year",
            "order",
            "by",
            "cnt",
            "desc",
            "limit",
            "value",
            ")"
        ],
        "question": "Which years had the highest number of concerts?",
        "question_toks": [
            "Which",
            "years",
            "had",
            "the",
            "highest",
            "number",
            "of",
            "concerts",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 28,
        "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "stadium",
            "WHERE",
            "stadium_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "stadium_id",
            "FROM",
            "concert",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "stadium",
            "where",
            "stadium_id",
            "not",
            "in",
            "(",
            "select",
            "stadium_id",
            "from",
            "concert",
            ")"
        ],
        "question": "Show the stadium names without any concert.",
        "question_toks": [
            "Show",
            "the",
            "stadium",
            "names",
            "without",
            "any",
            "concert",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 29,
        "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "stadium",
            "WHERE",
            "stadium_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "stadium_id",
            "FROM",
            "concert",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "stadium",
            "where",
            "stadium_id",
            "not",
            "in",
            "(",
            "select",
            "stadium_id",
            "from",
            "concert",
            ")"
        ],
        "question": "What are the names of the stadiums without any concerts?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "the",
            "stadiums",
            "without",
            "any",
            "concerts",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 30,
        "query": "SELECT country FROM singer WHERE age > 40 INTERSECT SELECT country FROM singer WHERE age < 30",
        "query_toks": [
            "SELECT",
            "country",
            "FROM",
            "singer",
            "WHERE",
            "age",
            ">",
            "40",
            "INTERSECT",
            "SELECT",
            "country",
            "FROM",
            "singer",
            "WHERE",
            "age",
            "<",
            "30"
        ],
        "query_toks_no_value": [
            "select",
            "country",
            "from",
            "singer",
            "where",
            "age",
            ">",
            "value",
            "intersect",
            "select",
            "country",
            "from",
            "singer",
            "where",
            "age",
            "<",
            "value"
        ],
        "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "question_toks": [
            "Show",
            "countries",
            "where",
            "a",
            "singer",
            "above",
            "age",
            "40",
            "and",
            "a",
            "singer",
            "below",
            "30",
            "are",
            "from",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 31,
        "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "stadium",
            "WHERE",
            "stadium_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "stadium_id",
            "FROM",
            "concert",
            "WHERE",
            "year",
            "=",
            "2014",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "stadium",
            "where",
            "stadium_id",
            "not",
            "in",
            "(",
            "select",
            "stadium_id",
            "from",
            "concert",
            "where",
            "year",
            "=",
            "value",
            ")"
        ],
        "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
        "question_toks": [
            "Show",
            "names",
            "for",
            "all",
            "stadiums",
            "except",
            "for",
            "stadiums",
            "having",
            "a",
            "concert",
            "in",
            "year",
            "2014",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 32,
        "query": "SELECT s.name FROM stadium s WHERE s.stadium_id NOT IN (SELECT c.stadium_id FROM concert c WHERE c.year = 2014)",
        "query_toks": [
            "SELECT",
            "s.name",
            "FROM",
            "stadium",
            "s",
            "WHERE",
            "s.stadium_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "c.stadium_id",
            "FROM",
            "concert",
            "c",
            "WHERE",
            "c.year",
            "=",
            "2014",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "s.name",
            "from",
            "stadium",
            "s",
            "where",
            "s.stadium_id",
            "not",
            "in",
            "(",
            "select",
            "c.stadium_id",
            "from",
            "concert",
            "c",
            "where",
            "c.year",
            "=",
            "value",
            ")"
        ],
        "question": "What are the names of all stadiums that did not have a concert in 2014?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "all",
            "stadiums",
            "that",
            "did",
            "not",
            "have",
            "a",
            "concert",
            "in",
            "2014",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 33,
        "query": "SELECT concert_name, theme, (SELECT COUNT(*) FROM singer_in_concert WHERE singer_in_concert.concert_id = concert.concert_id) AS number_of_singers FROM concert",
        "query_toks": [
            "SELECT",
            "concert_name,",
            "theme,",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "singer_in_concert",
            "WHERE",
            "singer_in_concert.concert_id",
            "=",
            "concert.concert_id",
            ")",
            "AS",
            "number_of_singers",
            "FROM",
            "concert"
        ],
        "query_toks_no_value": [
            "select",
            "concert_name,",
            "theme,",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer_in_concert",
            "where",
            "singer_in_concert.concert_id",
            "=",
            "concert.concert_id",
            ")",
            "as",
            "number_of_singers",
            "from",
            "concert"
        ],
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "question_toks": [
            "Show",
            "the",
            "name",
            "and",
            "theme",
            "for",
            "all",
            "concerts",
            "and",
            "the",
            "number",
            "of",
            "singers",
            "in",
            "each",
            "concert",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 34,
        "query": "SELECT concert.concert_name, concert.theme, COUNT(DISTINCT sic.singer_id) num_singers FROM concert LEFT JOIN singer_in_concert sic ON concert.concert_id = sic.concert_id GROUP BY concert.concert_id, concert.concert_name, concert.theme",
        "query_toks": [
            "SELECT",
            "concert.concert_name,",
            "concert.theme,",
            "COUNT",
            "(",
            "DISTINCT",
            "sic.singer_id",
            ")",
            "num_singers",
            "FROM",
            "concert",
            "LEFT",
            "JOIN",
            "singer_in_concert",
            "sic",
            "ON",
            "concert.concert_id",
            "=",
            "sic.concert_id",
            "GROUP",
            "BY",
            "concert.concert_id,",
            "concert.concert_name,",
            "concert.theme"
        ],
        "query_toks_no_value": [
            "select",
            "concert.concert_name,",
            "concert.theme,",
            "count",
            "(",
            "distinct",
            "sic.singer_id",
            ")",
            "num_singers",
            "from",
            "concert",
            "left",
            "join",
            "singer_in_concert",
            "sic",
            "on",
            "concert.concert_id",
            "=",
            "sic.concert_id",
            "group",
            "by",
            "concert.concert_id,",
            "concert.concert_name,",
            "concert.theme"
        ],
        "question": "What are the names , themes , and number of singers for every concert ?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            ",",
            "themes",
            ",",
            "and",
            "number",
            "of",
            "singers",
            "for",
            "every",
            "concert",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 35,
        "query": "SELECT name as SingerName, (SELECT COUNT(*) FROM singer_in_concert WHERE singer_id = singer.singer_id) as ConcertCount FROM singer",
        "query_toks": [
            "SELECT",
            "name",
            "as",
            "SingerName,",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "singer_in_concert",
            "WHERE",
            "singer_id",
            "=",
            "singer.singer_id",
            ")",
            "as",
            "ConcertCount",
            "FROM",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "as",
            "singername,",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer_in_concert",
            "where",
            "singer_id",
            "=",
            "singer.singer_id",
            ")",
            "as",
            "concertcount",
            "from",
            "singer"
        ],
        "question": "List singer names and number of concerts for each singer.",
        "question_toks": [
            "List",
            "singer",
            "names",
            "and",
            "number",
            "of",
            "concerts",
            "for",
            "each",
            "singer",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 36,
        "query": "SELECT T2.name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "singer_in_concert",
            "AS",
            "T1",
            "JOIN",
            "singer",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "singer_id",
            "=",
            "T2",
            ".",
            "singer_id",
            "GROUP",
            "BY",
            "T2",
            ".",
            "singer_id"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer_in_concert",
            "as",
            "t1",
            "join",
            "singer",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "singer_id",
            "=",
            "t2",
            ".",
            "singer_id",
            "group",
            "by",
            "t2",
            ".",
            "singer_id"
        ],
        "question": "What are the names of the singers and number of concerts for each person?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "the",
            "singers",
            "and",
            "number",
            "of",
            "concerts",
            "for",
            "each",
            "person",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 37,
        "query": "SELECT DISTINCT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T2",
            ".",
            "name",
            "FROM",
            "singer_in_concert",
            "AS",
            "T1",
            "JOIN",
            "singer",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "singer_id",
            "=",
            "T2",
            ".",
            "singer_id",
            "JOIN",
            "concert",
            "AS",
            "T3",
            "ON",
            "T1",
            ".",
            "concert_id",
            "=",
            "T3",
            ".",
            "concert_id",
            "WHERE",
            "T3",
            ".",
            "year",
            "=",
            "2014"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "t2",
            ".",
            "name",
            "from",
            "singer_in_concert",
            "as",
            "t1",
            "join",
            "singer",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "singer_id",
            "=",
            "t2",
            ".",
            "singer_id",
            "join",
            "concert",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "concert_id",
            "=",
            "t3",
            ".",
            "concert_id",
            "where",
            "t3",
            ".",
            "year",
            "=",
            "value"
        ],
        "question": "List each unique singer name of those who performed in concerts in year 2014.",
        "question_toks": [
            "List",
            "each",
            "unique",
            "singer",
            "name",
            "of",
            "those",
            "who",
            "performed",
            "in",
            "concerts",
            "in",
            "year",
            "2014",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 38,
        "query": "SELECT DISTINCT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T2",
            ".",
            "name",
            "FROM",
            "singer_in_concert",
            "AS",
            "T1",
            "JOIN",
            "singer",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "singer_id",
            "=",
            "T2",
            ".",
            "singer_id",
            "JOIN",
            "concert",
            "AS",
            "T3",
            "ON",
            "T1",
            ".",
            "concert_id",
            "=",
            "T3",
            ".",
            "concert_id",
            "WHERE",
            "T3",
            ".",
            "year",
            "=",
            "2014"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "t2",
            ".",
            "name",
            "from",
            "singer_in_concert",
            "as",
            "t1",
            "join",
            "singer",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "singer_id",
            "=",
            "t2",
            ".",
            "singer_id",
            "join",
            "concert",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "concert_id",
            "=",
            "t3",
            ".",
            "concert_id",
            "where",
            "t3",
            ".",
            "year",
            "=",
            "value"
        ],
        "question": "List the distinct names of singers who performed in a concert in 2014.",
        "question_toks": [
            "List",
            "the",
            "distinct",
            "names",
            "of",
            "singers",
            "who",
            "performed",
            "in",
            "a",
            "concert",
            "in",
            "2014",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 39,
        "query": "SELECT name, country FROM singer WHERE INSTR(song_name, 'Hey') > 0",
        "query_toks": [
            "SELECT",
            "name,",
            "country",
            "FROM",
            "singer",
            "WHERE",
            "INSTR",
            "(",
            "song_name,",
            "'Hey",
            "'",
            ")",
            ">",
            "0"
        ],
        "query_toks_no_value": [
            "select",
            "name,",
            "country",
            "from",
            "singer",
            "where",
            "instr",
            "(",
            "song_name,",
            "value",
            ")",
            ">",
            "value"
        ],
        "question": "what are the names and nations of the singers who have a song having 'Hey' in its name?",
        "question_toks": [
            "what",
            "are",
            "the",
            "names",
            "and",
            "nations",
            "of",
            "the",
            "singers",
            "who",
            "have",
            "a",
            "song",
            "having",
            "'",
            "Hey",
            "'",
            "in",
            "its",
            "name",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 40,
        "query": "SELECT name, country FROM singer WHERE instr(song_name, 'Hey') > 0",
        "query_toks": [
            "SELECT",
            "name,",
            "country",
            "FROM",
            "singer",
            "WHERE",
            "instr",
            "(",
            "song_name,",
            "'Hey",
            "'",
            ")",
            ">",
            "0"
        ],
        "query_toks_no_value": [
            "select",
            "name,",
            "country",
            "from",
            "singer",
            "where",
            "instr",
            "(",
            "song_name,",
            "value",
            ")",
            ">",
            "value"
        ],
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "question_toks": [
            "What",
            "is",
            "the",
            "name",
            "and",
            "country",
            "of",
            "origin",
            "of",
            "every",
            "singer",
            "who",
            "has",
            "a",
            "song",
            "with",
            "the",
            "word",
            "'Hey",
            "'",
            "in",
            "its",
            "title",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 41,
        "query": "SELECT Name, Location FROM stadium where Stadium_ID in (SELECT Stadium_ID FROM concert WHERE year = 2014 INTERSECT SELECT Stadium_ID FROM concert WHERE year = 2015)",
        "query_toks": [
            "SELECT",
            "Name,",
            "Location",
            "FROM",
            "stadium",
            "where",
            "Stadium_ID",
            "in",
            "(",
            "SELECT",
            "Stadium_ID",
            "FROM",
            "concert",
            "WHERE",
            "year",
            "=",
            "2014",
            "INTERSECT",
            "SELECT",
            "Stadium_ID",
            "FROM",
            "concert",
            "WHERE",
            "year",
            "=",
            "2015",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name,",
            "location",
            "from",
            "stadium",
            "where",
            "stadium_id",
            "in",
            "(",
            "select",
            "stadium_id",
            "from",
            "concert",
            "where",
            "year",
            "=",
            "value",
            "intersect",
            "select",
            "stadium_id",
            "from",
            "concert",
            "where",
            "year",
            "=",
            "value",
            ")"
        ],
        "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "question_toks": [
            "Find",
            "the",
            "name",
            "and",
            "location",
            "of",
            "the",
            "stadiums",
            "which",
            "some",
            "concerts",
            "happened",
            "in",
            "the",
            "years",
            "of",
            "both",
            "2014",
            "and",
            "2015",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 42,
        "query": "SELECT Name, Location FROM stadium where Stadium_ID in (SELECT Stadium_ID FROM concert WHERE year = 2014 INTERSECT SELECT Stadium_ID FROM concert WHERE year = 2015)",
        "query_toks": [
            "SELECT",
            "Name,",
            "Location",
            "FROM",
            "stadium",
            "where",
            "Stadium_ID",
            "in",
            "(",
            "SELECT",
            "Stadium_ID",
            "FROM",
            "concert",
            "WHERE",
            "year",
            "=",
            "2014",
            "INTERSECT",
            "SELECT",
            "Stadium_ID",
            "FROM",
            "concert",
            "WHERE",
            "year",
            "=",
            "2015",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name,",
            "location",
            "from",
            "stadium",
            "where",
            "stadium_id",
            "in",
            "(",
            "select",
            "stadium_id",
            "from",
            "concert",
            "where",
            "year",
            "=",
            "value",
            "intersect",
            "select",
            "stadium_id",
            "from",
            "concert",
            "where",
            "year",
            "=",
            "value",
            ")"
        ],
        "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "and",
            "locations",
            "of",
            "the",
            "stadiums",
            "that",
            "had",
            "concerts",
            "that",
            "occurred",
            "in",
            "both",
            "2014",
            "and",
            "2015",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 43,
        "query": "SELECT COUNT(c.concert_id) FROM concert AS c JOIN stadium AS s ON c.stadium_id = s.stadium_id WHERE s.capacity = (SELECT MAX(capacity) FROM stadium)",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "c.concert_id",
            ")",
            "FROM",
            "concert",
            "AS",
            "c",
            "JOIN",
            "stadium",
            "AS",
            "s",
            "ON",
            "c.stadium_id",
            "=",
            "s.stadium_id",
            "WHERE",
            "s.capacity",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "capacity",
            ")",
            "FROM",
            "stadium",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "c.concert_id",
            ")",
            "from",
            "concert",
            "as",
            "c",
            "join",
            "stadium",
            "as",
            "s",
            "on",
            "c.stadium_id",
            "=",
            "s.stadium_id",
            "where",
            "s.capacity",
            "=",
            "(",
            "select",
            "max",
            "(",
            "capacity",
            ")",
            "from",
            "stadium",
            ")"
        ],
        "question": "Find the number of concerts happened in the stadium with the highest capacity .",
        "question_toks": [
            "Find",
            "the",
            "number",
            "of",
            "concerts",
            "happened",
            "in",
            "the",
            "stadium",
            "with",
            "the",
            "highest",
            "capacity",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "concert_singer",
        "id": 44,
        "query": "SELECT COUNT(concert.concert_id) FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE stadium.capacity = (SELECT MAX(capacity) FROM stadium)",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "concert.concert_id",
            ")",
            "FROM",
            "concert",
            "JOIN",
            "stadium",
            "ON",
            "concert.stadium_id",
            "=",
            "stadium.stadium_id",
            "WHERE",
            "stadium.capacity",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "capacity",
            ")",
            "FROM",
            "stadium",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "concert.concert_id",
            ")",
            "from",
            "concert",
            "join",
            "stadium",
            "on",
            "concert.stadium_id",
            "=",
            "stadium.stadium_id",
            "where",
            "stadium.capacity",
            "=",
            "(",
            "select",
            "max",
            "(",
            "capacity",
            ")",
            "from",
            "stadium",
            ")"
        ],
        "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "question_toks": [
            "What",
            "are",
            "the",
            "number",
            "of",
            "concerts",
            "that",
            "occurred",
            "in",
            "the",
            "stadium",
            "with",
            "the",
            "largest",
            "capacity",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 45,
        "query": "SELECT count(*) FROM pets WHERE weight > 10",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "pets",
            "WHERE",
            "weight",
            ">",
            "10"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "pets",
            "where",
            "weight",
            ">",
            "value"
        ],
        "question": "Find the number of pets whose weight is heavier than 10.",
        "question_toks": [
            "Find",
            "the",
            "number",
            "of",
            "pets",
            "whose",
            "weight",
            "is",
            "heavier",
            "than",
            "10",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 46,
        "query": "SELECT count(*) FROM pets WHERE weight > 10",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "pets",
            "WHERE",
            "weight",
            ">",
            "10"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "pets",
            "where",
            "weight",
            ">",
            "value"
        ],
        "question": "How many pets have a greater weight than 10?",
        "question_toks": [
            "How",
            "many",
            "pets",
            "have",
            "a",
            "greater",
            "weight",
            "than",
            "10",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 47,
        "query": "SELECT weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog') AND PetType = 'dog'",
        "query_toks": [
            "SELECT",
            "weight",
            "FROM",
            "Pets",
            "WHERE",
            "pet_age",
            "=",
            "(",
            "SELECT",
            "MIN",
            "(",
            "pet_age",
            ")",
            "FROM",
            "Pets",
            "WHERE",
            "PetType",
            "=",
            "'dog",
            "'",
            ")",
            "AND",
            "PetType",
            "=",
            "'dog",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "weight",
            "from",
            "pets",
            "where",
            "pet_age",
            "=",
            "(",
            "select",
            "min",
            "(",
            "pet_age",
            ")",
            "from",
            "pets",
            "where",
            "pettype",
            "=",
            "value",
            ")",
            "and",
            "pettype",
            "=",
            "value"
        ],
        "question": "Find the weight(s) of the youngest dog(s).",
        "question_toks": [
            "Find",
            "the",
            "weight",
            "(",
            "s",
            ")",
            "of",
            "the",
            "youngest",
            "dog",
            "(",
            "s",
            ")."
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 48,
        "query": "SELECT weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets WHERE PetType = 'dog') AND PetType = 'dog'",
        "query_toks": [
            "SELECT",
            "weight",
            "FROM",
            "pets",
            "WHERE",
            "pet_age",
            "=",
            "(",
            "SELECT",
            "MIN",
            "(",
            "pet_age",
            ")",
            "FROM",
            "pets",
            "WHERE",
            "PetType",
            "=",
            "'dog",
            "'",
            ")",
            "AND",
            "PetType",
            "=",
            "'dog",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "weight",
            "from",
            "pets",
            "where",
            "pet_age",
            "=",
            "(",
            "select",
            "min",
            "(",
            "pet_age",
            ")",
            "from",
            "pets",
            "where",
            "pettype",
            "=",
            "value",
            ")",
            "and",
            "pettype",
            "=",
            "value"
        ],
        "question": "Show the weight(s) of the youngest dog(s).",
        "question_toks": [
            "Show",
            "the",
            "weight",
            "(",
            "s",
            ")",
            "of",
            "the",
            "youngest",
            "dog",
            "(",
            "s",
            ")."
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 49,
        "query": "SELECT max(weight) , petType FROM pets GROUP BY petType",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "weight",
            ")",
            ",",
            "petType",
            "FROM",
            "pets",
            "GROUP",
            "BY",
            "petType"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "weight",
            ")",
            ",",
            "pettype",
            "from",
            "pets",
            "group",
            "by",
            "pettype"
        ],
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "question_toks": [
            "Find",
            "the",
            "maximum",
            "weight",
            "for",
            "each",
            "type",
            "of",
            "pet",
            ".",
            "List",
            "the",
            "maximum",
            "weight",
            "and",
            "pet",
            "type",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 50,
        "query": "SELECT max(weight) , petType FROM pets GROUP BY petType",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "weight",
            ")",
            ",",
            "petType",
            "FROM",
            "pets",
            "GROUP",
            "BY",
            "petType"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "weight",
            ")",
            ",",
            "pettype",
            "from",
            "pets",
            "group",
            "by",
            "pettype"
        ],
        "question": "List the maximum weight and type for each type of pet.",
        "question_toks": [
            "List",
            "the",
            "maximum",
            "weight",
            "and",
            "type",
            "for",
            "each",
            "type",
            "of",
            "pet",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 51,
        "query": "SELECT COUNT(DISTINCT hp.petid) FROM has_pet hp INNER JOIN student s ON hp.stuid = s.stuid WHERE s.age > 20",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "DISTINCT",
            "hp.petid",
            ")",
            "FROM",
            "has_pet",
            "hp",
            "INNER",
            "JOIN",
            "student",
            "s",
            "ON",
            "hp.stuid",
            "=",
            "s.stuid",
            "WHERE",
            "s.age",
            ">",
            "20"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "hp.petid",
            ")",
            "from",
            "has_pet",
            "hp",
            "inner",
            "join",
            "student",
            "s",
            "on",
            "hp.stuid",
            "=",
            "s.stuid",
            "where",
            "s.age",
            ">",
            "value"
        ],
        "question": "Find number of pets owned by students who are older than 20.",
        "question_toks": [
            "Find",
            "number",
            "of",
            "pets",
            "owned",
            "by",
            "students",
            "who",
            "are",
            "older",
            "than",
            "20",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 52,
        "query": "SELECT COUNT(*) FROM pets WHERE petid IN (SELECT petid FROM has_pet WHERE stuid IN (SELECT stuid FROM student WHERE age > 20));",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "pets",
            "WHERE",
            "petid",
            "IN",
            "(",
            "SELECT",
            "petid",
            "FROM",
            "has_pet",
            "WHERE",
            "stuid",
            "IN",
            "(",
            "SELECT",
            "stuid",
            "FROM",
            "student",
            "WHERE",
            "age",
            ">",
            "20",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "pets",
            "where",
            "petid",
            "in",
            "(",
            "select",
            "petid",
            "from",
            "has_pet",
            "where",
            "stuid",
            "in",
            "(",
            "select",
            "stuid",
            "from",
            "student",
            "where",
            "age",
            ">",
            "value",
            ")",
            ")"
        ],
        "question": "How many pets are owned by students that have an age greater than 20?",
        "question_toks": [
            "How",
            "many",
            "pets",
            "are",
            "owned",
            "by",
            "students",
            "that",
            "have",
            "an",
            "age",
            "greater",
            "than",
            "20",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 53,
        "query": "SELECT COUNT(DISTINCT pets.petid) FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND student.sex = 'F' AND pets.pettype = 'dog'",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "DISTINCT",
            "pets.petid",
            ")",
            "FROM",
            "student,",
            "has_pet,",
            "pets",
            "WHERE",
            "student.stuid",
            "=",
            "has_pet.stuid",
            "AND",
            "has_pet.petid",
            "=",
            "pets.petid",
            "AND",
            "student.sex",
            "=",
            "'F",
            "'",
            "AND",
            "pets.pettype",
            "=",
            "'dog",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "pets.petid",
            ")",
            "from",
            "student,",
            "has_pet,",
            "pets",
            "where",
            "student.stuid",
            "=",
            "has_pet.stuid",
            "and",
            "has_pet.petid",
            "=",
            "pets.petid",
            "and",
            "student.sex",
            "=",
            "value",
            "and",
            "pets.pettype",
            "=",
            "value"
        ],
        "question": "Find the number of dog pets that are raised by female students (with sex F).",
        "question_toks": [
            "Find",
            "the",
            "number",
            "of",
            "dog",
            "pets",
            "that",
            "are",
            "raised",
            "by",
            "female",
            "students",
            "(",
            "with",
            "sex",
            "F",
            ")",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 54,
        "query": "SELECT count(DISTINCT T3.PetID) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "T3",
            ".",
            "PetID",
            ")",
            "FROM",
            "student",
            "AS",
            "T1",
            "JOIN",
            "has_pet",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "stuid",
            "=",
            "T2",
            ".",
            "stuid",
            "JOIN",
            "pets",
            "AS",
            "T3",
            "ON",
            "T2",
            ".",
            "petid",
            "=",
            "T3",
            ".",
            "petid",
            "WHERE",
            "T1",
            ".",
            "sex",
            "=",
            "'F",
            "'",
            "AND",
            "T3",
            ".",
            "pettype",
            "=",
            "'dog",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "t3",
            ".",
            "petid",
            ")",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "petid",
            "=",
            "t3",
            ".",
            "petid",
            "where",
            "t1",
            ".",
            "sex",
            "=",
            "value",
            "and",
            "t3",
            ".",
            "pettype",
            "=",
            "value"
        ],
        "question": "How many dog pets are raised by female students?",
        "question_toks": [
            "How",
            "many",
            "dog",
            "pets",
            "are",
            "raised",
            "by",
            "female",
            "students",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 55,
        "query": "SELECT count(DISTINCT pettype) FROM pets",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "pettype",
            ")",
            "FROM",
            "pets"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "pettype",
            ")",
            "from",
            "pets"
        ],
        "question": "Find the number of distinct type of pets.",
        "question_toks": [
            "Find",
            "the",
            "number",
            "of",
            "distinct",
            "type",
            "of",
            "pets",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 56,
        "query": "SELECT count(DISTINCT pettype) FROM pets",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "pettype",
            ")",
            "FROM",
            "pets"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "pettype",
            ")",
            "from",
            "pets"
        ],
        "question": "How many different types of pet are there?",
        "question_toks": [
            "How",
            "many",
            "different",
            "types",
            "of",
            "pet",
            "are",
            "there",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 57,
        "query": "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat' OR pettype = 'dog'))",
        "query_toks": [
            "SELECT",
            "fname",
            "FROM",
            "student",
            "WHERE",
            "stuid",
            "IN",
            "(",
            "SELECT",
            "stuid",
            "FROM",
            "has_pet",
            "WHERE",
            "petid",
            "IN",
            "(",
            "SELECT",
            "petid",
            "FROM",
            "pets",
            "WHERE",
            "pettype",
            "=",
            "'cat",
            "'",
            "OR",
            "pettype",
            "=",
            "'dog",
            "'",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "fname",
            "from",
            "student",
            "where",
            "stuid",
            "in",
            "(",
            "select",
            "stuid",
            "from",
            "has_pet",
            "where",
            "petid",
            "in",
            "(",
            "select",
            "petid",
            "from",
            "pets",
            "where",
            "pettype",
            "=",
            "value",
            "or",
            "pettype",
            "=",
            "value",
            ")",
            ")"
        ],
        "question": "Find the first name of students who have cat or dog pet.",
        "question_toks": [
            "Find",
            "the",
            "first",
            "name",
            "of",
            "students",
            "who",
            "have",
            "cat",
            "or",
            "dog",
            "pet",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 58,
        "query": "SELECT T1.Fname FROM student AS T1 WHERE T1.StuID IN (SELECT T2.StuID FROM has_pet AS T2 JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog')",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "Fname",
            "FROM",
            "student",
            "AS",
            "T1",
            "WHERE",
            "T1",
            ".",
            "StuID",
            "IN",
            "(",
            "SELECT",
            "T2",
            ".",
            "StuID",
            "FROM",
            "has_pet",
            "AS",
            "T2",
            "JOIN",
            "pets",
            "AS",
            "T3",
            "ON",
            "T3",
            ".",
            "petid",
            "=",
            "T2",
            ".",
            "petid",
            "WHERE",
            "T3",
            ".",
            "pettype",
            "=",
            "'cat",
            "'",
            "OR",
            "T3",
            ".",
            "pettype",
            "=",
            "'dog",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "fname",
            "from",
            "student",
            "as",
            "t1",
            "where",
            "t1",
            ".",
            "stuid",
            "in",
            "(",
            "select",
            "t2",
            ".",
            "stuid",
            "from",
            "has_pet",
            "as",
            "t2",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "value",
            "or",
            "t3",
            ".",
            "pettype",
            "=",
            "value",
            ")"
        ],
        "question": "What are the first names of every student who has a cat or dog as a pet?",
        "question_toks": [
            "What",
            "are",
            "the",
            "first",
            "names",
            "of",
            "every",
            "student",
            "who",
            "has",
            "a",
            "cat",
            "or",
            "dog",
            "as",
            "a",
            "pet",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 59,
        "query": "SELECT s.fname FROM student s WHERE s.stuid IN (SELECT hp.stuid FROM has_pet hp JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'cat') AND s.stuid IN (SELECT hp.stuid FROM has_pet hp JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'dog')",
        "query_toks": [
            "SELECT",
            "s.fname",
            "FROM",
            "student",
            "s",
            "WHERE",
            "s.stuid",
            "IN",
            "(",
            "SELECT",
            "hp.stuid",
            "FROM",
            "has_pet",
            "hp",
            "JOIN",
            "pets",
            "p",
            "ON",
            "hp.petid",
            "=",
            "p.petid",
            "WHERE",
            "p.pettype",
            "=",
            "'cat",
            "'",
            ")",
            "AND",
            "s.stuid",
            "IN",
            "(",
            "SELECT",
            "hp.stuid",
            "FROM",
            "has_pet",
            "hp",
            "JOIN",
            "pets",
            "p",
            "ON",
            "hp.petid",
            "=",
            "p.petid",
            "WHERE",
            "p.pettype",
            "=",
            "'dog",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "s.fname",
            "from",
            "student",
            "s",
            "where",
            "s.stuid",
            "in",
            "(",
            "select",
            "hp.stuid",
            "from",
            "has_pet",
            "hp",
            "join",
            "pets",
            "p",
            "on",
            "hp.petid",
            "=",
            "p.petid",
            "where",
            "p.pettype",
            "=",
            "value",
            ")",
            "and",
            "s.stuid",
            "in",
            "(",
            "select",
            "hp.stuid",
            "from",
            "has_pet",
            "hp",
            "join",
            "pets",
            "p",
            "on",
            "hp.petid",
            "=",
            "p.petid",
            "where",
            "p.pettype",
            "=",
            "value",
            ")"
        ],
        "question": "Find the first name of students who have both cat and dog pets .",
        "question_toks": [
            "Find",
            "the",
            "first",
            "name",
            "of",
            "students",
            "who",
            "have",
            "both",
            "cat",
            "and",
            "dog",
            "pets",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 60,
        "query": "SELECT s.fname FROM student s WHERE StuID in (SELECT hp.StuID FROM has_pet hp JOIN pets p ON hp.petid = p.petid WHERE p.pettype IN ('cat', 'dog') GROUP BY hp.StuID HAVING COUNT(DISTINCT p.pettype) = 2)",
        "query_toks": [
            "SELECT",
            "s.fname",
            "FROM",
            "student",
            "s",
            "WHERE",
            "StuID",
            "in",
            "(",
            "SELECT",
            "hp.StuID",
            "FROM",
            "has_pet",
            "hp",
            "JOIN",
            "pets",
            "p",
            "ON",
            "hp.petid",
            "=",
            "p.petid",
            "WHERE",
            "p.pettype",
            "IN",
            "(",
            "'cat',",
            "'dog",
            "'",
            ")",
            "GROUP",
            "BY",
            "hp.StuID",
            "HAVING",
            "COUNT",
            "(",
            "DISTINCT",
            "p.pettype",
            ")",
            "=",
            "2",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "s.fname",
            "from",
            "student",
            "s",
            "where",
            "stuid",
            "in",
            "(",
            "select",
            "hp.stuid",
            "from",
            "has_pet",
            "hp",
            "join",
            "pets",
            "p",
            "on",
            "hp.petid",
            "=",
            "p.petid",
            "where",
            "p.pettype",
            "in",
            "(",
            "value",
            ")",
            "group",
            "by",
            "hp.stuid",
            "having",
            "count",
            "(",
            "distinct",
            "p.pettype",
            ")",
            "=",
            "value",
            ")"
        ],
        "question": "What are the students' first names who have both cats and dogs as pets?",
        "question_toks": [
            "What",
            "are",
            "the",
            "students",
            "'",
            "first",
            "names",
            "who",
            "have",
            "both",
            "cats",
            "and",
            "dogs",
            "as",
            "pets",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 61,
        "query": "SELECT major , age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
        "query_toks": [
            "SELECT",
            "major",
            ",",
            "age",
            "FROM",
            "student",
            "WHERE",
            "stuid",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "T1",
            ".",
            "stuid",
            "FROM",
            "student",
            "AS",
            "T1",
            "JOIN",
            "has_pet",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "stuid",
            "=",
            "T2",
            ".",
            "stuid",
            "JOIN",
            "pets",
            "AS",
            "T3",
            "ON",
            "T3",
            ".",
            "petid",
            "=",
            "T2",
            ".",
            "petid",
            "WHERE",
            "T3",
            ".",
            "pettype",
            "=",
            "'cat",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "major",
            ",",
            "age",
            "from",
            "student",
            "where",
            "stuid",
            "not",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "stuid",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "value",
            ")"
        ],
        "question": "Find the major and age of students who do not have a cat pet.",
        "question_toks": [
            "Find",
            "the",
            "major",
            "and",
            "age",
            "of",
            "students",
            "who",
            "do",
            "not",
            "have",
            "a",
            "cat",
            "pet",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 62,
        "query": "SELECT major , age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
        "query_toks": [
            "SELECT",
            "major",
            ",",
            "age",
            "FROM",
            "student",
            "WHERE",
            "stuid",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "T1",
            ".",
            "stuid",
            "FROM",
            "student",
            "AS",
            "T1",
            "JOIN",
            "has_pet",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "stuid",
            "=",
            "T2",
            ".",
            "stuid",
            "JOIN",
            "pets",
            "AS",
            "T3",
            "ON",
            "T3",
            ".",
            "petid",
            "=",
            "T2",
            ".",
            "petid",
            "WHERE",
            "T3",
            ".",
            "pettype",
            "=",
            "'cat",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "major",
            ",",
            "age",
            "from",
            "student",
            "where",
            "stuid",
            "not",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "stuid",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "value",
            ")"
        ],
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "question_toks": [
            "What",
            "major",
            "is",
            "every",
            "student",
            "who",
            "does",
            "not",
            "own",
            "a",
            "cat",
            "as",
            "a",
            "pet",
            ",",
            "and",
            "also",
            "how",
            "old",
            "are",
            "they",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 63,
        "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
        "query_toks": [
            "SELECT",
            "stuid",
            "FROM",
            "student",
            "EXCEPT",
            "SELECT",
            "T1",
            ".",
            "stuid",
            "FROM",
            "student",
            "AS",
            "T1",
            "JOIN",
            "has_pet",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "stuid",
            "=",
            "T2",
            ".",
            "stuid",
            "JOIN",
            "pets",
            "AS",
            "T3",
            "ON",
            "T3",
            ".",
            "petid",
            "=",
            "T2",
            ".",
            "petid",
            "WHERE",
            "T3",
            ".",
            "pettype",
            "=",
            "'cat",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "stuid",
            "from",
            "student",
            "except",
            "select",
            "t1",
            ".",
            "stuid",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "value"
        ],
        "question": "Find the IDs of students who do not own any cats as pets.",
        "question_toks": [
            "Find",
            "the",
            "IDs",
            "of",
            "students",
            "who",
            "do",
            "not",
            "own",
            "any",
            "cats",
            "as",
            "pets",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 64,
        "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
        "query_toks": [
            "SELECT",
            "stuid",
            "FROM",
            "student",
            "EXCEPT",
            "SELECT",
            "T1",
            ".",
            "stuid",
            "FROM",
            "student",
            "AS",
            "T1",
            "JOIN",
            "has_pet",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "stuid",
            "=",
            "T2",
            ".",
            "stuid",
            "JOIN",
            "pets",
            "AS",
            "T3",
            "ON",
            "T3",
            ".",
            "petid",
            "=",
            "T2",
            ".",
            "petid",
            "WHERE",
            "T3",
            ".",
            "pettype",
            "=",
            "'cat",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "stuid",
            "from",
            "student",
            "except",
            "select",
            "t1",
            ".",
            "stuid",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "value"
        ],
        "question": "What are the ids of the students who do not own cats as pets?",
        "question_toks": [
            "What",
            "are",
            "the",
            "ids",
            "of",
            "the",
            "students",
            "who",
            "do",
            "not",
            "own",
            "cats",
            "as",
            "pets",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 65,
        "query": "SELECT s.fname, s.age FROM student s WHERE EXISTS (SELECT 1 FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' AND has_pet.stuid = s.stuid) AND NOT EXISTS (SELECT 1 FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND has_pet.stuid = s.stuid)",
        "query_toks": [
            "SELECT",
            "s.fname,",
            "s.age",
            "FROM",
            "student",
            "s",
            "WHERE",
            "EXISTS",
            "(",
            "SELECT",
            "1",
            "FROM",
            "has_pet",
            "JOIN",
            "pets",
            "ON",
            "has_pet.petid",
            "=",
            "pets.petid",
            "WHERE",
            "pets.pettype",
            "=",
            "'dog",
            "'",
            "AND",
            "has_pet.stuid",
            "=",
            "s.stuid",
            ")",
            "AND",
            "NOT",
            "EXISTS",
            "(",
            "SELECT",
            "1",
            "FROM",
            "has_pet",
            "JOIN",
            "pets",
            "ON",
            "has_pet.petid",
            "=",
            "pets.petid",
            "WHERE",
            "pets.pettype",
            "=",
            "'cat",
            "'",
            "AND",
            "has_pet.stuid",
            "=",
            "s.stuid",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "s.fname,",
            "s.age",
            "from",
            "student",
            "s",
            "where",
            "exists",
            "(",
            "select",
            "value",
            "from",
            "has_pet",
            "join",
            "pets",
            "on",
            "has_pet.petid",
            "=",
            "pets.petid",
            "where",
            "pets.pettype",
            "=",
            "value",
            "and",
            "has_pet.stuid",
            "=",
            "s.stuid",
            ")",
            "and",
            "not",
            "exists",
            "(",
            "select",
            "value",
            "from",
            "has_pet",
            "join",
            "pets",
            "on",
            "has_pet.petid",
            "=",
            "pets.petid",
            "where",
            "pets.pettype",
            "=",
            "value",
            "and",
            "has_pet.stuid",
            "=",
            "s.stuid",
            ")"
        ],
        "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "question_toks": [
            "Find",
            "the",
            "first",
            "name",
            "and",
            "age",
            "of",
            "students",
            "who",
            "have",
            "a",
            "dog",
            "but",
            "do",
            "not",
            "have",
            "a",
            "cat",
            "as",
            "a",
            "pet",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 66,
        "query": "SELECT s1.fname FROM student s1 WHERE EXISTS (SELECT * FROM has_pet hp1 JOIN pets p1 ON hp1.petid = p1.petid WHERE p1.pettype = 'dog' AND hp1.stuid = s1.stuid) AND NOT EXISTS (SELECT * FROM has_pet hp2 JOIN pets p2 ON hp2.petid = p2.petid WHERE p2.pettype = 'cat' AND hp2.stuid = s1.stuid)",
        "query_toks": [
            "SELECT",
            "s1.fname",
            "FROM",
            "student",
            "s1",
            "WHERE",
            "EXISTS",
            "(",
            "SELECT",
            "*",
            "FROM",
            "has_pet",
            "hp1",
            "JOIN",
            "pets",
            "p1",
            "ON",
            "hp1.petid",
            "=",
            "p1.petid",
            "WHERE",
            "p1.pettype",
            "=",
            "'dog",
            "'",
            "AND",
            "hp1.stuid",
            "=",
            "s1.stuid",
            ")",
            "AND",
            "NOT",
            "EXISTS",
            "(",
            "SELECT",
            "*",
            "FROM",
            "has_pet",
            "hp2",
            "JOIN",
            "pets",
            "p2",
            "ON",
            "hp2.petid",
            "=",
            "p2.petid",
            "WHERE",
            "p2.pettype",
            "=",
            "'cat",
            "'",
            "AND",
            "hp2.stuid",
            "=",
            "s1.stuid",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "s1.fname",
            "from",
            "student",
            "s1",
            "where",
            "exists",
            "(",
            "select",
            "*",
            "from",
            "has_pet",
            "hp1",
            "join",
            "pets",
            "p1",
            "on",
            "hp1.petid",
            "=",
            "p1.petid",
            "where",
            "p1.pettype",
            "=",
            "value",
            "and",
            "hp1.stuid",
            "=",
            "s1.stuid",
            ")",
            "and",
            "not",
            "exists",
            "(",
            "select",
            "*",
            "from",
            "has_pet",
            "hp2",
            "join",
            "pets",
            "p2",
            "on",
            "hp2.petid",
            "=",
            "p2.petid",
            "where",
            "p2.pettype",
            "=",
            "value",
            "and",
            "hp2.stuid",
            "=",
            "s1.stuid",
            ")"
        ],
        "question": "What is the first name of every student who has a dog but does not have a cat?",
        "question_toks": [
            "What",
            "is",
            "the",
            "first",
            "name",
            "of",
            "every",
            "student",
            "who",
            "has",
            "a",
            "dog",
            "but",
            "does",
            "not",
            "have",
            "a",
            "cat",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 67,
        "query": "SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)",
        "query_toks": [
            "SELECT",
            "PetType,",
            "weight",
            "FROM",
            "Pets",
            "WHERE",
            "pet_age",
            "=",
            "(",
            "SELECT",
            "MIN",
            "(",
            "pet_age",
            ")",
            "FROM",
            "Pets",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "pettype,",
            "weight",
            "from",
            "pets",
            "where",
            "pet_age",
            "=",
            "(",
            "select",
            "min",
            "(",
            "pet_age",
            ")",
            "from",
            "pets",
            ")"
        ],
        "question": "Show the type(s) and weight(s) of the youngest pet(s).",
        "question_toks": [
            "Show",
            "the",
            "type",
            "(",
            "s",
            ")",
            "and",
            "weight",
            "(",
            "s",
            ")",
            "of",
            "the",
            "youngest",
            "pet",
            "(",
            "s",
            ")."
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 68,
        "query": "SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)",
        "query_toks": [
            "SELECT",
            "PetType,",
            "weight",
            "FROM",
            "Pets",
            "WHERE",
            "pet_age",
            "=",
            "(",
            "SELECT",
            "MIN",
            "(",
            "pet_age",
            ")",
            "FROM",
            "Pets",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "pettype,",
            "weight",
            "from",
            "pets",
            "where",
            "pet_age",
            "=",
            "(",
            "select",
            "min",
            "(",
            "pet_age",
            ")",
            "from",
            "pets",
            ")"
        ],
        "question": "Show the type(s) of the youngest pet(s) and their weight(s).",
        "question_toks": [
            "Show",
            "the",
            "type",
            "(",
            "s",
            ")",
            "of",
            "the",
            "youngest",
            "pet",
            "(",
            "s",
            ")",
            "and",
            "their",
            "weight",
            "(",
            "s",
            ")."
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 69,
        "query": "SELECT petid , weight FROM pets WHERE pet_age > 1",
        "query_toks": [
            "SELECT",
            "petid",
            ",",
            "weight",
            "FROM",
            "pets",
            "WHERE",
            "pet_age",
            ">",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "petid",
            ",",
            "weight",
            "from",
            "pets",
            "where",
            "pet_age",
            ">",
            "value"
        ],
        "question": "Find the id and weight of all pets whose age is older than 1.",
        "question_toks": [
            "Find",
            "the",
            "id",
            "and",
            "weight",
            "of",
            "all",
            "pets",
            "whose",
            "age",
            "is",
            "older",
            "than",
            "1",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 70,
        "query": "SELECT petid , weight FROM pets WHERE pet_age > 1",
        "query_toks": [
            "SELECT",
            "petid",
            ",",
            "weight",
            "FROM",
            "pets",
            "WHERE",
            "pet_age",
            ">",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "petid",
            ",",
            "weight",
            "from",
            "pets",
            "where",
            "pet_age",
            ">",
            "value"
        ],
        "question": "What is the id and weight of every pet who is older than 1?",
        "question_toks": [
            "What",
            "is",
            "the",
            "id",
            "and",
            "weight",
            "of",
            "every",
            "pet",
            "who",
            "is",
            "older",
            "than",
            "1",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 71,
        "query": "SELECT avg(pet_age) , max(pet_age) , pettype FROM pets GROUP BY pettype",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "pet_age",
            ")",
            ",",
            "max",
            "(",
            "pet_age",
            ")",
            ",",
            "pettype",
            "FROM",
            "pets",
            "GROUP",
            "BY",
            "pettype"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "pet_age",
            ")",
            ",",
            "max",
            "(",
            "pet_age",
            ")",
            ",",
            "pettype",
            "from",
            "pets",
            "group",
            "by",
            "pettype"
        ],
        "question": "Find the average and maximum age for each type of pet.",
        "question_toks": [
            "Find",
            "the",
            "average",
            "and",
            "maximum",
            "age",
            "for",
            "each",
            "type",
            "of",
            "pet",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 72,
        "query": "SELECT avg(pet_age) , max(pet_age) , pettype FROM pets GROUP BY pettype",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "pet_age",
            ")",
            ",",
            "max",
            "(",
            "pet_age",
            ")",
            ",",
            "pettype",
            "FROM",
            "pets",
            "GROUP",
            "BY",
            "pettype"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "pet_age",
            ")",
            ",",
            "max",
            "(",
            "pet_age",
            ")",
            ",",
            "pettype",
            "from",
            "pets",
            "group",
            "by",
            "pettype"
        ],
        "question": "What is the average and maximum age for each pet type?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "and",
            "maximum",
            "age",
            "for",
            "each",
            "pet",
            "type",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 73,
        "query": "SELECT avg(weight) , pettype FROM pets GROUP BY pettype",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "weight",
            ")",
            ",",
            "pettype",
            "FROM",
            "pets",
            "GROUP",
            "BY",
            "pettype"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "weight",
            ")",
            ",",
            "pettype",
            "from",
            "pets",
            "group",
            "by",
            "pettype"
        ],
        "question": "Find the average weight for each pet type.",
        "question_toks": [
            "Find",
            "the",
            "average",
            "weight",
            "for",
            "each",
            "pet",
            "type",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 74,
        "query": "SELECT avg(weight) , pettype FROM pets GROUP BY pettype",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "weight",
            ")",
            ",",
            "pettype",
            "FROM",
            "pets",
            "GROUP",
            "BY",
            "pettype"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "weight",
            ")",
            ",",
            "pettype",
            "from",
            "pets",
            "group",
            "by",
            "pettype"
        ],
        "question": "What is the average weight for each type of pet?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "weight",
            "for",
            "each",
            "type",
            "of",
            "pet",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 75,
        "query": "SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet);",
        "query_toks": [
            "SELECT",
            "fname,",
            "age",
            "FROM",
            "student",
            "WHERE",
            "stuid",
            "IN",
            "(",
            "SELECT",
            "stuid",
            "FROM",
            "has_pet",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "fname,",
            "age",
            "from",
            "student",
            "where",
            "stuid",
            "in",
            "(",
            "select",
            "stuid",
            "from",
            "has_pet",
            ")"
        ],
        "question": "Find the first name and age of students who have a pet.",
        "question_toks": [
            "Find",
            "the",
            "first",
            "name",
            "and",
            "age",
            "of",
            "students",
            "who",
            "have",
            "a",
            "pet",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 76,
        "query": "SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1",
            ".",
            "fname",
            ",",
            "T1",
            ".",
            "age",
            "FROM",
            "student",
            "AS",
            "T1",
            "JOIN",
            "has_pet",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "stuid",
            "=",
            "T2",
            ".",
            "stuid"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "t1",
            ".",
            "fname",
            ",",
            "t1",
            ".",
            "age",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid"
        ],
        "question": "What are the different first names and ages of the students who do have pets?",
        "question_toks": [
            "What",
            "are",
            "the",
            "different",
            "first",
            "names",
            "and",
            "ages",
            "of",
            "the",
            "students",
            "who",
            "do",
            "have",
            "pets",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 77,
        "query": "SELECT petid FROM pets WHERE petid IN (SELECT petid FROM has_pet JOIN student ON has_pet.stuid = student.stuid WHERE lname = 'Smith')",
        "query_toks": [
            "SELECT",
            "petid",
            "FROM",
            "pets",
            "WHERE",
            "petid",
            "IN",
            "(",
            "SELECT",
            "petid",
            "FROM",
            "has_pet",
            "JOIN",
            "student",
            "ON",
            "has_pet.stuid",
            "=",
            "student.stuid",
            "WHERE",
            "lname",
            "=",
            "'Smith",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "petid",
            "from",
            "pets",
            "where",
            "petid",
            "in",
            "(",
            "select",
            "petid",
            "from",
            "has_pet",
            "join",
            "student",
            "on",
            "has_pet.stuid",
            "=",
            "student.stuid",
            "where",
            "lname",
            "=",
            "value",
            ")"
        ],
        "question": "Find the ids of the pets owned by students whose last name is \u2018Smith\u2019.",
        "question_toks": [
            "Find",
            "the",
            "ids",
            "of",
            "the",
            "pets",
            "owned",
            "by",
            "students",
            "whose",
            "last",
            "name",
            "is",
            "\u2018",
            "Smith",
            "\u2019."
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 78,
        "query": "SELECT petid FROM pets WHERE petid IN (SELECT petid FROM has_pet WHERE stuid IN (SELECT stuid FROM student WHERE lname = 'Smith'))",
        "query_toks": [
            "SELECT",
            "petid",
            "FROM",
            "pets",
            "WHERE",
            "petid",
            "IN",
            "(",
            "SELECT",
            "petid",
            "FROM",
            "has_pet",
            "WHERE",
            "stuid",
            "IN",
            "(",
            "SELECT",
            "stuid",
            "FROM",
            "student",
            "WHERE",
            "lname",
            "=",
            "'Smith",
            "'",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "petid",
            "from",
            "pets",
            "where",
            "petid",
            "in",
            "(",
            "select",
            "petid",
            "from",
            "has_pet",
            "where",
            "stuid",
            "in",
            "(",
            "select",
            "stuid",
            "from",
            "student",
            "where",
            "lname",
            "=",
            "value",
            ")",
            ")"
        ],
        "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "question_toks": [
            "What",
            "is",
            "the",
            "id",
            "of",
            "the",
            "pet",
            "owned",
            "by",
            "the",
            "student",
            "whose",
            "last",
            "name",
            "is",
            "'Smith",
            "'",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 79,
        "query": "SELECT count(*) , T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "T1",
            ".",
            "stuid",
            "FROM",
            "student",
            "AS",
            "T1",
            "JOIN",
            "has_pet",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "stuid",
            "=",
            "T2",
            ".",
            "stuid",
            "GROUP",
            "BY",
            "T1",
            ".",
            "stuid"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "t1",
            ".",
            "stuid",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "group",
            "by",
            "t1",
            ".",
            "stuid"
        ],
        "question": "Find the number of pets for each student who has any pet and student id.",
        "question_toks": [
            "Find",
            "the",
            "number",
            "of",
            "pets",
            "for",
            "each",
            "student",
            "who",
            "has",
            "any",
            "pet",
            "and",
            "student",
            "id",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 80,
        "query": "select count(*) , t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "t1",
            ".",
            "stuid",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "group",
            "by",
            "t1",
            ".",
            "stuid"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "t1",
            ".",
            "stuid",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "group",
            "by",
            "t1",
            ".",
            "stuid"
        ],
        "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
        "question_toks": [
            "For",
            "students",
            "who",
            "have",
            "pets",
            ",",
            "how",
            "many",
            "pets",
            "does",
            "each",
            "student",
            "have",
            "?",
            "list",
            "their",
            "ids",
            "instead",
            "of",
            "names",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 81,
        "query": "SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count(*) > 1",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "fname",
            ",",
            "T1",
            ".",
            "sex",
            "FROM",
            "student",
            "AS",
            "T1",
            "JOIN",
            "has_pet",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "stuid",
            "=",
            "T2",
            ".",
            "stuid",
            "GROUP",
            "BY",
            "T1",
            ".",
            "stuid",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "fname",
            ",",
            "t1",
            ".",
            "sex",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "group",
            "by",
            "t1",
            ".",
            "stuid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Find the first name and gender of all students who have more than one pet.",
        "question_toks": [
            "Find",
            "the",
            "first",
            "name",
            "and",
            "gender",
            "of",
            "all",
            "students",
            "who",
            "have",
            "more",
            "than",
            "one",
            "pet",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 82,
        "query": "SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count(*) > 1",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "fname",
            ",",
            "T1",
            ".",
            "sex",
            "FROM",
            "student",
            "AS",
            "T1",
            "JOIN",
            "has_pet",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "stuid",
            "=",
            "T2",
            ".",
            "stuid",
            "GROUP",
            "BY",
            "T1",
            ".",
            "stuid",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "fname",
            ",",
            "t1",
            ".",
            "sex",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "group",
            "by",
            "t1",
            ".",
            "stuid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "What is the first name and gender of the all the students who have more than one pet?",
        "question_toks": [
            "What",
            "is",
            "the",
            "first",
            "name",
            "and",
            "gender",
            "of",
            "the",
            "all",
            "the",
            "students",
            "who",
            "have",
            "more",
            "than",
            "one",
            "pet",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 83,
        "query": "SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat' AND pet_age = 3))",
        "query_toks": [
            "SELECT",
            "lname",
            "FROM",
            "student",
            "WHERE",
            "stuid",
            "IN",
            "(",
            "SELECT",
            "stuid",
            "FROM",
            "has_pet",
            "WHERE",
            "petid",
            "IN",
            "(",
            "SELECT",
            "petid",
            "FROM",
            "pets",
            "WHERE",
            "pettype",
            "=",
            "'cat",
            "'",
            "AND",
            "pet_age",
            "=",
            "3",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "lname",
            "from",
            "student",
            "where",
            "stuid",
            "in",
            "(",
            "select",
            "stuid",
            "from",
            "has_pet",
            "where",
            "petid",
            "in",
            "(",
            "select",
            "petid",
            "from",
            "pets",
            "where",
            "pettype",
            "=",
            "value",
            "and",
            "pet_age",
            "=",
            "value",
            ")",
            ")"
        ],
        "question": "Find the last name of the student who has a cat that is age 3.",
        "question_toks": [
            "Find",
            "the",
            "last",
            "name",
            "of",
            "the",
            "student",
            "who",
            "has",
            "a",
            "cat",
            "that",
            "is",
            "age",
            "3",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 84,
        "query": "SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat' AND pet_age = 3))",
        "query_toks": [
            "SELECT",
            "lname",
            "FROM",
            "student",
            "WHERE",
            "stuid",
            "IN",
            "(",
            "SELECT",
            "stuid",
            "FROM",
            "has_pet",
            "WHERE",
            "petid",
            "IN",
            "(",
            "SELECT",
            "petid",
            "FROM",
            "pets",
            "WHERE",
            "pettype",
            "=",
            "'cat",
            "'",
            "AND",
            "pet_age",
            "=",
            "3",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "lname",
            "from",
            "student",
            "where",
            "stuid",
            "in",
            "(",
            "select",
            "stuid",
            "from",
            "has_pet",
            "where",
            "petid",
            "in",
            "(",
            "select",
            "petid",
            "from",
            "pets",
            "where",
            "pettype",
            "=",
            "value",
            "and",
            "pet_age",
            "=",
            "value",
            ")",
            ")"
        ],
        "question": "What is the last name of the student who has a cat that is 3 years old?",
        "question_toks": [
            "What",
            "is",
            "the",
            "last",
            "name",
            "of",
            "the",
            "student",
            "who",
            "has",
            "a",
            "cat",
            "that",
            "is",
            "3",
            "years",
            "old",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 85,
        "query": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "query_toks": [
            "select",
            "avg",
            "(",
            "age",
            ")",
            "from",
            "student",
            "where",
            "stuid",
            "not",
            "in",
            "(",
            "select",
            "stuid",
            "from",
            "has_pet",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "age",
            ")",
            "from",
            "student",
            "where",
            "stuid",
            "not",
            "in",
            "(",
            "select",
            "stuid",
            "from",
            "has_pet",
            ")"
        ],
        "question": "Find the average age of students who do not have any pet .",
        "question_toks": [
            "Find",
            "the",
            "average",
            "age",
            "of",
            "students",
            "who",
            "do",
            "not",
            "have",
            "any",
            "pet",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "pets_1",
        "id": 86,
        "query": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "query_toks": [
            "select",
            "avg",
            "(",
            "age",
            ")",
            "from",
            "student",
            "where",
            "stuid",
            "not",
            "in",
            "(",
            "select",
            "stuid",
            "from",
            "has_pet",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "age",
            ")",
            "from",
            "student",
            "where",
            "stuid",
            "not",
            "in",
            "(",
            "select",
            "stuid",
            "from",
            "has_pet",
            ")"
        ],
        "question": "What is the average age for all students who do not own any pets ?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "age",
            "for",
            "all",
            "students",
            "who",
            "do",
            "not",
            "own",
            "any",
            "pets",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 87,
        "query": "SELECT count(*) FROM CONTINENTS;",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "CONTINENTS"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "continents"
        ],
        "question": "How many continents are there?",
        "question_toks": [
            "How",
            "many",
            "continents",
            "are",
            "there",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 88,
        "query": "SELECT count(*) FROM CONTINENTS;",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "CONTINENTS"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "continents"
        ],
        "question": "What is the number of continents?",
        "question_toks": [
            "What",
            "is",
            "the",
            "number",
            "of",
            "continents",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 89,
        "query": "SELECT a.contid, a.continent, COALESCE(b.num_countries, 0) AS num_countries FROM continents a LEFT JOIN (SELECT continent, COUNT(*) AS num_countries FROM countries GROUP BY continent) b ON a.contid = b.continent",
        "query_toks": [
            "SELECT",
            "a.contid,",
            "a.continent,",
            "COALESCE",
            "(",
            "b.num_countries,",
            "0",
            ")",
            "AS",
            "num_countries",
            "FROM",
            "continents",
            "a",
            "LEFT",
            "JOIN",
            "(",
            "SELECT",
            "continent,",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "num_countries",
            "FROM",
            "countries",
            "GROUP",
            "BY",
            "continent",
            ")",
            "b",
            "ON",
            "a.contid",
            "=",
            "b.continent"
        ],
        "query_toks_no_value": [
            "select",
            "a.contid,",
            "a.continent,",
            "coalesce",
            "(",
            "b.num_countries,",
            "value",
            ")",
            "as",
            "num_countries",
            "from",
            "continents",
            "a",
            "left",
            "join",
            "(",
            "select",
            "continent,",
            "count",
            "(",
            "*",
            ")",
            "as",
            "num_countries",
            "from",
            "countries",
            "group",
            "by",
            "continent",
            ")",
            "b",
            "on",
            "a.contid",
            "=",
            "b.continent"
        ],
        "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "question_toks": [
            "How",
            "many",
            "countries",
            "does",
            "each",
            "continent",
            "have",
            "?",
            "List",
            "the",
            "continent",
            "id",
            ",",
            "continent",
            "name",
            "and",
            "the",
            "number",
            "of",
            "countries",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 90,
        "query": "SELECT contid, continent, (SELECT COUNT(*) FROM countries WHERE continent = continents.contid) AS country_count FROM continents;",
        "query_toks": [
            "SELECT",
            "contid,",
            "continent,",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "countries",
            "WHERE",
            "continent",
            "=",
            "continents.contid",
            ")",
            "AS",
            "country_count",
            "FROM",
            "continents"
        ],
        "query_toks_no_value": [
            "select",
            "contid,",
            "continent,",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "countries",
            "where",
            "continent",
            "=",
            "continents.contid",
            ")",
            "as",
            "country_count",
            "from",
            "continents"
        ],
        "question": "For each continent, list its id, name, and how many countries it has?",
        "question_toks": [
            "For",
            "each",
            "continent",
            ",",
            "list",
            "its",
            "id",
            ",",
            "name",
            ",",
            "and",
            "how",
            "many",
            "countries",
            "it",
            "has",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 91,
        "query": "SELECT count(*) FROM COUNTRIES;",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "COUNTRIES"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "countries"
        ],
        "question": "How many countries are listed?",
        "question_toks": [
            "How",
            "many",
            "countries",
            "are",
            "listed",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 92,
        "query": "SELECT count(*) FROM COUNTRIES;",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "COUNTRIES"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "countries"
        ],
        "question": "How many countries exist?",
        "question_toks": [
            "How",
            "many",
            "countries",
            "exist",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 93,
        "query": "SELECT fullName, id, (SELECT COUNT(*) FROM model_list WHERE model_list.maker = car_makers.id) AS model_count FROM car_makers",
        "query_toks": [
            "SELECT",
            "fullName,",
            "id,",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "model_list",
            "WHERE",
            "model_list.maker",
            "=",
            "car_makers.id",
            ")",
            "AS",
            "model_count",
            "FROM",
            "car_makers"
        ],
        "query_toks_no_value": [
            "select",
            "fullname,",
            "id,",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "model_list",
            "where",
            "model_list.maker",
            "=",
            "car_makers.id",
            ")",
            "as",
            "model_count",
            "from",
            "car_makers"
        ],
        "question": "How many models does each car maker produce? List maker full name, id and the number.",
        "question_toks": [
            "How",
            "many",
            "models",
            "does",
            "each",
            "car",
            "maker",
            "produce",
            "?",
            "List",
            "maker",
            "full",
            "name",
            ",",
            "id",
            "and",
            "the",
            "number",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 94,
        "query": "SELECT id, fullname, (SELECT COUNT(modelid) FROM model_list WHERE model_list.maker = car_makers.id) AS TotalModels FROM car_makers",
        "query_toks": [
            "SELECT",
            "id,",
            "fullname,",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "modelid",
            ")",
            "FROM",
            "model_list",
            "WHERE",
            "model_list.maker",
            "=",
            "car_makers.id",
            ")",
            "AS",
            "TotalModels",
            "FROM",
            "car_makers"
        ],
        "query_toks_no_value": [
            "select",
            "id,",
            "fullname,",
            "(",
            "select",
            "count",
            "(",
            "modelid",
            ")",
            "from",
            "model_list",
            "where",
            "model_list.maker",
            "=",
            "car_makers.id",
            ")",
            "as",
            "totalmodels",
            "from",
            "car_makers"
        ],
        "question": "What is the full name of each car maker, along with its id and how many models it produces?",
        "question_toks": [
            "What",
            "is",
            "the",
            "full",
            "name",
            "of",
            "each",
            "car",
            "maker",
            ",",
            "along",
            "with",
            "its",
            "id",
            "and",
            "how",
            "many",
            "models",
            "it",
            "produces",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 95,
        "query": "SELECT DISTINCT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.horsepower = (SELECT min(T3.Horsepower) FROM CARS_DATA AS T3)",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1",
            ".",
            "Model",
            "FROM",
            "CAR_NAMES",
            "AS",
            "T1",
            "JOIN",
            "CARS_DATA",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "MakeId",
            "=",
            "T2",
            ".",
            "Id",
            "WHERE",
            "T2",
            ".",
            "horsepower",
            "=",
            "(",
            "SELECT",
            "min",
            "(",
            "T3",
            ".",
            "Horsepower",
            ")",
            "FROM",
            "CARS_DATA",
            "AS",
            "T3",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "t1",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "cars_data",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "horsepower",
            "=",
            "(",
            "select",
            "min",
            "(",
            "t3",
            ".",
            "horsepower",
            ")",
            "from",
            "cars_data",
            "as",
            "t3",
            ")"
        ],
        "question": "Which model of the car has the minimum horsepower?",
        "question_toks": [
            "Which",
            "model",
            "of",
            "the",
            "car",
            "has",
            "the",
            "minimum",
            "horsepower",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 96,
        "query": "SELECT DISTINCT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.horsepower = (SELECT min(T3.Horsepower) FROM CARS_DATA AS T3)",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1",
            ".",
            "Model",
            "FROM",
            "CAR_NAMES",
            "AS",
            "T1",
            "JOIN",
            "CARS_DATA",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "MakeId",
            "=",
            "T2",
            ".",
            "Id",
            "WHERE",
            "T2",
            ".",
            "horsepower",
            "=",
            "(",
            "SELECT",
            "min",
            "(",
            "T3",
            ".",
            "Horsepower",
            ")",
            "FROM",
            "CARS_DATA",
            "AS",
            "T3",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "t1",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "cars_data",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "horsepower",
            "=",
            "(",
            "select",
            "min",
            "(",
            "t3",
            ".",
            "horsepower",
            ")",
            "from",
            "cars_data",
            "as",
            "t3",
            ")"
        ],
        "question": "What is the model of all cars with the smallest amount of horsepower?",
        "question_toks": [
            "What",
            "is",
            "the",
            "model",
            "of",
            "all",
            "cars",
            "with",
            "the",
            "smallest",
            "amount",
            "of",
            "horsepower",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 97,
        "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < (SELECT avg(Weight) FROM CARS_DATA)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "model",
            "FROM",
            "CAR_NAMES",
            "AS",
            "T1",
            "JOIN",
            "CARS_DATA",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "MakeId",
            "=",
            "T2",
            ".",
            "Id",
            "WHERE",
            "T2",
            ".",
            "Weight",
            "<",
            "(",
            "SELECT",
            "avg",
            "(",
            "Weight",
            ")",
            "FROM",
            "CARS_DATA",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "cars_data",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "weight",
            "<",
            "(",
            "select",
            "avg",
            "(",
            "weight",
            ")",
            "from",
            "cars_data",
            ")"
        ],
        "question": "Find the model of the car whose weight is below the average weight.",
        "question_toks": [
            "Find",
            "the",
            "model",
            "of",
            "the",
            "car",
            "whose",
            "weight",
            "is",
            "below",
            "the",
            "average",
            "weight",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 98,
        "query": "SELECT T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Weight < (SELECT AVG(Weight) FROM cars_data)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "ModelId",
            "FROM",
            "model_list",
            "AS",
            "T1",
            "JOIN",
            "car_names",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Model",
            "=",
            "T2",
            ".",
            "Model",
            "JOIN",
            "cars_data",
            "AS",
            "T3",
            "ON",
            "T2",
            ".",
            "MakeId",
            "=",
            "T3",
            ".",
            "Id",
            "WHERE",
            "T3",
            ".",
            "Weight",
            "<",
            "(",
            "SELECT",
            "AVG",
            "(",
            "Weight",
            ")",
            "FROM",
            "cars_data",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "modelid",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "cars_data",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "makeid",
            "=",
            "t3",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "weight",
            "<",
            "(",
            "select",
            "avg",
            "(",
            "weight",
            ")",
            "from",
            "cars_data",
            ")"
        ],
        "question": "What is the model id for the car with a weight smaller than the average weight of all cars?",
        "question_toks": [
            "What",
            "is",
            "the",
            "model",
            "id",
            "for",
            "the",
            "car",
            "with",
            "a",
            "weight",
            "smaller",
            "than",
            "the",
            "average",
            "weight",
            "of",
            "all",
            "cars",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 99,
        "query": "SELECT T1.FullName FROM CAR_MAKERS AS T1 WHERE T1.Id IN (SELECT T2.Maker FROM MODEL_LIST AS T2 JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970');",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "FullName",
            "FROM",
            "CAR_MAKERS",
            "AS",
            "T1",
            "WHERE",
            "T1",
            ".",
            "Id",
            "IN",
            "(",
            "SELECT",
            "T2",
            ".",
            "Maker",
            "FROM",
            "MODEL_LIST",
            "AS",
            "T2",
            "JOIN",
            "CAR_NAMES",
            "AS",
            "T3",
            "ON",
            "T2",
            ".",
            "model",
            "=",
            "T3",
            ".",
            "model",
            "JOIN",
            "CARS_DATA",
            "AS",
            "T4",
            "ON",
            "T3",
            ".",
            "MakeId",
            "=",
            "T4",
            ".",
            "id",
            "WHERE",
            "T4",
            ".",
            "year",
            "=",
            "'1970",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "fullname",
            "from",
            "car_makers",
            "as",
            "t1",
            "where",
            "t1",
            ".",
            "id",
            "in",
            "(",
            "select",
            "t2",
            ".",
            "maker",
            "from",
            "model_list",
            "as",
            "t2",
            "join",
            "car_names",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "model",
            "=",
            "t3",
            ".",
            "model",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t4",
            ".",
            "year",
            "=",
            "value",
            ")"
        ],
        "question": "Find the full names of the makers that produced some cars in the year of 1970?",
        "question_toks": [
            "Find",
            "the",
            "full",
            "names",
            "of",
            "the",
            "makers",
            "that",
            "produced",
            "some",
            "cars",
            "in",
            "the",
            "year",
            "of",
            "1970",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 100,
        "query": "SELECT T1.FullName FROM CAR_MAKERS AS T1 WHERE T1.Id IN (SELECT T2.Maker FROM MODEL_LIST AS T2 JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970');",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "FullName",
            "FROM",
            "CAR_MAKERS",
            "AS",
            "T1",
            "WHERE",
            "T1",
            ".",
            "Id",
            "IN",
            "(",
            "SELECT",
            "T2",
            ".",
            "Maker",
            "FROM",
            "MODEL_LIST",
            "AS",
            "T2",
            "JOIN",
            "CAR_NAMES",
            "AS",
            "T3",
            "ON",
            "T2",
            ".",
            "model",
            "=",
            "T3",
            ".",
            "model",
            "JOIN",
            "CARS_DATA",
            "AS",
            "T4",
            "ON",
            "T3",
            ".",
            "MakeId",
            "=",
            "T4",
            ".",
            "id",
            "WHERE",
            "T4",
            ".",
            "year",
            "=",
            "'1970",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "fullname",
            "from",
            "car_makers",
            "as",
            "t1",
            "where",
            "t1",
            ".",
            "id",
            "in",
            "(",
            "select",
            "t2",
            ".",
            "maker",
            "from",
            "model_list",
            "as",
            "t2",
            "join",
            "car_names",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "model",
            "=",
            "t3",
            ".",
            "model",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t4",
            ".",
            "year",
            "=",
            "value",
            ")"
        ],
        "question": "What is the name of the different car makers who produced a car in 1970?",
        "question_toks": [
            "What",
            "is",
            "the",
            "name",
            "of",
            "the",
            "different",
            "car",
            "makers",
            "who",
            "produced",
            "a",
            "car",
            "in",
            "1970",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 101,
        "query": "SELECT T2.Make , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = (SELECT min(YEAR) FROM CARS_DATA);",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "Make",
            ",",
            "T1",
            ".",
            "Year",
            "FROM",
            "CARS_DATA",
            "AS",
            "T1",
            "JOIN",
            "CAR_NAMES",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Id",
            "=",
            "T2",
            ".",
            "MakeId",
            "WHERE",
            "T1",
            ".",
            "Year",
            "=",
            "(",
            "SELECT",
            "min",
            "(",
            "YEAR",
            ")",
            "FROM",
            "CARS_DATA",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "make",
            ",",
            "t1",
            ".",
            "year",
            "from",
            "cars_data",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "makeid",
            "where",
            "t1",
            ".",
            "year",
            "=",
            "(",
            "select",
            "min",
            "(",
            "year",
            ")",
            "from",
            "cars_data",
            ")"
        ],
        "question": "Find the make and production time of the cars that were produced in the earliest year?",
        "question_toks": [
            "Find",
            "the",
            "make",
            "and",
            "production",
            "time",
            "of",
            "the",
            "cars",
            "that",
            "were",
            "produced",
            "in",
            "the",
            "earliest",
            "year",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 102,
        "query": "SELECT T4.FullName , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T1.Year = (SELECT min(YEAR) FROM CARS_DATA);",
        "query_toks": [
            "SELECT",
            "T4",
            ".",
            "FullName",
            ",",
            "T1",
            ".",
            "Year",
            "FROM",
            "CARS_DATA",
            "AS",
            "T1",
            "JOIN",
            "CAR_NAMES",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Id",
            "=",
            "T2",
            ".",
            "MakeId",
            "JOIN",
            "model_list",
            "AS",
            "T3",
            "ON",
            "T2",
            ".",
            "Model",
            "=",
            "T3",
            ".",
            "Model",
            "JOIN",
            "car_makers",
            "AS",
            "T4",
            "ON",
            "T3",
            ".",
            "Maker",
            "=",
            "T4",
            ".",
            "Id",
            "WHERE",
            "T1",
            ".",
            "Year",
            "=",
            "(",
            "SELECT",
            "min",
            "(",
            "YEAR",
            ")",
            "FROM",
            "CARS_DATA",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t4",
            ".",
            "fullname",
            ",",
            "t1",
            ".",
            "year",
            "from",
            "cars_data",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "makeid",
            "join",
            "model_list",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "model",
            "=",
            "t3",
            ".",
            "model",
            "join",
            "car_makers",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "maker",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t1",
            ".",
            "year",
            "=",
            "(",
            "select",
            "min",
            "(",
            "year",
            ")",
            "from",
            "cars_data",
            ")"
        ],
        "question": "Show the full name of the maker of the car produced in the earliest year and the year it was produced.",
        "question_toks": [
            "Show",
            "the",
            "full",
            "name",
            "of",
            "the",
            "maker",
            "of",
            "the",
            "car",
            "produced",
            "in",
            "the",
            "earliest",
            "year",
            "and",
            "the",
            "year",
            "it",
            "was",
            "produced",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 103,
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980;",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1",
            ".",
            "model",
            "FROM",
            "MODEL_LIST",
            "AS",
            "T1",
            "JOIN",
            "CAR_NAMES",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "model",
            "=",
            "T2",
            ".",
            "model",
            "JOIN",
            "CARS_DATA",
            "AS",
            "T3",
            "ON",
            "T2",
            ".",
            "MakeId",
            "=",
            "T3",
            ".",
            "id",
            "WHERE",
            "T3",
            ".",
            "year",
            ">",
            "1980"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "t1",
            ".",
            "model",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "cars_data",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "makeid",
            "=",
            "t3",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "year",
            ">",
            "value"
        ],
        "question": "Which distinct car models are the produced after 1980?",
        "question_toks": [
            "Which",
            "distinct",
            "car",
            "models",
            "are",
            "the",
            "produced",
            "after",
            "1980",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 104,
        "query": "SELECT DISTINCT T1.ModelId, T1.Model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id WHERE T3.Year > 1980",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1",
            ".",
            "ModelId,",
            "T1",
            ".",
            "Model",
            "FROM",
            "MODEL_LIST",
            "AS",
            "T1",
            "JOIN",
            "CAR_NAMES",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Model",
            "=",
            "T2",
            ".",
            "Model",
            "JOIN",
            "CARS_DATA",
            "AS",
            "T3",
            "ON",
            "T2",
            ".",
            "MakeId",
            "=",
            "T3",
            ".",
            "Id",
            "WHERE",
            "T3",
            ".",
            "Year",
            ">",
            "1980"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "t1",
            ".",
            "modelid,",
            "t1",
            ".",
            "model",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "cars_data",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "makeid",
            "=",
            "t3",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "year",
            ">",
            "value"
        ],
        "question": "What are the model ids and names of different models for the cars produced after 1980?",
        "question_toks": [
            "What",
            "are",
            "the",
            "model",
            "ids",
            "and",
            "names",
            "of",
            "different",
            "models",
            "for",
            "the",
            "cars",
            "produced",
            "after",
            "1980",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 105,
        "query": "SELECT T1.Continent, count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.ContId;",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "Continent,",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "CONTINENTS",
            "AS",
            "T1",
            "JOIN",
            "COUNTRIES",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "ContId",
            "=",
            "T2",
            ".",
            "continent",
            "JOIN",
            "car_makers",
            "AS",
            "T3",
            "ON",
            "T2",
            ".",
            "CountryId",
            "=",
            "T3",
            ".",
            "Country",
            "GROUP",
            "BY",
            "T1",
            ".",
            "ContId"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "continent,",
            "count",
            "(",
            "*",
            ")",
            "from",
            "continents",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contid",
            "=",
            "t2",
            ".",
            "continent",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "group",
            "by",
            "t1",
            ".",
            "contid"
        ],
        "question": "How many car makers are there in each continents? List the continent name and the count.",
        "question_toks": [
            "How",
            "many",
            "car",
            "makers",
            "are",
            "there",
            "in",
            "each",
            "continents",
            "?",
            "List",
            "the",
            "continent",
            "name",
            "and",
            "the",
            "count",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 106,
        "query": "SELECT cont.continent, numMakers FROM (SELECT contid, COUNT(DISTINCT car_makers.id) as numMakers FROM continents LEFT JOIN countries ON continents.contid = countries.continent LEFT JOIN car_makers ON car_makers.country = countries.countryid GROUP BY contid) AS subquery JOIN continents cont ON cont.contid = subquery.contid",
        "query_toks": [
            "SELECT",
            "cont.continent,",
            "numMakers",
            "FROM",
            "(",
            "SELECT",
            "contid,",
            "COUNT",
            "(",
            "DISTINCT",
            "car_makers.id",
            ")",
            "as",
            "numMakers",
            "FROM",
            "continents",
            "LEFT",
            "JOIN",
            "countries",
            "ON",
            "continents.contid",
            "=",
            "countries.continent",
            "LEFT",
            "JOIN",
            "car_makers",
            "ON",
            "car_makers.country",
            "=",
            "countries.countryid",
            "GROUP",
            "BY",
            "contid",
            ")",
            "AS",
            "subquery",
            "JOIN",
            "continents",
            "cont",
            "ON",
            "cont.contid",
            "=",
            "subquery.contid"
        ],
        "query_toks_no_value": [
            "select",
            "cont.continent,",
            "nummakers",
            "from",
            "(",
            "select",
            "contid,",
            "count",
            "(",
            "distinct",
            "car_makers.id",
            ")",
            "as",
            "nummakers",
            "from",
            "continents",
            "left",
            "join",
            "countries",
            "on",
            "continents.contid",
            "=",
            "countries.continent",
            "left",
            "join",
            "car_makers",
            "on",
            "car_makers.country",
            "=",
            "countries.countryid",
            "group",
            "by",
            "contid",
            ")",
            "as",
            "subquery",
            "join",
            "continents",
            "cont",
            "on",
            "cont.contid",
            "=",
            "subquery.contid"
        ],
        "question": "What is the name of each continent and how many car makers are there in each one?",
        "question_toks": [
            "What",
            "is",
            "the",
            "name",
            "of",
            "each",
            "continent",
            "and",
            "how",
            "many",
            "car",
            "makers",
            "are",
            "there",
            "in",
            "each",
            "one",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 107,
        "query": "SELECT c.countryname FROM countries c WHERE c.countryid IN (SELECT cm.country FROM car_makers cm GROUP BY cm.country HAVING COUNT(cm.maker) = (SELECT MAX(counted) FROM (SELECT COUNT(maker) AS counted FROM car_makers GROUP BY country)))",
        "query_toks": [
            "SELECT",
            "c.countryname",
            "FROM",
            "countries",
            "c",
            "WHERE",
            "c.countryid",
            "IN",
            "(",
            "SELECT",
            "cm.country",
            "FROM",
            "car_makers",
            "cm",
            "GROUP",
            "BY",
            "cm.country",
            "HAVING",
            "COUNT",
            "(",
            "cm.maker",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "counted",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "maker",
            ")",
            "AS",
            "counted",
            "FROM",
            "car_makers",
            "GROUP",
            "BY",
            "country",
            ")",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "c.countryname",
            "from",
            "countries",
            "c",
            "where",
            "c.countryid",
            "in",
            "(",
            "select",
            "cm.country",
            "from",
            "car_makers",
            "cm",
            "group",
            "by",
            "cm.country",
            "having",
            "count",
            "(",
            "cm.maker",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "counted",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "maker",
            ")",
            "as",
            "counted",
            "from",
            "car_makers",
            "group",
            "by",
            "country",
            ")",
            ")",
            ")"
        ],
        "question": "Which countries have the most car makers? List the country names. If there is a tie, show all such countries.",
        "question_toks": [
            "Which",
            "countries",
            "have",
            "the",
            "most",
            "car",
            "makers",
            "?",
            "List",
            "the",
            "country",
            "names",
            ".",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "show",
            "all",
            "such",
            "countries",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 108,
        "query": "SELECT T2.CountryName FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country, T2.CountryName HAVING COUNT(*) = (SELECT MAX(car_count) FROM (SELECT COUNT(*) as car_count FROM car_makers GROUP BY Country) as counts)",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "CountryName",
            "FROM",
            "car_makers",
            "AS",
            "T1",
            "JOIN",
            "countries",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Country",
            "=",
            "T2",
            ".",
            "CountryId",
            "GROUP",
            "BY",
            "T1",
            ".",
            "Country,",
            "T2",
            ".",
            "CountryName",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "car_count",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "as",
            "car_count",
            "FROM",
            "car_makers",
            "GROUP",
            "BY",
            "Country",
            ")",
            "as",
            "counts",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "countryname",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "country",
            "=",
            "t2",
            ".",
            "countryid",
            "group",
            "by",
            "t1",
            ".",
            "country,",
            "t2",
            ".",
            "countryname",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "car_count",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "car_count",
            "from",
            "car_makers",
            "group",
            "by",
            "country",
            ")",
            "as",
            "counts",
            ")"
        ],
        "question": "What is the name of the country with the most car makers? If there is a tie, return all of them.",
        "question_toks": [
            "What",
            "is",
            "the",
            "name",
            "of",
            "the",
            "country",
            "with",
            "the",
            "most",
            "car",
            "makers",
            "?",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "return",
            "all",
            "of",
            "them",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 109,
        "query": "select count(*) , t2.fullname from model_list as t1 join car_makers as t2 on t1.maker = t2.id group by t2.id;",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "t2",
            ".",
            "fullname",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "maker",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t2",
            ".",
            "id"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "t2",
            ".",
            "fullname",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "maker",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t2",
            ".",
            "id"
        ],
        "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
        "question_toks": [
            "How",
            "many",
            "car",
            "models",
            "are",
            "produced",
            "by",
            "each",
            "maker",
            "?",
            "Only",
            "list",
            "the",
            "count",
            "and",
            "the",
            "maker",
            "full",
            "name",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 110,
        "query": "SELECT cm.id, cm.fullname, (SELECT COUNT(*) FROM model_list WHERE model_list.maker = cm.id) AS model_count FROM car_makers cm GROUP BY cm.id, cm.fullname",
        "query_toks": [
            "SELECT",
            "cm.id,",
            "cm.fullname,",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "model_list",
            "WHERE",
            "model_list.maker",
            "=",
            "cm.id",
            ")",
            "AS",
            "model_count",
            "FROM",
            "car_makers",
            "cm",
            "GROUP",
            "BY",
            "cm.id,",
            "cm.fullname"
        ],
        "query_toks_no_value": [
            "select",
            "cm.id,",
            "cm.fullname,",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "model_list",
            "where",
            "model_list.maker",
            "=",
            "cm.id",
            ")",
            "as",
            "model_count",
            "from",
            "car_makers",
            "cm",
            "group",
            "by",
            "cm.id,",
            "cm.fullname"
        ],
        "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "question_toks": [
            "What",
            "is",
            "the",
            "number",
            "of",
            "car",
            "models",
            "that",
            "are",
            "produced",
            "by",
            "each",
            "maker",
            "and",
            "what",
            "is",
            "the",
            "id",
            "and",
            "full",
            "name",
            "of",
            "each",
            "maker",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 111,
        "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout (sw)';",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "Accelerate",
            "FROM",
            "CARS_DATA",
            "AS",
            "T1",
            "JOIN",
            "CAR_NAMES",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Id",
            "=",
            "T2",
            ".",
            "MakeId",
            "WHERE",
            "T2",
            ".",
            "Make",
            "=",
            "'amc",
            "hornet",
            "sportabout",
            "(",
            "sw",
            ")",
            "",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "accelerate",
            "from",
            "cars_data",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "makeid",
            "where",
            "t2",
            ".",
            "make",
            "=",
            "value"
        ],
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "question_toks": [
            "What",
            "is",
            "the",
            "accelerate",
            "of",
            "the",
            "car",
            "make",
            "amc",
            "hornet",
            "sportabout",
            "(",
            "sw",
            ")",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 112,
        "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout (sw)';",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "Accelerate",
            "FROM",
            "CARS_DATA",
            "AS",
            "T1",
            "JOIN",
            "CAR_NAMES",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Id",
            "=",
            "T2",
            ".",
            "MakeId",
            "WHERE",
            "T2",
            ".",
            "Make",
            "=",
            "'amc",
            "hornet",
            "sportabout",
            "(",
            "sw",
            ")",
            "",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "accelerate",
            "from",
            "cars_data",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "makeid",
            "where",
            "t2",
            ".",
            "make",
            "=",
            "value"
        ],
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "question_toks": [
            "How",
            "much",
            "does",
            "the",
            "car",
            "accelerate",
            "that",
            "makes",
            "amc",
            "hornet",
            "sportabout",
            "(",
            "sw",
            ")",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 113,
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france';",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "CAR_MAKERS",
            "AS",
            "T1",
            "JOIN",
            "COUNTRIES",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Country",
            "=",
            "T2",
            ".",
            "CountryId",
            "WHERE",
            "T2",
            ".",
            "CountryName",
            "=",
            "'france",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "country",
            "=",
            "t2",
            ".",
            "countryid",
            "where",
            "t2",
            ".",
            "countryname",
            "=",
            "value"
        ],
        "question": "How many car makers are there in france?",
        "question_toks": [
            "How",
            "many",
            "car",
            "makers",
            "are",
            "there",
            "in",
            "france",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 114,
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France';",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "CAR_MAKERS",
            "AS",
            "T1",
            "JOIN",
            "COUNTRIES",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Country",
            "=",
            "T2",
            ".",
            "CountryId",
            "WHERE",
            "T2",
            ".",
            "CountryName",
            "=",
            "'France",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "country",
            "=",
            "t2",
            ".",
            "countryid",
            "where",
            "t2",
            ".",
            "countryname",
            "=",
            "value"
        ],
        "question": "What is the number of makers of care in France?",
        "question_toks": [
            "What",
            "is",
            "the",
            "number",
            "of",
            "makers",
            "of",
            "care",
            "in",
            "France",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 115,
        "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa';",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "MODEL_LIST",
            "AS",
            "T1",
            "JOIN",
            "CAR_MAKERS",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Maker",
            "=",
            "T2",
            ".",
            "Id",
            "JOIN",
            "COUNTRIES",
            "AS",
            "T3",
            "ON",
            "T2",
            ".",
            "Country",
            "=",
            "T3",
            ".",
            "CountryId",
            "WHERE",
            "T3",
            ".",
            "CountryName",
            "=",
            "'usa",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "maker",
            "=",
            "t2",
            ".",
            "id",
            "join",
            "countries",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "country",
            "=",
            "t3",
            ".",
            "countryid",
            "where",
            "t3",
            ".",
            "countryname",
            "=",
            "value"
        ],
        "question": "How many car models are produced in the usa?",
        "question_toks": [
            "How",
            "many",
            "car",
            "models",
            "are",
            "produced",
            "in",
            "the",
            "usa",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 116,
        "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa';",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "MODEL_LIST",
            "AS",
            "T1",
            "JOIN",
            "CAR_MAKERS",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Maker",
            "=",
            "T2",
            ".",
            "Id",
            "JOIN",
            "COUNTRIES",
            "AS",
            "T3",
            "ON",
            "T2",
            ".",
            "Country",
            "=",
            "T3",
            ".",
            "CountryId",
            "WHERE",
            "T3",
            ".",
            "CountryName",
            "=",
            "'usa",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "maker",
            "=",
            "t2",
            ".",
            "id",
            "join",
            "countries",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "country",
            "=",
            "t3",
            ".",
            "countryid",
            "where",
            "t3",
            ".",
            "countryname",
            "=",
            "value"
        ],
        "question": "What is the count of the car models produced in the country with the full name 'usa'?",
        "question_toks": [
            "What",
            "is",
            "the",
            "count",
            "of",
            "the",
            "car",
            "models",
            "produced",
            "in",
            "the",
            "country",
            "with",
            "the",
            "full",
            "name",
            "'",
            "usa",
            "'?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 117,
        "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "mpg",
            ")",
            "FROM",
            "CARS_DATA",
            "WHERE",
            "Cylinders",
            "=",
            "4"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "mpg",
            ")",
            "from",
            "cars_data",
            "where",
            "cylinders",
            "=",
            "value"
        ],
        "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "miles",
            "per",
            "gallon",
            "(",
            "mpg",
            ")",
            "of",
            "the",
            "cars",
            "with",
            "4",
            "cylinders",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 118,
        "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders = 4;",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "mpg",
            ")",
            "FROM",
            "CARS_DATA",
            "WHERE",
            "Cylinders",
            "=",
            "4"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "mpg",
            ")",
            "from",
            "cars_data",
            "where",
            "cylinders",
            "=",
            "value"
        ],
        "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "miles",
            "per",
            "gallon",
            "of",
            "all",
            "the",
            "cards",
            "with",
            "4",
            "cylinders",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 119,
        "query": "select min(weight) from cars_data where cylinders = 8 and year = 1974",
        "query_toks": [
            "select",
            "min",
            "(",
            "weight",
            ")",
            "from",
            "cars_data",
            "where",
            "cylinders",
            "=",
            "8",
            "and",
            "year",
            "=",
            "1974"
        ],
        "query_toks_no_value": [
            "select",
            "min",
            "(",
            "weight",
            ")",
            "from",
            "cars_data",
            "where",
            "cylinders",
            "=",
            "value",
            "and",
            "year",
            "=",
            "value"
        ],
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "question_toks": [
            "What",
            "is",
            "the",
            "smallest",
            "weight",
            "of",
            "the",
            "car",
            "produced",
            "with",
            "8",
            "cylinders",
            "on",
            "1974",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 120,
        "query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "query_toks": [
            "select",
            "min",
            "(",
            "weight",
            ")",
            "from",
            "cars_data",
            "where",
            "cylinders",
            "=",
            "8",
            "and",
            "year",
            "=",
            "1974"
        ],
        "query_toks_no_value": [
            "select",
            "min",
            "(",
            "weight",
            ")",
            "from",
            "cars_data",
            "where",
            "cylinders",
            "=",
            "value",
            "and",
            "year",
            "=",
            "value"
        ],
        "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
        "question_toks": [
            "What",
            "is",
            "the",
            "minimum",
            "weight",
            "of",
            "the",
            "car",
            "with",
            "8",
            "cylinders",
            "produced",
            "in",
            "1974",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 121,
        "query": "SELECT T2.FullName , T1.Model FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id;",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "FullName",
            ",",
            "T1",
            ".",
            "Model",
            "FROM",
            "MODEL_LIST",
            "AS",
            "T1",
            "JOIN",
            "CAR_MAKERS",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Maker",
            "=",
            "T2",
            ".",
            "Id"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "fullname",
            ",",
            "t1",
            ".",
            "model",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "maker",
            "=",
            "t2",
            ".",
            "id"
        ],
        "question": "What are all the full names of makers and their models?",
        "question_toks": [
            "What",
            "are",
            "all",
            "the",
            "full",
            "names",
            "of",
            "makers",
            "and",
            "their",
            "models",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 122,
        "query": "SELECT T2.FullName , T1.Model FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id;",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "FullName",
            ",",
            "T1",
            ".",
            "Model",
            "FROM",
            "MODEL_LIST",
            "AS",
            "T1",
            "JOIN",
            "CAR_MAKERS",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Maker",
            "=",
            "T2",
            ".",
            "Id"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "fullname",
            ",",
            "t1",
            ".",
            "model",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "maker",
            "=",
            "t2",
            ".",
            "id"
        ],
        "question": "What are all the full names of makers and their models?",
        "question_toks": [
            "What",
            "are",
            "all",
            "the",
            "full",
            "names",
            "of",
            "makers",
            "and",
            "their",
            "models",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 123,
        "query": "SELECT T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count(*) >= 1;",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "CountryName",
            ",",
            "T1",
            ".",
            "CountryId",
            "FROM",
            "COUNTRIES",
            "AS",
            "T1",
            "JOIN",
            "CAR_MAKERS",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "CountryId",
            "=",
            "T2",
            ".",
            "Country",
            "GROUP",
            "BY",
            "T1",
            ".",
            "CountryId",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "countryname",
            ",",
            "t1",
            ".",
            "countryid",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t2",
            ".",
            "country",
            "group",
            "by",
            "t1",
            ".",
            "countryid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value"
        ],
        "question": "What are the countries having at least one car maker? List country name and country ID.",
        "question_toks": [
            "What",
            "are",
            "the",
            "countries",
            "having",
            "at",
            "least",
            "one",
            "car",
            "maker",
            "?",
            "List",
            "country",
            "name",
            "and",
            "country",
            "ID",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 124,
        "query": "SELECT T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count(*) >= 1;",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "CountryName",
            ",",
            "T1",
            ".",
            "CountryId",
            "FROM",
            "COUNTRIES",
            "AS",
            "T1",
            "JOIN",
            "CAR_MAKERS",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "CountryId",
            "=",
            "T2",
            ".",
            "Country",
            "GROUP",
            "BY",
            "T1",
            ".",
            "CountryId",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "countryname",
            ",",
            "t1",
            ".",
            "countryid",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t2",
            ".",
            "country",
            "group",
            "by",
            "t1",
            ".",
            "countryid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value"
        ],
        "question": "What are the names and ids of all countries with at least one car maker?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "and",
            "ids",
            "of",
            "all",
            "countries",
            "with",
            "at",
            "least",
            "one",
            "car",
            "maker",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 125,
        "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower > 150;",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "CARS_DATA",
            "WHERE",
            "horsepower",
            ">",
            "150"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data",
            "where",
            "horsepower",
            ">",
            "value"
        ],
        "question": "What is the number of the cars with horsepower more than 150?",
        "question_toks": [
            "What",
            "is",
            "the",
            "number",
            "of",
            "the",
            "cars",
            "with",
            "horsepower",
            "more",
            "than",
            "150",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 126,
        "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower > 150;",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "CARS_DATA",
            "WHERE",
            "horsepower",
            ">",
            "150"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data",
            "where",
            "horsepower",
            ">",
            "value"
        ],
        "question": "What is the number of cars with a horsepower greater than 150?",
        "question_toks": [
            "What",
            "is",
            "the",
            "number",
            "of",
            "cars",
            "with",
            "a",
            "horsepower",
            "greater",
            "than",
            "150",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 127,
        "query": "SELECT avg(Weight) , YEAR FROM CARS_DATA GROUP BY YEAR;",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "Weight",
            ")",
            ",",
            "YEAR",
            "FROM",
            "CARS_DATA",
            "GROUP",
            "BY",
            "YEAR"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "weight",
            ")",
            ",",
            "year",
            "from",
            "cars_data",
            "group",
            "by",
            "year"
        ],
        "question": "What is the average weight of cars each year?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "weight",
            "of",
            "cars",
            "each",
            "year",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 128,
        "query": "SELECT avg(Weight), YEAR FROM CARS_DATA GROUP BY YEAR;",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "Weight",
            ")",
            ",",
            "YEAR",
            "FROM",
            "CARS_DATA",
            "GROUP",
            "BY",
            "YEAR"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "weight",
            ")",
            ",",
            "year",
            "from",
            "cars_data",
            "group",
            "by",
            "year"
        ],
        "question": "What is the average weight of cars for each year?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "weight",
            "of",
            "cars",
            "for",
            "each",
            "year",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 129,
        "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryId HAVING count(*) >= 3;",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "CountryName",
            "FROM",
            "COUNTRIES",
            "AS",
            "T1",
            "JOIN",
            "CONTINENTS",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Continent",
            "=",
            "T2",
            ".",
            "ContId",
            "JOIN",
            "CAR_MAKERS",
            "AS",
            "T3",
            "ON",
            "T1",
            ".",
            "CountryId",
            "=",
            "T3",
            ".",
            "Country",
            "WHERE",
            "T2",
            ".",
            "Continent",
            "=",
            "'europe",
            "'",
            "GROUP",
            "BY",
            "T1",
            ".",
            "CountryId",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "3"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "countryname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "continents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "continent",
            "=",
            "t2",
            ".",
            "contid",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "where",
            "t2",
            ".",
            "continent",
            "=",
            "value",
            "group",
            "by",
            "t1",
            ".",
            "countryid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value"
        ],
        "question": "Which countries in europe have at least 3 car manufacturers?",
        "question_toks": [
            "Which",
            "countries",
            "in",
            "europe",
            "have",
            "at",
            "least",
            "3",
            "car",
            "manufacturers",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 130,
        "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryId HAVING count(*) >= 3;",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "CountryName",
            "FROM",
            "COUNTRIES",
            "AS",
            "T1",
            "JOIN",
            "CONTINENTS",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Continent",
            "=",
            "T2",
            ".",
            "ContId",
            "JOIN",
            "CAR_MAKERS",
            "AS",
            "T3",
            "ON",
            "T1",
            ".",
            "CountryId",
            "=",
            "T3",
            ".",
            "Country",
            "WHERE",
            "T2",
            ".",
            "Continent",
            "=",
            "'europe",
            "'",
            "GROUP",
            "BY",
            "T1",
            ".",
            "CountryId",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "3"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "countryname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "continents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "continent",
            "=",
            "t2",
            ".",
            "contid",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "where",
            "t2",
            ".",
            "continent",
            "=",
            "value",
            "group",
            "by",
            "t1",
            ".",
            "countryid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value"
        ],
        "question": "What are the names of all European countries with at least 3 manufacturers?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "all",
            "European",
            "countries",
            "with",
            "at",
            "least",
            "3",
            "manufacturers",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 131,
        "query": "SELECT T2.horsepower, T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 and T2.Horsepower = (SELECT max(T3.Horsepower) FROM cars_data AS T3)",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "horsepower,",
            "T1",
            ".",
            "Make",
            "FROM",
            "CAR_NAMES",
            "AS",
            "T1",
            "JOIN",
            "CARS_DATA",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "MakeId",
            "=",
            "T2",
            ".",
            "Id",
            "WHERE",
            "T2",
            ".",
            "cylinders",
            "=",
            "3",
            "and",
            "T2",
            ".",
            "Horsepower",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "T3",
            ".",
            "Horsepower",
            ")",
            "FROM",
            "cars_data",
            "AS",
            "T3",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "horsepower,",
            "t1",
            ".",
            "make",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "cars_data",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "cylinders",
            "=",
            "value",
            "and",
            "t2",
            ".",
            "horsepower",
            "=",
            "(",
            "select",
            "max",
            "(",
            "t3",
            ".",
            "horsepower",
            ")",
            "from",
            "cars_data",
            "as",
            "t3",
            ")"
        ],
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "question_toks": [
            "What",
            "is",
            "the",
            "maximum",
            "horsepower",
            "and",
            "the",
            "make",
            "of",
            "the",
            "car",
            "models",
            "with",
            "3",
            "cylinders",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 132,
        "query": "SELECT T2.horsepower, T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 and T2.Horsepower = (SELECT max(T3.Horsepower) FROM cars_data AS T3)",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "horsepower,",
            "T1",
            ".",
            "Make",
            "FROM",
            "CAR_NAMES",
            "AS",
            "T1",
            "JOIN",
            "CARS_DATA",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "MakeId",
            "=",
            "T2",
            ".",
            "Id",
            "WHERE",
            "T2",
            ".",
            "cylinders",
            "=",
            "3",
            "and",
            "T2",
            ".",
            "Horsepower",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "T3",
            ".",
            "Horsepower",
            ")",
            "FROM",
            "cars_data",
            "AS",
            "T3",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "horsepower,",
            "t1",
            ".",
            "make",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "cars_data",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "cylinders",
            "=",
            "value",
            "and",
            "t2",
            ".",
            "horsepower",
            "=",
            "(",
            "select",
            "max",
            "(",
            "t3",
            ".",
            "horsepower",
            ")",
            "from",
            "cars_data",
            "as",
            "t3",
            ")"
        ],
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "question_toks": [
            "What",
            "is",
            "the",
            "largest",
            "amount",
            "of",
            "horsepower",
            "for",
            "the",
            "models",
            "with",
            "3",
            "cylinders",
            "and",
            "what",
            "make",
            "is",
            "it",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 133,
        "query": "SELECT DISTINCT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.MPG = (SELECT max(T3.MPG) FROM CARS_DATA AS T3)",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1",
            ".",
            "Model",
            "FROM",
            "CAR_NAMES",
            "AS",
            "T1",
            "JOIN",
            "CARS_DATA",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "MakeId",
            "=",
            "T2",
            ".",
            "Id",
            "WHERE",
            "T2",
            ".",
            "MPG",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "T3",
            ".",
            "MPG",
            ")",
            "FROM",
            "CARS_DATA",
            "AS",
            "T3",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "t1",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "cars_data",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "mpg",
            "=",
            "(",
            "select",
            "max",
            "(",
            "t3",
            ".",
            "mpg",
            ")",
            "from",
            "cars_data",
            "as",
            "t3",
            ")"
        ],
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "question_toks": [
            "Which",
            "model",
            "saves",
            "the",
            "most",
            "gasoline",
            "?",
            "That",
            "is",
            "to",
            "say",
            ",",
            "have",
            "the",
            "maximum",
            "miles",
            "per",
            "gallon",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 134,
        "query": "SELECT DISTINCT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.MPG = (SELECT max(T3.MPG) FROM CARS_DATA AS T3)",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1",
            ".",
            "Model",
            "FROM",
            "CAR_NAMES",
            "AS",
            "T1",
            "JOIN",
            "CARS_DATA",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "MakeId",
            "=",
            "T2",
            ".",
            "Id",
            "WHERE",
            "T2",
            ".",
            "MPG",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "T3",
            ".",
            "MPG",
            ")",
            "FROM",
            "CARS_DATA",
            "AS",
            "T3",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "t1",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "cars_data",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "mpg",
            "=",
            "(",
            "select",
            "max",
            "(",
            "t3",
            ".",
            "mpg",
            ")",
            "from",
            "cars_data",
            "as",
            "t3",
            ")"
        ],
        "question": "What is the car model with the highest mpg ?",
        "question_toks": [
            "What",
            "is",
            "the",
            "car",
            "model",
            "with",
            "the",
            "highest",
            "mpg",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 135,
        "query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR < 1980;",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "horsepower",
            ")",
            "FROM",
            "CARS_DATA",
            "WHERE",
            "YEAR",
            "<",
            "1980"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "horsepower",
            ")",
            "from",
            "cars_data",
            "where",
            "year",
            "<",
            "value"
        ],
        "question": "What is the average horsepower of the cars before 1980?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "horsepower",
            "of",
            "the",
            "cars",
            "before",
            "1980",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 136,
        "query": "select avg(horsepower) from cars_data where year < 1980;",
        "query_toks": [
            "select",
            "avg",
            "(",
            "horsepower",
            ")",
            "from",
            "cars_data",
            "where",
            "year",
            "<",
            "1980"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "horsepower",
            ")",
            "from",
            "cars_data",
            "where",
            "year",
            "<",
            "value"
        ],
        "question": "What is the average horsepower for all cars produced before 1980 ?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "horsepower",
            "for",
            "all",
            "cars",
            "produced",
            "before",
            "1980",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 137,
        "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo';",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "T2",
            ".",
            "edispl",
            ")",
            "FROM",
            "CAR_NAMES",
            "AS",
            "T1",
            "JOIN",
            "CARS_DATA",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "MakeId",
            "=",
            "T2",
            ".",
            "Id",
            "WHERE",
            "T1",
            ".",
            "Model",
            "=",
            "'volvo",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "t2",
            ".",
            "edispl",
            ")",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "cars_data",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t1",
            ".",
            "model",
            "=",
            "value"
        ],
        "question": "What is the average edispl of the cars with model name volvo?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "edispl",
            "of",
            "the",
            "cars",
            "with",
            "model",
            "name",
            "volvo",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 138,
        "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo';",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "T2",
            ".",
            "edispl",
            ")",
            "FROM",
            "CAR_NAMES",
            "AS",
            "T1",
            "JOIN",
            "CARS_DATA",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "MakeId",
            "=",
            "T2",
            ".",
            "Id",
            "WHERE",
            "T1",
            ".",
            "Model",
            "=",
            "'volvo",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "t2",
            ".",
            "edispl",
            ")",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "cars_data",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t1",
            ".",
            "model",
            "=",
            "value"
        ],
        "question": "What is the average edispl for all volvos?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "edispl",
            "for",
            "all",
            "volvos",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 139,
        "query": "SELECT max(Accelerate) , Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "Accelerate",
            ")",
            ",",
            "Cylinders",
            "FROM",
            "CARS_DATA",
            "GROUP",
            "BY",
            "Cylinders"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "accelerate",
            ")",
            ",",
            "cylinders",
            "from",
            "cars_data",
            "group",
            "by",
            "cylinders"
        ],
        "question": "What is the maximum accelerate for different number of cylinders?",
        "question_toks": [
            "What",
            "is",
            "the",
            "maximum",
            "accelerate",
            "for",
            "different",
            "number",
            "of",
            "cylinders",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 140,
        "query": "SELECT max(Accelerate) , Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "Accelerate",
            ")",
            ",",
            "Cylinders",
            "FROM",
            "CARS_DATA",
            "GROUP",
            "BY",
            "Cylinders"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "accelerate",
            ")",
            ",",
            "cylinders",
            "from",
            "cars_data",
            "group",
            "by",
            "cylinders"
        ],
        "question": "What is the maximum accelerate for all the different cylinders?",
        "question_toks": [
            "What",
            "is",
            "the",
            "maximum",
            "accelerate",
            "for",
            "all",
            "the",
            "different",
            "cylinders",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 141,
        "query": "SELECT T2.ModelId FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model GROUP BY T2.Model HAVING count(DISTINCT T1.Make) = (SELECT max(cnt) FROM (SELECT count(DISTINCT T3.Make) AS cnt FROM CAR_NAMES AS T3 JOIN MODEL_LIST AS T4 ON T3.Model = T4.Model GROUP BY T4.Model));",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "ModelId",
            "FROM",
            "CAR_NAMES",
            "AS",
            "T1",
            "JOIN",
            "MODEL_LIST",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Model",
            "=",
            "T2",
            ".",
            "Model",
            "GROUP",
            "BY",
            "T2",
            ".",
            "Model",
            "HAVING",
            "count",
            "(",
            "DISTINCT",
            "T1",
            ".",
            "Make",
            ")",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "cnt",
            ")",
            "FROM",
            "(",
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "T3",
            ".",
            "Make",
            ")",
            "AS",
            "cnt",
            "FROM",
            "CAR_NAMES",
            "AS",
            "T3",
            "JOIN",
            "MODEL_LIST",
            "AS",
            "T4",
            "ON",
            "T3",
            ".",
            "Model",
            "=",
            "T4",
            ".",
            "Model",
            "GROUP",
            "BY",
            "T4",
            ".",
            "Model",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "modelid",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "group",
            "by",
            "t2",
            ".",
            "model",
            "having",
            "count",
            "(",
            "distinct",
            "t1",
            ".",
            "make",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "cnt",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "distinct",
            "t3",
            ".",
            "make",
            ")",
            "as",
            "cnt",
            "from",
            "car_names",
            "as",
            "t3",
            "join",
            "model_list",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "model",
            "=",
            "t4",
            ".",
            "model",
            "group",
            "by",
            "t4",
            ".",
            "model",
            ")",
            ")"
        ],
        "question": "Which model id has the most different versions(makes) of cars?",
        "question_toks": [
            "Which",
            "model",
            "id",
            "has",
            "the",
            "most",
            "different",
            "versions",
            "(",
            "makes",
            ")",
            "of",
            "cars",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 142,
        "query": "SELECT T2.ModelId FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model GROUP BY T2.Model HAVING count(DISTINCT T1.Make) = (SELECT max(cnt) FROM (SELECT count(DISTINCT T3.Make) AS cnt FROM CAR_NAMES AS T3 JOIN MODEL_LIST AS T4 ON T3.Model = T4.Model GROUP BY T4.Model));",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "ModelId",
            "FROM",
            "CAR_NAMES",
            "AS",
            "T1",
            "JOIN",
            "MODEL_LIST",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Model",
            "=",
            "T2",
            ".",
            "Model",
            "GROUP",
            "BY",
            "T2",
            ".",
            "Model",
            "HAVING",
            "count",
            "(",
            "DISTINCT",
            "T1",
            ".",
            "Make",
            ")",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "cnt",
            ")",
            "FROM",
            "(",
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "T3",
            ".",
            "Make",
            ")",
            "AS",
            "cnt",
            "FROM",
            "CAR_NAMES",
            "AS",
            "T3",
            "JOIN",
            "MODEL_LIST",
            "AS",
            "T4",
            "ON",
            "T3",
            ".",
            "Model",
            "=",
            "T4",
            ".",
            "Model",
            "GROUP",
            "BY",
            "T4",
            ".",
            "Model",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "modelid",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "group",
            "by",
            "t2",
            ".",
            "model",
            "having",
            "count",
            "(",
            "distinct",
            "t1",
            ".",
            "make",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "cnt",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "distinct",
            "t3",
            ".",
            "make",
            ")",
            "as",
            "cnt",
            "from",
            "car_names",
            "as",
            "t3",
            "join",
            "model_list",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "model",
            "=",
            "t4",
            ".",
            "model",
            "group",
            "by",
            "t4",
            ".",
            "model",
            ")",
            ")"
        ],
        "question": "What model id appears most in the different versions(makes) of cars?",
        "question_toks": [
            "What",
            "model",
            "id",
            "appears",
            "most",
            "in",
            "the",
            "different",
            "versions",
            "(",
            "makes",
            ")",
            "of",
            "cars",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 143,
        "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders > 4;",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "CARS_DATA",
            "WHERE",
            "Cylinders",
            ">",
            "4"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data",
            "where",
            "cylinders",
            ">",
            "value"
        ],
        "question": "How many cars have more than 4 cylinders?",
        "question_toks": [
            "How",
            "many",
            "cars",
            "have",
            "more",
            "than",
            "4",
            "cylinders",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 144,
        "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "CARS_DATA",
            "WHERE",
            "Cylinders",
            ">",
            "4"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data",
            "where",
            "cylinders",
            ">",
            "value"
        ],
        "question": "What is the number of cars with more than 4 cylinders?",
        "question_toks": [
            "What",
            "is",
            "the",
            "number",
            "of",
            "cars",
            "with",
            "more",
            "than",
            "4",
            "cylinders",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 145,
        "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR = 1980;",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "CARS_DATA",
            "WHERE",
            "YEAR",
            "=",
            "1980"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data",
            "where",
            "year",
            "=",
            "value"
        ],
        "question": "how many cars were produced in 1980?",
        "question_toks": [
            "how",
            "many",
            "cars",
            "were",
            "produced",
            "in",
            "1980",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 146,
        "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR = 1980;",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "CARS_DATA",
            "WHERE",
            "YEAR",
            "=",
            "1980"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data",
            "where",
            "year",
            "=",
            "value"
        ],
        "question": "In 1980, how many cars were made?",
        "question_toks": [
            "In",
            "1980",
            ",",
            "how",
            "many",
            "cars",
            "were",
            "made",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 147,
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company';",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "CAR_MAKERS",
            "AS",
            "T1",
            "JOIN",
            "MODEL_LIST",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Id",
            "=",
            "T2",
            ".",
            "Maker",
            "WHERE",
            "T1",
            ".",
            "FullName",
            "=",
            "'American",
            "Motor",
            "Company",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "where",
            "t1",
            ".",
            "fullname",
            "=",
            "value"
        ],
        "question": "How many car models were produced by the maker with full name American Motor Company?",
        "question_toks": [
            "How",
            "many",
            "car",
            "models",
            "were",
            "produced",
            "by",
            "the",
            "maker",
            "with",
            "full",
            "name",
            "American",
            "Motor",
            "Company",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 148,
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company';",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "CAR_MAKERS",
            "AS",
            "T1",
            "JOIN",
            "MODEL_LIST",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Id",
            "=",
            "T2",
            ".",
            "Maker",
            "WHERE",
            "T1",
            ".",
            "FullName",
            "=",
            "'American",
            "Motor",
            "Company",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "where",
            "t1",
            ".",
            "fullname",
            "=",
            "value"
        ],
        "question": "What is the number of car models created by the car maker American Motor Company?",
        "question_toks": [
            "What",
            "is",
            "the",
            "number",
            "of",
            "car",
            "models",
            "created",
            "by",
            "the",
            "car",
            "maker",
            "American",
            "Motor",
            "Company",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 149,
        "query": "SELECT T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) > 3;",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "FullName",
            ",",
            "T1",
            ".",
            "Id",
            "FROM",
            "CAR_MAKERS",
            "AS",
            "T1",
            "JOIN",
            "MODEL_LIST",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Id",
            "=",
            "T2",
            ".",
            "Maker",
            "GROUP",
            "BY",
            "T1",
            ".",
            "Id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "3"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "fullname",
            ",",
            "t1",
            ".",
            "id",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Which makers designed more than 3 car models? List full name and the id.",
        "question_toks": [
            "Which",
            "makers",
            "designed",
            "more",
            "than",
            "3",
            "car",
            "models",
            "?",
            "List",
            "full",
            "name",
            "and",
            "the",
            "id",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 150,
        "query": "SELECT T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) > 3;",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "FullName",
            ",",
            "T1",
            ".",
            "Id",
            "FROM",
            "CAR_MAKERS",
            "AS",
            "T1",
            "JOIN",
            "MODEL_LIST",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Id",
            "=",
            "T2",
            ".",
            "Maker",
            "GROUP",
            "BY",
            "T1",
            ".",
            "Id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "3"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "fullname",
            ",",
            "t1",
            ".",
            "id",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "What are the names and ids of all makers with more than 3 models?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "and",
            "ids",
            "of",
            "all",
            "makers",
            "with",
            "more",
            "than",
            "3",
            "models",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 151,
        "query": "SELECT DISTINCT model FROM model_list WHERE maker IN (SELECT id FROM car_makers WHERE fullname = 'General Motors') OR model IN (SELECT cn.model FROM car_names cn JOIN cars_data cd ON cn.makeid = cd.id WHERE cd.weight > 3500)",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "model",
            "FROM",
            "model_list",
            "WHERE",
            "maker",
            "IN",
            "(",
            "SELECT",
            "id",
            "FROM",
            "car_makers",
            "WHERE",
            "fullname",
            "=",
            "'General",
            "Motors",
            "'",
            ")",
            "OR",
            "model",
            "IN",
            "(",
            "SELECT",
            "cn.model",
            "FROM",
            "car_names",
            "cn",
            "JOIN",
            "cars_data",
            "cd",
            "ON",
            "cn.makeid",
            "=",
            "cd.id",
            "WHERE",
            "cd.weight",
            ">",
            "3500",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "model",
            "from",
            "model_list",
            "where",
            "maker",
            "in",
            "(",
            "select",
            "id",
            "from",
            "car_makers",
            "where",
            "fullname",
            "=",
            "value",
            ")",
            "or",
            "model",
            "in",
            "(",
            "select",
            "cn.model",
            "from",
            "car_names",
            "cn",
            "join",
            "cars_data",
            "cd",
            "on",
            "cn.makeid",
            "=",
            "cd.id",
            "where",
            "cd.weight",
            ">",
            "value",
            ")"
        ],
        "question": "List distinctive models produced by maker with the full name General Motors or distinctive models weighing more than 3500.",
        "question_toks": [
            "List",
            "distinctive",
            "models",
            "produced",
            "by",
            "maker",
            "with",
            "the",
            "full",
            "name",
            "General",
            "Motors",
            "or",
            "distinctive",
            "models",
            "weighing",
            "more",
            "than",
            "3500",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 152,
        "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500;",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T2",
            ".",
            "Model",
            "FROM",
            "CAR_NAMES",
            "AS",
            "T1",
            "JOIN",
            "MODEL_LIST",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Model",
            "=",
            "T2",
            ".",
            "Model",
            "JOIN",
            "CAR_MAKERS",
            "AS",
            "T3",
            "ON",
            "T2",
            ".",
            "Maker",
            "=",
            "T3",
            ".",
            "Id",
            "JOIN",
            "CARS_DATA",
            "AS",
            "T4",
            "ON",
            "T1",
            ".",
            "MakeId",
            "=",
            "T4",
            ".",
            "Id",
            "WHERE",
            "T3",
            ".",
            "FullName",
            "=",
            "'General",
            "Motors",
            "'",
            "OR",
            "T4",
            ".",
            "weight",
            ">",
            "3500"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "t2",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "maker",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "fullname",
            "=",
            "value",
            "or",
            "t4",
            ".",
            "weight",
            ">",
            "value"
        ],
        "question": "What are the different models either created by the car maker General Motors or models that weighed more than 3500?",
        "question_toks": [
            "What",
            "are",
            "the",
            "different",
            "models",
            "either",
            "created",
            "by",
            "the",
            "car",
            "maker",
            "General",
            "Motors",
            "or",
            "models",
            "that",
            "weighed",
            "more",
            "than",
            "3500",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 153,
        "query": "select distinct year from cars_data where weight between 3000 and 4000;",
        "query_toks": [
            "select",
            "distinct",
            "year",
            "from",
            "cars_data",
            "where",
            "weight",
            "between",
            "3000",
            "and",
            "4000"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "year",
            "from",
            "cars_data",
            "where",
            "weight",
            "between",
            "value",
            "and",
            "value"
        ],
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "question_toks": [
            "In",
            "which",
            "years",
            "cars",
            "were",
            "produced",
            "weighing",
            "no",
            "less",
            "than",
            "3000",
            "and",
            "no",
            "more",
            "than",
            "4000",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 154,
        "query": "SELECT year FROM (SELECT year FROM cars_data WHERE weight > 3000 INTERSECT SELECT year FROM cars_data WHERE weight < 4000)",
        "query_toks": [
            "SELECT",
            "year",
            "FROM",
            "(",
            "SELECT",
            "year",
            "FROM",
            "cars_data",
            "WHERE",
            "weight",
            ">",
            "3000",
            "INTERSECT",
            "SELECT",
            "year",
            "FROM",
            "cars_data",
            "WHERE",
            "weight",
            "<",
            "4000",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "year",
            "from",
            "(",
            "select",
            "year",
            "from",
            "cars_data",
            "where",
            "weight",
            ">",
            "value",
            "intersect",
            "select",
            "year",
            "from",
            "cars_data",
            "where",
            "weight",
            "<",
            "value",
            ")"
        ],
        "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "question_toks": [
            "What",
            "are",
            "the",
            "different",
            "years",
            "in",
            "which",
            "there",
            "were",
            "cars",
            "produced",
            "that",
            "weighed",
            "less",
            "than",
            "4000",
            "and",
            "also",
            "cars",
            "that",
            "weighted",
            "more",
            "than",
            "3000",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 155,
        "query": "SELECT d.horsepower FROM cars_data AS d WHERE d.accelerate = (SELECT MAX(accelerate) FROM cars_data)",
        "query_toks": [
            "SELECT",
            "d.horsepower",
            "FROM",
            "cars_data",
            "AS",
            "d",
            "WHERE",
            "d.accelerate",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "accelerate",
            ")",
            "FROM",
            "cars_data",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "d.horsepower",
            "from",
            "cars_data",
            "as",
            "d",
            "where",
            "d.accelerate",
            "=",
            "(",
            "select",
            "max",
            "(",
            "accelerate",
            ")",
            "from",
            "cars_data",
            ")"
        ],
        "question": "What is the horsepower of the car with the largest accelerate?",
        "question_toks": [
            "What",
            "is",
            "the",
            "horsepower",
            "of",
            "the",
            "car",
            "with",
            "the",
            "largest",
            "accelerate",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 156,
        "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 WHERE T1.accelerate = (SELECT MAX(T2.accelerate) FROM CARS_DATA AS T2)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "horsepower",
            "FROM",
            "CARS_DATA",
            "AS",
            "T1",
            "WHERE",
            "T1",
            ".",
            "accelerate",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "T2",
            ".",
            "accelerate",
            ")",
            "FROM",
            "CARS_DATA",
            "AS",
            "T2",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "horsepower",
            "from",
            "cars_data",
            "as",
            "t1",
            "where",
            "t1",
            ".",
            "accelerate",
            "=",
            "(",
            "select",
            "max",
            "(",
            "t2",
            ".",
            "accelerate",
            ")",
            "from",
            "cars_data",
            "as",
            "t2",
            ")"
        ],
        "question": "What is the horsepower of the car with the greatest accelerate? If there is a tie, return all of them.",
        "question_toks": [
            "What",
            "is",
            "the",
            "horsepower",
            "of",
            "the",
            "car",
            "with",
            "the",
            "greatest",
            "accelerate",
            "?",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "return",
            "all",
            "of",
            "them",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 157,
        "query": "SELECT Distinct T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' and T1.Accelerate = (SELECT min(T3.Accelerate) FROM cars_data AS T3)",
        "query_toks": [
            "SELECT",
            "Distinct",
            "T1",
            ".",
            "cylinders",
            "FROM",
            "CARS_DATA",
            "AS",
            "T1",
            "JOIN",
            "CAR_NAMES",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Id",
            "=",
            "T2",
            ".",
            "MakeId",
            "WHERE",
            "T2",
            ".",
            "Model",
            "=",
            "'volvo",
            "'",
            "and",
            "T1",
            ".",
            "Accelerate",
            "=",
            "(",
            "SELECT",
            "min",
            "(",
            "T3",
            ".",
            "Accelerate",
            ")",
            "FROM",
            "cars_data",
            "AS",
            "T3",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "t1",
            ".",
            "cylinders",
            "from",
            "cars_data",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "makeid",
            "where",
            "t2",
            ".",
            "model",
            "=",
            "value",
            "and",
            "t1",
            ".",
            "accelerate",
            "=",
            "(",
            "select",
            "min",
            "(",
            "t3",
            ".",
            "accelerate",
            ")",
            "from",
            "cars_data",
            "as",
            "t3",
            ")"
        ],
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "question_toks": [
            "For",
            "model",
            "volvo",
            ",",
            "how",
            "many",
            "cylinders",
            "does",
            "the",
            "car",
            "with",
            "the",
            "least",
            "accelerate",
            "have",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 158,
        "query": "SELECT Distinct T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' and T1.Accelerate = (SELECT min(T3.Accelerate) FROM cars_data AS T3)",
        "query_toks": [
            "SELECT",
            "Distinct",
            "T1",
            ".",
            "cylinders",
            "FROM",
            "CARS_DATA",
            "AS",
            "T1",
            "JOIN",
            "CAR_NAMES",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Id",
            "=",
            "T2",
            ".",
            "MakeId",
            "WHERE",
            "T2",
            ".",
            "Model",
            "=",
            "'volvo",
            "'",
            "and",
            "T1",
            ".",
            "Accelerate",
            "=",
            "(",
            "SELECT",
            "min",
            "(",
            "T3",
            ".",
            "Accelerate",
            ")",
            "FROM",
            "cars_data",
            "AS",
            "T3",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "t1",
            ".",
            "cylinders",
            "from",
            "cars_data",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "makeid",
            "where",
            "t2",
            ".",
            "model",
            "=",
            "value",
            "and",
            "t1",
            ".",
            "accelerate",
            "=",
            "(",
            "select",
            "min",
            "(",
            "t3",
            ".",
            "accelerate",
            ")",
            "from",
            "cars_data",
            "as",
            "t3",
            ")"
        ],
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "question_toks": [
            "For",
            "a",
            "volvo",
            "model",
            ",",
            "how",
            "many",
            "cylinders",
            "does",
            "the",
            "version",
            "with",
            "least",
            "accelerate",
            "have",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 159,
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate > (SELECT min(Accelerate) FROM CARS_DATA WHERE Horsepower = (SELECT max(Horsepower) FROM cars_data));",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "CARS_DATA",
            "WHERE",
            "Accelerate",
            ">",
            "(",
            "SELECT",
            "min",
            "(",
            "Accelerate",
            ")",
            "FROM",
            "CARS_DATA",
            "WHERE",
            "Horsepower",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "Horsepower",
            ")",
            "FROM",
            "cars_data",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data",
            "where",
            "accelerate",
            ">",
            "(",
            "select",
            "min",
            "(",
            "accelerate",
            ")",
            "from",
            "cars_data",
            "where",
            "horsepower",
            "=",
            "(",
            "select",
            "max",
            "(",
            "horsepower",
            ")",
            "from",
            "cars_data",
            ")",
            ")"
        ],
        "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "question_toks": [
            "How",
            "many",
            "cars",
            "have",
            "a",
            "larger",
            "accelerate",
            "than",
            "the",
            "car",
            "with",
            "the",
            "largest",
            "horsepower",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 160,
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate > (SELECT min(Accelerate) FROM CARS_DATA WHERE Horsepower = (SELECT max(Horsepower) FROM cars_data));",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "CARS_DATA",
            "WHERE",
            "Accelerate",
            ">",
            "(",
            "SELECT",
            "min",
            "(",
            "Accelerate",
            ")",
            "FROM",
            "CARS_DATA",
            "WHERE",
            "Horsepower",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "Horsepower",
            ")",
            "FROM",
            "cars_data",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data",
            "where",
            "accelerate",
            ">",
            "(",
            "select",
            "min",
            "(",
            "accelerate",
            ")",
            "from",
            "cars_data",
            "where",
            "horsepower",
            "=",
            "(",
            "select",
            "max",
            "(",
            "horsepower",
            ")",
            "from",
            "cars_data",
            ")",
            ")"
        ],
        "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "question_toks": [
            "What",
            "is",
            "the",
            "number",
            "of",
            "cars",
            "with",
            "a",
            "greater",
            "accelerate",
            "than",
            "the",
            "one",
            "with",
            "the",
            "most",
            "horsepower",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 161,
        "query": "SELECT COUNT(*) FROM (SELECT country FROM car_makers GROUP BY country HAVING COUNT(maker) > 2)",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "(",
            "SELECT",
            "country",
            "FROM",
            "car_makers",
            "GROUP",
            "BY",
            "country",
            "HAVING",
            "COUNT",
            "(",
            "maker",
            ")",
            ">",
            "2",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "(",
            "select",
            "country",
            "from",
            "car_makers",
            "group",
            "by",
            "country",
            "having",
            "count",
            "(",
            "maker",
            ")",
            ">",
            "value",
            ")"
        ],
        "question": "How many countries has more than 2 car makers ?",
        "question_toks": [
            "How",
            "many",
            "countries",
            "has",
            "more",
            "than",
            "2",
            "car",
            "makers",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 162,
        "query": "SELECT COUNT(DISTINCT c.countryid) FROM countries c INNER JOIN car_makers cm ON c.countryid = cm.country GROUP BY c.countryid HAVING COUNT(cm.id) > 2",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "DISTINCT",
            "c.countryid",
            ")",
            "FROM",
            "countries",
            "c",
            "INNER",
            "JOIN",
            "car_makers",
            "cm",
            "ON",
            "c.countryid",
            "=",
            "cm.country",
            "GROUP",
            "BY",
            "c.countryid",
            "HAVING",
            "COUNT",
            "(",
            "cm.id",
            ")",
            ">",
            "2"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "c.countryid",
            ")",
            "from",
            "countries",
            "c",
            "inner",
            "join",
            "car_makers",
            "cm",
            "on",
            "c.countryid",
            "=",
            "cm.country",
            "group",
            "by",
            "c.countryid",
            "having",
            "count",
            "(",
            "cm.id",
            ")",
            ">",
            "value"
        ],
        "question": "What is the number of countries with more than 2 car makers ?",
        "question_toks": [
            "What",
            "is",
            "the",
            "number",
            "of",
            "countries",
            "with",
            "more",
            "than",
            "2",
            "car",
            "makers",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 163,
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "CARS_DATA",
            "WHERE",
            "Cylinders",
            ">",
            "6"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data",
            "where",
            "cylinders",
            ">",
            "value"
        ],
        "question": "How many cars has over 6 cylinders?",
        "question_toks": [
            "How",
            "many",
            "cars",
            "has",
            "over",
            "6",
            "cylinders",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 164,
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders > 6;",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "CARS_DATA",
            "WHERE",
            "Cylinders",
            ">",
            "6"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data",
            "where",
            "cylinders",
            ">",
            "value"
        ],
        "question": "What is the number of carsw ith over 6 cylinders?",
        "question_toks": [
            "What",
            "is",
            "the",
            "number",
            "of",
            "carsw",
            "ith",
            "over",
            "6",
            "cylinders",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 165,
        "query": "SELECT DISTINCT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 AND T2.horsepower = (SELECT max(T3.Horsepower) FROM CARS_DATA AS T3 WHERE T3.Cylinders = 4)",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1",
            ".",
            "Model",
            "FROM",
            "CAR_NAMES",
            "AS",
            "T1",
            "JOIN",
            "CARS_DATA",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "MakeId",
            "=",
            "T2",
            ".",
            "Id",
            "WHERE",
            "T2",
            ".",
            "Cylinders",
            "=",
            "4",
            "AND",
            "T2",
            ".",
            "horsepower",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "T3",
            ".",
            "Horsepower",
            ")",
            "FROM",
            "CARS_DATA",
            "AS",
            "T3",
            "WHERE",
            "T3",
            ".",
            "Cylinders",
            "=",
            "4",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "t1",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "cars_data",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "cylinders",
            "=",
            "value",
            "and",
            "t2",
            ".",
            "horsepower",
            "=",
            "(",
            "select",
            "max",
            "(",
            "t3",
            ".",
            "horsepower",
            ")",
            "from",
            "cars_data",
            "as",
            "t3",
            "where",
            "t3",
            ".",
            "cylinders",
            "=",
            "value",
            ")"
        ],
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "question_toks": [
            "For",
            "the",
            "cars",
            "with",
            "4",
            "cylinders",
            ",",
            "which",
            "model",
            "has",
            "the",
            "largest",
            "horsepower",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 166,
        "query": "SELECT DISTINCT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 AND T2.horsepower = (SELECT max(T3.Horsepower) FROM CARS_DATA AS T3 WHERE T3.Cylinders = 4)",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1",
            ".",
            "Model",
            "FROM",
            "CAR_NAMES",
            "AS",
            "T1",
            "JOIN",
            "CARS_DATA",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "MakeId",
            "=",
            "T2",
            ".",
            "Id",
            "WHERE",
            "T2",
            ".",
            "Cylinders",
            "=",
            "4",
            "AND",
            "T2",
            ".",
            "horsepower",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "T3",
            ".",
            "Horsepower",
            ")",
            "FROM",
            "CARS_DATA",
            "AS",
            "T3",
            "WHERE",
            "T3",
            ".",
            "Cylinders",
            "=",
            "4",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "t1",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "cars_data",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "cylinders",
            "=",
            "value",
            "and",
            "t2",
            ".",
            "horsepower",
            "=",
            "(",
            "select",
            "max",
            "(",
            "t3",
            ".",
            "horsepower",
            ")",
            "from",
            "cars_data",
            "as",
            "t3",
            "where",
            "t3",
            ".",
            "cylinders",
            "=",
            "value",
            ")"
        ],
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "question_toks": [
            "For",
            "all",
            "of",
            "the",
            "4",
            "cylinder",
            "cars",
            ",",
            "which",
            "model",
            "has",
            "the",
            "most",
            "horsepower",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 167,
        "query": "SELECT T2.MakeId , T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Horsepower > (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders <= 3;",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "MakeId",
            ",",
            "T2",
            ".",
            "Make",
            "FROM",
            "CARS_DATA",
            "AS",
            "T1",
            "JOIN",
            "CAR_NAMES",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Id",
            "=",
            "T2",
            ".",
            "MakeId",
            "WHERE",
            "T1",
            ".",
            "Horsepower",
            ">",
            "(",
            "SELECT",
            "min",
            "(",
            "Horsepower",
            ")",
            "FROM",
            "CARS_DATA",
            ")",
            "AND",
            "T1",
            ".",
            "Cylinders",
            "<",
            "=",
            "3"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "makeid",
            ",",
            "t2",
            ".",
            "make",
            "from",
            "cars_data",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "makeid",
            "where",
            "t1",
            ".",
            "horsepower",
            ">",
            "(",
            "select",
            "min",
            "(",
            "horsepower",
            ")",
            "from",
            "cars_data",
            ")",
            "and",
            "t1",
            ".",
            "cylinders",
            "<",
            "=",
            "value"
        ],
        "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "question_toks": [
            "Among",
            "the",
            "cars",
            "with",
            "more",
            "than",
            "lowest",
            "horsepower",
            ",",
            "which",
            "ones",
            "do",
            "not",
            "have",
            "more",
            "than",
            "3",
            "cylinders",
            "?",
            "List",
            "the",
            "car",
            "makeid",
            "and",
            "make",
            "name",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 168,
        "query": "select t2.makeid , t2.make from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.horsepower > (select min(horsepower) from cars_data) and t1.cylinders < 4;",
        "query_toks": [
            "select",
            "t2",
            ".",
            "makeid",
            ",",
            "t2",
            ".",
            "make",
            "from",
            "cars_data",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "makeid",
            "where",
            "t1",
            ".",
            "horsepower",
            ">",
            "(",
            "select",
            "min",
            "(",
            "horsepower",
            ")",
            "from",
            "cars_data",
            ")",
            "and",
            "t1",
            ".",
            "cylinders",
            "<",
            "4"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "makeid",
            ",",
            "t2",
            ".",
            "make",
            "from",
            "cars_data",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "makeid",
            "where",
            "t1",
            ".",
            "horsepower",
            ">",
            "(",
            "select",
            "min",
            "(",
            "horsepower",
            ")",
            "from",
            "cars_data",
            ")",
            "and",
            "t1",
            ".",
            "cylinders",
            "<",
            "value"
        ],
        "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "question_toks": [
            "Among",
            "the",
            "cars",
            "that",
            "do",
            "not",
            "have",
            "the",
            "minimum",
            "horsepower",
            ",",
            "what",
            "are",
            "the",
            "make",
            "ids",
            "and",
            "names",
            "of",
            "all",
            "those",
            "with",
            "less",
            "than",
            "4",
            "cylinders",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 169,
        "query": "select max(mpg) from cars_data where cylinders = 8 or year < 1980",
        "query_toks": [
            "select",
            "max",
            "(",
            "mpg",
            ")",
            "from",
            "cars_data",
            "where",
            "cylinders",
            "=",
            "8",
            "or",
            "year",
            "<",
            "1980"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "mpg",
            ")",
            "from",
            "cars_data",
            "where",
            "cylinders",
            "=",
            "value",
            "or",
            "year",
            "<",
            "value"
        ],
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "question_toks": [
            "What",
            "is",
            "the",
            "maximum",
            "miles",
            "per",
            "gallon",
            "of",
            "the",
            "car",
            "with",
            "8",
            "cylinders",
            "or",
            "produced",
            "before",
            "1980",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 170,
        "query": "select max(mpg) from cars_data where cylinders = 8 or year < 1980",
        "query_toks": [
            "select",
            "max",
            "(",
            "mpg",
            ")",
            "from",
            "cars_data",
            "where",
            "cylinders",
            "=",
            "8",
            "or",
            "year",
            "<",
            "1980"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "mpg",
            ")",
            "from",
            "cars_data",
            "where",
            "cylinders",
            "=",
            "value",
            "or",
            "year",
            "<",
            "value"
        ],
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "question_toks": [
            "What",
            "is",
            "the",
            "maximum",
            "mpg",
            "of",
            "the",
            "cars",
            "that",
            "had",
            "8",
            "cylinders",
            "or",
            "that",
            "were",
            "produced",
            "before",
            "1980",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 171,
        "query": "SELECT DISTINCT T1.ModelId FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company'",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1",
            ".",
            "ModelId",
            "FROM",
            "MODEL_LIST",
            "AS",
            "T1",
            "JOIN",
            "CAR_NAMES",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Model",
            "=",
            "T2",
            ".",
            "Model",
            "JOIN",
            "CARS_DATA",
            "AS",
            "T3",
            "ON",
            "T2",
            ".",
            "MakeId",
            "=",
            "T3",
            ".",
            "Id",
            "JOIN",
            "CAR_MAKERS",
            "AS",
            "T4",
            "ON",
            "T1",
            ".",
            "Maker",
            "=",
            "T4",
            ".",
            "Id",
            "WHERE",
            "T3",
            ".",
            "weight",
            "<",
            "3500",
            "AND",
            "T4",
            ".",
            "FullName",
            "!",
            "=",
            "'Ford",
            "Motor",
            "Company",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "t1",
            ".",
            "modelid",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "cars_data",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "makeid",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "car_makers",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "maker",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "weight",
            "<",
            "value",
            "and",
            "t4",
            ".",
            "fullname",
            "!",
            "=",
            "value"
        ],
        "question": "Which model ids are lighter than 3500 but not built by the maker whose full name is 'Ford Motor Company'?",
        "question_toks": [
            "Which",
            "model",
            "ids",
            "are",
            "lighter",
            "than",
            "3500",
            "but",
            "not",
            "built",
            "by",
            "the",
            "maker",
            "whose",
            "full",
            "name",
            "is",
            "'",
            "Ford",
            "Motor",
            "Company",
            "'?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 172,
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company';",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1",
            ".",
            "model",
            "FROM",
            "MODEL_LIST",
            "AS",
            "T1",
            "JOIN",
            "CAR_NAMES",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Model",
            "=",
            "T2",
            ".",
            "Model",
            "JOIN",
            "CARS_DATA",
            "AS",
            "T3",
            "ON",
            "T2",
            ".",
            "MakeId",
            "=",
            "T3",
            ".",
            "Id",
            "JOIN",
            "CAR_MAKERS",
            "AS",
            "T4",
            "ON",
            "T1",
            ".",
            "Maker",
            "=",
            "T4",
            ".",
            "Id",
            "WHERE",
            "T3",
            ".",
            "weight",
            "<",
            "3500",
            "AND",
            "T4",
            ".",
            "FullName",
            "!",
            "=",
            "'Ford",
            "Motor",
            "Company",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "t1",
            ".",
            "model",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "cars_data",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "makeid",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "car_makers",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "maker",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "weight",
            "<",
            "value",
            "and",
            "t4",
            ".",
            "fullname",
            "!",
            "=",
            "value"
        ],
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "question_toks": [
            "What",
            "are",
            "the",
            "different",
            "models",
            "wthat",
            "are",
            "lighter",
            "than",
            "3500",
            "but",
            "were",
            "not",
            "built",
            "by",
            "the",
            "Ford",
            "Motor",
            "Company",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 173,
        "query": "SELECT countryname FROM countries WHERE countryid NOT IN (SELECT country FROM car_makers)",
        "query_toks": [
            "SELECT",
            "countryname",
            "FROM",
            "countries",
            "WHERE",
            "countryid",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "country",
            "FROM",
            "car_makers",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "countryname",
            "from",
            "countries",
            "where",
            "countryid",
            "not",
            "in",
            "(",
            "select",
            "country",
            "from",
            "car_makers",
            ")"
        ],
        "question": "What are the name of the countries where there is not a single car maker?",
        "question_toks": [
            "What",
            "are",
            "the",
            "name",
            "of",
            "the",
            "countries",
            "where",
            "there",
            "is",
            "not",
            "a",
            "single",
            "car",
            "maker",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 174,
        "query": "SELECT countryname FROM countries WHERE countryid NOT IN (SELECT country FROM car_makers)",
        "query_toks": [
            "SELECT",
            "countryname",
            "FROM",
            "countries",
            "WHERE",
            "countryid",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "country",
            "FROM",
            "car_makers",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "countryname",
            "from",
            "countries",
            "where",
            "countryid",
            "not",
            "in",
            "(",
            "select",
            "country",
            "from",
            "car_makers",
            ")"
        ],
        "question": "What are the names of the countries with no car makers?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "the",
            "countries",
            "with",
            "no",
            "car",
            "makers",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 175,
        "query": "select t1.id , t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count(*) >= 2 intersect select t1.id , t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker join car_names as t3 on t2.model = t3.model group by t1.id having count(*) > 3;",
        "query_toks": [
            "select",
            "t1",
            ".",
            "id",
            ",",
            "t1",
            ".",
            "maker",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2",
            "intersect",
            "select",
            "t1",
            ".",
            "id",
            ",",
            "t1",
            ".",
            "maker",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "join",
            "car_names",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "model",
            "=",
            "t3",
            ".",
            "model",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "3"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "id",
            ",",
            "t1",
            ".",
            "maker",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value",
            "intersect",
            "select",
            "t1",
            ".",
            "id",
            ",",
            "t1",
            ".",
            "maker",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "join",
            "car_names",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "model",
            "=",
            "t3",
            ".",
            "model",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Which are the car makers that produce at least 2 models and more than 3 cars? List the id and the maker.",
        "question_toks": [
            "Which",
            "are",
            "the",
            "car",
            "makers",
            "that",
            "produce",
            "at",
            "least",
            "2",
            "models",
            "and",
            "more",
            "than",
            "3",
            "cars",
            "?",
            "List",
            "the",
            "id",
            "and",
            "the",
            "maker",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 176,
        "query": "SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) >= 2 INTERSECT SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model GROUP BY T1.Id HAVING count(*) > 3;",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "Id",
            ",",
            "T1",
            ".",
            "Maker",
            "FROM",
            "CAR_MAKERS",
            "AS",
            "T1",
            "JOIN",
            "MODEL_LIST",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Id",
            "=",
            "T2",
            ".",
            "Maker",
            "GROUP",
            "BY",
            "T1",
            ".",
            "Id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2",
            "INTERSECT",
            "SELECT",
            "T1",
            ".",
            "Id",
            ",",
            "T1",
            ".",
            "Maker",
            "FROM",
            "CAR_MAKERS",
            "AS",
            "T1",
            "JOIN",
            "MODEL_LIST",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Id",
            "=",
            "T2",
            ".",
            "Maker",
            "JOIN",
            "CAR_NAMES",
            "AS",
            "T3",
            "ON",
            "T2",
            ".",
            "model",
            "=",
            "T3",
            ".",
            "model",
            "GROUP",
            "BY",
            "T1",
            ".",
            "Id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "3"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "id",
            ",",
            "t1",
            ".",
            "maker",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value",
            "intersect",
            "select",
            "t1",
            ".",
            "id",
            ",",
            "t1",
            ".",
            "maker",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "join",
            "car_names",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "model",
            "=",
            "t3",
            ".",
            "model",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "question_toks": [
            "What",
            "are",
            "the",
            "ids",
            "and",
            "makers",
            "of",
            "all",
            "car",
            "makers",
            "that",
            "produce",
            "at",
            "least",
            "2",
            "models",
            "and",
            "make",
            "more",
            "than",
            "3",
            "cars",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 177,
        "query": "SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.countryId HAVING count(*) > 3 UNION SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country JOIN MODEL_LIST AS T3 ON T2.Id = T3.Maker WHERE T3.Model = 'fiat';",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "countryId",
            ",",
            "T1",
            ".",
            "CountryName",
            "FROM",
            "Countries",
            "AS",
            "T1",
            "JOIN",
            "CAR_MAKERS",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "CountryId",
            "=",
            "T2",
            ".",
            "Country",
            "GROUP",
            "BY",
            "T1",
            ".",
            "countryId",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "3",
            "UNION",
            "SELECT",
            "T1",
            ".",
            "countryId",
            ",",
            "T1",
            ".",
            "CountryName",
            "FROM",
            "Countries",
            "AS",
            "T1",
            "JOIN",
            "CAR_MAKERS",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "CountryId",
            "=",
            "T2",
            ".",
            "Country",
            "JOIN",
            "MODEL_LIST",
            "AS",
            "T3",
            "ON",
            "T2",
            ".",
            "Id",
            "=",
            "T3",
            ".",
            "Maker",
            "WHERE",
            "T3",
            ".",
            "Model",
            "=",
            "'fiat",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "countryid",
            ",",
            "t1",
            ".",
            "countryname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t2",
            ".",
            "country",
            "group",
            "by",
            "t1",
            ".",
            "countryid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value",
            "union",
            "select",
            "t1",
            ".",
            "countryid",
            ",",
            "t1",
            ".",
            "countryname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t2",
            ".",
            "country",
            "join",
            "model_list",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "id",
            "=",
            "t3",
            ".",
            "maker",
            "where",
            "t3",
            ".",
            "model",
            "=",
            "value"
        ],
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "question_toks": [
            "What",
            "are",
            "the",
            "id",
            "and",
            "names",
            "of",
            "the",
            "countries",
            "which",
            "have",
            "more",
            "than",
            "3",
            "car",
            "makers",
            "or",
            "produce",
            "the",
            "'fiat",
            "'",
            "model",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "car_1",
        "id": 178,
        "query": "select t1.countryid , t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 3 union select t1.countryid , t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country join model_list as t3 on t2.id = t3.maker where t3.model = 'fiat';",
        "query_toks": [
            "select",
            "t1",
            ".",
            "countryid",
            ",",
            "t1",
            ".",
            "countryname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t2",
            ".",
            "country",
            "group",
            "by",
            "t1",
            ".",
            "countryid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "3",
            "union",
            "select",
            "t1",
            ".",
            "countryid",
            ",",
            "t1",
            ".",
            "countryname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t2",
            ".",
            "country",
            "join",
            "model_list",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "id",
            "=",
            "t3",
            ".",
            "maker",
            "where",
            "t3",
            ".",
            "model",
            "=",
            "'fiat",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "countryid",
            ",",
            "t1",
            ".",
            "countryname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t2",
            ".",
            "country",
            "group",
            "by",
            "t1",
            ".",
            "countryid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value",
            "union",
            "select",
            "t1",
            ".",
            "countryid",
            ",",
            "t1",
            ".",
            "countryname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t2",
            ".",
            "country",
            "join",
            "model_list",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "id",
            "=",
            "t3",
            ".",
            "maker",
            "where",
            "t3",
            ".",
            "model",
            "=",
            "value"
        ],
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "question_toks": [
            "What",
            "are",
            "the",
            "ids",
            "and",
            "names",
            "of",
            "all",
            "countries",
            "that",
            "either",
            "have",
            "more",
            "than",
            "3",
            "car",
            "makers",
            "or",
            "produce",
            "fiat",
            "model",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 179,
        "query": "SELECT Country FROM AIRLINES WHERE Airline = 'JetBlue Airways'",
        "query_toks": [
            "SELECT",
            "Country",
            "FROM",
            "AIRLINES",
            "WHERE",
            "Airline",
            "=",
            "'JetBlue",
            "Airways",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "country",
            "from",
            "airlines",
            "where",
            "airline",
            "=",
            "value"
        ],
        "question": "Which country does Airline 'JetBlue Airways' belong to?",
        "question_toks": [
            "Which",
            "country",
            "does",
            "Airline",
            "``",
            "JetBlue",
            "Airways",
            "''",
            "belong",
            "to",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 180,
        "query": "SELECT Country FROM AIRLINES WHERE Airline = 'JetBlue Airways'",
        "query_toks": [
            "SELECT",
            "Country",
            "FROM",
            "AIRLINES",
            "WHERE",
            "Airline",
            "=",
            "'JetBlue",
            "Airways",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "country",
            "from",
            "airlines",
            "where",
            "airline",
            "=",
            "value"
        ],
        "question": "What country is Jetblue Airways affiliated with?",
        "question_toks": [
            "What",
            "country",
            "is",
            "Jetblue",
            "Airways",
            "affiliated",
            "with",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 181,
        "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline = 'JetBlue Airways'",
        "query_toks": [
            "SELECT",
            "Abbreviation",
            "FROM",
            "AIRLINES",
            "WHERE",
            "Airline",
            "=",
            "'JetBlue",
            "Airways",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "abbreviation",
            "from",
            "airlines",
            "where",
            "airline",
            "=",
            "value"
        ],
        "question": "What is the abbreviation of Airline 'JetBlue Airways'?",
        "question_toks": [
            "What",
            "is",
            "the",
            "abbreviation",
            "of",
            "Airline",
            "``",
            "JetBlue",
            "Airways",
            "''",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 182,
        "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline = 'JetBlue Airways'",
        "query_toks": [
            "SELECT",
            "Abbreviation",
            "FROM",
            "AIRLINES",
            "WHERE",
            "Airline",
            "=",
            "'JetBlue",
            "Airways",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "abbreviation",
            "from",
            "airlines",
            "where",
            "airline",
            "=",
            "value"
        ],
        "question": "Which abbreviation corresponds to Jetblue Airways?",
        "question_toks": [
            "Which",
            "abbreviation",
            "corresponds",
            "to",
            "Jetblue",
            "Airways",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 183,
        "query": "SELECT DISTINCT Airline , Abbreviation FROM AIRLINES WHERE Country = 'USA'",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "Airline",
            ",",
            "Abbreviation",
            "FROM",
            "AIRLINES",
            "WHERE",
            "Country",
            "=",
            "'USA",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "airline",
            ",",
            "abbreviation",
            "from",
            "airlines",
            "where",
            "country",
            "=",
            "value"
        ],
        "question": "List all unique airline names and their abbreviations in the USA.",
        "question_toks": [
            "List",
            "all",
            "unique",
            "airline",
            "names",
            "and",
            "their",
            "abbreviations",
            "in",
            "the",
            "USA",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 184,
        "query": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = 'USA'",
        "query_toks": [
            "SELECT",
            "Airline",
            ",",
            "Abbreviation",
            "FROM",
            "AIRLINES",
            "WHERE",
            "Country",
            "=",
            "'USA",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "airline",
            ",",
            "abbreviation",
            "from",
            "airlines",
            "where",
            "country",
            "=",
            "value"
        ],
        "question": "What are the airline names and abbreviations for airlines in the USA?",
        "question_toks": [
            "What",
            "are",
            "the",
            "airline",
            "names",
            "and",
            "abbreviations",
            "for",
            "airlines",
            "in",
            "the",
            "USA",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 185,
        "query": "SELECT AirportCode , AirportName FROM AIRPORTS WHERE city = 'Anthony'",
        "query_toks": [
            "SELECT",
            "AirportCode",
            ",",
            "AirportName",
            "FROM",
            "AIRPORTS",
            "WHERE",
            "city",
            "=",
            "'Anthony",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "airportcode",
            ",",
            "airportname",
            "from",
            "airports",
            "where",
            "city",
            "=",
            "value"
        ],
        "question": "List the airport code and name in the city of Anthony.",
        "question_toks": [
            "List",
            "the",
            "airport",
            "code",
            "and",
            "name",
            "in",
            "the",
            "city",
            "of",
            "Anthony",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 186,
        "query": "SELECT AirportCode , AirportName FROM AIRPORTS WHERE city = 'Anthony'",
        "query_toks": [
            "SELECT",
            "AirportCode",
            ",",
            "AirportName",
            "FROM",
            "AIRPORTS",
            "WHERE",
            "city",
            "=",
            "'Anthony",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "airportcode",
            ",",
            "airportname",
            "from",
            "airports",
            "where",
            "city",
            "=",
            "value"
        ],
        "question": "Give the airport code and airport name corresonding to the city Anthony.",
        "question_toks": [
            "Give",
            "the",
            "airport",
            "code",
            "and",
            "airport",
            "name",
            "corresonding",
            "to",
            "the",
            "city",
            "Anthony",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 187,
        "query": "SELECT count(*) FROM AIRLINES",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "AIRLINES"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines"
        ],
        "question": "How many airlines do we have?",
        "question_toks": [
            "How",
            "many",
            "airlines",
            "do",
            "we",
            "have",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 188,
        "query": "SELECT count(*) FROM AIRLINES",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "AIRLINES"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines"
        ],
        "question": "What is the total number of airlines?",
        "question_toks": [
            "What",
            "is",
            "the",
            "total",
            "number",
            "of",
            "airlines",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 189,
        "query": "SELECT count(*) FROM AIRPORTS",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "AIRPORTS"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airports"
        ],
        "question": "How many airports do we have?",
        "question_toks": [
            "How",
            "many",
            "airports",
            "do",
            "we",
            "have",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 190,
        "query": "SELECT count(*) FROM AIRPORTS",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "AIRPORTS"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airports"
        ],
        "question": "Return the number of  airports.",
        "question_toks": [
            "Return",
            "the",
            "number",
            "of",
            "airports",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 191,
        "query": "SELECT count(*) FROM FLIGHTS",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "FLIGHTS"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights"
        ],
        "question": "How many flights do we have?",
        "question_toks": [
            "How",
            "many",
            "flights",
            "do",
            "we",
            "have",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 192,
        "query": "SELECT count(*) FROM FLIGHTS",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "FLIGHTS"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights"
        ],
        "question": "Return the number of flights.",
        "question_toks": [
            "Return",
            "the",
            "number",
            "of",
            "flights",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 193,
        "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation = 'UAL'",
        "query_toks": [
            "SELECT",
            "Airline",
            "FROM",
            "AIRLINES",
            "WHERE",
            "Abbreviation",
            "=",
            "'UAL",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "airline",
            "from",
            "airlines",
            "where",
            "abbreviation",
            "=",
            "value"
        ],
        "question": "Which airline has abbreviation 'UAL'?",
        "question_toks": [
            "Which",
            "airline",
            "has",
            "abbreviation",
            "'UAL",
            "'",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 194,
        "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation = 'UAL'",
        "query_toks": [
            "SELECT",
            "Airline",
            "FROM",
            "AIRLINES",
            "WHERE",
            "Abbreviation",
            "=",
            "'UAL",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "airline",
            "from",
            "airlines",
            "where",
            "abbreviation",
            "=",
            "value"
        ],
        "question": "Give the airline with abbreviation 'UAL'.",
        "question_toks": [
            "Give",
            "the",
            "airline",
            "with",
            "abbreviation",
            "'UAL",
            "'",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 195,
        "query": "SELECT count(*) FROM AIRLINES WHERE Country = 'USA'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "AIRLINES",
            "WHERE",
            "Country",
            "=",
            "'USA",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines",
            "where",
            "country",
            "=",
            "value"
        ],
        "question": "How many airlines are from USA?",
        "question_toks": [
            "How",
            "many",
            "airlines",
            "are",
            "from",
            "USA",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 196,
        "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  'USA'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "AIRLINES",
            "WHERE",
            "Country",
            "=",
            "'USA",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines",
            "where",
            "country",
            "=",
            "value"
        ],
        "question": "Return the number of airlines in the USA.",
        "question_toks": [
            "Return",
            "the",
            "number",
            "of",
            "airlines",
            "in",
            "the",
            "USA",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 197,
        "query": "SELECT City , Country FROM AIRPORTS WHERE AirportName = 'Alton'",
        "query_toks": [
            "SELECT",
            "City",
            ",",
            "Country",
            "FROM",
            "AIRPORTS",
            "WHERE",
            "AirportName",
            "=",
            "'Alton",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "city",
            ",",
            "country",
            "from",
            "airports",
            "where",
            "airportname",
            "=",
            "value"
        ],
        "question": "Which city and country is the Alton airport at?",
        "question_toks": [
            "Which",
            "city",
            "and",
            "country",
            "is",
            "the",
            "Alton",
            "airport",
            "at",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 198,
        "query": "SELECT City , Country FROM AIRPORTS WHERE AirportName = 'Alton'",
        "query_toks": [
            "SELECT",
            "City",
            ",",
            "Country",
            "FROM",
            "AIRPORTS",
            "WHERE",
            "AirportName",
            "=",
            "'Alton",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "city",
            ",",
            "country",
            "from",
            "airports",
            "where",
            "airportname",
            "=",
            "value"
        ],
        "question": "Give the city and country for the Alton airport.",
        "question_toks": [
            "Give",
            "the",
            "city",
            "and",
            "country",
            "for",
            "the",
            "Alton",
            "airport",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 199,
        "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode = 'AKO'",
        "query_toks": [
            "SELECT",
            "AirportName",
            "FROM",
            "AIRPORTS",
            "WHERE",
            "AirportCode",
            "=",
            "'AKO",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "airportname",
            "from",
            "airports",
            "where",
            "airportcode",
            "=",
            "value"
        ],
        "question": "What is the airport name for airport 'AKO'?",
        "question_toks": [
            "What",
            "is",
            "the",
            "airport",
            "name",
            "for",
            "airport",
            "'AKO",
            "'",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 200,
        "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode = 'AKO'",
        "query_toks": [
            "SELECT",
            "AirportName",
            "FROM",
            "AIRPORTS",
            "WHERE",
            "AirportCode",
            "=",
            "'AKO",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "airportname",
            "from",
            "airports",
            "where",
            "airportcode",
            "=",
            "value"
        ],
        "question": "Return the name of the airport with code 'AKO'.",
        "question_toks": [
            "Return",
            "the",
            "name",
            "of",
            "the",
            "airport",
            "with",
            "code",
            "'AKO",
            "'",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 201,
        "query": "SELECT DISTINCT AirportName FROM AIRPORTS WHERE City = 'Aberdeen'",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "AirportName",
            "FROM",
            "AIRPORTS",
            "WHERE",
            "City",
            "=",
            "'Aberdeen",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "airportname",
            "from",
            "airports",
            "where",
            "city",
            "=",
            "value"
        ],
        "question": "What are the unique airport names at City 'Aberdeen'?",
        "question_toks": [
            "What",
            "are",
            "the",
            "unique",
            "airport",
            "names",
            "at",
            "City",
            "'",
            "Aberdeen",
            "'?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 202,
        "query": "SELECT AirportName FROM AIRPORTS WHERE City = 'Aberdeen'",
        "query_toks": [
            "SELECT",
            "AirportName",
            "FROM",
            "AIRPORTS",
            "WHERE",
            "City",
            "=",
            "'Aberdeen",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "airportname",
            "from",
            "airports",
            "where",
            "city",
            "=",
            "value"
        ],
        "question": "What are the names of airports in Aberdeen?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "airports",
            "in",
            "Aberdeen",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 203,
        "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport = 'APG'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "FLIGHTS",
            "WHERE",
            "SourceAirport",
            "=",
            "'APG",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "where",
            "sourceairport",
            "=",
            "value"
        ],
        "question": "How many flights depart from 'APG'?",
        "question_toks": [
            "How",
            "many",
            "flights",
            "depart",
            "from",
            "'APG",
            "'",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 204,
        "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport = 'APG'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "FLIGHTS",
            "WHERE",
            "SourceAirport",
            "=",
            "'APG",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "where",
            "sourceairport",
            "=",
            "value"
        ],
        "question": "Count the number of flights departing from 'APG'.",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "flights",
            "departing",
            "from",
            "'APG",
            "'",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 205,
        "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  'ATO'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "FLIGHTS",
            "WHERE",
            "DestAirport",
            "=",
            "'ATO",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "where",
            "destairport",
            "=",
            "value"
        ],
        "question": "How many flights have destination ATO?",
        "question_toks": [
            "How",
            "many",
            "flights",
            "have",
            "destination",
            "ATO",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 206,
        "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport = 'ATO'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "FLIGHTS",
            "WHERE",
            "DestAirport",
            "=",
            "'ATO",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "where",
            "destairport",
            "=",
            "value"
        ],
        "question": "Count the number of flights into ATO.",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "flights",
            "into",
            "ATO",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 207,
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "FLIGHTS",
            "AS",
            "T1",
            "JOIN",
            "AIRPORTS",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "SourceAirport",
            "=",
            "T2",
            ".",
            "AirportCode",
            "WHERE",
            "T2",
            ".",
            "City",
            "=",
            "'Aberdeen",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "sourceairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "where",
            "t2",
            ".",
            "city",
            "=",
            "value"
        ],
        "question": "How many flights depart from City Aberdeen?",
        "question_toks": [
            "How",
            "many",
            "flights",
            "depart",
            "from",
            "City",
            "Aberdeen",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 208,
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  'Aberdeen'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "FLIGHTS",
            "AS",
            "T1",
            "JOIN",
            "AIRPORTS",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "SourceAirport",
            "=",
            "T2",
            ".",
            "AirportCode",
            "WHERE",
            "T2",
            ".",
            "City",
            "=",
            "'Aberdeen",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "sourceairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "where",
            "t2",
            ".",
            "city",
            "=",
            "value"
        ],
        "question": "Return the number of flights departing from Aberdeen.",
        "question_toks": [
            "Return",
            "the",
            "number",
            "of",
            "flights",
            "departing",
            "from",
            "Aberdeen",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 209,
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "FLIGHTS",
            "AS",
            "T1",
            "JOIN",
            "AIRPORTS",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "DestAirport",
            "=",
            "T2",
            ".",
            "AirportCode",
            "WHERE",
            "T2",
            ".",
            "City",
            "=",
            "'Aberdeen",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "destairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "where",
            "t2",
            ".",
            "city",
            "=",
            "value"
        ],
        "question": "How many flights arriving in Aberdeen city?",
        "question_toks": [
            "How",
            "many",
            "flights",
            "arriving",
            "in",
            "Aberdeen",
            "city",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 210,
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "FLIGHTS",
            "AS",
            "T1",
            "JOIN",
            "AIRPORTS",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "DestAirport",
            "=",
            "T2",
            ".",
            "AirportCode",
            "WHERE",
            "T2",
            ".",
            "City",
            "=",
            "'Aberdeen",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "destairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "where",
            "t2",
            ".",
            "city",
            "=",
            "value"
        ],
        "question": "Return the number of flights arriving in Aberdeen.",
        "question_toks": [
            "Return",
            "the",
            "number",
            "of",
            "flights",
            "arriving",
            "in",
            "Aberdeen",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 211,
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = 'Ashley' AND T3.City = 'Aberdeen'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "FLIGHTS",
            "AS",
            "T1",
            "JOIN",
            "AIRPORTS",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "DestAirport",
            "=",
            "T2",
            ".",
            "AirportCode",
            "JOIN",
            "AIRPORTS",
            "AS",
            "T3",
            "ON",
            "T1",
            ".",
            "SourceAirport",
            "=",
            "T3",
            ".",
            "AirportCode",
            "WHERE",
            "T2",
            ".",
            "City",
            "=",
            "'Ashley",
            "'",
            "AND",
            "T3",
            ".",
            "City",
            "=",
            "'Aberdeen",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "destairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "join",
            "airports",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "sourceairport",
            "=",
            "t3",
            ".",
            "airportcode",
            "where",
            "t2",
            ".",
            "city",
            "=",
            "value",
            "and",
            "t3",
            ".",
            "city",
            "=",
            "value"
        ],
        "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "question_toks": [
            "How",
            "many",
            "flights",
            "depart",
            "from",
            "City",
            "'Aberdeen",
            "'",
            "and",
            "have",
            "destination",
            "City",
            "'Ashley",
            "'",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 212,
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = 'Ashley' AND T3.City = 'Aberdeen'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "FLIGHTS",
            "AS",
            "T1",
            "JOIN",
            "AIRPORTS",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "DestAirport",
            "=",
            "T2",
            ".",
            "AirportCode",
            "JOIN",
            "AIRPORTS",
            "AS",
            "T3",
            "ON",
            "T1",
            ".",
            "SourceAirport",
            "=",
            "T3",
            ".",
            "AirportCode",
            "WHERE",
            "T2",
            ".",
            "City",
            "=",
            "'Ashley",
            "'",
            "AND",
            "T3",
            ".",
            "City",
            "=",
            "'Aberdeen",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "destairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "join",
            "airports",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "sourceairport",
            "=",
            "t3",
            ".",
            "airportcode",
            "where",
            "t2",
            ".",
            "city",
            "=",
            "value",
            "and",
            "t3",
            ".",
            "city",
            "=",
            "value"
        ],
        "question": "How many flights fly from Aberdeen to Ashley?",
        "question_toks": [
            "How",
            "many",
            "flights",
            "fly",
            "from",
            "Aberdeen",
            "to",
            "Ashley",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 213,
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'JetBlue Airways'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "FLIGHTS",
            "AS",
            "T1",
            "JOIN",
            "AIRLINES",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Airline",
            "=",
            "T2",
            ".",
            "uid",
            "WHERE",
            "T2",
            ".",
            "Airline",
            "=",
            "'JetBlue",
            "Airways",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airlines",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "airline",
            "=",
            "t2",
            ".",
            "uid",
            "where",
            "t2",
            ".",
            "airline",
            "=",
            "value"
        ],
        "question": "How many flights does airline 'JetBlue Airways' have?",
        "question_toks": [
            "How",
            "many",
            "flights",
            "does",
            "airline",
            "'JetBlue",
            "Airways",
            "'",
            "have",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 214,
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'JetBlue Airways'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "FLIGHTS",
            "AS",
            "T1",
            "JOIN",
            "AIRLINES",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Airline",
            "=",
            "T2",
            ".",
            "uid",
            "WHERE",
            "T2",
            ".",
            "Airline",
            "=",
            "'JetBlue",
            "Airways",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airlines",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "airline",
            "=",
            "t2",
            ".",
            "uid",
            "where",
            "t2",
            ".",
            "airline",
            "=",
            "value"
        ],
        "question": "Give the number of Jetblue Airways flights.",
        "question_toks": [
            "Give",
            "the",
            "number",
            "of",
            "Jetblue",
            "Airways",
            "flights",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 215,
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = 'United Airlines' AND T2.DestAirport = 'ASY'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "AIRLINES",
            "AS",
            "T1",
            "JOIN",
            "FLIGHTS",
            "AS",
            "T2",
            "ON",
            "T2",
            ".",
            "Airline",
            "=",
            "T1",
            ".",
            "uid",
            "WHERE",
            "T1",
            ".",
            "Airline",
            "=",
            "'United",
            "Airlines",
            "'",
            "AND",
            "T2",
            ".",
            "DestAirport",
            "=",
            "'ASY",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "airline",
            "=",
            "t1",
            ".",
            "uid",
            "where",
            "t1",
            ".",
            "airline",
            "=",
            "value",
            "and",
            "t2",
            ".",
            "destairport",
            "=",
            "value"
        ],
        "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "question_toks": [
            "How",
            "many",
            "'United",
            "Airlines",
            "'",
            "flights",
            "go",
            "to",
            "Airport",
            "'ASY",
            "'",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 216,
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = 'United Airlines' AND T2.DestAirport = 'ASY'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "AIRLINES",
            "AS",
            "T1",
            "JOIN",
            "FLIGHTS",
            "AS",
            "T2",
            "ON",
            "T2",
            ".",
            "Airline",
            "=",
            "T1",
            ".",
            "uid",
            "WHERE",
            "T1",
            ".",
            "Airline",
            "=",
            "'United",
            "Airlines",
            "'",
            "AND",
            "T2",
            ".",
            "DestAirport",
            "=",
            "'ASY",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "airline",
            "=",
            "t1",
            ".",
            "uid",
            "where",
            "t1",
            ".",
            "airline",
            "=",
            "value",
            "and",
            "t2",
            ".",
            "destairport",
            "=",
            "value"
        ],
        "question": "Count the number of United Airlines flights arriving in ASY Airport.",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "United",
            "Airlines",
            "flights",
            "arriving",
            "in",
            "ASY",
            "Airport",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 217,
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = 'United Airlines' AND T2.SourceAirport = 'AHD'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "AIRLINES",
            "AS",
            "T1",
            "JOIN",
            "FLIGHTS",
            "AS",
            "T2",
            "ON",
            "T2",
            ".",
            "Airline",
            "=",
            "T1",
            ".",
            "uid",
            "WHERE",
            "T1",
            ".",
            "Airline",
            "=",
            "'United",
            "Airlines",
            "'",
            "AND",
            "T2",
            ".",
            "SourceAirport",
            "=",
            "'AHD",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "airline",
            "=",
            "t1",
            ".",
            "uid",
            "where",
            "t1",
            ".",
            "airline",
            "=",
            "value",
            "and",
            "t2",
            ".",
            "sourceairport",
            "=",
            "value"
        ],
        "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
        "question_toks": [
            "How",
            "many",
            "'United",
            "Airlines",
            "'",
            "flights",
            "depart",
            "from",
            "Airport",
            "'AHD",
            "'",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 218,
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = 'United Airlines' AND T2.SourceAirport = 'AHD'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "AIRLINES",
            "AS",
            "T1",
            "JOIN",
            "FLIGHTS",
            "AS",
            "T2",
            "ON",
            "T2",
            ".",
            "Airline",
            "=",
            "T1",
            ".",
            "uid",
            "WHERE",
            "T1",
            ".",
            "Airline",
            "=",
            "'United",
            "Airlines",
            "'",
            "AND",
            "T2",
            ".",
            "SourceAirport",
            "=",
            "'AHD",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "airline",
            "=",
            "t1",
            ".",
            "uid",
            "where",
            "t1",
            ".",
            "airline",
            "=",
            "value",
            "and",
            "t2",
            ".",
            "sourceairport",
            "=",
            "value"
        ],
        "question": "Return the number of United Airlines flights leaving from AHD Airport.",
        "question_toks": [
            "Return",
            "the",
            "number",
            "of",
            "United",
            "Airlines",
            "flights",
            "leaving",
            "from",
            "AHD",
            "Airport",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 219,
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = 'Aberdeen' AND T3.Airline = 'United Airlines'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "FLIGHTS",
            "AS",
            "T1",
            "JOIN",
            "AIRPORTS",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "DestAirport",
            "=",
            "T2",
            ".",
            "AirportCode",
            "JOIN",
            "AIRLINES",
            "AS",
            "T3",
            "ON",
            "T3",
            ".",
            "uid",
            "=",
            "T1",
            ".",
            "Airline",
            "WHERE",
            "T2",
            ".",
            "City",
            "=",
            "'Aberdeen",
            "'",
            "AND",
            "T3",
            ".",
            "Airline",
            "=",
            "'United",
            "Airlines",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "destairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "join",
            "airlines",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "uid",
            "=",
            "t1",
            ".",
            "airline",
            "where",
            "t2",
            ".",
            "city",
            "=",
            "value",
            "and",
            "t3",
            ".",
            "airline",
            "=",
            "value"
        ],
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "question_toks": [
            "How",
            "many",
            "United",
            "Airlines",
            "flights",
            "go",
            "to",
            "City",
            "'Aberdeen",
            "'",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 220,
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = 'Aberdeen' AND T3.Airline = 'United Airlines'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "FLIGHTS",
            "AS",
            "T1",
            "JOIN",
            "AIRPORTS",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "DestAirport",
            "=",
            "T2",
            ".",
            "AirportCode",
            "JOIN",
            "AIRLINES",
            "AS",
            "T3",
            "ON",
            "T3",
            ".",
            "uid",
            "=",
            "T1",
            ".",
            "Airline",
            "WHERE",
            "T2",
            ".",
            "City",
            "=",
            "'Aberdeen",
            "'",
            "AND",
            "T3",
            ".",
            "Airline",
            "=",
            "'United",
            "Airlines",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "destairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "join",
            "airlines",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "uid",
            "=",
            "t1",
            ".",
            "airline",
            "where",
            "t2",
            ".",
            "city",
            "=",
            "value",
            "and",
            "t3",
            ".",
            "airline",
            "=",
            "value"
        ],
        "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "United",
            "Airlines",
            "flights",
            "that",
            "arrive",
            "in",
            "Aberdeen",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 221,
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City HAVING COUNT(*) = (SELECT MAX(flight_count) FROM (SELECT COUNT(*) AS flight_count FROM AIRPORTS AS T3 JOIN FLIGHTS AS T4 ON T3.AirportCode = T4.DestAirport GROUP BY T3.City) AS subquery)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "City",
            "FROM",
            "AIRPORTS",
            "AS",
            "T1",
            "JOIN",
            "FLIGHTS",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "AirportCode",
            "=",
            "T2",
            ".",
            "DestAirport",
            "GROUP",
            "BY",
            "T1",
            ".",
            "City",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "flight_count",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "flight_count",
            "FROM",
            "AIRPORTS",
            "AS",
            "T3",
            "JOIN",
            "FLIGHTS",
            "AS",
            "T4",
            "ON",
            "T3",
            ".",
            "AirportCode",
            "=",
            "T4",
            ".",
            "DestAirport",
            "GROUP",
            "BY",
            "T3",
            ".",
            "City",
            ")",
            "AS",
            "subquery",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "city",
            "from",
            "airports",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "airportcode",
            "=",
            "t2",
            ".",
            "destairport",
            "group",
            "by",
            "t1",
            ".",
            "city",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "flight_count",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "flight_count",
            "from",
            "airports",
            "as",
            "t3",
            "join",
            "flights",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "airportcode",
            "=",
            "t4",
            ".",
            "destairport",
            "group",
            "by",
            "t3",
            ".",
            "city",
            ")",
            "as",
            "subquery",
            ")"
        ],
        "question": "Which city or cities have the highest number of arriving flights?",
        "question_toks": [
            "Which",
            "city",
            "or",
            "cities",
            "have",
            "the",
            "highest",
            "number",
            "of",
            "arriving",
            "flights",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 222,
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City HAVING COUNT(*) = (SELECT MAX(flight_count) FROM (SELECT COUNT(*) AS flight_count FROM AIRPORTS AS T3 JOIN FLIGHTS AS T4 ON T3.AirportCode = T4.DestAirport GROUP BY T3.City) AS subquery)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "City",
            "FROM",
            "AIRPORTS",
            "AS",
            "T1",
            "JOIN",
            "FLIGHTS",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "AirportCode",
            "=",
            "T2",
            ".",
            "DestAirport",
            "GROUP",
            "BY",
            "T1",
            ".",
            "City",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "flight_count",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "flight_count",
            "FROM",
            "AIRPORTS",
            "AS",
            "T3",
            "JOIN",
            "FLIGHTS",
            "AS",
            "T4",
            "ON",
            "T3",
            ".",
            "AirportCode",
            "=",
            "T4",
            ".",
            "DestAirport",
            "GROUP",
            "BY",
            "T3",
            ".",
            "City",
            ")",
            "AS",
            "subquery",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "city",
            "from",
            "airports",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "airportcode",
            "=",
            "t2",
            ".",
            "destairport",
            "group",
            "by",
            "t1",
            ".",
            "city",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "flight_count",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "flight_count",
            "from",
            "airports",
            "as",
            "t3",
            "join",
            "flights",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "airportcode",
            "=",
            "t4",
            ".",
            "destairport",
            "group",
            "by",
            "t3",
            ".",
            "city",
            ")",
            "as",
            "subquery",
            ")"
        ],
        "question": "Which city or cities has/have the most frequent destination airport?",
        "question_toks": [
            "Which",
            "city",
            "or",
            "cities",
            "has",
            "/",
            "have",
            "the",
            "most",
            "frequent",
            "destination",
            "airport",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 223,
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City HAVING count(*) = (SELECT MAX(Cnt) FROM (SELECT count(*) as Cnt FROM AIRPORTS JOIN FLIGHTS ON AirportCode = SourceAirport GROUP BY City) as maxTable)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "City",
            "FROM",
            "AIRPORTS",
            "AS",
            "T1",
            "JOIN",
            "FLIGHTS",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "AirportCode",
            "=",
            "T2",
            ".",
            "SourceAirport",
            "GROUP",
            "BY",
            "T1",
            ".",
            "City",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "Cnt",
            ")",
            "FROM",
            "(",
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "as",
            "Cnt",
            "FROM",
            "AIRPORTS",
            "JOIN",
            "FLIGHTS",
            "ON",
            "AirportCode",
            "=",
            "SourceAirport",
            "GROUP",
            "BY",
            "City",
            ")",
            "as",
            "maxTable",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "city",
            "from",
            "airports",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "airportcode",
            "=",
            "t2",
            ".",
            "sourceairport",
            "group",
            "by",
            "t1",
            ".",
            "city",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "cnt",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "cnt",
            "from",
            "airports",
            "join",
            "flights",
            "on",
            "airportcode",
            "=",
            "sourceairport",
            "group",
            "by",
            "city",
            ")",
            "as",
            "maxtable",
            ")"
        ],
        "question": "Which city or cities have the most number of departing flights?",
        "question_toks": [
            "Which",
            "city",
            "or",
            "cities",
            "have",
            "the",
            "most",
            "number",
            "of",
            "departing",
            "flights",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 224,
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City HAVING count(*) = (SELECT MAX(Cnt) FROM (SELECT count(*) as Cnt FROM AIRPORTS JOIN FLIGHTS ON AirportCode = SourceAirport GROUP BY City) as maxTable)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "City",
            "FROM",
            "AIRPORTS",
            "AS",
            "T1",
            "JOIN",
            "FLIGHTS",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "AirportCode",
            "=",
            "T2",
            ".",
            "SourceAirport",
            "GROUP",
            "BY",
            "T1",
            ".",
            "City",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "Cnt",
            ")",
            "FROM",
            "(",
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "as",
            "Cnt",
            "FROM",
            "AIRPORTS",
            "JOIN",
            "FLIGHTS",
            "ON",
            "AirportCode",
            "=",
            "SourceAirport",
            "GROUP",
            "BY",
            "City",
            ")",
            "as",
            "maxTable",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "city",
            "from",
            "airports",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "airportcode",
            "=",
            "t2",
            ".",
            "sourceairport",
            "group",
            "by",
            "t1",
            ".",
            "city",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "cnt",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "cnt",
            "from",
            "airports",
            "join",
            "flights",
            "on",
            "airportcode",
            "=",
            "sourceairport",
            "group",
            "by",
            "city",
            ")",
            "as",
            "maxtable",
            ")"
        ],
        "question": "Which city is the most frequent source airport? If there is a tie, list all cities tied for most frequent.",
        "question_toks": [
            "Which",
            "city",
            "is",
            "the",
            "most",
            "frequent",
            "source",
            "airport",
            "?",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "list",
            "all",
            "cities",
            "tied",
            "for",
            "most",
            "frequent",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 225,
        "query": "WITH CombinedAirports AS (SELECT sourceairport AS airportcode FROM flights UNION ALL SELECT destairport AS airportcode FROM flights) SELECT airportcode FROM CombinedAirports GROUP BY airportcode HAVING COUNT(airportcode) = (SELECT MAX(Count) FROM (SELECT COUNT(airportcode) AS Count FROM CombinedAirports GROUP BY airportcode))",
        "query_toks": [
            "WITH",
            "CombinedAirports",
            "AS",
            "(",
            "SELECT",
            "sourceairport",
            "AS",
            "airportcode",
            "FROM",
            "flights",
            "UNION",
            "ALL",
            "SELECT",
            "destairport",
            "AS",
            "airportcode",
            "FROM",
            "flights",
            ")",
            "SELECT",
            "airportcode",
            "FROM",
            "CombinedAirports",
            "GROUP",
            "BY",
            "airportcode",
            "HAVING",
            "COUNT",
            "(",
            "airportcode",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "Count",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "airportcode",
            ")",
            "AS",
            "Count",
            "FROM",
            "CombinedAirports",
            "GROUP",
            "BY",
            "airportcode",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "with",
            "combinedairports",
            "as",
            "(",
            "select",
            "sourceairport",
            "as",
            "airportcode",
            "from",
            "flights",
            "union",
            "all",
            "select",
            "destairport",
            "as",
            "airportcode",
            "from",
            "flights",
            ")",
            "select",
            "airportcode",
            "from",
            "combinedairports",
            "group",
            "by",
            "airportcode",
            "having",
            "count",
            "(",
            "airportcode",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "count",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "airportcode",
            ")",
            "as",
            "count",
            "from",
            "combinedairports",
            "group",
            "by",
            "airportcode",
            ")",
            ")"
        ],
        "question": "What are the codes of all airports that are tied for the highest total number of incoming and outgoing flights?",
        "question_toks": [
            "What",
            "are",
            "the",
            "codes",
            "of",
            "all",
            "airports",
            "that",
            "are",
            "tied",
            "for",
            "the",
            "highest",
            "total",
            "number",
            "of",
            "incoming",
            "and",
            "outgoing",
            "flights",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 226,
        "query": "SELECT combined.airport FROM (SELECT sourceairport AS airport FROM flights UNION ALL SELECT destairport AS airport FROM flights) combined GROUP BY combined.airport HAVING COUNT(*) = (SELECT max(C) FROM (SELECT COUNT(*) AS C FROM (SELECT sourceairport AS airport FROM flights UNION ALL SELECT destairport AS airport FROM flights) t GROUP BY t.airport))",
        "query_toks": [
            "SELECT",
            "combined.airport",
            "FROM",
            "(",
            "SELECT",
            "sourceairport",
            "AS",
            "airport",
            "FROM",
            "flights",
            "UNION",
            "ALL",
            "SELECT",
            "destairport",
            "AS",
            "airport",
            "FROM",
            "flights",
            ")",
            "combined",
            "GROUP",
            "BY",
            "combined.airport",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "C",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "C",
            "FROM",
            "(",
            "SELECT",
            "sourceairport",
            "AS",
            "airport",
            "FROM",
            "flights",
            "UNION",
            "ALL",
            "SELECT",
            "destairport",
            "AS",
            "airport",
            "FROM",
            "flights",
            ")",
            "t",
            "GROUP",
            "BY",
            "t",
            ".",
            "airport",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "combined.airport",
            "from",
            "(",
            "select",
            "sourceairport",
            "as",
            "airport",
            "from",
            "flights",
            "union",
            "all",
            "select",
            "destairport",
            "as",
            "airport",
            "from",
            "flights",
            ")",
            "combined",
            "group",
            "by",
            "combined.airport",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "c",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "c",
            "from",
            "(",
            "select",
            "sourceairport",
            "as",
            "airport",
            "from",
            "flights",
            "union",
            "all",
            "select",
            "destairport",
            "as",
            "airport",
            "from",
            "flights",
            ")",
            "t",
            "group",
            "by",
            "t",
            ".",
            "airport",
            ")",
            ")"
        ],
        "question": "What are the airport codes of all airports involved in the most number of flights, considering both their incoming and outgoing flights? If there is a tie, return all of them.",
        "question_toks": [
            "What",
            "are",
            "the",
            "airport",
            "codes",
            "of",
            "all",
            "airports",
            "involved",
            "in",
            "the",
            "most",
            "number",
            "of",
            "flights",
            ",",
            "considering",
            "both",
            "their",
            "incoming",
            "and",
            "outgoing",
            "flights",
            "?",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "return",
            "all",
            "of",
            "them",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 227,
        "query": "SELECT airportcode FROM ( SELECT sourceairport AS airportcode FROM flights UNION ALL SELECT destairport FROM flights ) AllFlights GROUP BY airportcode HAVING COUNT(*) = (SELECT MIN(Count) FROM ( SELECT COUNT(*) AS Count FROM ( SELECT sourceairport AS airportcode FROM flights UNION ALL SELECT destairport FROM flights ) GROUPED GROUP BY airportcode ))",
        "query_toks": [
            "SELECT",
            "airportcode",
            "FROM",
            "(",
            "SELECT",
            "sourceairport",
            "AS",
            "airportcode",
            "FROM",
            "flights",
            "UNION",
            "ALL",
            "SELECT",
            "destairport",
            "FROM",
            "flights",
            ")",
            "AllFlights",
            "GROUP",
            "BY",
            "airportcode",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MIN",
            "(",
            "Count",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "Count",
            "FROM",
            "(",
            "SELECT",
            "sourceairport",
            "AS",
            "airportcode",
            "FROM",
            "flights",
            "UNION",
            "ALL",
            "SELECT",
            "destairport",
            "FROM",
            "flights",
            ")",
            "GROUPED",
            "GROUP",
            "BY",
            "airportcode",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "airportcode",
            "from",
            "(",
            "select",
            "sourceairport",
            "as",
            "airportcode",
            "from",
            "flights",
            "union",
            "all",
            "select",
            "destairport",
            "from",
            "flights",
            ")",
            "allflights",
            "group",
            "by",
            "airportcode",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "min",
            "(",
            "count",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "count",
            "from",
            "(",
            "select",
            "sourceairport",
            "as",
            "airportcode",
            "from",
            "flights",
            "union",
            "all",
            "select",
            "destairport",
            "from",
            "flights",
            ")",
            "grouped",
            "group",
            "by",
            "airportcode",
            ")",
            ")"
        ],
        "question": "Show the code of the airport with the fewest total number of flights combining both incoming and outgoing flights. If there is a tie, include all such airport codes.",
        "question_toks": [
            "Show",
            "the",
            "code",
            "of",
            "the",
            "airport",
            "with",
            "the",
            "fewest",
            "total",
            "number",
            "of",
            "flights",
            "combining",
            "both",
            "incoming",
            "and",
            "outgoing",
            "flights",
            ".",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "include",
            "all",
            "such",
            "airport",
            "codes",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 228,
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode HAVING COUNT(*) = (SELECT MIN(C) FROM (SELECT COUNT(*) AS C FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode) AS max_count)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "AirportCode",
            "FROM",
            "AIRPORTS",
            "AS",
            "T1",
            "JOIN",
            "FLIGHTS",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "AirportCode",
            "=",
            "T2",
            ".",
            "DestAirport",
            "OR",
            "T1",
            ".",
            "AirportCode",
            "=",
            "T2",
            ".",
            "SourceAirport",
            "GROUP",
            "BY",
            "T1",
            ".",
            "AirportCode",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MIN",
            "(",
            "C",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "C",
            "FROM",
            "AIRPORTS",
            "AS",
            "T1",
            "JOIN",
            "FLIGHTS",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "AirportCode",
            "=",
            "T2",
            ".",
            "DestAirport",
            "OR",
            "T1",
            ".",
            "AirportCode",
            "=",
            "T2",
            ".",
            "SourceAirport",
            "GROUP",
            "BY",
            "T1",
            ".",
            "AirportCode",
            ")",
            "AS",
            "max_count",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "airportcode",
            "from",
            "airports",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "airportcode",
            "=",
            "t2",
            ".",
            "destairport",
            "or",
            "t1",
            ".",
            "airportcode",
            "=",
            "t2",
            ".",
            "sourceairport",
            "group",
            "by",
            "t1",
            ".",
            "airportcode",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "min",
            "(",
            "c",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "c",
            "from",
            "airports",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "airportcode",
            "=",
            "t2",
            ".",
            "destairport",
            "or",
            "t1",
            ".",
            "airportcode",
            "=",
            "t2",
            ".",
            "sourceairport",
            "group",
            "by",
            "t1",
            ".",
            "airportcode",
            ")",
            "as",
            "max_count",
            ")"
        ],
        "question": "Give the code of the airport with the fewest total number of flights, combining both incoming and outgoing flights. If there is a tie, list all such airport codes.",
        "question_toks": [
            "Give",
            "the",
            "code",
            "of",
            "the",
            "airport",
            "with",
            "the",
            "fewest",
            "total",
            "number",
            "of",
            "flights",
            ",",
            "combining",
            "both",
            "incoming",
            "and",
            "outgoing",
            "flights",
            ".",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "list",
            "all",
            "such",
            "airport",
            "codes",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 229,
        "query": "SELECT airline FROM airlines WHERE uid IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(flightno) = (SELECT MAX(cnt) FROM (SELECT COUNT(flightno) AS cnt FROM flights GROUP BY airline)))",
        "query_toks": [
            "SELECT",
            "airline",
            "FROM",
            "airlines",
            "WHERE",
            "uid",
            "IN",
            "(",
            "SELECT",
            "airline",
            "FROM",
            "flights",
            "GROUP",
            "BY",
            "airline",
            "HAVING",
            "COUNT",
            "(",
            "flightno",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "cnt",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "flightno",
            ")",
            "AS",
            "cnt",
            "FROM",
            "flights",
            "GROUP",
            "BY",
            "airline",
            ")",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "airline",
            "from",
            "airlines",
            "where",
            "uid",
            "in",
            "(",
            "select",
            "airline",
            "from",
            "flights",
            "group",
            "by",
            "airline",
            "having",
            "count",
            "(",
            "flightno",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "cnt",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "flightno",
            ")",
            "as",
            "cnt",
            "from",
            "flights",
            "group",
            "by",
            "airline",
            ")",
            ")",
            ")"
        ],
        "question": "Which airlines (full names) have the most number of flights? If there is a tie, show all such airlines.",
        "question_toks": [
            "Which",
            "airlines",
            "(",
            "full",
            "names",
            ")",
            "have",
            "the",
            "most",
            "number",
            "of",
            "flights",
            "?",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "show",
            "all",
            "such",
            "airlines",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 230,
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) = (SELECT MAX(FlightCount) FROM (SELECT count(*) AS FlightCount FROM FLIGHTS GROUP BY Airline) AS SubQuery)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "Airline",
            "FROM",
            "AIRLINES",
            "AS",
            "T1",
            "JOIN",
            "FLIGHTS",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "uid",
            "=",
            "T2",
            ".",
            "Airline",
            "GROUP",
            "BY",
            "T1",
            ".",
            "Airline",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "FlightCount",
            ")",
            "FROM",
            "(",
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "AS",
            "FlightCount",
            "FROM",
            "FLIGHTS",
            "GROUP",
            "BY",
            "Airline",
            ")",
            "AS",
            "SubQuery",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "airline",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "uid",
            "=",
            "t2",
            ".",
            "airline",
            "group",
            "by",
            "t1",
            ".",
            "airline",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "flightcount",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "flightcount",
            "from",
            "flights",
            "group",
            "by",
            "airline",
            ")",
            "as",
            "subquery",
            ")"
        ],
        "question": "What airline (full name) serves the most flights? If there is a tie, show all such airlines.",
        "question_toks": [
            "What",
            "airline",
            "(",
            "full",
            "name",
            ")",
            "serves",
            "the",
            "most",
            "flights",
            "?",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "show",
            "all",
            "such",
            "airlines",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 231,
        "query": "SELECT T1.Abbreviation, T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.uid, T1.Abbreviation, T1.Country HAVING COUNT(*) = (SELECT MIN(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM FLIGHTS GROUP BY Airline) AS Temp)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "Abbreviation,",
            "T1",
            ".",
            "Country",
            "FROM",
            "AIRLINES",
            "AS",
            "T1",
            "JOIN",
            "FLIGHTS",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "uid",
            "=",
            "T2",
            ".",
            "Airline",
            "GROUP",
            "BY",
            "T1",
            ".",
            "uid,",
            "T1",
            ".",
            "Abbreviation,",
            "T1",
            ".",
            "Country",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MIN",
            "(",
            "Cnt",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "Cnt",
            "FROM",
            "FLIGHTS",
            "GROUP",
            "BY",
            "Airline",
            ")",
            "AS",
            "Temp",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "abbreviation,",
            "t1",
            ".",
            "country",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "uid",
            "=",
            "t2",
            ".",
            "airline",
            "group",
            "by",
            "t1",
            ".",
            "uid,",
            "t1",
            ".",
            "abbreviation,",
            "t1",
            ".",
            "country",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "min",
            "(",
            "cnt",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "cnt",
            "from",
            "flights",
            "group",
            "by",
            "airline",
            ")",
            "as",
            "temp",
            ")"
        ],
        "question": "Find the abbreviation and country of all airlines that have the fewest total number of flights combining both incoming and outgoing flights",
        "question_toks": [
            "Find",
            "the",
            "abbreviation",
            "and",
            "country",
            "of",
            "all",
            "airlines",
            "that",
            "have",
            "the",
            "fewest",
            "total",
            "number",
            "of",
            "flights",
            "combining",
            "both",
            "incoming",
            "and",
            "outgoing",
            "flights"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 232,
        "query": "SELECT T1.Abbreviation, T1.Country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.uid, T1.Abbreviation, T1.Country HAVING COUNT(*) = (SELECT MIN(flight_count) FROM (SELECT COUNT(*) AS flight_count FROM flights GROUP BY Airline) AS subquery)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "Abbreviation,",
            "T1",
            ".",
            "Country",
            "FROM",
            "airlines",
            "AS",
            "T1",
            "JOIN",
            "flights",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "uid",
            "=",
            "T2",
            ".",
            "Airline",
            "GROUP",
            "BY",
            "T1",
            ".",
            "uid,",
            "T1",
            ".",
            "Abbreviation,",
            "T1",
            ".",
            "Country",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MIN",
            "(",
            "flight_count",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "flight_count",
            "FROM",
            "flights",
            "GROUP",
            "BY",
            "Airline",
            ")",
            "AS",
            "subquery",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "abbreviation,",
            "t1",
            ".",
            "country",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "uid",
            "=",
            "t2",
            ".",
            "airline",
            "group",
            "by",
            "t1",
            ".",
            "uid,",
            "t1",
            ".",
            "abbreviation,",
            "t1",
            ".",
            "country",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "min",
            "(",
            "flight_count",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "flight_count",
            "from",
            "flights",
            "group",
            "by",
            "airline",
            ")",
            "as",
            "subquery",
            ")"
        ],
        "question": "Find the abbreviation and country of the airlines that have the fewest number of flights. If there is a tie, show all such airlines.",
        "question_toks": [
            "Find",
            "the",
            "abbreviation",
            "and",
            "country",
            "of",
            "the",
            "airlines",
            "that",
            "have",
            "the",
            "fewest",
            "number",
            "of",
            "flights",
            ".",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "show",
            "all",
            "such",
            "airlines",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 233,
        "query": "SELECT airline FROM airlines WHERE uid IN (SELECT airline FROM flights WHERE sourceairport = 'AHD')",
        "query_toks": [
            "SELECT",
            "airline",
            "FROM",
            "airlines",
            "WHERE",
            "uid",
            "IN",
            "(",
            "SELECT",
            "airline",
            "FROM",
            "flights",
            "WHERE",
            "sourceairport",
            "=",
            "'AHD",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "airline",
            "from",
            "airlines",
            "where",
            "uid",
            "in",
            "(",
            "select",
            "airline",
            "from",
            "flights",
            "where",
            "sourceairport",
            "=",
            "value",
            ")"
        ],
        "question": "What are airlines that have some flight departing from airport 'AHD'?",
        "question_toks": [
            "What",
            "are",
            "airlines",
            "that",
            "have",
            "some",
            "flight",
            "departing",
            "from",
            "airport",
            "'AHD",
            "'",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 234,
        "query": "SELECT T1.Airline FROM airlines as T1 WHERE T1.uid in (SELECT T2.Airline FROM flights as T2 WHERE T2.sourceairport = 'AHD')",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "Airline",
            "FROM",
            "airlines",
            "as",
            "T1",
            "WHERE",
            "T1",
            ".",
            "uid",
            "in",
            "(",
            "SELECT",
            "T2",
            ".",
            "Airline",
            "FROM",
            "flights",
            "as",
            "T2",
            "WHERE",
            "T2",
            ".",
            "sourceairport",
            "=",
            "'AHD",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "airline",
            "from",
            "airlines",
            "as",
            "t1",
            "where",
            "t1",
            ".",
            "uid",
            "in",
            "(",
            "select",
            "t2",
            ".",
            "airline",
            "from",
            "flights",
            "as",
            "t2",
            "where",
            "t2",
            ".",
            "sourceairport",
            "=",
            "value",
            ")"
        ],
        "question": "Which airlines have a flight with source airport AHD?",
        "question_toks": [
            "Which",
            "airlines",
            "have",
            "a",
            "flight",
            "with",
            "source",
            "airport",
            "AHD",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 235,
        "query": "SELECT airline FROM airlines WHERE uid IN (SELECT DISTINCT airline FROM flights WHERE destairport = 'AHD')",
        "query_toks": [
            "SELECT",
            "airline",
            "FROM",
            "airlines",
            "WHERE",
            "uid",
            "IN",
            "(",
            "SELECT",
            "DISTINCT",
            "airline",
            "FROM",
            "flights",
            "WHERE",
            "destairport",
            "=",
            "'AHD",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "airline",
            "from",
            "airlines",
            "where",
            "uid",
            "in",
            "(",
            "select",
            "distinct",
            "airline",
            "from",
            "flights",
            "where",
            "destairport",
            "=",
            "value",
            ")"
        ],
        "question": "What are airlines that have flights arriving at airport 'AHD'?",
        "question_toks": [
            "What",
            "are",
            "airlines",
            "that",
            "have",
            "flights",
            "arriving",
            "at",
            "airport",
            "'AHD",
            "'",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 236,
        "query": "SELECT T1.Airline FROM airlines as T1 WHERE T1.uid in (SELECT T2.Airline FROM flights as T2 WHERE T2.sourceairport = 'AHD')",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "Airline",
            "FROM",
            "airlines",
            "as",
            "T1",
            "WHERE",
            "T1",
            ".",
            "uid",
            "in",
            "(",
            "SELECT",
            "T2",
            ".",
            "Airline",
            "FROM",
            "flights",
            "as",
            "T2",
            "WHERE",
            "T2",
            ".",
            "sourceairport",
            "=",
            "'AHD",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "airline",
            "from",
            "airlines",
            "as",
            "t1",
            "where",
            "t1",
            ".",
            "uid",
            "in",
            "(",
            "select",
            "t2",
            ".",
            "airline",
            "from",
            "flights",
            "as",
            "t2",
            "where",
            "t2",
            ".",
            "sourceairport",
            "=",
            "value",
            ")"
        ],
        "question": "Which airlines have a flight with destination airport AHD?",
        "question_toks": [
            "Which",
            "airlines",
            "have",
            "a",
            "flight",
            "with",
            "destination",
            "airport",
            "AHD",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 237,
        "query": "SELECT al.airline FROM airlines al WHERE EXISTS (SELECT 1 FROM flights f WHERE f.airline = al.uid AND f.sourceairport = 'APG') AND EXISTS (SELECT 1 FROM flights f WHERE f.airline = al.uid AND f.sourceairport = 'CVO')",
        "query_toks": [
            "SELECT",
            "al.airline",
            "FROM",
            "airlines",
            "al",
            "WHERE",
            "EXISTS",
            "(",
            "SELECT",
            "1",
            "FROM",
            "flights",
            "f",
            "WHERE",
            "f.airline",
            "=",
            "al.uid",
            "AND",
            "f.sourceairport",
            "=",
            "'APG",
            "'",
            ")",
            "AND",
            "EXISTS",
            "(",
            "SELECT",
            "1",
            "FROM",
            "flights",
            "f",
            "WHERE",
            "f.airline",
            "=",
            "al.uid",
            "AND",
            "f.sourceairport",
            "=",
            "'CVO",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "al.airline",
            "from",
            "airlines",
            "al",
            "where",
            "exists",
            "(",
            "select",
            "value",
            "from",
            "flights",
            "f",
            "where",
            "f.airline",
            "=",
            "al.uid",
            "and",
            "f.sourceairport",
            "=",
            "value",
            ")",
            "and",
            "exists",
            "(",
            "select",
            "value",
            "from",
            "flights",
            "f",
            "where",
            "f.airline",
            "=",
            "al.uid",
            "and",
            "f.sourceairport",
            "=",
            "value",
            ")"
        ],
        "question": "Find all airlines that have departing flights from both airports 'APG' and 'CVO'.",
        "question_toks": [
            "Find",
            "all",
            "airlines",
            "that",
            "have",
            "departing",
            "flights",
            "from",
            "both",
            "airports",
            "'",
            "APG",
            "'",
            "and",
            "'",
            "CVO",
            "'."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 238,
        "query": "SELECT al.airline FROM airlines al WHERE al.uid IN (SELECT airline FROM flights WHERE sourceairport = 'APG') AND al.uid IN (SELECT airline FROM flights WHERE sourceairport = 'CVO')",
        "query_toks": [
            "SELECT",
            "al.airline",
            "FROM",
            "airlines",
            "al",
            "WHERE",
            "al.uid",
            "IN",
            "(",
            "SELECT",
            "airline",
            "FROM",
            "flights",
            "WHERE",
            "sourceairport",
            "=",
            "'APG",
            "'",
            ")",
            "AND",
            "al.uid",
            "IN",
            "(",
            "SELECT",
            "airline",
            "FROM",
            "flights",
            "WHERE",
            "sourceairport",
            "=",
            "'CVO",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "al.airline",
            "from",
            "airlines",
            "al",
            "where",
            "al.uid",
            "in",
            "(",
            "select",
            "airline",
            "from",
            "flights",
            "where",
            "sourceairport",
            "=",
            "value",
            ")",
            "and",
            "al.uid",
            "in",
            "(",
            "select",
            "airline",
            "from",
            "flights",
            "where",
            "sourceairport",
            "=",
            "value",
            ")"
        ],
        "question": "List the names of airlines that have flights departing from both APG and CVO airports.",
        "question_toks": [
            "List",
            "the",
            "names",
            "of",
            "airlines",
            "that",
            "have",
            "flights",
            "departing",
            "from",
            "both",
            "APG",
            "and",
            "CVO",
            "airports",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 239,
        "query": "SELECT al.airline FROM airlines al WHERE al.uid IN (SELECT airline FROM flights WHERE sourceairport = 'CVO') AND al.uid NOT IN (SELECT airline FROM flights WHERE sourceairport = 'APG');",
        "query_toks": [
            "SELECT",
            "al.airline",
            "FROM",
            "airlines",
            "al",
            "WHERE",
            "al.uid",
            "IN",
            "(",
            "SELECT",
            "airline",
            "FROM",
            "flights",
            "WHERE",
            "sourceairport",
            "=",
            "'CVO",
            "'",
            ")",
            "AND",
            "al.uid",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "airline",
            "FROM",
            "flights",
            "WHERE",
            "sourceairport",
            "=",
            "'APG",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "al.airline",
            "from",
            "airlines",
            "al",
            "where",
            "al.uid",
            "in",
            "(",
            "select",
            "airline",
            "from",
            "flights",
            "where",
            "sourceairport",
            "=",
            "value",
            ")",
            "and",
            "al.uid",
            "not",
            "in",
            "(",
            "select",
            "airline",
            "from",
            "flights",
            "where",
            "sourceairport",
            "=",
            "value",
            ")"
        ],
        "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "question_toks": [
            "Find",
            "all",
            "airlines",
            "that",
            "have",
            "flights",
            "from",
            "airport",
            "'CVO",
            "'",
            "but",
            "not",
            "from",
            "'APG",
            "'",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 240,
        "query": "SELECT al.airline FROM airlines al WHERE al.uid IN (SELECT airline FROM flights WHERE sourceairport = 'CVO') AND al.uid NOT IN (SELECT airline FROM flights WHERE sourceairport = 'APG');",
        "query_toks": [
            "SELECT",
            "al.airline",
            "FROM",
            "airlines",
            "al",
            "WHERE",
            "al.uid",
            "IN",
            "(",
            "SELECT",
            "airline",
            "FROM",
            "flights",
            "WHERE",
            "sourceairport",
            "=",
            "'CVO",
            "'",
            ")",
            "AND",
            "al.uid",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "airline",
            "FROM",
            "flights",
            "WHERE",
            "sourceairport",
            "=",
            "'APG",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "al.airline",
            "from",
            "airlines",
            "al",
            "where",
            "al.uid",
            "in",
            "(",
            "select",
            "airline",
            "from",
            "flights",
            "where",
            "sourceairport",
            "=",
            "value",
            ")",
            "and",
            "al.uid",
            "not",
            "in",
            "(",
            "select",
            "airline",
            "from",
            "flights",
            "where",
            "sourceairport",
            "=",
            "value",
            ")"
        ],
        "question": "Which airlines have departures from CVO but not from APG airports?",
        "question_toks": [
            "Which",
            "airlines",
            "have",
            "departures",
            "from",
            "CVO",
            "but",
            "not",
            "from",
            "APG",
            "airports",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 241,
        "query": "SELECT airline FROM airlines WHERE uid IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10)",
        "query_toks": [
            "SELECT",
            "airline",
            "FROM",
            "airlines",
            "WHERE",
            "uid",
            "IN",
            "(",
            "SELECT",
            "airline",
            "FROM",
            "flights",
            "GROUP",
            "BY",
            "airline",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "=",
            "10",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "airline",
            "from",
            "airlines",
            "where",
            "uid",
            "in",
            "(",
            "select",
            "airline",
            "from",
            "flights",
            "group",
            "by",
            "airline",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value",
            ")"
        ],
        "question": "Find all airlines that have at least 10 flights.",
        "question_toks": [
            "Find",
            "all",
            "airlines",
            "that",
            "have",
            "at",
            "least",
            "10",
            "flights",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 242,
        "query": "SELECT a.airline FROM airlines a WHERE (SELECT COUNT(*) FROM flights f WHERE f.airline = a.uid) >= 10",
        "query_toks": [
            "SELECT",
            "a.airline",
            "FROM",
            "airlines",
            "a",
            "WHERE",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "flights",
            "f",
            "WHERE",
            "f.airline",
            "=",
            "a.uid",
            ")",
            ">",
            "=",
            "10"
        ],
        "query_toks_no_value": [
            "select",
            "a.airline",
            "from",
            "airlines",
            "a",
            "where",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "f",
            "where",
            "f.airline",
            "=",
            "a.uid",
            ")",
            ">",
            "=",
            "value"
        ],
        "question": "Which airlines have at least 10 flights?",
        "question_toks": [
            "Which",
            "airlines",
            "have",
            "at",
            "least",
            "10",
            "flights",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 243,
        "query": "SELECT A.airline FROM airlines A WHERE (SELECT COUNT(*) FROM flights F WHERE F.airline = A.uid) < 200",
        "query_toks": [
            "SELECT",
            "A.airline",
            "FROM",
            "airlines",
            "A",
            "WHERE",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "flights",
            "F",
            "WHERE",
            "F.airline",
            "=",
            "A.uid",
            ")",
            "<",
            "200"
        ],
        "query_toks_no_value": [
            "select",
            "a.airline",
            "from",
            "airlines",
            "a",
            "where",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "f",
            "where",
            "f.airline",
            "=",
            "a.uid",
            ")",
            "<",
            "value"
        ],
        "question": "Find all airlines that have fewer than 200 flights.",
        "question_toks": [
            "Find",
            "all",
            "airlines",
            "that",
            "have",
            "fewer",
            "than",
            "200",
            "flights",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 244,
        "query": "SELECT a.airline FROM airlines a WHERE (SELECT COUNT(*) FROM flights f WHERE f.airline = a.uid) < 200",
        "query_toks": [
            "SELECT",
            "a.airline",
            "FROM",
            "airlines",
            "a",
            "WHERE",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "flights",
            "f",
            "WHERE",
            "f.airline",
            "=",
            "a.uid",
            ")",
            "<",
            "200"
        ],
        "query_toks_no_value": [
            "select",
            "a.airline",
            "from",
            "airlines",
            "a",
            "where",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "f",
            "where",
            "f.airline",
            "=",
            "a.uid",
            ")",
            "<",
            "value"
        ],
        "question": "Which airlines have fewer than 200 flights?",
        "question_toks": [
            "Which",
            "airlines",
            "have",
            "fewer",
            "than",
            "200",
            "flights",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 245,
        "query": "SELECT DISTINCT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1",
            ".",
            "FlightNo",
            "FROM",
            "FLIGHTS",
            "AS",
            "T1",
            "JOIN",
            "AIRPORTS",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "SourceAirport",
            "=",
            "T2",
            ".",
            "AirportCode",
            "WHERE",
            "T2",
            ".",
            "City",
            "=",
            "'Aberdeen",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "t1",
            ".",
            "flightno",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "sourceairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "where",
            "t2",
            ".",
            "city",
            "=",
            "value"
        ],
        "question": "What are unique flight numbers of Airline 'United Airlines'?",
        "question_toks": [
            "What",
            "are",
            "unique",
            "flight",
            "numbers",
            "of",
            "Airline",
            "'",
            "United",
            "Airlines",
            "'?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 246,
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  'United Airlines'",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "FlightNo",
            "FROM",
            "FLIGHTS",
            "AS",
            "T1",
            "JOIN",
            "AIRLINES",
            "AS",
            "T2",
            "ON",
            "T2",
            ".",
            "uid",
            "=",
            "T1",
            ".",
            "Airline",
            "WHERE",
            "T2",
            ".",
            "Airline",
            "=",
            "'United",
            "Airlines",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "flightno",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airlines",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "uid",
            "=",
            "t1",
            ".",
            "airline",
            "where",
            "t2",
            ".",
            "airline",
            "=",
            "value"
        ],
        "question": "Which flight numbers correspond to United Airlines flights?",
        "question_toks": [
            "Which",
            "flight",
            "numbers",
            "correspond",
            "to",
            "United",
            "Airlines",
            "flights",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 247,
        "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = 'APG'",
        "query_toks": [
            "SELECT",
            "FlightNo",
            "FROM",
            "FLIGHTS",
            "WHERE",
            "SourceAirport",
            "=",
            "'APG",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "flightno",
            "from",
            "flights",
            "where",
            "sourceairport",
            "=",
            "value"
        ],
        "question": "What are flight numbers of flights departing from Airport 'APG'?",
        "question_toks": [
            "What",
            "are",
            "flight",
            "numbers",
            "of",
            "flights",
            "departing",
            "from",
            "Airport",
            "``",
            "APG",
            "''",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 248,
        "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = 'APG'",
        "query_toks": [
            "SELECT",
            "FlightNo",
            "FROM",
            "FLIGHTS",
            "WHERE",
            "SourceAirport",
            "=",
            "'APG",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "flightno",
            "from",
            "flights",
            "where",
            "sourceairport",
            "=",
            "value"
        ],
        "question": "Give the flight numbers of flights leaving from APG.",
        "question_toks": [
            "Give",
            "the",
            "flight",
            "numbers",
            "of",
            "flights",
            "leaving",
            "from",
            "APG",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 249,
        "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport = 'APG'",
        "query_toks": [
            "SELECT",
            "FlightNo",
            "FROM",
            "FLIGHTS",
            "WHERE",
            "DestAirport",
            "=",
            "'APG",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "flightno",
            "from",
            "flights",
            "where",
            "destairport",
            "=",
            "value"
        ],
        "question": "What are flight numbers of flights arriving at Airport 'APG'?",
        "question_toks": [
            "What",
            "are",
            "flight",
            "numbers",
            "of",
            "flights",
            "arriving",
            "at",
            "Airport",
            "``",
            "APG",
            "''",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 250,
        "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  'APG'",
        "query_toks": [
            "SELECT",
            "FlightNo",
            "FROM",
            "FLIGHTS",
            "WHERE",
            "DestAirport",
            "=",
            "'APG",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "flightno",
            "from",
            "flights",
            "where",
            "destairport",
            "=",
            "value"
        ],
        "question": "Give the flight numbers of flights landing at APG.",
        "question_toks": [
            "Give",
            "the",
            "flight",
            "numbers",
            "of",
            "flights",
            "landing",
            "at",
            "APG",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 251,
        "query": "SELECT DISTINCT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1",
            ".",
            "FlightNo",
            "FROM",
            "FLIGHTS",
            "AS",
            "T1",
            "JOIN",
            "AIRPORTS",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "SourceAirport",
            "=",
            "T2",
            ".",
            "AirportCode",
            "WHERE",
            "T2",
            ".",
            "City",
            "=",
            "'Aberdeen",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "t1",
            ".",
            "flightno",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "sourceairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "where",
            "t2",
            ".",
            "city",
            "=",
            "value"
        ],
        "question": "What are distinct flight numbers of flights departing from City 'Aberdeen'?",
        "question_toks": [
            "What",
            "are",
            "distinct",
            "flight",
            "numbers",
            "of",
            "flights",
            "departing",
            "from",
            "City",
            "'",
            "Aberdeen",
            "'?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 252,
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "FlightNo",
            "FROM",
            "FLIGHTS",
            "AS",
            "T1",
            "JOIN",
            "AIRPORTS",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "SourceAirport",
            "=",
            "T2",
            ".",
            "AirportCode",
            "WHERE",
            "T2",
            ".",
            "City",
            "=",
            "'Aberdeen",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "flightno",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "sourceairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "where",
            "t2",
            ".",
            "city",
            "=",
            "value"
        ],
        "question": "Give the flight numbers of flights leaving from Aberdeen.",
        "question_toks": [
            "Give",
            "the",
            "flight",
            "numbers",
            "of",
            "flights",
            "leaving",
            "from",
            "Aberdeen",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 253,
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  'Aberdeen'",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "FlightNo",
            "FROM",
            "FLIGHTS",
            "AS",
            "T1",
            "JOIN",
            "AIRPORTS",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "DestAirport",
            "=",
            "T2",
            ".",
            "AirportCode",
            "WHERE",
            "T2",
            ".",
            "City",
            "=",
            "'Aberdeen",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "flightno",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "destairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "where",
            "t2",
            ".",
            "city",
            "=",
            "value"
        ],
        "question": "What are flight numbers of flights arriving at City 'Aberdeen'?",
        "question_toks": [
            "What",
            "are",
            "flight",
            "numbers",
            "of",
            "flights",
            "arriving",
            "at",
            "City",
            "``",
            "Aberdeen",
            "''",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 254,
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "FlightNo",
            "FROM",
            "FLIGHTS",
            "AS",
            "T1",
            "JOIN",
            "AIRPORTS",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "DestAirport",
            "=",
            "T2",
            ".",
            "AirportCode",
            "WHERE",
            "T2",
            ".",
            "City",
            "=",
            "'Aberdeen",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "flightno",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "destairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "where",
            "t2",
            ".",
            "city",
            "=",
            "value"
        ],
        "question": "Give the flight numbers of flights arriving in Aberdeen.",
        "question_toks": [
            "Give",
            "the",
            "flight",
            "numbers",
            "of",
            "flights",
            "arriving",
            "in",
            "Aberdeen",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 255,
        "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = 'Aberdeen' OR T2.city = 'Abilene'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Flights",
            "AS",
            "T1",
            "JOIN",
            "Airports",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "DestAirport",
            "=",
            "T2",
            ".",
            "AirportCode",
            "WHERE",
            "T2",
            ".",
            "city",
            "=",
            "'Aberdeen",
            "'",
            "OR",
            "T2",
            ".",
            "city",
            "=",
            "'Abilene",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "destairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "where",
            "t2",
            ".",
            "city",
            "=",
            "value",
            "or",
            "t2",
            ".",
            "city",
            "=",
            "value"
        ],
        "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "question_toks": [
            "Find",
            "the",
            "number",
            "of",
            "flights",
            "landing",
            "in",
            "the",
            "city",
            "of",
            "Aberdeen",
            "or",
            "Abilene",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 256,
        "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = 'Aberdeen' OR T2.city = 'Abilene'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Flights",
            "AS",
            "T1",
            "JOIN",
            "Airports",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "DestAirport",
            "=",
            "T2",
            ".",
            "AirportCode",
            "WHERE",
            "T2",
            ".",
            "city",
            "=",
            "'Aberdeen",
            "'",
            "OR",
            "T2",
            ".",
            "city",
            "=",
            "'Abilene",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "destairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "where",
            "t2",
            ".",
            "city",
            "=",
            "value",
            "or",
            "t2",
            ".",
            "city",
            "=",
            "value"
        ],
        "question": "How many flights land in Aberdeen or Abilene?",
        "question_toks": [
            "How",
            "many",
            "flights",
            "land",
            "in",
            "Aberdeen",
            "or",
            "Abilene",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 257,
        "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "query_toks": [
            "SELECT",
            "AirportName",
            "FROM",
            "Airports",
            "WHERE",
            "AirportCode",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "SourceAirport",
            "FROM",
            "Flights",
            "UNION",
            "SELECT",
            "DestAirport",
            "FROM",
            "Flights",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "airportname",
            "from",
            "airports",
            "where",
            "airportcode",
            "not",
            "in",
            "(",
            "select",
            "sourceairport",
            "from",
            "flights",
            "union",
            "select",
            "destairport",
            "from",
            "flights",
            ")"
        ],
        "question": "Find the name of airports which do not have any flight in and out.",
        "question_toks": [
            "Find",
            "the",
            "name",
            "of",
            "airports",
            "which",
            "do",
            "not",
            "have",
            "any",
            "flight",
            "in",
            "and",
            "out",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "flight_2",
        "id": 258,
        "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "query_toks": [
            "SELECT",
            "AirportName",
            "FROM",
            "Airports",
            "WHERE",
            "AirportCode",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "SourceAirport",
            "FROM",
            "Flights",
            "UNION",
            "SELECT",
            "DestAirport",
            "FROM",
            "Flights",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "airportname",
            "from",
            "airports",
            "where",
            "airportcode",
            "not",
            "in",
            "(",
            "select",
            "sourceairport",
            "from",
            "flights",
            "union",
            "select",
            "destairport",
            "from",
            "flights",
            ")"
        ],
        "question": "Which airports do not have departing or arriving flights?",
        "question_toks": [
            "Which",
            "airports",
            "do",
            "not",
            "have",
            "departing",
            "or",
            "arriving",
            "flights",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 259,
        "query": "SELECT count(*) FROM employee",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "employee"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "employee"
        ],
        "question": "How many employees are there?",
        "question_toks": [
            "How",
            "many",
            "employees",
            "are",
            "there",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 260,
        "query": "SELECT count(*) FROM employee",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "employee"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "employee"
        ],
        "question": "Count the number of employees",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "employees"
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 261,
        "query": "SELECT name FROM employee ORDER BY age, Employee_ID",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "employee",
            "ORDER",
            "BY",
            "age,",
            "Employee_ID"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "employee",
            "order",
            "by",
            "age,",
            "employee_id"
        ],
        "question": "Sort employee names by their age in ascending order, and in case of a tie, sort by Employee ID.",
        "question_toks": [
            "Sort",
            "employee",
            "names",
            "by",
            "their",
            "age",
            "in",
            "ascending",
            "order",
            ",",
            "and",
            "in",
            "case",
            "of",
            "a",
            "tie",
            ",",
            "sort",
            "by",
            "Employee",
            "ID",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 262,
        "query": "SELECT name FROM employee ORDER BY age, name ASC",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "employee",
            "ORDER",
            "BY",
            "age,",
            "name",
            "ASC"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "employee",
            "order",
            "by",
            "age,",
            "name",
            "asc"
        ],
        "question": "List the names of employees and sort in ascending order of age, and in case of a tie, sort by name alphabetically.",
        "question_toks": [
            "List",
            "the",
            "names",
            "of",
            "employees",
            "and",
            "sort",
            "in",
            "ascending",
            "order",
            "of",
            "age",
            ",",
            "and",
            "in",
            "case",
            "of",
            "a",
            "tie",
            ",",
            "sort",
            "by",
            "name",
            "alphabetically",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 263,
        "query": "SELECT count(*) , city FROM employee GROUP BY city",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "city",
            "FROM",
            "employee",
            "GROUP",
            "BY",
            "city"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "city",
            "from",
            "employee",
            "group",
            "by",
            "city"
        ],
        "question": "What is the number of employees from each city?",
        "question_toks": [
            "What",
            "is",
            "the",
            "number",
            "of",
            "employees",
            "from",
            "each",
            "city",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 264,
        "query": "SELECT count(*) , city FROM employee GROUP BY city",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "city",
            "FROM",
            "employee",
            "GROUP",
            "BY",
            "city"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "city",
            "from",
            "employee",
            "group",
            "by",
            "city"
        ],
        "question": "Count the number of employees for each city.",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "employees",
            "for",
            "each",
            "city",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 265,
        "query": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1",
        "query_toks": [
            "SELECT",
            "city",
            "FROM",
            "employee",
            "WHERE",
            "age",
            "<",
            "30",
            "GROUP",
            "BY",
            "city",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "city",
            "from",
            "employee",
            "where",
            "age",
            "<",
            "value",
            "group",
            "by",
            "city",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "List the names of cities where more than one employee under the age of 30 come from.",
        "question_toks": [
            "List",
            "the",
            "names",
            "of",
            "cities",
            "where",
            "more",
            "than",
            "one",
            "employee",
            "under",
            "the",
            "age",
            "of",
            "30",
            "come",
            "from",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 266,
        "query": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1",
        "query_toks": [
            "SELECT",
            "city",
            "FROM",
            "employee",
            "WHERE",
            "age",
            "<",
            "30",
            "GROUP",
            "BY",
            "city",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "city",
            "from",
            "employee",
            "where",
            "age",
            "<",
            "value",
            "group",
            "by",
            "city",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Find the cities that have more than one employee under age 30.",
        "question_toks": [
            "Find",
            "the",
            "cities",
            "that",
            "have",
            "more",
            "than",
            "one",
            "employee",
            "under",
            "age",
            "30",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 267,
        "query": "SELECT count(*) , LOCATION FROM shop GROUP BY LOCATION",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "LOCATION",
            "FROM",
            "shop",
            "GROUP",
            "BY",
            "LOCATION"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "location",
            "from",
            "shop",
            "group",
            "by",
            "location"
        ],
        "question": "Find the number of shops in each location.",
        "question_toks": [
            "Find",
            "the",
            "number",
            "of",
            "shops",
            "in",
            "each",
            "location",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 268,
        "query": "SELECT count(*) , LOCATION FROM shop GROUP BY LOCATION",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "LOCATION",
            "FROM",
            "shop",
            "GROUP",
            "BY",
            "LOCATION"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "location",
            "from",
            "shop",
            "group",
            "by",
            "location"
        ],
        "question": "How many shops are there in each location?",
        "question_toks": [
            "How",
            "many",
            "shops",
            "are",
            "there",
            "in",
            "each",
            "location",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 269,
        "query": "SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop)",
        "query_toks": [
            "SELECT",
            "manager_name,",
            "district",
            "FROM",
            "shop",
            "WHERE",
            "number_products",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "number_products",
            ")",
            "FROM",
            "shop",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "manager_name,",
            "district",
            "from",
            "shop",
            "where",
            "number_products",
            "=",
            "(",
            "select",
            "max",
            "(",
            "number_products",
            ")",
            "from",
            "shop",
            ")"
        ],
        "question": "Find the manager names and districts of the shops whose number of products is the largest.",
        "question_toks": [
            "Find",
            "the",
            "manager",
            "names",
            "and",
            "districts",
            "of",
            "the",
            "shops",
            "whose",
            "number",
            "of",
            "products",
            "is",
            "the",
            "largest",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 270,
        "query": "SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop)",
        "query_toks": [
            "SELECT",
            "manager_name,",
            "district",
            "FROM",
            "shop",
            "WHERE",
            "number_products",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "number_products",
            ")",
            "FROM",
            "shop",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "manager_name,",
            "district",
            "from",
            "shop",
            "where",
            "number_products",
            "=",
            "(",
            "select",
            "max",
            "(",
            "number_products",
            ")",
            "from",
            "shop",
            ")"
        ],
        "question": "What are the manager names and districts of the shops that sell the largest number of products?",
        "question_toks": [
            "What",
            "are",
            "the",
            "manager",
            "names",
            "and",
            "districts",
            "of",
            "the",
            "shops",
            "that",
            "sell",
            "the",
            "largest",
            "number",
            "of",
            "products",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 271,
        "query": "SELECT min(Number_products) , max(Number_products) FROM shop",
        "query_toks": [
            "SELECT",
            "min",
            "(",
            "Number_products",
            ")",
            ",",
            "max",
            "(",
            "Number_products",
            ")",
            "FROM",
            "shop"
        ],
        "query_toks_no_value": [
            "select",
            "min",
            "(",
            "number_products",
            ")",
            ",",
            "max",
            "(",
            "number_products",
            ")",
            "from",
            "shop"
        ],
        "question": "find the minimum and maximum number of products of all stores.",
        "question_toks": [
            "find",
            "the",
            "minimum",
            "and",
            "maximum",
            "number",
            "of",
            "products",
            "of",
            "all",
            "stores",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 272,
        "query": "SELECT min(Number_products) , max(Number_products) FROM shop",
        "query_toks": [
            "SELECT",
            "min",
            "(",
            "Number_products",
            ")",
            ",",
            "max",
            "(",
            "Number_products",
            ")",
            "FROM",
            "shop"
        ],
        "query_toks_no_value": [
            "select",
            "min",
            "(",
            "number_products",
            ")",
            ",",
            "max",
            "(",
            "number_products",
            ")",
            "from",
            "shop"
        ],
        "question": "What are the minimum and maximum number of products across all the shops?",
        "question_toks": [
            "What",
            "are",
            "the",
            "minimum",
            "and",
            "maximum",
            "number",
            "of",
            "products",
            "across",
            "all",
            "the",
            "shops",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 273,
        "query": "SELECT name, LOCATION, district FROM shop ORDER BY number_products DESC, Shop_ID ASC",
        "query_toks": [
            "SELECT",
            "name,",
            "LOCATION,",
            "district",
            "FROM",
            "shop",
            "ORDER",
            "BY",
            "number_products",
            "DESC,",
            "Shop_ID",
            "ASC"
        ],
        "query_toks_no_value": [
            "select",
            "name,",
            "location,",
            "district",
            "from",
            "shop",
            "order",
            "by",
            "number_products",
            "desc,",
            "shop_id",
            "asc"
        ],
        "question": "Return the name, location and district of all shops in descending order of number of products, and in ascending order of Shop ID when the number of products are the same.",
        "question_toks": [
            "Return",
            "the",
            "name",
            ",",
            "location",
            "and",
            "district",
            "of",
            "all",
            "shops",
            "in",
            "descending",
            "order",
            "of",
            "number",
            "of",
            "products",
            ",",
            "and",
            "in",
            "ascending",
            "order",
            "of",
            "Shop",
            "ID",
            "when",
            "the",
            "number",
            "of",
            "products",
            "are",
            "the",
            "same",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 274,
        "query": "SELECT name, location, district FROM shop ORDER BY number_products DESC, Shop_ID ASC",
        "query_toks": [
            "SELECT",
            "name,",
            "location,",
            "district",
            "FROM",
            "shop",
            "ORDER",
            "BY",
            "number_products",
            "DESC,",
            "Shop_ID",
            "ASC"
        ],
        "query_toks_no_value": [
            "select",
            "name,",
            "location,",
            "district",
            "from",
            "shop",
            "order",
            "by",
            "number_products",
            "desc,",
            "shop_id",
            "asc"
        ],
        "question": "Sort all the shops by id in ascending order after sorting by number of products in descending order, and return the name, location, and district of each shop.",
        "question_toks": [
            "Sort",
            "all",
            "the",
            "shops",
            "by",
            "id",
            "in",
            "ascending",
            "order",
            "after",
            "sorting",
            "by",
            "number",
            "of",
            "products",
            "in",
            "descending",
            "order",
            ",",
            "and",
            "return",
            "the",
            "name",
            ",",
            "location",
            ",",
            "and",
            "district",
            "of",
            "each",
            "shop",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 275,
        "query": "SELECT name FROM shop WHERE number_products > (SELECT avg(number_products) FROM shop)",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "shop",
            "WHERE",
            "number_products",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "number_products",
            ")",
            "FROM",
            "shop",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "shop",
            "where",
            "number_products",
            ">",
            "(",
            "select",
            "avg",
            "(",
            "number_products",
            ")",
            "from",
            "shop",
            ")"
        ],
        "question": "Find the names of stores whose number products is more than the average number of products.",
        "question_toks": [
            "Find",
            "the",
            "names",
            "of",
            "stores",
            "whose",
            "number",
            "products",
            "is",
            "more",
            "than",
            "the",
            "average",
            "number",
            "of",
            "products",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 276,
        "query": "SELECT name FROM shop WHERE number_products > (SELECT avg(number_products) FROM shop)",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "shop",
            "WHERE",
            "number_products",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "number_products",
            ")",
            "FROM",
            "shop",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "shop",
            "where",
            "number_products",
            ">",
            "(",
            "select",
            "avg",
            "(",
            "number_products",
            ")",
            "from",
            "shop",
            ")"
        ],
        "question": "Which shops' number products is above the average? Give me the shop names.",
        "question_toks": [
            "Which",
            "shops",
            "'",
            "number",
            "products",
            "is",
            "above",
            "the",
            "average",
            "?",
            "Give",
            "me",
            "the",
            "shop",
            "names",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 277,
        "query": "SELECT employee.name FROM employee JOIN (SELECT MAX(totalAwards) AS totalAwards FROM (SELECT employee_id, COUNT(employee_id) AS totalAwards FROM evaluation GROUP BY employee_id)) Awards ON Awards.totalAwards = (SELECT COUNT(*) FROM evaluation WHERE evaluation.employee_id = employee.employee_id)",
        "query_toks": [
            "SELECT",
            "employee.name",
            "FROM",
            "employee",
            "JOIN",
            "(",
            "SELECT",
            "MAX",
            "(",
            "totalAwards",
            ")",
            "AS",
            "totalAwards",
            "FROM",
            "(",
            "SELECT",
            "employee_id,",
            "COUNT",
            "(",
            "employee_id",
            ")",
            "AS",
            "totalAwards",
            "FROM",
            "evaluation",
            "GROUP",
            "BY",
            "employee_id",
            ")",
            ")",
            "Awards",
            "ON",
            "Awards.totalAwards",
            "=",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "evaluation",
            "WHERE",
            "evaluation.employee_id",
            "=",
            "employee.employee_id",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "employee.name",
            "from",
            "employee",
            "join",
            "(",
            "select",
            "max",
            "(",
            "totalawards",
            ")",
            "as",
            "totalawards",
            "from",
            "(",
            "select",
            "employee_id,",
            "count",
            "(",
            "employee_id",
            ")",
            "as",
            "totalawards",
            "from",
            "evaluation",
            "group",
            "by",
            "employee_id",
            ")",
            ")",
            "awards",
            "on",
            "awards.totalawards",
            "=",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "evaluation",
            "where",
            "evaluation.employee_id",
            "=",
            "employee.employee_id",
            ")"
        ],
        "question": "Find the name of the employee who was awarded the most times in the evaluation. If there is a tie, return all of the employees.",
        "question_toks": [
            "Find",
            "the",
            "name",
            "of",
            "the",
            "employee",
            "who",
            "was",
            "awarded",
            "the",
            "most",
            "times",
            "in",
            "the",
            "evaluation",
            ".",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "return",
            "all",
            "of",
            "the",
            "employees",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 278,
        "query": "WITH AwardCount AS (SELECT t1.Name, COUNT(*) as TotalAwards FROM employee t1 JOIN evaluation t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t1.Employee_ID) SELECT Name FROM AwardCount WHERE TotalAwards = (SELECT MAX(TotalAwards) FROM AwardCount)",
        "query_toks": [
            "WITH",
            "AwardCount",
            "AS",
            "(",
            "SELECT",
            "t1",
            ".",
            "Name,",
            "COUNT",
            "(",
            "*",
            ")",
            "as",
            "TotalAwards",
            "FROM",
            "employee",
            "t1",
            "JOIN",
            "evaluation",
            "t2",
            "ON",
            "t1",
            ".",
            "Employee_ID",
            "=",
            "t2",
            ".",
            "Employee_ID",
            "GROUP",
            "BY",
            "t1",
            ".",
            "Employee_ID",
            ")",
            "SELECT",
            "Name",
            "FROM",
            "AwardCount",
            "WHERE",
            "TotalAwards",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "TotalAwards",
            ")",
            "FROM",
            "AwardCount",
            ")"
        ],
        "query_toks_no_value": [
            "with",
            "awardcount",
            "as",
            "(",
            "select",
            "t1",
            ".",
            "name,",
            "count",
            "(",
            "*",
            ")",
            "as",
            "totalawards",
            "from",
            "employee",
            "t1",
            "join",
            "evaluation",
            "t2",
            "on",
            "t1",
            ".",
            "employee_id",
            "=",
            "t2",
            ".",
            "employee_id",
            "group",
            "by",
            "t1",
            ".",
            "employee_id",
            ")",
            "select",
            "name",
            "from",
            "awardcount",
            "where",
            "totalawards",
            "=",
            "(",
            "select",
            "max",
            "(",
            "totalawards",
            ")",
            "from",
            "awardcount",
            ")"
        ],
        "question": "Which employees received the most awards in evaluations? If there is a tie, return all employee names.",
        "question_toks": [
            "Which",
            "employees",
            "received",
            "the",
            "most",
            "awards",
            "in",
            "evaluations",
            "?",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "return",
            "all",
            "employee",
            "names",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 279,
        "query": "SELECT name FROM employee WHERE employee_id IN (SELECT employee_id FROM evaluation WHERE bonus = (SELECT MAX(bonus) FROM evaluation))",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "employee",
            "WHERE",
            "employee_id",
            "IN",
            "(",
            "SELECT",
            "employee_id",
            "FROM",
            "evaluation",
            "WHERE",
            "bonus",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "bonus",
            ")",
            "FROM",
            "evaluation",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "employee",
            "where",
            "employee_id",
            "in",
            "(",
            "select",
            "employee_id",
            "from",
            "evaluation",
            "where",
            "bonus",
            "=",
            "(",
            "select",
            "max",
            "(",
            "bonus",
            ")",
            "from",
            "evaluation",
            ")",
            ")"
        ],
        "question": "Find the names of the employees who got the highest one time bonus.",
        "question_toks": [
            "Find",
            "the",
            "names",
            "of",
            "the",
            "employees",
            "who",
            "got",
            "the",
            "highest",
            "one",
            "time",
            "bonus",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 280,
        "query": "SELECT e.name FROM employee e WHERE e.employee_id IN (SELECT ee.employee_id FROM evaluation ee WHERE ee.bonus = (SELECT MAX(bonus) FROM evaluation))",
        "query_toks": [
            "SELECT",
            "e.name",
            "FROM",
            "employee",
            "e",
            "WHERE",
            "e.employee_id",
            "IN",
            "(",
            "SELECT",
            "ee.employee_id",
            "FROM",
            "evaluation",
            "ee",
            "WHERE",
            "ee.bonus",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "bonus",
            ")",
            "FROM",
            "evaluation",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "e.name",
            "from",
            "employee",
            "e",
            "where",
            "e.employee_id",
            "in",
            "(",
            "select",
            "ee.employee_id",
            "from",
            "evaluation",
            "ee",
            "where",
            "ee.bonus",
            "=",
            "(",
            "select",
            "max",
            "(",
            "bonus",
            ")",
            "from",
            "evaluation",
            ")",
            ")"
        ],
        "question": "Which employees received the biggest bonus? Give me the employee names.",
        "question_toks": [
            "Which",
            "employees",
            "received",
            "the",
            "biggest",
            "bonus",
            "?",
            "Give",
            "me",
            "the",
            "employee",
            "names",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 281,
        "query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "employee",
            "WHERE",
            "Employee_ID",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "Employee_ID",
            "FROM",
            "evaluation",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "employee",
            "where",
            "employee_id",
            "not",
            "in",
            "(",
            "select",
            "employee_id",
            "from",
            "evaluation",
            ")"
        ],
        "question": "Find the names of employees who never won any award in the evaluation.",
        "question_toks": [
            "Find",
            "the",
            "names",
            "of",
            "employees",
            "who",
            "never",
            "won",
            "any",
            "award",
            "in",
            "the",
            "evaluation",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 282,
        "query": "SELECT Employee_ID, Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "query_toks": [
            "SELECT",
            "Employee_ID,",
            "Name",
            "FROM",
            "employee",
            "WHERE",
            "Employee_ID",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "Employee_ID",
            "FROM",
            "evaluation",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "employee_id,",
            "name",
            "from",
            "employee",
            "where",
            "employee_id",
            "not",
            "in",
            "(",
            "select",
            "employee_id",
            "from",
            "evaluation",
            ")"
        ],
        "question": "What are the names of the employees along with their IDs who never received any evaluation?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "the",
            "employees",
            "along",
            "with",
            "their",
            "IDs",
            "who",
            "never",
            "received",
            "any",
            "evaluation",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 283,
        "query": "SELECT t2.Name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id HAVING count(*) = (SELECT MAX(employee_count) FROM (SELECT count(*) AS employee_count FROM hiring GROUP BY shop_id) AS counts)",
        "query_toks": [
            "SELECT",
            "t2",
            ".",
            "Name",
            "FROM",
            "hiring",
            "AS",
            "t1",
            "JOIN",
            "shop",
            "AS",
            "t2",
            "ON",
            "t1",
            ".",
            "shop_id",
            "=",
            "t2",
            ".",
            "shop_id",
            "GROUP",
            "BY",
            "t1",
            ".",
            "shop_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "employee_count",
            ")",
            "FROM",
            "(",
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "AS",
            "employee_count",
            "FROM",
            "hiring",
            "GROUP",
            "BY",
            "shop_id",
            ")",
            "AS",
            "counts",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "hiring",
            "as",
            "t1",
            "join",
            "shop",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "shop_id",
            "=",
            "t2",
            ".",
            "shop_id",
            "group",
            "by",
            "t1",
            ".",
            "shop_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "employee_count",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "employee_count",
            "from",
            "hiring",
            "group",
            "by",
            "shop_id",
            ")",
            "as",
            "counts",
            ")"
        ],
        "question": "What are the names of all shops that are hiring the largest number of employees?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "all",
            "shops",
            "that",
            "are",
            "hiring",
            "the",
            "largest",
            "number",
            "of",
            "employees",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 284,
        "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id HAVING COUNT(*) = (SELECT MAX(total_employees) FROM (SELECT COUNT(*) AS total_employees FROM hiring GROUP BY shop_id) AS employee_counts)",
        "query_toks": [
            "SELECT",
            "t2",
            ".",
            "name",
            "FROM",
            "hiring",
            "AS",
            "t1",
            "JOIN",
            "shop",
            "AS",
            "t2",
            "ON",
            "t1",
            ".",
            "shop_id",
            "=",
            "t2",
            ".",
            "shop_id",
            "GROUP",
            "BY",
            "t1",
            ".",
            "shop_id",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "total_employees",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "total_employees",
            "FROM",
            "hiring",
            "GROUP",
            "BY",
            "shop_id",
            ")",
            "AS",
            "employee_counts",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "hiring",
            "as",
            "t1",
            "join",
            "shop",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "shop_id",
            "=",
            "t2",
            ".",
            "shop_id",
            "group",
            "by",
            "t1",
            ".",
            "shop_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "total_employees",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "total_employees",
            "from",
            "hiring",
            "group",
            "by",
            "shop_id",
            ")",
            "as",
            "employee_counts",
            ")"
        ],
        "question": "Which shops have the most employees? Give me the shop names.",
        "question_toks": [
            "Which",
            "shops",
            "have",
            "the",
            "most",
            "employees",
            "?",
            "Give",
            "me",
            "the",
            "shop",
            "names",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 285,
        "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "shop",
            "WHERE",
            "shop_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "shop_id",
            "FROM",
            "hiring",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "shop",
            "where",
            "shop_id",
            "not",
            "in",
            "(",
            "select",
            "shop_id",
            "from",
            "hiring",
            ")"
        ],
        "question": "Find the name of the shops that do not hire any employee.",
        "question_toks": [
            "Find",
            "the",
            "name",
            "of",
            "the",
            "shops",
            "that",
            "do",
            "not",
            "hire",
            "any",
            "employee",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 286,
        "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "shop",
            "WHERE",
            "shop_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "shop_id",
            "FROM",
            "hiring",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "shop",
            "where",
            "shop_id",
            "not",
            "in",
            "(",
            "select",
            "shop_id",
            "from",
            "hiring",
            ")"
        ],
        "question": "Which shops run with no employees? Find the shop names",
        "question_toks": [
            "Which",
            "shops",
            "run",
            "with",
            "no",
            "employees",
            "?",
            "Find",
            "the",
            "shop",
            "names"
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 287,
        "query": "SELECT name, (SELECT COUNT(*) FROM hiring WHERE hiring.shop_id = shop.shop_id) AS num_employees FROM shop",
        "query_toks": [
            "SELECT",
            "name,",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "hiring",
            "WHERE",
            "hiring.shop_id",
            "=",
            "shop.shop_id",
            ")",
            "AS",
            "num_employees",
            "FROM",
            "shop"
        ],
        "query_toks_no_value": [
            "select",
            "name,",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "hiring",
            "where",
            "hiring.shop_id",
            "=",
            "shop.shop_id",
            ")",
            "as",
            "num_employees",
            "from",
            "shop"
        ],
        "question": "Find the number of employees hired in each shop; show the shop name as well.",
        "question_toks": [
            "Find",
            "the",
            "number",
            "of",
            "employees",
            "hired",
            "in",
            "each",
            "shop",
            ";",
            "show",
            "the",
            "shop",
            "name",
            "as",
            "well",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 288,
        "query": "SELECT shop.name, (SELECT COUNT(*) FROM hiring WHERE hiring.shop_id = shop.shop_id) AS emp_count FROM shop",
        "query_toks": [
            "SELECT",
            "shop.name,",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "hiring",
            "WHERE",
            "hiring.shop_id",
            "=",
            "shop.shop_id",
            ")",
            "AS",
            "emp_count",
            "FROM",
            "shop"
        ],
        "query_toks_no_value": [
            "select",
            "shop.name,",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "hiring",
            "where",
            "hiring.shop_id",
            "=",
            "shop.shop_id",
            ")",
            "as",
            "emp_count",
            "from",
            "shop"
        ],
        "question": "For each shop, return the number of employees working there and the name of the shop.",
        "question_toks": [
            "For",
            "each",
            "shop",
            ",",
            "return",
            "the",
            "number",
            "of",
            "employees",
            "working",
            "there",
            "and",
            "the",
            "name",
            "of",
            "the",
            "shop",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 289,
        "query": "SELECT sum(bonus) FROM evaluation",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "bonus",
            ")",
            "FROM",
            "evaluation"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "bonus",
            ")",
            "from",
            "evaluation"
        ],
        "question": "What is total bonus given in all evaluations?",
        "question_toks": [
            "What",
            "is",
            "total",
            "bonus",
            "given",
            "in",
            "all",
            "evaluations",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 290,
        "query": "SELECT sum(bonus) FROM evaluation",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "bonus",
            ")",
            "FROM",
            "evaluation"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "bonus",
            ")",
            "from",
            "evaluation"
        ],
        "question": "Find the total amount of bonus given in all the evaluations.",
        "question_toks": [
            "Find",
            "the",
            "total",
            "amount",
            "of",
            "bonus",
            "given",
            "in",
            "all",
            "the",
            "evaluations",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 291,
        "query": "SELECT * FROM hiring",
        "query_toks": [
            "SELECT",
            "*",
            "FROM",
            "hiring"
        ],
        "query_toks_no_value": [
            "select",
            "*",
            "from",
            "hiring"
        ],
        "question": "Give me all the information about hiring.",
        "question_toks": [
            "Give",
            "me",
            "all",
            "the",
            "information",
            "about",
            "hiring",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 292,
        "query": "SELECT * FROM hiring",
        "query_toks": [
            "SELECT",
            "*",
            "FROM",
            "hiring"
        ],
        "query_toks_no_value": [
            "select",
            "*",
            "from",
            "hiring"
        ],
        "question": "What is all the information about hiring?",
        "question_toks": [
            "What",
            "is",
            "all",
            "the",
            "information",
            "about",
            "hiring",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 293,
        "query": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
        "query_toks": [
            "SELECT",
            "district",
            "FROM",
            "shop",
            "WHERE",
            "Number_products",
            "<",
            "3000",
            "INTERSECT",
            "SELECT",
            "district",
            "FROM",
            "shop",
            "WHERE",
            "Number_products",
            ">",
            "10000"
        ],
        "query_toks_no_value": [
            "select",
            "district",
            "from",
            "shop",
            "where",
            "number_products",
            "<",
            "value",
            "intersect",
            "select",
            "district",
            "from",
            "shop",
            "where",
            "number_products",
            ">",
            "value"
        ],
        "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "question_toks": [
            "Which",
            "district",
            "has",
            "both",
            "stores",
            "with",
            "less",
            "than",
            "3000",
            "products",
            "and",
            "stores",
            "with",
            "more",
            "than",
            "10000",
            "products",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 294,
        "query": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
        "query_toks": [
            "SELECT",
            "district",
            "FROM",
            "shop",
            "WHERE",
            "Number_products",
            "<",
            "3000",
            "INTERSECT",
            "SELECT",
            "district",
            "FROM",
            "shop",
            "WHERE",
            "Number_products",
            ">",
            "10000"
        ],
        "query_toks_no_value": [
            "select",
            "district",
            "from",
            "shop",
            "where",
            "number_products",
            "<",
            "value",
            "intersect",
            "select",
            "district",
            "from",
            "shop",
            "where",
            "number_products",
            ">",
            "value"
        ],
        "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
        "question_toks": [
            "Find",
            "the",
            "districts",
            "in",
            "which",
            "there",
            "are",
            "both",
            "shops",
            "selling",
            "less",
            "than",
            "3000",
            "products",
            "and",
            "shops",
            "selling",
            "more",
            "than",
            "10000",
            "products",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 295,
        "query": "SELECT count(DISTINCT LOCATION) FROM shop",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "LOCATION",
            ")",
            "FROM",
            "shop"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "location",
            ")",
            "from",
            "shop"
        ],
        "question": "How many different store locations are there?",
        "question_toks": [
            "How",
            "many",
            "different",
            "store",
            "locations",
            "are",
            "there",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "employee_hire_evaluation",
        "id": 296,
        "query": "SELECT count(DISTINCT LOCATION) FROM shop",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "LOCATION",
            ")",
            "FROM",
            "shop"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "location",
            ")",
            "from",
            "shop"
        ],
        "question": "Count the number of distinct store locations.",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "distinct",
            "store",
            "locations",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 297,
        "query": "SELECT count(*) FROM Documents",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Documents"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "documents"
        ],
        "question": "How many documents do we have?",
        "question_toks": [
            "How",
            "many",
            "documents",
            "do",
            "we",
            "have",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 298,
        "query": "SELECT count(*) FROM Documents",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Documents"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "documents"
        ],
        "question": "Count the number of documents.",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "documents",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 299,
        "query": "SELECT document_id , document_name , document_description FROM Documents",
        "query_toks": [
            "SELECT",
            "document_id",
            ",",
            "document_name",
            ",",
            "document_description",
            "FROM",
            "Documents"
        ],
        "query_toks_no_value": [
            "select",
            "document_id",
            ",",
            "document_name",
            ",",
            "document_description",
            "from",
            "documents"
        ],
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "question_toks": [
            "List",
            "document",
            "IDs",
            ",",
            "document",
            "names",
            ",",
            "and",
            "document",
            "descriptions",
            "for",
            "all",
            "documents",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 300,
        "query": "SELECT document_id , document_name , document_description FROM Documents",
        "query_toks": [
            "SELECT",
            "document_id",
            ",",
            "document_name",
            ",",
            "document_description",
            "FROM",
            "Documents"
        ],
        "query_toks_no_value": [
            "select",
            "document_id",
            ",",
            "document_name",
            ",",
            "document_description",
            "from",
            "documents"
        ],
        "question": "What are the ids, names, and descriptions for all documents?",
        "question_toks": [
            "What",
            "are",
            "the",
            "ids",
            ",",
            "names",
            ",",
            "and",
            "descriptions",
            "for",
            "all",
            "documents",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 301,
        "query": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE '%w%'",
        "query_toks": [
            "SELECT",
            "document_name",
            ",",
            "template_id",
            "FROM",
            "Documents",
            "WHERE",
            "Document_Description",
            "LIKE",
            "'%w%",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "document_name",
            ",",
            "template_id",
            "from",
            "documents",
            "where",
            "document_description",
            "like",
            "value"
        ],
        "question": "What is the document name and template id for document with description with the letter 'w' in it?",
        "question_toks": [
            "What",
            "is",
            "the",
            "document",
            "name",
            "and",
            "template",
            "id",
            "for",
            "document",
            "with",
            "description",
            "with",
            "the",
            "letter",
            "'w",
            "'",
            "in",
            "it",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 302,
        "query": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE '%w%'",
        "query_toks": [
            "SELECT",
            "document_name",
            ",",
            "template_id",
            "FROM",
            "Documents",
            "WHERE",
            "Document_Description",
            "LIKE",
            "'%w%",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "document_name",
            ",",
            "template_id",
            "from",
            "documents",
            "where",
            "document_description",
            "like",
            "value"
        ],
        "question": "Return the names and template ids for documents that contain the letter w in their description.",
        "question_toks": [
            "Return",
            "the",
            "names",
            "and",
            "template",
            "ids",
            "for",
            "documents",
            "that",
            "contain",
            "the",
            "letter",
            "w",
            "in",
            "their",
            "description",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 303,
        "query": "SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = 'Robbin CV'",
        "query_toks": [
            "SELECT",
            "document_id",
            ",",
            "template_id",
            ",",
            "Document_Description",
            "FROM",
            "Documents",
            "WHERE",
            "document_name",
            "=",
            "'Robbin",
            "CV",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "document_id",
            ",",
            "template_id",
            ",",
            "document_description",
            "from",
            "documents",
            "where",
            "document_name",
            "=",
            "value"
        ],
        "question": "What is the document id, template id and description for document named 'Robbin CV'?",
        "question_toks": [
            "What",
            "is",
            "the",
            "document",
            "id",
            ",",
            "template",
            "id",
            "and",
            "description",
            "for",
            "document",
            "named",
            "``",
            "Robbin",
            "CV",
            "''",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 304,
        "query": "SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = 'Robbin CV'",
        "query_toks": [
            "SELECT",
            "document_id",
            ",",
            "template_id",
            ",",
            "Document_Description",
            "FROM",
            "Documents",
            "WHERE",
            "document_name",
            "=",
            "'Robbin",
            "CV",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "document_id",
            ",",
            "template_id",
            ",",
            "document_description",
            "from",
            "documents",
            "where",
            "document_name",
            "=",
            "value"
        ],
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "question_toks": [
            "Return",
            "the",
            "document",
            "id",
            ",",
            "template",
            "id",
            ",",
            "and",
            "description",
            "for",
            "the",
            "document",
            "with",
            "the",
            "name",
            "Robbin",
            "CV",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 305,
        "query": "SELECT count(DISTINCT template_id) FROM Documents",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "template_id",
            ")",
            "FROM",
            "Documents"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "template_id",
            ")",
            "from",
            "documents"
        ],
        "question": "How many different templates do all document use?",
        "question_toks": [
            "How",
            "many",
            "different",
            "templates",
            "do",
            "all",
            "document",
            "use",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 306,
        "query": "SELECT count(DISTINCT template_id) FROM Documents",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "template_id",
            ")",
            "FROM",
            "Documents"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "template_id",
            ")",
            "from",
            "documents"
        ],
        "question": "Count the number of different templates used for documents.",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "different",
            "templates",
            "used",
            "for",
            "documents",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 307,
        "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Documents",
            "AS",
            "T1",
            "JOIN",
            "Templates",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Template_ID",
            "=",
            "T2",
            ".",
            "Template_ID",
            "WHERE",
            "T2",
            ".",
            "Template_Type_Code",
            "=",
            "'PPT",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "documents",
            "as",
            "t1",
            "join",
            "templates",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id",
            "where",
            "t2",
            ".",
            "template_type_code",
            "=",
            "value"
        ],
        "question": "How many documents are using the template with type code 'PPT'?",
        "question_toks": [
            "How",
            "many",
            "documents",
            "are",
            "using",
            "the",
            "template",
            "with",
            "type",
            "code",
            "'PPT",
            "'",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 308,
        "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Documents",
            "AS",
            "T1",
            "JOIN",
            "Templates",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Template_ID",
            "=",
            "T2",
            ".",
            "Template_ID",
            "WHERE",
            "T2",
            ".",
            "Template_Type_Code",
            "=",
            "'PPT",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "documents",
            "as",
            "t1",
            "join",
            "templates",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id",
            "where",
            "t2",
            ".",
            "template_type_code",
            "=",
            "value"
        ],
        "question": "Count the number of documents that use the PPT template type.",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "documents",
            "that",
            "use",
            "the",
            "PPT",
            "template",
            "type",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 309,
        "query": "SELECT t.template_id, COUNT(d.document_id) AS number_of_documents FROM templates t LEFT JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id",
        "query_toks": [
            "SELECT",
            "t",
            ".",
            "template_id,",
            "COUNT",
            "(",
            "d.document_id",
            ")",
            "AS",
            "number_of_documents",
            "FROM",
            "templates",
            "t",
            "LEFT",
            "JOIN",
            "documents",
            "d",
            "ON",
            "t",
            ".",
            "template_id",
            "=",
            "d.template_id",
            "GROUP",
            "BY",
            "t",
            ".",
            "template_id"
        ],
        "query_toks_no_value": [
            "select",
            "t",
            ".",
            "template_id,",
            "count",
            "(",
            "d.document_id",
            ")",
            "as",
            "number_of_documents",
            "from",
            "templates",
            "t",
            "left",
            "join",
            "documents",
            "d",
            "on",
            "t",
            ".",
            "template_id",
            "=",
            "d.template_id",
            "group",
            "by",
            "t",
            ".",
            "template_id"
        ],
        "question": "Show all template ids and number of documents using each template.",
        "question_toks": [
            "Show",
            "all",
            "template",
            "ids",
            "and",
            "number",
            "of",
            "documents",
            "using",
            "each",
            "template",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 310,
        "query": "SELECT template_id , count(*) FROM Documents GROUP BY template_id",
        "query_toks": [
            "SELECT",
            "template_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Documents",
            "GROUP",
            "BY",
            "template_id"
        ],
        "query_toks_no_value": [
            "select",
            "template_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "documents",
            "group",
            "by",
            "template_id"
        ],
        "question": "What are all different template ids used for documents, and how many times were each of them used?",
        "question_toks": [
            "What",
            "are",
            "all",
            "different",
            "template",
            "ids",
            "used",
            "for",
            "documents",
            ",",
            "and",
            "how",
            "many",
            "times",
            "were",
            "each",
            "of",
            "them",
            "used",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 311,
        "query": "SELECT T1.template_id, T2.Template_Type_code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id, T2.Template_Type_code HAVING COUNT(*) = (SELECT MAX(doc_count) FROM (SELECT COUNT(*) AS doc_count FROM Documents GROUP BY template_id) AS max_count)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "template_id,",
            "T2",
            ".",
            "Template_Type_code",
            "FROM",
            "Documents",
            "AS",
            "T1",
            "JOIN",
            "Templates",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "template_id",
            "=",
            "T2",
            ".",
            "template_id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "template_id,",
            "T2",
            ".",
            "Template_Type_code",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "doc_count",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "doc_count",
            "FROM",
            "Documents",
            "GROUP",
            "BY",
            "template_id",
            ")",
            "AS",
            "max_count",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "template_id,",
            "t2",
            ".",
            "template_type_code",
            "from",
            "documents",
            "as",
            "t1",
            "join",
            "templates",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id",
            "group",
            "by",
            "t1",
            ".",
            "template_id,",
            "t2",
            ".",
            "template_type_code",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "doc_count",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "doc_count",
            "from",
            "documents",
            "group",
            "by",
            "template_id",
            ")",
            "as",
            "max_count",
            ")"
        ],
        "question": "What is the id and type code for the template(s) used by the most documents, and if there is a tie, return all tied template(s) ids and type codes?",
        "question_toks": [
            "What",
            "is",
            "the",
            "id",
            "and",
            "type",
            "code",
            "for",
            "the",
            "template",
            "(",
            "s",
            ")",
            "used",
            "by",
            "the",
            "most",
            "documents",
            ",",
            "and",
            "if",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "return",
            "all",
            "tied",
            "template",
            "(",
            "s",
            ")",
            "ids",
            "and",
            "type",
            "codes",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 312,
        "query": "SELECT T1.template_id, T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id, T2.Template_Type_Code HAVING COUNT(*) = (SELECT MAX(doc_count) FROM (SELECT COUNT(*) AS doc_count FROM Documents GROUP BY template_id) AS subquery)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "template_id,",
            "T2",
            ".",
            "Template_Type_Code",
            "FROM",
            "Documents",
            "AS",
            "T1",
            "JOIN",
            "Templates",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "template_id",
            "=",
            "T2",
            ".",
            "template_id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "template_id,",
            "T2",
            ".",
            "Template_Type_Code",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "doc_count",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "doc_count",
            "FROM",
            "Documents",
            "GROUP",
            "BY",
            "template_id",
            ")",
            "AS",
            "subquery",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "template_id,",
            "t2",
            ".",
            "template_type_code",
            "from",
            "documents",
            "as",
            "t1",
            "join",
            "templates",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id",
            "group",
            "by",
            "t1",
            ".",
            "template_id,",
            "t2",
            ".",
            "template_type_code",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "doc_count",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "doc_count",
            "from",
            "documents",
            "group",
            "by",
            "template_id",
            ")",
            "as",
            "subquery",
            ")"
        ],
        "question": "Return the id and type code of the template(s) that is used for the greatest number of documents. If there is a tie, include all such template ids and type codes.",
        "question_toks": [
            "Return",
            "the",
            "id",
            "and",
            "type",
            "code",
            "of",
            "the",
            "template",
            "(",
            "s",
            ")",
            "that",
            "is",
            "used",
            "for",
            "the",
            "greatest",
            "number",
            "of",
            "documents",
            ".",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "include",
            "all",
            "such",
            "template",
            "ids",
            "and",
            "type",
            "codes",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 313,
        "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*) > 1",
        "query_toks": [
            "SELECT",
            "template_id",
            "FROM",
            "Documents",
            "GROUP",
            "BY",
            "template_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "template_id",
            "from",
            "documents",
            "group",
            "by",
            "template_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Show ids for all templates that are used by more than one document.",
        "question_toks": [
            "Show",
            "ids",
            "for",
            "all",
            "templates",
            "that",
            "are",
            "used",
            "by",
            "more",
            "than",
            "one",
            "document",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 314,
        "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*) > 1",
        "query_toks": [
            "SELECT",
            "template_id",
            "FROM",
            "Documents",
            "GROUP",
            "BY",
            "template_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "template_id",
            "from",
            "documents",
            "group",
            "by",
            "template_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "What are the template ids of any templates used in more than a single document?",
        "question_toks": [
            "What",
            "are",
            "the",
            "template",
            "ids",
            "of",
            "any",
            "templates",
            "used",
            "in",
            "more",
            "than",
            "a",
            "single",
            "document",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 315,
        "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "query_toks": [
            "SELECT",
            "template_id",
            "FROM",
            "Templates",
            "EXCEPT",
            "SELECT",
            "template_id",
            "FROM",
            "Documents"
        ],
        "query_toks_no_value": [
            "select",
            "template_id",
            "from",
            "templates",
            "except",
            "select",
            "template_id",
            "from",
            "documents"
        ],
        "question": "Show ids for all templates not used by any document.",
        "question_toks": [
            "Show",
            "ids",
            "for",
            "all",
            "templates",
            "not",
            "used",
            "by",
            "any",
            "document",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 316,
        "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "query_toks": [
            "SELECT",
            "template_id",
            "FROM",
            "Templates",
            "EXCEPT",
            "SELECT",
            "template_id",
            "FROM",
            "Documents"
        ],
        "query_toks_no_value": [
            "select",
            "template_id",
            "from",
            "templates",
            "except",
            "select",
            "template_id",
            "from",
            "documents"
        ],
        "question": "What are the ids for templates that are not used in any documents?",
        "question_toks": [
            "What",
            "are",
            "the",
            "ids",
            "for",
            "templates",
            "that",
            "are",
            "not",
            "used",
            "in",
            "any",
            "documents",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 317,
        "query": "SELECT count(*) FROM Templates",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Templates"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates"
        ],
        "question": "How many templates do we have?",
        "question_toks": [
            "How",
            "many",
            "templates",
            "do",
            "we",
            "have",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 318,
        "query": "SELECT count(*) FROM Templates",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Templates"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates"
        ],
        "question": "Count the number of templates.",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "templates",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 319,
        "query": "SELECT template_id , version_number , template_type_code FROM Templates",
        "query_toks": [
            "SELECT",
            "template_id",
            ",",
            "version_number",
            ",",
            "template_type_code",
            "FROM",
            "Templates"
        ],
        "query_toks_no_value": [
            "select",
            "template_id",
            ",",
            "version_number",
            ",",
            "template_type_code",
            "from",
            "templates"
        ],
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "question_toks": [
            "Show",
            "template",
            "ids",
            ",",
            "version",
            "numbers",
            ",",
            "and",
            "template",
            "type",
            "codes",
            "for",
            "all",
            "templates",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 320,
        "query": "SELECT template_id , version_number , template_type_code FROM Templates",
        "query_toks": [
            "SELECT",
            "template_id",
            ",",
            "version_number",
            ",",
            "template_type_code",
            "FROM",
            "Templates"
        ],
        "query_toks_no_value": [
            "select",
            "template_id",
            ",",
            "version_number",
            ",",
            "template_type_code",
            "from",
            "templates"
        ],
        "question": "What are the ids, version numbers, and type codes for each template?",
        "question_toks": [
            "What",
            "are",
            "the",
            "ids",
            ",",
            "version",
            "numbers",
            ",",
            "and",
            "type",
            "codes",
            "for",
            "each",
            "template",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 321,
        "query": "SELECT DISTINCT template_type_code FROM Templates",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "template_type_code",
            "FROM",
            "Templates"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "template_type_code",
            "from",
            "templates"
        ],
        "question": "Show all distinct template type codes for all templates.",
        "question_toks": [
            "Show",
            "all",
            "distinct",
            "template",
            "type",
            "codes",
            "for",
            "all",
            "templates",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 322,
        "query": "SELECT DISTINCT template_type_code FROM ref_template_types;",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "template_type_code",
            "FROM",
            "ref_template_types"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "template_type_code",
            "from",
            "ref_template_types"
        ],
        "question": "What are the different template type codes?",
        "question_toks": [
            "What",
            "are",
            "the",
            "different",
            "template",
            "type",
            "codes",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 323,
        "query": "SELECT template_id FROM Templates WHERE template_type_code = 'PP' OR template_type_code = 'PPT'",
        "query_toks": [
            "SELECT",
            "template_id",
            "FROM",
            "Templates",
            "WHERE",
            "template_type_code",
            "=",
            "'PP",
            "'",
            "OR",
            "template_type_code",
            "=",
            "'PPT",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "template_id",
            "from",
            "templates",
            "where",
            "template_type_code",
            "=",
            "value",
            "or",
            "template_type_code",
            "=",
            "value"
        ],
        "question": "What are the ids of templates with template type code PP or PPT?",
        "question_toks": [
            "What",
            "are",
            "the",
            "ids",
            "of",
            "templates",
            "with",
            "template",
            "type",
            "code",
            "PP",
            "or",
            "PPT",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 324,
        "query": "SELECT template_id FROM Templates WHERE template_type_code = 'PP' OR template_type_code = 'PPT'",
        "query_toks": [
            "SELECT",
            "template_id",
            "FROM",
            "Templates",
            "WHERE",
            "template_type_code",
            "=",
            "'PP",
            "'",
            "OR",
            "template_type_code",
            "=",
            "'PPT",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "template_id",
            "from",
            "templates",
            "where",
            "template_type_code",
            "=",
            "value",
            "or",
            "template_type_code",
            "=",
            "value"
        ],
        "question": "Return the ids of templates that have the code PP or PPT.",
        "question_toks": [
            "Return",
            "the",
            "ids",
            "of",
            "templates",
            "that",
            "have",
            "the",
            "code",
            "PP",
            "or",
            "PPT",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 325,
        "query": "SELECT count(*) FROM Templates WHERE template_type_code = 'CV'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Templates",
            "WHERE",
            "template_type_code",
            "=",
            "'CV",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates",
            "where",
            "template_type_code",
            "=",
            "value"
        ],
        "question": "How many templates have template type code CV?",
        "question_toks": [
            "How",
            "many",
            "templates",
            "have",
            "template",
            "type",
            "code",
            "CV",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 326,
        "query": "SELECT count(*) FROM Templates WHERE template_type_code  =  'CV'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Templates",
            "WHERE",
            "template_type_code",
            "=",
            "'CV",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates",
            "where",
            "template_type_code",
            "=",
            "value"
        ],
        "question": "Count the number of templates of the type CV.",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "templates",
            "of",
            "the",
            "type",
            "CV",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 327,
        "query": "SELECT version_number , template_type_code FROM Templates WHERE version_number > 5",
        "query_toks": [
            "SELECT",
            "version_number",
            ",",
            "template_type_code",
            "FROM",
            "Templates",
            "WHERE",
            "version_number",
            ">",
            "5"
        ],
        "query_toks_no_value": [
            "select",
            "version_number",
            ",",
            "template_type_code",
            "from",
            "templates",
            "where",
            "version_number",
            ">",
            "value"
        ],
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "question_toks": [
            "What",
            "is",
            "the",
            "version",
            "number",
            "and",
            "template",
            "type",
            "code",
            "for",
            "the",
            "template",
            "with",
            "version",
            "number",
            "later",
            "than",
            "5",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 328,
        "query": "SELECT version_number , template_type_code FROM Templates WHERE version_number > 5",
        "query_toks": [
            "SELECT",
            "version_number",
            ",",
            "template_type_code",
            "FROM",
            "Templates",
            "WHERE",
            "version_number",
            ">",
            "5"
        ],
        "query_toks_no_value": [
            "select",
            "version_number",
            ",",
            "template_type_code",
            "from",
            "templates",
            "where",
            "version_number",
            ">",
            "value"
        ],
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "question_toks": [
            "Return",
            "the",
            "version",
            "numbers",
            "and",
            "template",
            "type",
            "codes",
            "of",
            "templates",
            "with",
            "a",
            "version",
            "number",
            "greater",
            "than",
            "5",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 329,
        "query": "SELECT template_type_code , count(*) FROM Templates GROUP BY template_type_code",
        "query_toks": [
            "SELECT",
            "template_type_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Templates",
            "GROUP",
            "BY",
            "template_type_code"
        ],
        "query_toks_no_value": [
            "select",
            "template_type_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates",
            "group",
            "by",
            "template_type_code"
        ],
        "question": "Show all template type codes and number of templates for each.",
        "question_toks": [
            "Show",
            "all",
            "template",
            "type",
            "codes",
            "and",
            "number",
            "of",
            "templates",
            "for",
            "each",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 330,
        "query": "SELECT template_type_code , count(*) FROM Templates GROUP BY template_type_code",
        "query_toks": [
            "SELECT",
            "template_type_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Templates",
            "GROUP",
            "BY",
            "template_type_code"
        ],
        "query_toks_no_value": [
            "select",
            "template_type_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates",
            "group",
            "by",
            "template_type_code"
        ],
        "question": "What are the different template type codes, and how many templates correspond to each?",
        "question_toks": [
            "What",
            "are",
            "the",
            "different",
            "template",
            "type",
            "codes",
            ",",
            "and",
            "how",
            "many",
            "templates",
            "correspond",
            "to",
            "each",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 331,
        "query": "WITH template_counts AS (SELECT template_type_code, COUNT(*) AS template_count FROM Templates GROUP BY template_type_code) SELECT template_type_code FROM template_counts WHERE template_count = (SELECT MAX(template_count) FROM template_counts)",
        "query_toks": [
            "WITH",
            "template_counts",
            "AS",
            "(",
            "SELECT",
            "template_type_code,",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "template_count",
            "FROM",
            "Templates",
            "GROUP",
            "BY",
            "template_type_code",
            ")",
            "SELECT",
            "template_type_code",
            "FROM",
            "template_counts",
            "WHERE",
            "template_count",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "template_count",
            ")",
            "FROM",
            "template_counts",
            ")"
        ],
        "query_toks_no_value": [
            "with",
            "template_counts",
            "as",
            "(",
            "select",
            "template_type_code,",
            "count",
            "(",
            "*",
            ")",
            "as",
            "template_count",
            "from",
            "templates",
            "group",
            "by",
            "template_type_code",
            ")",
            "select",
            "template_type_code",
            "from",
            "template_counts",
            "where",
            "template_count",
            "=",
            "(",
            "select",
            "max",
            "(",
            "template_count",
            ")",
            "from",
            "template_counts",
            ")"
        ],
        "question": "Which template type code or type codes have the most number of templates, and if there is a tie, return all tied template type codes?",
        "question_toks": [
            "Which",
            "template",
            "type",
            "code",
            "or",
            "type",
            "codes",
            "have",
            "the",
            "most",
            "number",
            "of",
            "templates",
            ",",
            "and",
            "if",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "return",
            "all",
            "tied",
            "template",
            "type",
            "codes",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 332,
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*) = (SELECT max(count) FROM (SELECT count(*) as count FROM Templates GROUP BY template_type_code) as counts)",
        "query_toks": [
            "SELECT",
            "template_type_code",
            "FROM",
            "Templates",
            "GROUP",
            "BY",
            "template_type_code",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "count",
            ")",
            "FROM",
            "(",
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "as",
            "count",
            "FROM",
            "Templates",
            "GROUP",
            "BY",
            "template_type_code",
            ")",
            "as",
            "counts",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "template_type_code",
            "from",
            "templates",
            "group",
            "by",
            "template_type_code",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "count",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "count",
            "from",
            "templates",
            "group",
            "by",
            "template_type_code",
            ")",
            "as",
            "counts",
            ")"
        ],
        "question": "Return the type code or type codes of the template type(s) that the most templates belong to.",
        "question_toks": [
            "Return",
            "the",
            "type",
            "code",
            "or",
            "type",
            "codes",
            "of",
            "the",
            "template",
            "type",
            "(",
            "s",
            ")",
            "that",
            "the",
            "most",
            "templates",
            "belong",
            "to",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 333,
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*) < 3",
        "query_toks": [
            "SELECT",
            "template_type_code",
            "FROM",
            "Templates",
            "GROUP",
            "BY",
            "template_type_code",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "<",
            "3"
        ],
        "query_toks_no_value": [
            "select",
            "template_type_code",
            "from",
            "templates",
            "group",
            "by",
            "template_type_code",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<",
            "value"
        ],
        "question": "Show all template type codes with less than three templates.",
        "question_toks": [
            "Show",
            "all",
            "template",
            "type",
            "codes",
            "with",
            "less",
            "than",
            "three",
            "templates",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 334,
        "query": "SELECT r.template_type_code FROM ref_template_types r WHERE (SELECT COUNT(*) FROM templates t WHERE t.template_type_code = r.template_type_code) < 3",
        "query_toks": [
            "SELECT",
            "r.template_type_code",
            "FROM",
            "ref_template_types",
            "r",
            "WHERE",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "templates",
            "t",
            "WHERE",
            "t",
            ".",
            "template_type_code",
            "=",
            "r.template_type_code",
            ")",
            "<",
            "3"
        ],
        "query_toks_no_value": [
            "select",
            "r.template_type_code",
            "from",
            "ref_template_types",
            "r",
            "where",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates",
            "t",
            "where",
            "t",
            ".",
            "template_type_code",
            "=",
            "r.template_type_code",
            ")",
            "<",
            "value"
        ],
        "question": "What are the codes of template types that have fewer than 3 templates?",
        "question_toks": [
            "What",
            "are",
            "the",
            "codes",
            "of",
            "template",
            "types",
            "that",
            "have",
            "fewer",
            "than",
            "3",
            "templates",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 335,
        "query": "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number = (SELECT MIN(Version_Number) FROM Templates)",
        "query_toks": [
            "SELECT",
            "Version_Number,",
            "Template_Type_Code",
            "FROM",
            "Templates",
            "WHERE",
            "Version_Number",
            "=",
            "(",
            "SELECT",
            "MIN",
            "(",
            "Version_Number",
            ")",
            "FROM",
            "Templates",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "version_number,",
            "template_type_code",
            "from",
            "templates",
            "where",
            "version_number",
            "=",
            "(",
            "select",
            "min",
            "(",
            "version_number",
            ")",
            "from",
            "templates",
            ")"
        ],
        "question": "What are the smallest version numbers and their corresponding template type code(s)?",
        "question_toks": [
            "What",
            "are",
            "the",
            "smallest",
            "version",
            "numbers",
            "and",
            "their",
            "corresponding",
            "template",
            "type",
            "code",
            "(",
            "s",
            ")?"
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 336,
        "query": "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number = (SELECT MIN(Version_Number) FROM Templates)",
        "query_toks": [
            "SELECT",
            "Version_Number,",
            "Template_Type_Code",
            "FROM",
            "Templates",
            "WHERE",
            "Version_Number",
            "=",
            "(",
            "SELECT",
            "MIN",
            "(",
            "Version_Number",
            ")",
            "FROM",
            "Templates",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "version_number,",
            "template_type_code",
            "from",
            "templates",
            "where",
            "version_number",
            "=",
            "(",
            "select",
            "min",
            "(",
            "version_number",
            ")",
            "from",
            "templates",
            ")"
        ],
        "question": "Return the lowest version numbers, along with the corresponding template type codes.",
        "question_toks": [
            "Return",
            "the",
            "lowest",
            "version",
            "numbers",
            ",",
            "along",
            "with",
            "the",
            "corresponding",
            "template",
            "type",
            "codes",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 337,
        "query": "SELECT template_type_code FROM templates WHERE template_id IN (SELECT template_id FROM documents WHERE document_name = 'Data base')",
        "query_toks": [
            "SELECT",
            "template_type_code",
            "FROM",
            "templates",
            "WHERE",
            "template_id",
            "IN",
            "(",
            "SELECT",
            "template_id",
            "FROM",
            "documents",
            "WHERE",
            "document_name",
            "=",
            "'Data",
            "base",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "template_type_code",
            "from",
            "templates",
            "where",
            "template_id",
            "in",
            "(",
            "select",
            "template_id",
            "from",
            "documents",
            "where",
            "document_name",
            "=",
            "value",
            ")"
        ],
        "question": "What is the template type code of the template used by document with the name 'Data base'?",
        "question_toks": [
            "What",
            "is",
            "the",
            "template",
            "type",
            "code",
            "of",
            "the",
            "template",
            "used",
            "by",
            "document",
            "with",
            "the",
            "name",
            "``",
            "Data",
            "base",
            "''",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 338,
        "query": "SELECT ref_template_types.template_type_code FROM ref_template_types WHERE ref_template_types.template_type_code IN (SELECT t.template_type_code FROM templates t JOIN documents d ON t.template_id = d.template_id WHERE d.document_name = 'Data base')",
        "query_toks": [
            "SELECT",
            "ref_template_types.template_type_code",
            "FROM",
            "ref_template_types",
            "WHERE",
            "ref_template_types.template_type_code",
            "IN",
            "(",
            "SELECT",
            "t",
            ".",
            "template_type_code",
            "FROM",
            "templates",
            "t",
            "JOIN",
            "documents",
            "d",
            "ON",
            "t",
            ".",
            "template_id",
            "=",
            "d.template_id",
            "WHERE",
            "d.document_name",
            "=",
            "'Data",
            "base",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "ref_template_types.template_type_code",
            "from",
            "ref_template_types",
            "where",
            "ref_template_types.template_type_code",
            "in",
            "(",
            "select",
            "t",
            ".",
            "template_type_code",
            "from",
            "templates",
            "t",
            "join",
            "documents",
            "d",
            "on",
            "t",
            ".",
            "template_id",
            "=",
            "d.template_id",
            "where",
            "d.document_name",
            "=",
            "value",
            ")"
        ],
        "question": "Return the template type code or type codes of the template(s) that is used by a document named Data base.",
        "question_toks": [
            "Return",
            "the",
            "template",
            "type",
            "code",
            "or",
            "type",
            "codes",
            "of",
            "the",
            "template",
            "(",
            "s",
            ")",
            "that",
            "is",
            "used",
            "by",
            "a",
            "document",
            "named",
            "Data",
            "base",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 339,
        "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = 'BK'",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "document_name",
            "FROM",
            "Templates",
            "AS",
            "T1",
            "JOIN",
            "Documents",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "template_id",
            "=",
            "T2",
            ".",
            "template_id",
            "WHERE",
            "T1",
            ".",
            "template_type_code",
            "=",
            "'BK",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "document_name",
            "from",
            "templates",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id",
            "where",
            "t1",
            ".",
            "template_type_code",
            "=",
            "value"
        ],
        "question": "Show all document names using templates with template type code BK.",
        "question_toks": [
            "Show",
            "all",
            "document",
            "names",
            "using",
            "templates",
            "with",
            "template",
            "type",
            "code",
            "BK",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 340,
        "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = 'BK'",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "document_name",
            "FROM",
            "Templates",
            "AS",
            "T1",
            "JOIN",
            "Documents",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "template_id",
            "=",
            "T2",
            ".",
            "template_id",
            "WHERE",
            "T1",
            ".",
            "template_type_code",
            "=",
            "'BK",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "document_name",
            "from",
            "templates",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id",
            "where",
            "t1",
            ".",
            "template_type_code",
            "=",
            "value"
        ],
        "question": "What are the names of documents that use templates with the code BK?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "documents",
            "that",
            "use",
            "templates",
            "with",
            "the",
            "code",
            "BK",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 341,
        "query": "SELECT rt.template_type_code, COUNT(distinct doc.document_id) FROM ref_template_types rt LEFT JOIN templates temp ON rt.template_type_code = temp.template_type_code LEFT JOIN documents doc ON temp.template_id = doc.template_id GROUP BY rt.template_type_code",
        "query_toks": [
            "SELECT",
            "rt.template_type_code,",
            "COUNT",
            "(",
            "distinct",
            "doc.document_id",
            ")",
            "FROM",
            "ref_template_types",
            "rt",
            "LEFT",
            "JOIN",
            "templates",
            "temp",
            "ON",
            "rt.template_type_code",
            "=",
            "temp",
            ".",
            "template_type_code",
            "LEFT",
            "JOIN",
            "documents",
            "doc",
            "ON",
            "temp",
            ".",
            "template_id",
            "=",
            "doc.template_id",
            "GROUP",
            "BY",
            "rt.template_type_code"
        ],
        "query_toks_no_value": [
            "select",
            "rt.template_type_code,",
            "count",
            "(",
            "distinct",
            "doc.document_id",
            ")",
            "from",
            "ref_template_types",
            "rt",
            "left",
            "join",
            "templates",
            "temp",
            "on",
            "rt.template_type_code",
            "=",
            "temp",
            ".",
            "template_type_code",
            "left",
            "join",
            "documents",
            "doc",
            "on",
            "temp",
            ".",
            "template_id",
            "=",
            "doc.template_id",
            "group",
            "by",
            "rt.template_type_code"
        ],
        "question": "Show all template type codes and the number of documents using each type.",
        "question_toks": [
            "Show",
            "all",
            "template",
            "type",
            "codes",
            "and",
            "the",
            "number",
            "of",
            "documents",
            "using",
            "each",
            "type",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 342,
        "query": "SELECT ref_template_types.template_type_code, COUNT(documents.document_id) AS document_count FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_code",
        "query_toks": [
            "SELECT",
            "ref_template_types.template_type_code,",
            "COUNT",
            "(",
            "documents.document_id",
            ")",
            "AS",
            "document_count",
            "FROM",
            "ref_template_types",
            "LEFT",
            "JOIN",
            "templates",
            "ON",
            "ref_template_types.template_type_code",
            "=",
            "templates",
            ".",
            "template_type_code",
            "LEFT",
            "JOIN",
            "documents",
            "ON",
            "templates",
            ".",
            "template_id",
            "=",
            "documents.template_id",
            "GROUP",
            "BY",
            "ref_template_types.template_type_code"
        ],
        "query_toks_no_value": [
            "select",
            "ref_template_types.template_type_code,",
            "count",
            "(",
            "documents.document_id",
            ")",
            "as",
            "document_count",
            "from",
            "ref_template_types",
            "left",
            "join",
            "templates",
            "on",
            "ref_template_types.template_type_code",
            "=",
            "templates",
            ".",
            "template_type_code",
            "left",
            "join",
            "documents",
            "on",
            "templates",
            ".",
            "template_id",
            "=",
            "documents.template_id",
            "group",
            "by",
            "ref_template_types.template_type_code"
        ],
        "question": "What are the different template type codes, and how many documents use each type?",
        "question_toks": [
            "What",
            "are",
            "the",
            "different",
            "template",
            "type",
            "codes",
            ",",
            "and",
            "how",
            "many",
            "documents",
            "use",
            "each",
            "type",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 343,
        "query": "WITH TemplateCount AS (SELECT T1.template_type_code, COUNT(*) AS doc_count FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code) SELECT template_type_code FROM TemplateCount WHERE doc_count = (SELECT MAX(doc_count) FROM TemplateCount)",
        "query_toks": [
            "WITH",
            "TemplateCount",
            "AS",
            "(",
            "SELECT",
            "T1",
            ".",
            "template_type_code,",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "doc_count",
            "FROM",
            "Templates",
            "AS",
            "T1",
            "JOIN",
            "Documents",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "template_id",
            "=",
            "T2",
            ".",
            "template_id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "template_type_code",
            ")",
            "SELECT",
            "template_type_code",
            "FROM",
            "TemplateCount",
            "WHERE",
            "doc_count",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "doc_count",
            ")",
            "FROM",
            "TemplateCount",
            ")"
        ],
        "query_toks_no_value": [
            "with",
            "templatecount",
            "as",
            "(",
            "select",
            "t1",
            ".",
            "template_type_code,",
            "count",
            "(",
            "*",
            ")",
            "as",
            "doc_count",
            "from",
            "templates",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id",
            "group",
            "by",
            "t1",
            ".",
            "template_type_code",
            ")",
            "select",
            "template_type_code",
            "from",
            "templatecount",
            "where",
            "doc_count",
            "=",
            "(",
            "select",
            "max",
            "(",
            "doc_count",
            ")",
            "from",
            "templatecount",
            ")"
        ],
        "question": "Which template type code or template type codes are used by the most number of documents? In case of a tie, list all such template type codes.",
        "question_toks": [
            "Which",
            "template",
            "type",
            "code",
            "or",
            "template",
            "type",
            "codes",
            "are",
            "used",
            "by",
            "the",
            "most",
            "number",
            "of",
            "documents",
            "?",
            "In",
            "case",
            "of",
            "a",
            "tie",
            ",",
            "list",
            "all",
            "such",
            "template",
            "type",
            "codes",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 344,
        "query": "WITH TypeCount AS (SELECT T1.template_type_code, COUNT(*) AS cnt FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code) SELECT template_type_code FROM TypeCount WHERE cnt = (SELECT MAX(cnt) FROM TypeCount)",
        "query_toks": [
            "WITH",
            "TypeCount",
            "AS",
            "(",
            "SELECT",
            "T1",
            ".",
            "template_type_code,",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "cnt",
            "FROM",
            "Templates",
            "AS",
            "T1",
            "JOIN",
            "Documents",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "template_id",
            "=",
            "T2",
            ".",
            "template_id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "template_type_code",
            ")",
            "SELECT",
            "template_type_code",
            "FROM",
            "TypeCount",
            "WHERE",
            "cnt",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "cnt",
            ")",
            "FROM",
            "TypeCount",
            ")"
        ],
        "query_toks_no_value": [
            "with",
            "typecount",
            "as",
            "(",
            "select",
            "t1",
            ".",
            "template_type_code,",
            "count",
            "(",
            "*",
            ")",
            "as",
            "cnt",
            "from",
            "templates",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id",
            "group",
            "by",
            "t1",
            ".",
            "template_type_code",
            ")",
            "select",
            "template_type_code",
            "from",
            "typecount",
            "where",
            "cnt",
            "=",
            "(",
            "select",
            "max",
            "(",
            "cnt",
            ")",
            "from",
            "typecount",
            ")"
        ],
        "question": "Return the code of the template type that is most commonly used in documents, and if there is a tie, return all tied template type codes.",
        "question_toks": [
            "Return",
            "the",
            "code",
            "of",
            "the",
            "template",
            "type",
            "that",
            "is",
            "most",
            "commonly",
            "used",
            "in",
            "documents",
            ",",
            "and",
            "if",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "return",
            "all",
            "tied",
            "template",
            "type",
            "codes",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 345,
        "query": "SELECT rt.template_type_code FROM ref_template_types rt WHERE NOT EXISTS (SELECT 1 FROM templates t WHERE rt.template_type_code = t.template_type_code AND EXISTS (SELECT 1 FROM documents d WHERE t.template_id = d.template_id))",
        "query_toks": [
            "SELECT",
            "rt.template_type_code",
            "FROM",
            "ref_template_types",
            "rt",
            "WHERE",
            "NOT",
            "EXISTS",
            "(",
            "SELECT",
            "1",
            "FROM",
            "templates",
            "t",
            "WHERE",
            "rt.template_type_code",
            "=",
            "t",
            ".",
            "template_type_code",
            "AND",
            "EXISTS",
            "(",
            "SELECT",
            "1",
            "FROM",
            "documents",
            "d",
            "WHERE",
            "t",
            ".",
            "template_id",
            "=",
            "d.template_id",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "rt.template_type_code",
            "from",
            "ref_template_types",
            "rt",
            "where",
            "not",
            "exists",
            "(",
            "select",
            "value",
            "from",
            "templates",
            "t",
            "where",
            "rt.template_type_code",
            "=",
            "t",
            ".",
            "template_type_code",
            "and",
            "exists",
            "(",
            "select",
            "value",
            "from",
            "documents",
            "d",
            "where",
            "t",
            ".",
            "template_id",
            "=",
            "d.template_id",
            ")",
            ")"
        ],
        "question": "Show all template type codes that are not used by any document.",
        "question_toks": [
            "Show",
            "all",
            "template",
            "type",
            "codes",
            "that",
            "are",
            "not",
            "used",
            "by",
            "any",
            "document",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 346,
        "query": "SELECT rtt.template_type_code FROM ref_template_types rtt WHERE NOT EXISTS (SELECT 1 FROM templates t JOIN documents d ON t.template_id = d.template_id WHERE t.template_type_code = rtt.template_type_code)",
        "query_toks": [
            "SELECT",
            "rtt.template_type_code",
            "FROM",
            "ref_template_types",
            "rtt",
            "WHERE",
            "NOT",
            "EXISTS",
            "(",
            "SELECT",
            "1",
            "FROM",
            "templates",
            "t",
            "JOIN",
            "documents",
            "d",
            "ON",
            "t",
            ".",
            "template_id",
            "=",
            "d.template_id",
            "WHERE",
            "t",
            ".",
            "template_type_code",
            "=",
            "rtt.template_type_code",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "rtt.template_type_code",
            "from",
            "ref_template_types",
            "rtt",
            "where",
            "not",
            "exists",
            "(",
            "select",
            "value",
            "from",
            "templates",
            "t",
            "join",
            "documents",
            "d",
            "on",
            "t",
            ".",
            "template_id",
            "=",
            "d.template_id",
            "where",
            "t",
            ".",
            "template_type_code",
            "=",
            "rtt.template_type_code",
            ")"
        ],
        "question": "What are the codes of template types that are not used for any document?",
        "question_toks": [
            "What",
            "are",
            "the",
            "codes",
            "of",
            "template",
            "types",
            "that",
            "are",
            "not",
            "used",
            "for",
            "any",
            "document",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 347,
        "query": "SELECT template_type_code , template_type_description FROM Ref_template_types",
        "query_toks": [
            "SELECT",
            "template_type_code",
            ",",
            "template_type_description",
            "FROM",
            "Ref_template_types"
        ],
        "query_toks_no_value": [
            "select",
            "template_type_code",
            ",",
            "template_type_description",
            "from",
            "ref_template_types"
        ],
        "question": "Show all template type codes and descriptions.",
        "question_toks": [
            "Show",
            "all",
            "template",
            "type",
            "codes",
            "and",
            "descriptions",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 348,
        "query": "SELECT template_type_code , template_type_description FROM Ref_template_types",
        "query_toks": [
            "SELECT",
            "template_type_code",
            ",",
            "template_type_description",
            "FROM",
            "Ref_template_types"
        ],
        "query_toks_no_value": [
            "select",
            "template_type_code",
            ",",
            "template_type_description",
            "from",
            "ref_template_types"
        ],
        "question": "What are the type codes and descriptions for all template types?",
        "question_toks": [
            "What",
            "are",
            "the",
            "type",
            "codes",
            "and",
            "descriptions",
            "for",
            "all",
            "template",
            "types",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 349,
        "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code = 'AD'",
        "query_toks": [
            "SELECT",
            "template_type_description",
            "FROM",
            "Ref_template_types",
            "WHERE",
            "template_type_code",
            "=",
            "'AD",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "template_type_description",
            "from",
            "ref_template_types",
            "where",
            "template_type_code",
            "=",
            "value"
        ],
        "question": "What is the template type descriptions for template type code 'AD'.",
        "question_toks": [
            "What",
            "is",
            "the",
            "template",
            "type",
            "descriptions",
            "for",
            "template",
            "type",
            "code",
            "``",
            "AD",
            "''",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 350,
        "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  'AD'",
        "query_toks": [
            "SELECT",
            "template_type_description",
            "FROM",
            "Ref_template_types",
            "WHERE",
            "template_type_code",
            "=",
            "'AD",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "template_type_description",
            "from",
            "ref_template_types",
            "where",
            "template_type_code",
            "=",
            "value"
        ],
        "question": "Return the template type description of the template type with the code AD.",
        "question_toks": [
            "Return",
            "the",
            "template",
            "type",
            "description",
            "of",
            "the",
            "template",
            "type",
            "with",
            "the",
            "code",
            "AD",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 351,
        "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = 'Book'",
        "query_toks": [
            "SELECT",
            "template_type_code",
            "FROM",
            "Ref_template_types",
            "WHERE",
            "template_type_description",
            "=",
            "'Book",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "template_type_code",
            "from",
            "ref_template_types",
            "where",
            "template_type_description",
            "=",
            "value"
        ],
        "question": "What is the template type code for template type description 'Book'.",
        "question_toks": [
            "What",
            "is",
            "the",
            "template",
            "type",
            "code",
            "for",
            "template",
            "type",
            "description",
            "``",
            "Book",
            "''",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 352,
        "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = 'Book'",
        "query_toks": [
            "SELECT",
            "template_type_code",
            "FROM",
            "Ref_template_types",
            "WHERE",
            "template_type_description",
            "=",
            "'Book",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "template_type_code",
            "from",
            "ref_template_types",
            "where",
            "template_type_description",
            "=",
            "value"
        ],
        "question": "Return the type code of the template type with the description 'Book'.",
        "question_toks": [
            "Return",
            "the",
            "type",
            "code",
            "of",
            "the",
            "template",
            "type",
            "with",
            "the",
            "description",
            "``",
            "Book",
            "''",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 353,
        "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1",
            ".",
            "template_type_description",
            "FROM",
            "Ref_template_types",
            "AS",
            "T1",
            "JOIN",
            "Templates",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "template_type_code",
            "=",
            "T2",
            ".",
            "template_type_code",
            "JOIN",
            "Documents",
            "AS",
            "T3",
            "ON",
            "T2",
            ".",
            "Template_ID",
            "=",
            "T3",
            ".",
            "template_ID"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "t1",
            ".",
            "template_type_description",
            "from",
            "ref_template_types",
            "as",
            "t1",
            "join",
            "templates",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_type_code",
            "=",
            "t2",
            ".",
            "template_type_code",
            "join",
            "documents",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "template_id",
            "=",
            "t3",
            ".",
            "template_id"
        ],
        "question": "What are the distinct template type descriptions for the templates ever used by any document?",
        "question_toks": [
            "What",
            "are",
            "the",
            "distinct",
            "template",
            "type",
            "descriptions",
            "for",
            "the",
            "templates",
            "ever",
            "used",
            "by",
            "any",
            "document",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 354,
        "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1",
            ".",
            "template_type_description",
            "FROM",
            "Ref_template_types",
            "AS",
            "T1",
            "JOIN",
            "Templates",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "template_type_code",
            "=",
            "T2",
            ".",
            "template_type_code",
            "JOIN",
            "Documents",
            "AS",
            "T3",
            "ON",
            "T2",
            ".",
            "Template_ID",
            "=",
            "T3",
            ".",
            "template_ID"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "t1",
            ".",
            "template_type_description",
            "from",
            "ref_template_types",
            "as",
            "t1",
            "join",
            "templates",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_type_code",
            "=",
            "t2",
            ".",
            "template_type_code",
            "join",
            "documents",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "template_id",
            "=",
            "t3",
            ".",
            "template_id"
        ],
        "question": "Return the different descriptions for templates that have been used in a document.",
        "question_toks": [
            "Return",
            "the",
            "different",
            "descriptions",
            "for",
            "templates",
            "that",
            "have",
            "been",
            "used",
            "in",
            "a",
            "document",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 355,
        "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = 'Presentation'",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "template_id",
            "FROM",
            "Ref_template_types",
            "AS",
            "T1",
            "JOIN",
            "Templates",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "template_type_code",
            "=",
            "T2",
            ".",
            "template_type_code",
            "WHERE",
            "T1",
            ".",
            "template_type_description",
            "=",
            "'Presentation",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "template_id",
            "from",
            "ref_template_types",
            "as",
            "t1",
            "join",
            "templates",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_type_code",
            "=",
            "t2",
            ".",
            "template_type_code",
            "where",
            "t1",
            ".",
            "template_type_description",
            "=",
            "value"
        ],
        "question": "What are the template ids with template type description 'Presentation'.",
        "question_toks": [
            "What",
            "are",
            "the",
            "template",
            "ids",
            "with",
            "template",
            "type",
            "description",
            "``",
            "Presentation",
            "''",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 356,
        "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = 'Presentation'",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "template_id",
            "FROM",
            "Ref_template_types",
            "AS",
            "T1",
            "JOIN",
            "Templates",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "template_type_code",
            "=",
            "T2",
            ".",
            "template_type_code",
            "WHERE",
            "T1",
            ".",
            "template_type_description",
            "=",
            "'Presentation",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "template_id",
            "from",
            "ref_template_types",
            "as",
            "t1",
            "join",
            "templates",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_type_code",
            "=",
            "t2",
            ".",
            "template_type_code",
            "where",
            "t1",
            ".",
            "template_type_description",
            "=",
            "value"
        ],
        "question": "Return the ids corresponding to templates with the description 'Presentation'.",
        "question_toks": [
            "Return",
            "the",
            "ids",
            "corresponding",
            "to",
            "templates",
            "with",
            "the",
            "description",
            "'Presentation",
            "'",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 357,
        "query": "SELECT count(*) FROM Paragraphs",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Paragraphs"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "paragraphs"
        ],
        "question": "How many paragraphs in total?",
        "question_toks": [
            "How",
            "many",
            "paragraphs",
            "in",
            "total",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 358,
        "query": "SELECT count(*) FROM Paragraphs",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Paragraphs"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "paragraphs"
        ],
        "question": "Count the number of paragraphs.",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "paragraphs",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 359,
        "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Paragraphs",
            "AS",
            "T1",
            "JOIN",
            "Documents",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "document_ID",
            "=",
            "T2",
            ".",
            "document_ID",
            "WHERE",
            "T2",
            ".",
            "document_name",
            "=",
            "'Summer",
            "Show",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "paragraphs",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "document_id",
            "=",
            "t2",
            ".",
            "document_id",
            "where",
            "t2",
            ".",
            "document_name",
            "=",
            "value"
        ],
        "question": "How many paragraphs for the document with name 'Summer Show'?",
        "question_toks": [
            "How",
            "many",
            "paragraphs",
            "for",
            "the",
            "document",
            "with",
            "name",
            "'Summer",
            "Show",
            "'",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 360,
        "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Paragraphs",
            "AS",
            "T1",
            "JOIN",
            "Documents",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "document_ID",
            "=",
            "T2",
            ".",
            "document_ID",
            "WHERE",
            "T2",
            ".",
            "document_name",
            "=",
            "'Summer",
            "Show",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "paragraphs",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "document_id",
            "=",
            "t2",
            ".",
            "document_id",
            "where",
            "t2",
            ".",
            "document_name",
            "=",
            "value"
        ],
        "question": "Count the number of paragraphs in the document named 'Summer Show'.",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "paragraphs",
            "in",
            "the",
            "document",
            "named",
            "'Summer",
            "Show",
            "'",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 361,
        "query": "SELECT * FROM paragraphs WHERE paragraph_text = 'Korea '",
        "query_toks": [
            "SELECT",
            "*",
            "FROM",
            "paragraphs",
            "WHERE",
            "paragraph_text",
            "=",
            "'Korea",
            "",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "*",
            "from",
            "paragraphs",
            "where",
            "paragraph_text",
            "=",
            "value"
        ],
        "question": "Show paragraph details for paragraph with text 'Korea ' .",
        "question_toks": [
            "Show",
            "paragraph",
            "details",
            "for",
            "paragraph",
            "with",
            "text",
            "'Korea",
            "'",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 362,
        "query": "SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'",
        "query_toks": [
            "SELECT",
            "*",
            "FROM",
            "Paragraphs",
            "WHERE",
            "Paragraph_Text",
            "LIKE",
            "'%Korea%",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "*",
            "from",
            "paragraphs",
            "where",
            "paragraph_text",
            "like",
            "value"
        ],
        "question": "What are the complete details for the paragraph that includes the text 'Korea'?",
        "question_toks": [
            "What",
            "are",
            "the",
            "complete",
            "details",
            "for",
            "the",
            "paragraph",
            "that",
            "includes",
            "the",
            "text",
            "'",
            "Korea",
            "'?"
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 363,
        "query": "SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "paragraph_id",
            ",",
            "T1",
            ".",
            "paragraph_text",
            "FROM",
            "Paragraphs",
            "AS",
            "T1",
            "JOIN",
            "Documents",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "document_id",
            "=",
            "T2",
            ".",
            "document_id",
            "WHERE",
            "T2",
            ".",
            "Document_Name",
            "=",
            "'Welcome",
            "to",
            "NY",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "paragraph_id",
            ",",
            "t1",
            ".",
            "paragraph_text",
            "from",
            "paragraphs",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "document_id",
            "=",
            "t2",
            ".",
            "document_id",
            "where",
            "t2",
            ".",
            "document_name",
            "=",
            "value"
        ],
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "question_toks": [
            "Show",
            "all",
            "paragraph",
            "ids",
            "and",
            "texts",
            "for",
            "the",
            "document",
            "with",
            "name",
            "'Welcome",
            "to",
            "NY",
            "'",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 364,
        "query": "SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "paragraph_id",
            ",",
            "T1",
            ".",
            "paragraph_text",
            "FROM",
            "Paragraphs",
            "AS",
            "T1",
            "JOIN",
            "Documents",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "document_id",
            "=",
            "T2",
            ".",
            "document_id",
            "WHERE",
            "T2",
            ".",
            "Document_Name",
            "=",
            "'Welcome",
            "to",
            "NY",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "paragraph_id",
            ",",
            "t1",
            ".",
            "paragraph_text",
            "from",
            "paragraphs",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "document_id",
            "=",
            "t2",
            ".",
            "document_id",
            "where",
            "t2",
            ".",
            "document_name",
            "=",
            "value"
        ],
        "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "question_toks": [
            "What",
            "are",
            "the",
            "ids",
            "and",
            "texts",
            "of",
            "paragraphs",
            "in",
            "the",
            "document",
            "titled",
            "'Welcome",
            "to",
            "NY",
            "'",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 365,
        "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  'Customer reviews'",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "paragraph_text",
            "FROM",
            "Paragraphs",
            "AS",
            "T1",
            "JOIN",
            "Documents",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "document_id",
            "=",
            "T2",
            ".",
            "document_id",
            "WHERE",
            "T2",
            ".",
            "document_name",
            "=",
            "'Customer",
            "reviews",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "paragraph_text",
            "from",
            "paragraphs",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "document_id",
            "=",
            "t2",
            ".",
            "document_id",
            "where",
            "t2",
            ".",
            "document_name",
            "=",
            "value"
        ],
        "question": "Show all paragraph texts for the document 'Customer reviews'.",
        "question_toks": [
            "Show",
            "all",
            "paragraph",
            "texts",
            "for",
            "the",
            "document",
            "``",
            "Customer",
            "reviews",
            "''",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 366,
        "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Customer reviews'",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "paragraph_text",
            "FROM",
            "Paragraphs",
            "AS",
            "T1",
            "JOIN",
            "Documents",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "document_id",
            "=",
            "T2",
            ".",
            "document_id",
            "WHERE",
            "T2",
            ".",
            "document_name",
            "=",
            "'Customer",
            "reviews",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "paragraph_text",
            "from",
            "paragraphs",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "document_id",
            "=",
            "t2",
            ".",
            "document_id",
            "where",
            "t2",
            ".",
            "document_name",
            "=",
            "value"
        ],
        "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "question_toks": [
            "What",
            "are",
            "the",
            "paragraph",
            "texts",
            "for",
            "the",
            "document",
            "with",
            "the",
            "name",
            "'Customer",
            "reviews",
            "'",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 367,
        "query": "SELECT documents.document_id, COALESCE(SUM(CASE WHEN paragraphs.paragraph_id IS NOT NULL THEN 1 ELSE 0 END), 0) FROM documents LEFT JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY documents.document_id",
        "query_toks": [
            "SELECT",
            "documents.document_id,",
            "COALESCE",
            "(",
            "SUM",
            "(",
            "CASE",
            "WHEN",
            "paragraphs.paragraph_id",
            "IS",
            "NOT",
            "NULL",
            "THEN",
            "1",
            "ELSE",
            "0",
            "END",
            ")",
            ",",
            "0",
            ")",
            "FROM",
            "documents",
            "LEFT",
            "JOIN",
            "paragraphs",
            "ON",
            "documents.document_id",
            "=",
            "paragraphs.document_id",
            "GROUP",
            "BY",
            "documents.document_id",
            "ORDER",
            "BY",
            "documents.document_id"
        ],
        "query_toks_no_value": [
            "select",
            "documents.document_id,",
            "coalesce",
            "(",
            "sum",
            "(",
            "case",
            "when",
            "paragraphs.paragraph_id",
            "is",
            "not",
            "null",
            "then",
            "value",
            "else",
            "value",
            "end",
            ")",
            ",",
            "value",
            ")",
            "from",
            "documents",
            "left",
            "join",
            "paragraphs",
            "on",
            "documents.document_id",
            "=",
            "paragraphs.document_id",
            "group",
            "by",
            "documents.document_id",
            "order",
            "by",
            "documents.document_id"
        ],
        "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
        "question_toks": [
            "Show",
            "all",
            "document",
            "ids",
            "and",
            "the",
            "number",
            "of",
            "paragraphs",
            "in",
            "each",
            "document",
            ".",
            "Order",
            "by",
            "document",
            "id",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 368,
        "query": "SELECT doc.document_id, COUNT(para.paragraph_id) AS count_paragraphs FROM documents doc LEFT JOIN paragraphs para ON doc.document_id = para.document_id GROUP BY doc.document_id ORDER BY doc.document_id",
        "query_toks": [
            "SELECT",
            "doc.document_id,",
            "COUNT",
            "(",
            "para.paragraph_id",
            ")",
            "AS",
            "count_paragraphs",
            "FROM",
            "documents",
            "doc",
            "LEFT",
            "JOIN",
            "paragraphs",
            "para",
            "ON",
            "doc.document_id",
            "=",
            "para.document_id",
            "GROUP",
            "BY",
            "doc.document_id",
            "ORDER",
            "BY",
            "doc.document_id"
        ],
        "query_toks_no_value": [
            "select",
            "doc.document_id,",
            "count",
            "(",
            "para.paragraph_id",
            ")",
            "as",
            "count_paragraphs",
            "from",
            "documents",
            "doc",
            "left",
            "join",
            "paragraphs",
            "para",
            "on",
            "doc.document_id",
            "=",
            "para.document_id",
            "group",
            "by",
            "doc.document_id",
            "order",
            "by",
            "doc.document_id"
        ],
        "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
        "question_toks": [
            "Return",
            "the",
            "different",
            "document",
            "ids",
            "along",
            "with",
            "the",
            "number",
            "of",
            "paragraphs",
            "corresponding",
            "to",
            "each",
            ",",
            "ordered",
            "by",
            "id",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 369,
        "query": "SELECT d.document_id, d.document_name, COUNT(p.paragraph_id) AS num_paragraphs FROM documents d LEFT JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id, d.document_name",
        "query_toks": [
            "SELECT",
            "d.document_id,",
            "d.document_name,",
            "COUNT",
            "(",
            "p.paragraph_id",
            ")",
            "AS",
            "num_paragraphs",
            "FROM",
            "documents",
            "d",
            "LEFT",
            "JOIN",
            "paragraphs",
            "p",
            "ON",
            "d.document_id",
            "=",
            "p.document_id",
            "GROUP",
            "BY",
            "d.document_id,",
            "d.document_name"
        ],
        "query_toks_no_value": [
            "select",
            "d.document_id,",
            "d.document_name,",
            "count",
            "(",
            "p.paragraph_id",
            ")",
            "as",
            "num_paragraphs",
            "from",
            "documents",
            "d",
            "left",
            "join",
            "paragraphs",
            "p",
            "on",
            "d.document_id",
            "=",
            "p.document_id",
            "group",
            "by",
            "d.document_id,",
            "d.document_name"
        ],
        "question": "Show all document ids, names and the number of paragraphs in each document.",
        "question_toks": [
            "Show",
            "all",
            "document",
            "ids",
            ",",
            "names",
            "and",
            "the",
            "number",
            "of",
            "paragraphs",
            "in",
            "each",
            "document",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 370,
        "query": "SELECT doc.document_id, doc.document_name, (SELECT COUNT(paragraph_id) FROM paragraphs WHERE paragraphs.document_id = doc.document_id) AS number_of_paragraphs FROM documents doc",
        "query_toks": [
            "SELECT",
            "doc.document_id,",
            "doc.document_name,",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "paragraph_id",
            ")",
            "FROM",
            "paragraphs",
            "WHERE",
            "paragraphs.document_id",
            "=",
            "doc.document_id",
            ")",
            "AS",
            "number_of_paragraphs",
            "FROM",
            "documents",
            "doc"
        ],
        "query_toks_no_value": [
            "select",
            "doc.document_id,",
            "doc.document_name,",
            "(",
            "select",
            "count",
            "(",
            "paragraph_id",
            ")",
            "from",
            "paragraphs",
            "where",
            "paragraphs.document_id",
            "=",
            "doc.document_id",
            ")",
            "as",
            "number_of_paragraphs",
            "from",
            "documents",
            "doc"
        ],
        "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
        "question_toks": [
            "What",
            "are",
            "the",
            "ids",
            "and",
            "names",
            "of",
            "each",
            "document",
            ",",
            "as",
            "well",
            "as",
            "the",
            "number",
            "of",
            "paragraphs",
            "in",
            "each",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 371,
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) >= 2",
        "query_toks": [
            "SELECT",
            "document_id",
            "FROM",
            "Paragraphs",
            "GROUP",
            "BY",
            "document_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "query_toks_no_value": [
            "select",
            "document_id",
            "from",
            "paragraphs",
            "group",
            "by",
            "document_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value"
        ],
        "question": "List all document ids with at least two paragraphs.",
        "question_toks": [
            "List",
            "all",
            "document",
            "ids",
            "with",
            "at",
            "least",
            "two",
            "paragraphs",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 372,
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) >= 2",
        "query_toks": [
            "SELECT",
            "document_id",
            "FROM",
            "Paragraphs",
            "GROUP",
            "BY",
            "document_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "query_toks_no_value": [
            "select",
            "document_id",
            "from",
            "paragraphs",
            "group",
            "by",
            "document_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value"
        ],
        "question": "What are the ids of documents that have 2 or more paragraphs?",
        "question_toks": [
            "What",
            "are",
            "the",
            "ids",
            "of",
            "documents",
            "that",
            "have",
            "2",
            "or",
            "more",
            "paragraphs",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 373,
        "query": "SELECT T1.document_id, T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id HAVING count(*) = (SELECT MAX(ct) FROM (SELECT count(*) as ct FROM Paragraphs GROUP BY document_id) AS counts)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "document_id,",
            "T2",
            ".",
            "document_name",
            "FROM",
            "Paragraphs",
            "AS",
            "T1",
            "JOIN",
            "Documents",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "document_id",
            "=",
            "T2",
            ".",
            "document_id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "document_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "ct",
            ")",
            "FROM",
            "(",
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "as",
            "ct",
            "FROM",
            "Paragraphs",
            "GROUP",
            "BY",
            "document_id",
            ")",
            "AS",
            "counts",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "document_id,",
            "t2",
            ".",
            "document_name",
            "from",
            "paragraphs",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "document_id",
            "=",
            "t2",
            ".",
            "document_id",
            "group",
            "by",
            "t1",
            ".",
            "document_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "ct",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "ct",
            "from",
            "paragraphs",
            "group",
            "by",
            "document_id",
            ")",
            "as",
            "counts",
            ")"
        ],
        "question": "What is the document id and name with the greatest number of paragraphs? If there is a tie, return all of them.",
        "question_toks": [
            "What",
            "is",
            "the",
            "document",
            "id",
            "and",
            "name",
            "with",
            "the",
            "greatest",
            "number",
            "of",
            "paragraphs",
            "?",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "return",
            "all",
            "of",
            "them",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 374,
        "query": "SELECT D.document_id, D.document_name FROM Documents D WHERE D.document_id IN (SELECT P.document_id FROM Paragraphs P GROUP BY P.document_id HAVING COUNT(*) = (SELECT MAX(par_count) FROM (SELECT COUNT(*) as par_count FROM Paragraphs GROUP BY document_id) count_summary))",
        "query_toks": [
            "SELECT",
            "D.document_id,",
            "D.document_name",
            "FROM",
            "Documents",
            "D",
            "WHERE",
            "D.document_id",
            "IN",
            "(",
            "SELECT",
            "P.document_id",
            "FROM",
            "Paragraphs",
            "P",
            "GROUP",
            "BY",
            "P.document_id",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "par_count",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "as",
            "par_count",
            "FROM",
            "Paragraphs",
            "GROUP",
            "BY",
            "document_id",
            ")",
            "count_summary",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "d.document_id,",
            "d.document_name",
            "from",
            "documents",
            "d",
            "where",
            "d.document_id",
            "in",
            "(",
            "select",
            "p.document_id",
            "from",
            "paragraphs",
            "p",
            "group",
            "by",
            "p.document_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "par_count",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "par_count",
            "from",
            "paragraphs",
            "group",
            "by",
            "document_id",
            ")",
            "count_summary",
            ")",
            ")"
        ],
        "question": "Return the id and name of the document with the most paragraphs. If there is a tie, return all of them.",
        "question_toks": [
            "Return",
            "the",
            "id",
            "and",
            "name",
            "of",
            "the",
            "document",
            "with",
            "the",
            "most",
            "paragraphs",
            ".",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "return",
            "all",
            "of",
            "them",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 375,
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) = (SELECT MIN(counted) FROM (SELECT document_id, COUNT(*) as counted FROM Paragraphs GROUP BY document_id) AS counts)",
        "query_toks": [
            "SELECT",
            "document_id",
            "FROM",
            "Paragraphs",
            "GROUP",
            "BY",
            "document_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MIN",
            "(",
            "counted",
            ")",
            "FROM",
            "(",
            "SELECT",
            "document_id,",
            "COUNT",
            "(",
            "*",
            ")",
            "as",
            "counted",
            "FROM",
            "Paragraphs",
            "GROUP",
            "BY",
            "document_id",
            ")",
            "AS",
            "counts",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "document_id",
            "from",
            "paragraphs",
            "group",
            "by",
            "document_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "min",
            "(",
            "counted",
            ")",
            "from",
            "(",
            "select",
            "document_id,",
            "count",
            "(",
            "*",
            ")",
            "as",
            "counted",
            "from",
            "paragraphs",
            "group",
            "by",
            "document_id",
            ")",
            "as",
            "counts",
            ")"
        ],
        "question": "What is the document id with the least number of paragraphs? If there is a tie, return all of them.",
        "question_toks": [
            "What",
            "is",
            "the",
            "document",
            "id",
            "with",
            "the",
            "least",
            "number",
            "of",
            "paragraphs",
            "?",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "return",
            "all",
            "of",
            "them",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 376,
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) = (SELECT count(*) FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1)",
        "query_toks": [
            "SELECT",
            "document_id",
            "FROM",
            "Paragraphs",
            "GROUP",
            "BY",
            "document_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Paragraphs",
            "GROUP",
            "BY",
            "document_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC",
            "LIMIT",
            "1",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "document_id",
            "from",
            "paragraphs",
            "group",
            "by",
            "document_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "paragraphs",
            "group",
            "by",
            "document_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit",
            "value",
            ")"
        ],
        "question": "Return the id(s) of the document(s) with the fewest paragraphs.",
        "question_toks": [
            "Return",
            "the",
            "id",
            "(",
            "s",
            ")",
            "of",
            "the",
            "document",
            "(",
            "s",
            ")",
            "with",
            "the",
            "fewest",
            "paragraphs",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 377,
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "query_toks": [
            "SELECT",
            "document_id",
            "FROM",
            "Paragraphs",
            "GROUP",
            "BY",
            "document_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "BETWEEN",
            "1",
            "AND",
            "2"
        ],
        "query_toks_no_value": [
            "select",
            "document_id",
            "from",
            "paragraphs",
            "group",
            "by",
            "document_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "between",
            "value",
            "and",
            "value"
        ],
        "question": "What is the document id with 1 to 2 paragraphs? If there are multiple documents, return all of them.",
        "question_toks": [
            "What",
            "is",
            "the",
            "document",
            "id",
            "with",
            "1",
            "to",
            "2",
            "paragraphs",
            "?",
            "If",
            "there",
            "are",
            "multiple",
            "documents",
            ",",
            "return",
            "all",
            "of",
            "them",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 378,
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "query_toks": [
            "SELECT",
            "document_id",
            "FROM",
            "Paragraphs",
            "GROUP",
            "BY",
            "document_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "BETWEEN",
            "1",
            "AND",
            "2"
        ],
        "query_toks_no_value": [
            "select",
            "document_id",
            "from",
            "paragraphs",
            "group",
            "by",
            "document_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "between",
            "value",
            "and",
            "value"
        ],
        "question": "Give the ids of documents that have between one and two paragraphs.",
        "question_toks": [
            "Give",
            "the",
            "ids",
            "of",
            "documents",
            "that",
            "have",
            "between",
            "one",
            "and",
            "two",
            "paragraphs",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 379,
        "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
        "query_toks": [
            "SELECT",
            "document_id",
            "FROM",
            "Paragraphs",
            "WHERE",
            "paragraph_text",
            "=",
            "'Brazil",
            "'",
            "INTERSECT",
            "SELECT",
            "document_id",
            "FROM",
            "Paragraphs",
            "WHERE",
            "paragraph_text",
            "=",
            "'Ireland",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "document_id",
            "from",
            "paragraphs",
            "where",
            "paragraph_text",
            "=",
            "value",
            "intersect",
            "select",
            "document_id",
            "from",
            "paragraphs",
            "where",
            "paragraph_text",
            "=",
            "value"
        ],
        "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "question_toks": [
            "Show",
            "the",
            "document",
            "id",
            "with",
            "paragraph",
            "text",
            "'Brazil",
            "'",
            "and",
            "'Ireland",
            "'",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "id": 380,
        "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text LIKE '%Brazil%' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text LIKE '%Ireland%'",
        "query_toks": [
            "SELECT",
            "document_id",
            "FROM",
            "Paragraphs",
            "WHERE",
            "paragraph_text",
            "LIKE",
            "'%Brazil%",
            "'",
            "INTERSECT",
            "SELECT",
            "document_id",
            "FROM",
            "Paragraphs",
            "WHERE",
            "paragraph_text",
            "LIKE",
            "'%Ireland%",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "document_id",
            "from",
            "paragraphs",
            "where",
            "paragraph_text",
            "like",
            "value",
            "intersect",
            "select",
            "document_id",
            "from",
            "paragraphs",
            "where",
            "paragraph_text",
            "like",
            "value"
        ],
        "question": "What are the ids of documents that contain at least one paragraph with the text 'Brazil' and at least one paragraph with the text 'Ireland'?",
        "question_toks": [
            "What",
            "are",
            "the",
            "ids",
            "of",
            "documents",
            "that",
            "contain",
            "at",
            "least",
            "one",
            "paragraph",
            "with",
            "the",
            "text",
            "'",
            "Brazil",
            "'",
            "and",
            "at",
            "least",
            "one",
            "paragraph",
            "with",
            "the",
            "text",
            "'",
            "Ireland",
            "'?"
        ],
        "sql": ""
    },
    {
        "db_id": "course_teach",
        "id": 381,
        "query": "SELECT count(*) FROM teacher",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "teacher"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "teacher"
        ],
        "question": "How many teachers are there?",
        "question_toks": [
            "How",
            "many",
            "teachers",
            "are",
            "there",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "course_teach",
        "id": 382,
        "query": "SELECT count(*) FROM teacher",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "teacher"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "teacher"
        ],
        "question": "What is the total count of teachers?",
        "question_toks": [
            "What",
            "is",
            "the",
            "total",
            "count",
            "of",
            "teachers",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "course_teach",
        "id": 383,
        "query": "SELECT Name FROM teacher ORDER BY Age ASC, Teacher_ID ASC",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "teacher",
            "ORDER",
            "BY",
            "Age",
            "ASC,",
            "Teacher_ID",
            "ASC"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "teacher",
            "order",
            "by",
            "age",
            "asc,",
            "teacher_id",
            "asc"
        ],
        "question": "List the names of teachers in ascending order of age and then ascending id if ages are the same.",
        "question_toks": [
            "List",
            "the",
            "names",
            "of",
            "teachers",
            "in",
            "ascending",
            "order",
            "of",
            "age",
            "and",
            "then",
            "ascending",
            "id",
            "if",
            "ages",
            "are",
            "the",
            "same",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "course_teach",
        "id": 384,
        "query": "SELECT Name FROM teacher ORDER BY Age ASC, Teacher_ID ASC",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "teacher",
            "ORDER",
            "BY",
            "Age",
            "ASC,",
            "Teacher_ID",
            "ASC"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "teacher",
            "order",
            "by",
            "age",
            "asc,",
            "teacher_id",
            "asc"
        ],
        "question": "What are the names of the teachers ordered by ascending age and then ascending id if ages are the same?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "the",
            "teachers",
            "ordered",
            "by",
            "ascending",
            "age",
            "and",
            "then",
            "ascending",
            "id",
            "if",
            "ages",
            "are",
            "the",
            "same",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "course_teach",
        "id": 385,
        "query": "SELECT Age , Hometown FROM teacher",
        "query_toks": [
            "SELECT",
            "Age",
            ",",
            "Hometown",
            "FROM",
            "teacher"
        ],
        "query_toks_no_value": [
            "select",
            "age",
            ",",
            "hometown",
            "from",
            "teacher"
        ],
        "question": "What are the age and hometown of teachers?",
        "question_toks": [
            "What",
            "are",
            "the",
            "age",
            "and",
            "hometown",
            "of",
            "teachers",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "course_teach",
        "id": 386,
        "query": "SELECT Age , Hometown FROM teacher",
        "query_toks": [
            "SELECT",
            "Age",
            ",",
            "Hometown",
            "FROM",
            "teacher"
        ],
        "query_toks_no_value": [
            "select",
            "age",
            ",",
            "hometown",
            "from",
            "teacher"
        ],
        "question": "What is the age and hometown of every teacher?",
        "question_toks": [
            "What",
            "is",
            "the",
            "age",
            "and",
            "hometown",
            "of",
            "every",
            "teacher",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "course_teach",
        "id": 387,
        "query": "select name from teacher where hometown != 'Little Lever Urban District'",
        "query_toks": [
            "select",
            "name",
            "from",
            "teacher",
            "where",
            "hometown",
            "!",
            "=",
            "'Little",
            "Lever",
            "Urban",
            "District",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "teacher",
            "where",
            "hometown",
            "!",
            "=",
            "value"
        ],
        "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "question_toks": [
            "List",
            "the",
            "name",
            "of",
            "teachers",
            "whose",
            "hometown",
            "is",
            "not",
            "``",
            "Little",
            "Lever",
            "Urban",
            "District",
            "''",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "course_teach",
        "id": 388,
        "query": "SELECT DISTINCT name FROM teacher WHERE hometown != 'Little Lever Urban District'",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "name",
            "FROM",
            "teacher",
            "WHERE",
            "hometown",
            "!",
            "=",
            "'Little",
            "Lever",
            "Urban",
            "District",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "name",
            "from",
            "teacher",
            "where",
            "hometown",
            "!",
            "=",
            "value"
        ],
        "question": "What are the distinct names of the teachers whose hometown is not Little Lever Urban District?",
        "question_toks": [
            "What",
            "are",
            "the",
            "distinct",
            "names",
            "of",
            "the",
            "teachers",
            "whose",
            "hometown",
            "is",
            "not",
            "Little",
            "Lever",
            "Urban",
            "District",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "course_teach",
        "id": 389,
        "query": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "teacher",
            "WHERE",
            "Age",
            "=",
            "32",
            "OR",
            "Age",
            "=",
            "33"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "teacher",
            "where",
            "age",
            "=",
            "value",
            "or",
            "age",
            "=",
            "value"
        ],
        "question": "Show the name of teachers aged either 32 or 33?",
        "question_toks": [
            "Show",
            "the",
            "name",
            "of",
            "teachers",
            "aged",
            "either",
            "32",
            "or",
            "33",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "course_teach",
        "id": 390,
        "query": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "teacher",
            "WHERE",
            "Age",
            "=",
            "32",
            "OR",
            "Age",
            "=",
            "33"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "teacher",
            "where",
            "age",
            "=",
            "value",
            "or",
            "age",
            "=",
            "value"
        ],
        "question": "What are the names of the teachers who are aged either 32 or 33?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "the",
            "teachers",
            "who",
            "are",
            "aged",
            "either",
            "32",
            "or",
            "33",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "course_teach",
        "id": 391,
        "query": "SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)",
        "query_toks": [
            "SELECT",
            "Hometown",
            "FROM",
            "teacher",
            "WHERE",
            "Age",
            "=",
            "(",
            "SELECT",
            "MIN",
            "(",
            "Age",
            ")",
            "FROM",
            "teacher",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "hometown",
            "from",
            "teacher",
            "where",
            "age",
            "=",
            "(",
            "select",
            "min",
            "(",
            "age",
            ")",
            "from",
            "teacher",
            ")"
        ],
        "question": "Show the hometown(s) of the youngest teacher(s).",
        "question_toks": [
            "Show",
            "the",
            "hometown",
            "(",
            "s",
            ")",
            "of",
            "the",
            "youngest",
            "teacher",
            "(",
            "s",
            ")."
        ],
        "sql": ""
    },
    {
        "db_id": "course_teach",
        "id": 392,
        "query": "SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)",
        "query_toks": [
            "SELECT",
            "Hometown",
            "FROM",
            "teacher",
            "WHERE",
            "Age",
            "=",
            "(",
            "SELECT",
            "MIN",
            "(",
            "Age",
            ")",
            "FROM",
            "teacher",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "hometown",
            "from",
            "teacher",
            "where",
            "age",
            "=",
            "(",
            "select",
            "min",
            "(",
            "age",
            ")",
            "from",
            "teacher",
            ")"
        ],
        "question": "Where is the hometown of each teacher with the lowest age?",
        "question_toks": [
            "Where",
            "is",
            "the",
            "hometown",
            "of",
            "each",
            "teacher",
            "with",
            "the",
            "lowest",
            "age",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "course_teach",
        "id": 393,
        "query": "SELECT Hometown , COUNT(*) FROM teacher GROUP BY Hometown",
        "query_toks": [
            "SELECT",
            "Hometown",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "teacher",
            "GROUP",
            "BY",
            "Hometown"
        ],
        "query_toks_no_value": [
            "select",
            "hometown",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "teacher",
            "group",
            "by",
            "hometown"
        ],
        "question": "Show different hometown of teachers and the number of teachers from each hometown.",
        "question_toks": [
            "Show",
            "different",
            "hometown",
            "of",
            "teachers",
            "and",
            "the",
            "number",
            "of",
            "teachers",
            "from",
            "each",
            "hometown",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "course_teach",
        "id": 394,
        "query": "SELECT Hometown , COUNT(*) FROM teacher GROUP BY Hometown",
        "query_toks": [
            "SELECT",
            "Hometown",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "teacher",
            "GROUP",
            "BY",
            "Hometown"
        ],
        "query_toks_no_value": [
            "select",
            "hometown",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "teacher",
            "group",
            "by",
            "hometown"
        ],
        "question": "For each hometown, how many teachers are there?",
        "question_toks": [
            "For",
            "each",
            "hometown",
            ",",
            "how",
            "many",
            "teachers",
            "are",
            "there",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "course_teach",
        "id": 395,
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM teacher GROUP BY Hometown) subquery)",
        "query_toks": [
            "SELECT",
            "Hometown",
            "FROM",
            "teacher",
            "GROUP",
            "BY",
            "Hometown",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "Cnt",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "Cnt",
            "FROM",
            "teacher",
            "GROUP",
            "BY",
            "Hometown",
            ")",
            "subquery",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "hometown",
            "from",
            "teacher",
            "group",
            "by",
            "hometown",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "cnt",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "cnt",
            "from",
            "teacher",
            "group",
            "by",
            "hometown",
            ")",
            "subquery",
            ")"
        ],
        "question": "List all hometowns of teachers that have the highest frequency.",
        "question_toks": [
            "List",
            "all",
            "hometowns",
            "of",
            "teachers",
            "that",
            "have",
            "the",
            "highest",
            "frequency",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "course_teach",
        "id": 396,
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM teacher GROUP BY Hometown) t)",
        "query_toks": [
            "SELECT",
            "Hometown",
            "FROM",
            "teacher",
            "GROUP",
            "BY",
            "Hometown",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "cnt",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "as",
            "cnt",
            "FROM",
            "teacher",
            "GROUP",
            "BY",
            "Hometown",
            ")",
            "t",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "hometown",
            "from",
            "teacher",
            "group",
            "by",
            "hometown",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "cnt",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "cnt",
            "from",
            "teacher",
            "group",
            "by",
            "hometown",
            ")",
            "t",
            ")"
        ],
        "question": "What are the hometowns with the highest frequency among all teachers?",
        "question_toks": [
            "What",
            "are",
            "the",
            "hometowns",
            "with",
            "the",
            "highest",
            "frequency",
            "among",
            "all",
            "teachers",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "course_teach",
        "id": 397,
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
        "query_toks": [
            "SELECT",
            "Hometown",
            "FROM",
            "teacher",
            "GROUP",
            "BY",
            "Hometown",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "query_toks_no_value": [
            "select",
            "hometown",
            "from",
            "teacher",
            "group",
            "by",
            "hometown",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value"
        ],
        "question": "Show the hometowns shared by at least two teachers.",
        "question_toks": [
            "Show",
            "the",
            "hometowns",
            "shared",
            "by",
            "at",
            "least",
            "two",
            "teachers",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "course_teach",
        "id": 398,
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
        "query_toks": [
            "SELECT",
            "Hometown",
            "FROM",
            "teacher",
            "GROUP",
            "BY",
            "Hometown",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "query_toks_no_value": [
            "select",
            "hometown",
            "from",
            "teacher",
            "group",
            "by",
            "hometown",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value"
        ],
        "question": "What are the towns from which at least two teachers come from?",
        "question_toks": [
            "What",
            "are",
            "the",
            "towns",
            "from",
            "which",
            "at",
            "least",
            "two",
            "teachers",
            "come",
            "from",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "course_teach",
        "id": 399,
        "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
        "query_toks": [
            "SELECT",
            "T3",
            ".",
            "Name",
            ",",
            "T2",
            ".",
            "Course",
            "FROM",
            "course_arrange",
            "AS",
            "T1",
            "JOIN",
            "course",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Course_ID",
            "=",
            "T2",
            ".",
            "Course_ID",
            "JOIN",
            "teacher",
            "AS",
            "T3",
            "ON",
            "T1",
            ".",
            "Teacher_ID",
            "=",
            "T3",
            ".",
            "Teacher_ID"
        ],
        "query_toks_no_value": [
            "select",
            "t3",
            ".",
            "name",
            ",",
            "t2",
            ".",
            "course",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "course",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "join",
            "teacher",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t3",
            ".",
            "teacher_id"
        ],
        "question": "Show names of teachers and the courses they are arranged to teach.",
        "question_toks": [
            "Show",
            "names",
            "of",
            "teachers",
            "and",
            "the",
            "courses",
            "they",
            "are",
            "arranged",
            "to",
            "teach",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "course_teach",
        "id": 400,
        "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
        "query_toks": [
            "SELECT",
            "T3",
            ".",
            "Name",
            ",",
            "T2",
            ".",
            "Course",
            "FROM",
            "course_arrange",
            "AS",
            "T1",
            "JOIN",
            "course",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Course_ID",
            "=",
            "T2",
            ".",
            "Course_ID",
            "JOIN",
            "teacher",
            "AS",
            "T3",
            "ON",
            "T1",
            ".",
            "Teacher_ID",
            "=",
            "T3",
            ".",
            "Teacher_ID"
        ],
        "query_toks_no_value": [
            "select",
            "t3",
            ".",
            "name",
            ",",
            "t2",
            ".",
            "course",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "course",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "join",
            "teacher",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t3",
            ".",
            "teacher_id"
        ],
        "question": "What is the name of each teacher and what course they teach?",
        "question_toks": [
            "What",
            "is",
            "the",
            "name",
            "of",
            "each",
            "teacher",
            "and",
            "what",
            "course",
            "they",
            "teach",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "course_teach",
        "id": 401,
        "query": "SELECT T3.Name, T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name, T2.Course",
        "query_toks": [
            "SELECT",
            "T3",
            ".",
            "Name,",
            "T2",
            ".",
            "Course",
            "FROM",
            "course_arrange",
            "AS",
            "T1",
            "JOIN",
            "course",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Course_ID",
            "=",
            "T2",
            ".",
            "Course_ID",
            "JOIN",
            "teacher",
            "AS",
            "T3",
            "ON",
            "T1",
            ".",
            "Teacher_ID",
            "=",
            "T3",
            ".",
            "Teacher_ID",
            "ORDER",
            "BY",
            "T3",
            ".",
            "Name,",
            "T2",
            ".",
            "Course"
        ],
        "query_toks_no_value": [
            "select",
            "t3",
            ".",
            "name,",
            "t2",
            ".",
            "course",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "course",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "join",
            "teacher",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t3",
            ".",
            "teacher_id",
            "order",
            "by",
            "t3",
            ".",
            "name,",
            "t2",
            ".",
            "course"
        ],
        "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name. If the names are the same, sort by course name in ascending order.",
        "question_toks": [
            "Show",
            "names",
            "of",
            "teachers",
            "and",
            "the",
            "courses",
            "they",
            "are",
            "arranged",
            "to",
            "teach",
            "in",
            "ascending",
            "alphabetical",
            "order",
            "of",
            "the",
            "teacher",
            "'",
            "s",
            "name",
            ".",
            "If",
            "the",
            "names",
            "are",
            "the",
            "same",
            ",",
            "sort",
            "by",
            "course",
            "name",
            "in",
            "ascending",
            "order",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "course_teach",
        "id": 402,
        "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name, T2.Course",
        "query_toks": [
            "SELECT",
            "T3",
            ".",
            "Name",
            ",",
            "T2",
            ".",
            "Course",
            "FROM",
            "course_arrange",
            "AS",
            "T1",
            "JOIN",
            "course",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Course_ID",
            "=",
            "T2",
            ".",
            "Course_ID",
            "JOIN",
            "teacher",
            "AS",
            "T3",
            "ON",
            "T1",
            ".",
            "Teacher_ID",
            "=",
            "T3",
            ".",
            "Teacher_ID",
            "ORDER",
            "BY",
            "T3",
            ".",
            "Name,",
            "T2",
            ".",
            "Course"
        ],
        "query_toks_no_value": [
            "select",
            "t3",
            ".",
            "name",
            ",",
            "t2",
            ".",
            "course",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "course",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "join",
            "teacher",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t3",
            ".",
            "teacher_id",
            "order",
            "by",
            "t3",
            ".",
            "name,",
            "t2",
            ".",
            "course"
        ],
        "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher and then by the course name?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "the",
            "teachers",
            "and",
            "the",
            "courses",
            "they",
            "teach",
            "in",
            "ascending",
            "alphabetical",
            "order",
            "by",
            "the",
            "name",
            "of",
            "the",
            "teacher",
            "and",
            "then",
            "by",
            "the",
            "course",
            "name",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "course_teach",
        "id": 403,
        "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = 'Math'",
        "query_toks": [
            "SELECT",
            "T3",
            ".",
            "Name",
            "FROM",
            "course_arrange",
            "AS",
            "T1",
            "JOIN",
            "course",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Course_ID",
            "=",
            "T2",
            ".",
            "Course_ID",
            "JOIN",
            "teacher",
            "AS",
            "T3",
            "ON",
            "T1",
            ".",
            "Teacher_ID",
            "=",
            "T3",
            ".",
            "Teacher_ID",
            "WHERE",
            "T2",
            ".",
            "Course",
            "=",
            "'Math",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "t3",
            ".",
            "name",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "course",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "join",
            "teacher",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t3",
            ".",
            "teacher_id",
            "where",
            "t2",
            ".",
            "course",
            "=",
            "value"
        ],
        "question": "Show the name of the teacher for the math course.",
        "question_toks": [
            "Show",
            "the",
            "name",
            "of",
            "the",
            "teacher",
            "for",
            "the",
            "math",
            "course",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "course_teach",
        "id": 404,
        "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = 'Math'",
        "query_toks": [
            "SELECT",
            "T3",
            ".",
            "Name",
            "FROM",
            "course_arrange",
            "AS",
            "T1",
            "JOIN",
            "course",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Course_ID",
            "=",
            "T2",
            ".",
            "Course_ID",
            "JOIN",
            "teacher",
            "AS",
            "T3",
            "ON",
            "T1",
            ".",
            "Teacher_ID",
            "=",
            "T3",
            ".",
            "Teacher_ID",
            "WHERE",
            "T2",
            ".",
            "Course",
            "=",
            "'Math",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "t3",
            ".",
            "name",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "course",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "join",
            "teacher",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t3",
            ".",
            "teacher_id",
            "where",
            "t2",
            ".",
            "course",
            "=",
            "value"
        ],
        "question": "What are the names of the people who teach math courses?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "the",
            "people",
            "who",
            "teach",
            "math",
            "courses",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "course_teach",
        "id": 405,
        "query": "SELECT t.name AS teacher_name, COUNT(ca.course_id) FROM teacher t LEFT JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.teacher_id",
        "query_toks": [
            "SELECT",
            "t",
            ".",
            "name",
            "AS",
            "teacher_name,",
            "COUNT",
            "(",
            "ca.course_id",
            ")",
            "FROM",
            "teacher",
            "t",
            "LEFT",
            "JOIN",
            "course_arrange",
            "ca",
            "ON",
            "t",
            ".",
            "teacher_id",
            "=",
            "ca.teacher_id",
            "GROUP",
            "BY",
            "t",
            ".",
            "teacher_id"
        ],
        "query_toks_no_value": [
            "select",
            "t",
            ".",
            "name",
            "as",
            "teacher_name,",
            "count",
            "(",
            "ca.course_id",
            ")",
            "from",
            "teacher",
            "t",
            "left",
            "join",
            "course_arrange",
            "ca",
            "on",
            "t",
            ".",
            "teacher_id",
            "=",
            "ca.teacher_id",
            "group",
            "by",
            "t",
            ".",
            "teacher_id"
        ],
        "question": "Show names of teachers and the number of courses they teach.",
        "question_toks": [
            "Show",
            "names",
            "of",
            "teachers",
            "and",
            "the",
            "number",
            "of",
            "courses",
            "they",
            "teach",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "course_teach",
        "id": 406,
        "query": "SELECT name, (SELECT COUNT(*) FROM course_arrange WHERE teacher_id = teacher.teacher_id) AS num_courses FROM teacher",
        "query_toks": [
            "SELECT",
            "name,",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "course_arrange",
            "WHERE",
            "teacher_id",
            "=",
            "teacher",
            ".",
            "teacher_id",
            ")",
            "AS",
            "num_courses",
            "FROM",
            "teacher"
        ],
        "query_toks_no_value": [
            "select",
            "name,",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "course_arrange",
            "where",
            "teacher_id",
            "=",
            "teacher",
            ".",
            "teacher_id",
            ")",
            "as",
            "num_courses",
            "from",
            "teacher"
        ],
        "question": "What are the names of the teachers and how many courses do they teach?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "the",
            "teachers",
            "and",
            "how",
            "many",
            "courses",
            "do",
            "they",
            "teach",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "course_teach",
        "id": 407,
        "query": "SELECT T.Name FROM teacher AS T WHERE T.Teacher_ID IN (SELECT ca.Teacher_ID FROM course_arrange ca GROUP BY ca.Teacher_ID HAVING COUNT(DISTINCT ca.course_id) > 1)",
        "query_toks": [
            "SELECT",
            "T",
            ".",
            "Name",
            "FROM",
            "teacher",
            "AS",
            "T",
            "WHERE",
            "T",
            ".",
            "Teacher_ID",
            "IN",
            "(",
            "SELECT",
            "ca.Teacher_ID",
            "FROM",
            "course_arrange",
            "ca",
            "GROUP",
            "BY",
            "ca.Teacher_ID",
            "HAVING",
            "COUNT",
            "(",
            "DISTINCT",
            "ca.course_id",
            ")",
            ">",
            "1",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t",
            ".",
            "name",
            "from",
            "teacher",
            "as",
            "t",
            "where",
            "t",
            ".",
            "teacher_id",
            "in",
            "(",
            "select",
            "ca.teacher_id",
            "from",
            "course_arrange",
            "ca",
            "group",
            "by",
            "ca.teacher_id",
            "having",
            "count",
            "(",
            "distinct",
            "ca.course_id",
            ")",
            ">",
            "value",
            ")"
        ],
        "question": "Show names of teachers that teach at least two courses.",
        "question_toks": [
            "Show",
            "names",
            "of",
            "teachers",
            "that",
            "teach",
            "at",
            "least",
            "two",
            "courses",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "course_teach",
        "id": 408,
        "query": "SELECT t.name FROM teacher t WHERE t.teacher_id IN (SELECT ca.teacher_id FROM course_arrange ca GROUP BY ca.teacher_id HAVING COUNT(DISTINCT ca.course_id) >= 2)",
        "query_toks": [
            "SELECT",
            "t",
            ".",
            "name",
            "FROM",
            "teacher",
            "t",
            "WHERE",
            "t",
            ".",
            "teacher_id",
            "IN",
            "(",
            "SELECT",
            "ca.teacher_id",
            "FROM",
            "course_arrange",
            "ca",
            "GROUP",
            "BY",
            "ca.teacher_id",
            "HAVING",
            "COUNT",
            "(",
            "DISTINCT",
            "ca.course_id",
            ")",
            ">",
            "=",
            "2",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t",
            ".",
            "name",
            "from",
            "teacher",
            "t",
            "where",
            "t",
            ".",
            "teacher_id",
            "in",
            "(",
            "select",
            "ca.teacher_id",
            "from",
            "course_arrange",
            "ca",
            "group",
            "by",
            "ca.teacher_id",
            "having",
            "count",
            "(",
            "distinct",
            "ca.course_id",
            ")",
            ">",
            "=",
            "value",
            ")"
        ],
        "question": "What are the names of the teachers who teach at least two courses?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "the",
            "teachers",
            "who",
            "teach",
            "at",
            "least",
            "two",
            "courses",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "course_teach",
        "id": 409,
        "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "teacher",
            "WHERE",
            "Teacher_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "Teacher_id",
            "FROM",
            "course_arrange",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "teacher",
            "where",
            "teacher_id",
            "not",
            "in",
            "(",
            "select",
            "teacher_id",
            "from",
            "course_arrange",
            ")"
        ],
        "question": "List the names of teachers who have not been arranged to teach courses.",
        "question_toks": [
            "List",
            "the",
            "names",
            "of",
            "teachers",
            "who",
            "have",
            "not",
            "been",
            "arranged",
            "to",
            "teach",
            "courses",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "course_teach",
        "id": 410,
        "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "teacher",
            "WHERE",
            "Teacher_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "Teacher_id",
            "FROM",
            "course_arrange",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "teacher",
            "where",
            "teacher_id",
            "not",
            "in",
            "(",
            "select",
            "teacher_id",
            "from",
            "course_arrange",
            ")"
        ],
        "question": "Show the names of the teachers who have no courses arranged.",
        "question_toks": [
            "Show",
            "the",
            "names",
            "of",
            "the",
            "teachers",
            "who",
            "have",
            "no",
            "courses",
            "arranged",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "museum_visit",
        "id": 411,
        "query": "SELECT count(*) FROM visitor WHERE age < 30",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "visitor",
            "WHERE",
            "age",
            "<",
            "30"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "visitor",
            "where",
            "age",
            "<",
            "value"
        ],
        "question": "How many visitors below age 30 are there?",
        "question_toks": [
            "How",
            "many",
            "visitors",
            "below",
            "age",
            "30",
            "are",
            "there",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "museum_visit",
        "id": 412,
        "query": "SELECT name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "visitor",
            "WHERE",
            "Level_of_membership",
            ">",
            "4",
            "ORDER",
            "BY",
            "Level_of_membership",
            "DESC"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "value",
            "order",
            "by",
            "level_of_membership",
            "desc"
        ],
        "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "question_toks": [
            "Find",
            "the",
            "names",
            "of",
            "the",
            "visitors",
            "whose",
            "membership",
            "level",
            "is",
            "higher",
            "than",
            "4",
            ",",
            "and",
            "order",
            "the",
            "results",
            "by",
            "the",
            "level",
            "from",
            "high",
            "to",
            "low",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "museum_visit",
        "id": 413,
        "query": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "visitor",
            "WHERE",
            "Level_of_membership",
            "<",
            "=",
            "4"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "age",
            ")",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            "<",
            "=",
            "value"
        ],
        "question": "What is the average age of the visitors whose membership level is not higher than 4?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "age",
            "of",
            "the",
            "visitors",
            "whose",
            "membership",
            "level",
            "is",
            "not",
            "higher",
            "than",
            "4",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "museum_visit",
        "id": 414,
        "query": "SELECT name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age DESC",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "Level_of_membership",
            "FROM",
            "visitor",
            "WHERE",
            "Level_of_membership",
            ">",
            "4",
            "ORDER",
            "BY",
            "age",
            "DESC"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "level_of_membership",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "value",
            "order",
            "by",
            "age",
            "desc"
        ],
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "question_toks": [
            "Find",
            "the",
            "name",
            "and",
            "membership",
            "level",
            "of",
            "the",
            "visitors",
            "whose",
            "membership",
            "level",
            "is",
            "higher",
            "than",
            "4",
            ",",
            "and",
            "sort",
            "by",
            "their",
            "age",
            "from",
            "old",
            "to",
            "young",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "museum_visit",
        "id": 415,
        "query": "SELECT museum_id, name FROM museum WHERE num_of_staff = (SELECT MAX(num_of_staff) FROM museum)",
        "query_toks": [
            "SELECT",
            "museum_id,",
            "name",
            "FROM",
            "museum",
            "WHERE",
            "num_of_staff",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "num_of_staff",
            ")",
            "FROM",
            "museum",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "museum_id,",
            "name",
            "from",
            "museum",
            "where",
            "num_of_staff",
            "=",
            "(",
            "select",
            "max",
            "(",
            "num_of_staff",
            ")",
            "from",
            "museum",
            ")"
        ],
        "question": "Show the id and name of all museums that have the most staff members.",
        "question_toks": [
            "Show",
            "the",
            "id",
            "and",
            "name",
            "of",
            "all",
            "museums",
            "that",
            "have",
            "the",
            "most",
            "staff",
            "members",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "museum_visit",
        "id": 416,
        "query": "SELECT avg(num_of_staff) FROM museum WHERE open_year < 2009",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "num_of_staff",
            ")",
            "FROM",
            "museum",
            "WHERE",
            "open_year",
            "<",
            "2009"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "num_of_staff",
            ")",
            "from",
            "museum",
            "where",
            "open_year",
            "<",
            "value"
        ],
        "question": "Find the average number of staff working for the museums that were open before 2009.",
        "question_toks": [
            "Find",
            "the",
            "average",
            "number",
            "of",
            "staff",
            "working",
            "for",
            "the",
            "museums",
            "that",
            "were",
            "open",
            "before",
            "2009",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "museum_visit",
        "id": 417,
        "query": "SELECT Num_of_Staff , Open_Year FROM museum WHERE name = 'Plaza Museum'",
        "query_toks": [
            "SELECT",
            "Num_of_Staff",
            ",",
            "Open_Year",
            "FROM",
            "museum",
            "WHERE",
            "name",
            "=",
            "'Plaza",
            "Museum",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "num_of_staff",
            ",",
            "open_year",
            "from",
            "museum",
            "where",
            "name",
            "=",
            "value"
        ],
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "question_toks": [
            "What",
            "are",
            "the",
            "opening",
            "year",
            "and",
            "staff",
            "number",
            "of",
            "the",
            "museum",
            "named",
            "Plaza",
            "Museum",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "museum_visit",
        "id": 418,
        "query": "SELECT name FROM museum WHERE num_of_staff > (SELECT min(num_of_staff) FROM museum WHERE open_year > 2010)",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "museum",
            "WHERE",
            "num_of_staff",
            ">",
            "(",
            "SELECT",
            "min",
            "(",
            "num_of_staff",
            ")",
            "FROM",
            "museum",
            "WHERE",
            "open_year",
            ">",
            "2010",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "museum",
            "where",
            "num_of_staff",
            ">",
            "(",
            "select",
            "min",
            "(",
            "num_of_staff",
            ")",
            "from",
            "museum",
            "where",
            "open_year",
            ">",
            "value",
            ")"
        ],
        "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "question_toks": [
            "find",
            "the",
            "names",
            "of",
            "museums",
            "which",
            "have",
            "more",
            "staff",
            "than",
            "the",
            "minimum",
            "staff",
            "number",
            "of",
            "all",
            "museums",
            "opened",
            "after",
            "2010",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "museum_visit",
        "id": 419,
        "query": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1",
        "query_toks": [
            "SELECT",
            "t1",
            ".",
            "id",
            ",",
            "t1",
            ".",
            "name",
            ",",
            "t1",
            ".",
            "age",
            "FROM",
            "visitor",
            "AS",
            "t1",
            "JOIN",
            "visit",
            "AS",
            "t2",
            "ON",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "GROUP",
            "BY",
            "t1",
            ".",
            "id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "id",
            ",",
            "t1",
            ".",
            "name",
            ",",
            "t1",
            ".",
            "age",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "find the id, name and age for visitors who visited some museums more than once.",
        "question_toks": [
            "find",
            "the",
            "id",
            ",",
            "name",
            "and",
            "age",
            "for",
            "visitors",
            "who",
            "visited",
            "some",
            "museums",
            "more",
            "than",
            "once",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "museum_visit",
        "id": 420,
        "query": "SELECT t1.ID, t1.name, t1.Level_of_membership from visitor AS T1 WHERE T1.ID IN (SELECT T2.visitor_ID FROM visit AS T2 GROUP BY t2.visitor_ID HAVING sum(T2.Total_spent) = (SELECT sum(T3.Total_spent) AS S FROM visit AS T3 GROUP BY t3.visitor_ID ORDER BY S DESC LIMIT 1))",
        "query_toks": [
            "SELECT",
            "t1",
            ".",
            "ID,",
            "t1",
            ".",
            "name,",
            "t1",
            ".",
            "Level_of_membership",
            "from",
            "visitor",
            "AS",
            "T1",
            "WHERE",
            "T1",
            ".",
            "ID",
            "IN",
            "(",
            "SELECT",
            "T2",
            ".",
            "visitor_ID",
            "FROM",
            "visit",
            "AS",
            "T2",
            "GROUP",
            "BY",
            "t2",
            ".",
            "visitor_ID",
            "HAVING",
            "sum",
            "(",
            "T2",
            ".",
            "Total_spent",
            ")",
            "=",
            "(",
            "SELECT",
            "sum",
            "(",
            "T3",
            ".",
            "Total_spent",
            ")",
            "AS",
            "S",
            "FROM",
            "visit",
            "AS",
            "T3",
            "GROUP",
            "BY",
            "t3",
            ".",
            "visitor_ID",
            "ORDER",
            "BY",
            "S",
            "DESC",
            "LIMIT",
            "1",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "id,",
            "t1",
            ".",
            "name,",
            "t1",
            ".",
            "level_of_membership",
            "from",
            "visitor",
            "as",
            "t1",
            "where",
            "t1",
            ".",
            "id",
            "in",
            "(",
            "select",
            "t2",
            ".",
            "visitor_id",
            "from",
            "visit",
            "as",
            "t2",
            "group",
            "by",
            "t2",
            ".",
            "visitor_id",
            "having",
            "sum",
            "(",
            "t2",
            ".",
            "total_spent",
            ")",
            "=",
            "(",
            "select",
            "sum",
            "(",
            "t3",
            ".",
            "total_spent",
            ")",
            "as",
            "s",
            "from",
            "visit",
            "as",
            "t3",
            "group",
            "by",
            "t3",
            ".",
            "visitor_id",
            "order",
            "by",
            "s",
            "desc",
            "limit",
            "value",
            ")",
            ")"
        ],
        "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "question_toks": [
            "What",
            "are",
            "the",
            "id",
            ",",
            "name",
            "and",
            "membership",
            "level",
            "of",
            "visitors",
            "who",
            "have",
            "spent",
            "the",
            "largest",
            "amount",
            "of",
            "money",
            "in",
            "total",
            "in",
            "all",
            "museum",
            "tickets",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "museum_visit",
        "id": 421,
        "query": "SELECT t2.Museum_ID, t1.Name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID GROUP BY t2.Museum_ID HAVING COUNT(*) = (SELECT MAX(visit_counts) FROM (SELECT COUNT(*) AS visit_counts FROM visit GROUP BY Museum_ID) AS subquery)",
        "query_toks": [
            "SELECT",
            "t2",
            ".",
            "Museum_ID,",
            "t1",
            ".",
            "Name",
            "FROM",
            "museum",
            "AS",
            "t1",
            "JOIN",
            "visit",
            "AS",
            "t2",
            "ON",
            "t1",
            ".",
            "Museum_ID",
            "=",
            "t2",
            ".",
            "Museum_ID",
            "GROUP",
            "BY",
            "t2",
            ".",
            "Museum_ID",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "visit_counts",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "visit_counts",
            "FROM",
            "visit",
            "GROUP",
            "BY",
            "Museum_ID",
            ")",
            "AS",
            "subquery",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "museum_id,",
            "t1",
            ".",
            "name",
            "from",
            "museum",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "museum_id",
            "=",
            "t2",
            ".",
            "museum_id",
            "group",
            "by",
            "t2",
            ".",
            "museum_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "visit_counts",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "visit_counts",
            "from",
            "visit",
            "group",
            "by",
            "museum_id",
            ")",
            "as",
            "subquery",
            ")"
        ],
        "question": "What are the id and name of all museums visited the most times?",
        "question_toks": [
            "What",
            "are",
            "the",
            "id",
            "and",
            "name",
            "of",
            "all",
            "museums",
            "visited",
            "the",
            "most",
            "times",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "museum_visit",
        "id": 422,
        "query": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "museum",
            "WHERE",
            "Museum_ID",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "museum_id",
            "FROM",
            "visit",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "museum",
            "where",
            "museum_id",
            "not",
            "in",
            "(",
            "select",
            "museum_id",
            "from",
            "visit",
            ")"
        ],
        "question": "Show the names of museums that have no visitor yet.",
        "question_toks": [
            "Show",
            "the",
            "names",
            "of",
            "museums",
            "that",
            "have",
            "no",
            "visitor",
            "yet",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "museum_visit",
        "id": 423,
        "query": "SELECT v.name, v.age FROM (SELECT visitor_id FROM visit GROUP BY visitor_id HAVING MAX(num_of_ticket) = (SELECT MAX(num_of_ticket) FROM visit)) ids JOIN visitor v ON v.id = ids.visitor_id",
        "query_toks": [
            "SELECT",
            "v.name,",
            "v.age",
            "FROM",
            "(",
            "SELECT",
            "visitor_id",
            "FROM",
            "visit",
            "GROUP",
            "BY",
            "visitor_id",
            "HAVING",
            "MAX",
            "(",
            "num_of_ticket",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "num_of_ticket",
            ")",
            "FROM",
            "visit",
            ")",
            ")",
            "ids",
            "JOIN",
            "visitor",
            "v",
            "ON",
            "v.id",
            "=",
            "ids.visitor_id"
        ],
        "query_toks_no_value": [
            "select",
            "v.name,",
            "v.age",
            "from",
            "(",
            "select",
            "visitor_id",
            "from",
            "visit",
            "group",
            "by",
            "visitor_id",
            "having",
            "max",
            "(",
            "num_of_ticket",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "num_of_ticket",
            ")",
            "from",
            "visit",
            ")",
            ")",
            "ids",
            "join",
            "visitor",
            "v",
            "on",
            "v.id",
            "=",
            "ids.visitor_id"
        ],
        "question": "Show the name and age of all visitors who bought the most tickets at once.",
        "question_toks": [
            "Show",
            "the",
            "name",
            "and",
            "age",
            "of",
            "all",
            "visitors",
            "who",
            "bought",
            "the",
            "most",
            "tickets",
            "at",
            "once",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "museum_visit",
        "id": 424,
        "query": "SELECT avg(num_of_ticket) , max(num_of_ticket) FROM visit",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "num_of_ticket",
            ")",
            ",",
            "max",
            "(",
            "num_of_ticket",
            ")",
            "FROM",
            "visit"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "num_of_ticket",
            ")",
            ",",
            "max",
            "(",
            "num_of_ticket",
            ")",
            "from",
            "visit"
        ],
        "question": "What are the average and maximum number of tickets bought in all visits?",
        "question_toks": [
            "What",
            "are",
            "the",
            "average",
            "and",
            "maximum",
            "number",
            "of",
            "tickets",
            "bought",
            "in",
            "all",
            "visits",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "museum_visit",
        "id": 425,
        "query": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "t2",
            ".",
            "Total_spent",
            ")",
            "FROM",
            "visitor",
            "AS",
            "t1",
            "JOIN",
            "visit",
            "AS",
            "t2",
            "ON",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "WHERE",
            "t1",
            ".",
            "Level_of_membership",
            "=",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "t2",
            ".",
            "total_spent",
            ")",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "where",
            "t1",
            ".",
            "level_of_membership",
            "=",
            "value"
        ],
        "question": "What is the total ticket expense of the visitors whose membership level is 1?",
        "question_toks": [
            "What",
            "is",
            "the",
            "total",
            "ticket",
            "expense",
            "of",
            "the",
            "visitors",
            "whose",
            "membership",
            "level",
            "is",
            "1",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "museum_visit",
        "id": 426,
        "query": "SELECT T1.Name FROM visitor AS T1 WHERE exists(SELECT 1 FROM visit AS T2 JOIN museum AS T3 on T2.Museum_ID = T3.Museum_ID WHERE T3.Open_Year < 2009 AND T2.visitor_ID = T1.ID) AND exists(SELECT 1 FROM visit AS T4 JOIN museum AS T5 on T4.Museum_ID = T5.Museum_ID WHERE T5.Open_Year > 2011 AND T4.visitor_ID = T1.ID)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "Name",
            "FROM",
            "visitor",
            "AS",
            "T1",
            "WHERE",
            "exists",
            "(",
            "SELECT",
            "1",
            "FROM",
            "visit",
            "AS",
            "T2",
            "JOIN",
            "museum",
            "AS",
            "T3",
            "on",
            "T2",
            ".",
            "Museum_ID",
            "=",
            "T3",
            ".",
            "Museum_ID",
            "WHERE",
            "T3",
            ".",
            "Open_Year",
            "<",
            "2009",
            "AND",
            "T2",
            ".",
            "visitor_ID",
            "=",
            "T1",
            ".",
            "ID",
            ")",
            "AND",
            "exists",
            "(",
            "SELECT",
            "1",
            "FROM",
            "visit",
            "AS",
            "T4",
            "JOIN",
            "museum",
            "AS",
            "T5",
            "on",
            "T4",
            ".",
            "Museum_ID",
            "=",
            "T5",
            ".",
            "Museum_ID",
            "WHERE",
            "T5",
            ".",
            "Open_Year",
            ">",
            "2011",
            "AND",
            "T4",
            ".",
            "visitor_ID",
            "=",
            "T1",
            ".",
            "ID",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "visitor",
            "as",
            "t1",
            "where",
            "exists",
            "(",
            "select",
            "value",
            "from",
            "visit",
            "as",
            "t2",
            "join",
            "museum",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "museum_id",
            "=",
            "t3",
            ".",
            "museum_id",
            "where",
            "t3",
            ".",
            "open_year",
            "<",
            "value",
            "and",
            "t2",
            ".",
            "visitor_id",
            "=",
            "t1",
            ".",
            "id",
            ")",
            "and",
            "exists",
            "(",
            "select",
            "value",
            "from",
            "visit",
            "as",
            "t4",
            "join",
            "museum",
            "as",
            "t5",
            "on",
            "t4",
            ".",
            "museum_id",
            "=",
            "t5",
            ".",
            "museum_id",
            "where",
            "t5",
            ".",
            "open_year",
            ">",
            "value",
            "and",
            "t4",
            ".",
            "visitor_id",
            "=",
            "t1",
            ".",
            "id",
            ")"
        ],
        "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "question_toks": [
            "What",
            "is",
            "the",
            "name",
            "of",
            "the",
            "visitor",
            "who",
            "visited",
            "both",
            "a",
            "museum",
            "opened",
            "before",
            "2009",
            "and",
            "a",
            "museum",
            "opened",
            "after",
            "2011",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "museum_visit",
        "id": 427,
        "query": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID WHERE t1.open_year > 2010)",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "visitor",
            "WHERE",
            "id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "t2",
            ".",
            "visitor_id",
            "FROM",
            "museum",
            "AS",
            "t1",
            "JOIN",
            "visit",
            "AS",
            "t2",
            "ON",
            "t1",
            ".",
            "Museum_ID",
            "=",
            "t2",
            ".",
            "Museum_ID",
            "WHERE",
            "t1",
            ".",
            "open_year",
            ">",
            "2010",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "visitor",
            "where",
            "id",
            "not",
            "in",
            "(",
            "select",
            "t2",
            ".",
            "visitor_id",
            "from",
            "museum",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "museum_id",
            "=",
            "t2",
            ".",
            "museum_id",
            "where",
            "t1",
            ".",
            "open_year",
            ">",
            "value",
            ")"
        ],
        "question": "Find the number of visitors who did not visit any museum opened after 2010.",
        "question_toks": [
            "Find",
            "the",
            "number",
            "of",
            "visitors",
            "who",
            "did",
            "not",
            "visit",
            "any",
            "museum",
            "opened",
            "after",
            "2010",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "museum_visit",
        "id": 428,
        "query": "SELECT count(*) FROM museum WHERE open_year > 2013 OR open_year < 2008",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "museum",
            "WHERE",
            "open_year",
            ">",
            "2013",
            "OR",
            "open_year",
            "<",
            "2008"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "museum",
            "where",
            "open_year",
            ">",
            "value",
            "or",
            "open_year",
            "<",
            "value"
        ],
        "question": "How many museums were opened after 2013 or before 2008?",
        "question_toks": [
            "How",
            "many",
            "museums",
            "were",
            "opened",
            "after",
            "2013",
            "or",
            "before",
            "2008",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 429,
        "query": "SELECT count(*) FROM players",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "players"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "players"
        ],
        "question": "Find the total number of players.",
        "question_toks": [
            "Find",
            "the",
            "total",
            "number",
            "of",
            "players",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 430,
        "query": "SELECT count(*) FROM players",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "players"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "players"
        ],
        "question": "How many players are there?",
        "question_toks": [
            "How",
            "many",
            "players",
            "are",
            "there",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 431,
        "query": "SELECT count(*) FROM matches",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "matches"
        ],
        "question": "Find the total number of matches.",
        "question_toks": [
            "Find",
            "the",
            "total",
            "number",
            "of",
            "matches",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 432,
        "query": "SELECT count(*) FROM matches",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "matches"
        ],
        "question": "Count the number of matches.",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "matches",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 433,
        "query": "SELECT first_name , birth_date FROM players WHERE country_code = 'USA'",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "birth_date",
            "FROM",
            "players",
            "WHERE",
            "country_code",
            "=",
            "'USA",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "birth_date",
            "from",
            "players",
            "where",
            "country_code",
            "=",
            "value"
        ],
        "question": "List the first name and birth date of all players from the country with code USA.",
        "question_toks": [
            "List",
            "the",
            "first",
            "name",
            "and",
            "birth",
            "date",
            "of",
            "all",
            "players",
            "from",
            "the",
            "country",
            "with",
            "code",
            "USA",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 434,
        "query": "SELECT first_name , birth_date FROM players WHERE country_code = 'USA'",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "birth_date",
            "FROM",
            "players",
            "WHERE",
            "country_code",
            "=",
            "'USA",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "birth_date",
            "from",
            "players",
            "where",
            "country_code",
            "=",
            "value"
        ],
        "question": "What are the first names and birth dates of players from the USA?",
        "question_toks": [
            "What",
            "are",
            "the",
            "first",
            "names",
            "and",
            "birth",
            "dates",
            "of",
            "players",
            "from",
            "the",
            "USA",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 435,
        "query": "SELECT avg(loser_age) , avg(winner_age) FROM matches",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "loser_age",
            ")",
            ",",
            "avg",
            "(",
            "winner_age",
            ")",
            "FROM",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "loser_age",
            ")",
            ",",
            "avg",
            "(",
            "winner_age",
            ")",
            "from",
            "matches"
        ],
        "question": "Find the average age of losers and the average age of winners of all matches.",
        "question_toks": [
            "Find",
            "the",
            "average",
            "age",
            "of",
            "losers",
            "and",
            "the",
            "average",
            "age",
            "of",
            "winners",
            "of",
            "all",
            "matches",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 436,
        "query": "SELECT avg(loser_age) , avg(winner_age) FROM matches",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "loser_age",
            ")",
            ",",
            "avg",
            "(",
            "winner_age",
            ")",
            "FROM",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "loser_age",
            ")",
            ",",
            "avg",
            "(",
            "winner_age",
            ")",
            "from",
            "matches"
        ],
        "question": "What are the average ages of losers and winners across matches?",
        "question_toks": [
            "What",
            "are",
            "the",
            "average",
            "ages",
            "of",
            "losers",
            "and",
            "winners",
            "across",
            "matches",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 437,
        "query": "SELECT avg(winner_rank) FROM matches",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "winner_rank",
            ")",
            "FROM",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "winner_rank",
            ")",
            "from",
            "matches"
        ],
        "question": "Find the average rank of winners in all matches.",
        "question_toks": [
            "Find",
            "the",
            "average",
            "rank",
            "of",
            "winners",
            "in",
            "all",
            "matches",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 438,
        "query": "SELECT avg(winner_rank) FROM matches",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "winner_rank",
            ")",
            "FROM",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "winner_rank",
            ")",
            "from",
            "matches"
        ],
        "question": "What is the average rank for winners in all matches?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "rank",
            "for",
            "winners",
            "in",
            "all",
            "matches",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 439,
        "query": "SELECT min(loser_rank) FROM matches",
        "query_toks": [
            "SELECT",
            "min",
            "(",
            "loser_rank",
            ")",
            "FROM",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "min",
            "(",
            "loser_rank",
            ")",
            "from",
            "matches"
        ],
        "question": "Find the highest rank of losers in all matches.",
        "question_toks": [
            "Find",
            "the",
            "highest",
            "rank",
            "of",
            "losers",
            "in",
            "all",
            "matches",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 440,
        "query": "SELECT min(loser_rank) FROM matches",
        "query_toks": [
            "SELECT",
            "min",
            "(",
            "loser_rank",
            ")",
            "FROM",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "min",
            "(",
            "loser_rank",
            ")",
            "from",
            "matches"
        ],
        "question": "What is the best rank of losers across all matches?",
        "question_toks": [
            "What",
            "is",
            "the",
            "best",
            "rank",
            "of",
            "losers",
            "across",
            "all",
            "matches",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 441,
        "query": "SELECT count(DISTINCT country_code) FROM players",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "country_code",
            ")",
            "FROM",
            "players"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "country_code",
            ")",
            "from",
            "players"
        ],
        "question": "find the number of distinct country codes of all players.",
        "question_toks": [
            "find",
            "the",
            "number",
            "of",
            "distinct",
            "country",
            "codes",
            "of",
            "all",
            "players",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 442,
        "query": "SELECT count(DISTINCT country_code) FROM players",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "country_code",
            ")",
            "FROM",
            "players"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "country_code",
            ")",
            "from",
            "players"
        ],
        "question": "How many distinct countries do players come from?",
        "question_toks": [
            "How",
            "many",
            "distinct",
            "countries",
            "do",
            "players",
            "come",
            "from",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 443,
        "query": "SELECT count(DISTINCT loser_name) FROM matches",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "loser_name",
            ")",
            "FROM",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "loser_name",
            ")",
            "from",
            "matches"
        ],
        "question": "Find the number of distinct names of losers registered in matches.",
        "question_toks": [
            "Find",
            "the",
            "number",
            "of",
            "distinct",
            "names",
            "of",
            "losers",
            "registered",
            "in",
            "matches",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 444,
        "query": "SELECT count(DISTINCT loser_name) FROM matches",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "loser_name",
            ")",
            "FROM",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "loser_name",
            ")",
            "from",
            "matches"
        ],
        "question": "How many different loser names are there?",
        "question_toks": [
            "How",
            "many",
            "different",
            "loser",
            "names",
            "are",
            "there",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 445,
        "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10",
        "query_toks": [
            "SELECT",
            "tourney_name",
            "FROM",
            "matches",
            "GROUP",
            "BY",
            "tourney_name",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "10"
        ],
        "query_toks_no_value": [
            "select",
            "tourney_name",
            "from",
            "matches",
            "group",
            "by",
            "tourney_name",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Find the name of tourney that has more than 10 matches.",
        "question_toks": [
            "Find",
            "the",
            "name",
            "of",
            "tourney",
            "that",
            "has",
            "more",
            "than",
            "10",
            "matches",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 446,
        "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10",
        "query_toks": [
            "SELECT",
            "tourney_name",
            "FROM",
            "matches",
            "GROUP",
            "BY",
            "tourney_name",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "10"
        ],
        "query_toks_no_value": [
            "select",
            "tourney_name",
            "from",
            "matches",
            "group",
            "by",
            "tourney_name",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "What are the names of tournaments that have more than 10 matches?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "tournaments",
            "that",
            "have",
            "more",
            "than",
            "10",
            "matches",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 447,
        "query": "SELECT T.winner_name FROM (SELECT winner_id, winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_id, winner_name FROM matches WHERE YEAR = 2016) AS T",
        "query_toks": [
            "SELECT",
            "T",
            ".",
            "winner_name",
            "FROM",
            "(",
            "SELECT",
            "winner_id,",
            "winner_name",
            "FROM",
            "matches",
            "WHERE",
            "YEAR",
            "=",
            "2013",
            "INTERSECT",
            "SELECT",
            "winner_id,",
            "winner_name",
            "FROM",
            "matches",
            "WHERE",
            "YEAR",
            "=",
            "2016",
            ")",
            "AS",
            "T"
        ],
        "query_toks_no_value": [
            "select",
            "t",
            ".",
            "winner_name",
            "from",
            "(",
            "select",
            "winner_id,",
            "winner_name",
            "from",
            "matches",
            "where",
            "year",
            "=",
            "value",
            "intersect",
            "select",
            "winner_id,",
            "winner_name",
            "from",
            "matches",
            "where",
            "year",
            "=",
            "value",
            ")",
            "as",
            "t"
        ],
        "question": "List the names of all winners who played in both 2013 and 2016.",
        "question_toks": [
            "List",
            "the",
            "names",
            "of",
            "all",
            "winners",
            "who",
            "played",
            "in",
            "both",
            "2013",
            "and",
            "2016",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 448,
        "query": "SELECT first_name, last_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE year = 2013 INTERSECT SELECT winner_id FROM matches WHERE year = 2016)",
        "query_toks": [
            "SELECT",
            "first_name,",
            "last_name",
            "FROM",
            "players",
            "WHERE",
            "player_id",
            "IN",
            "(",
            "SELECT",
            "winner_id",
            "FROM",
            "matches",
            "WHERE",
            "year",
            "=",
            "2013",
            "INTERSECT",
            "SELECT",
            "winner_id",
            "FROM",
            "matches",
            "WHERE",
            "year",
            "=",
            "2016",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "first_name,",
            "last_name",
            "from",
            "players",
            "where",
            "player_id",
            "in",
            "(",
            "select",
            "winner_id",
            "from",
            "matches",
            "where",
            "year",
            "=",
            "value",
            "intersect",
            "select",
            "winner_id",
            "from",
            "matches",
            "where",
            "year",
            "=",
            "value",
            ")"
        ],
        "question": "What are the first name and last name of players who won in both 2013 and 2016?",
        "question_toks": [
            "What",
            "are",
            "the",
            "first",
            "name",
            "and",
            "last",
            "name",
            "of",
            "players",
            "who",
            "won",
            "in",
            "both",
            "2013",
            "and",
            "2016",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 449,
        "query": "SELECT count(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "matches",
            "WHERE",
            "YEAR",
            "=",
            "2013",
            "OR",
            "YEAR",
            "=",
            "2016"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "matches",
            "where",
            "year",
            "=",
            "value",
            "or",
            "year",
            "=",
            "value"
        ],
        "question": "List the number of all matches who played in years of 2013 or 2016.",
        "question_toks": [
            "List",
            "the",
            "number",
            "of",
            "all",
            "matches",
            "who",
            "played",
            "in",
            "years",
            "of",
            "2013",
            "or",
            "2016",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 450,
        "query": "SELECT count(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "matches",
            "WHERE",
            "YEAR",
            "=",
            "2013",
            "OR",
            "YEAR",
            "=",
            "2016"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "matches",
            "where",
            "year",
            "=",
            "value",
            "or",
            "year",
            "=",
            "value"
        ],
        "question": "How many matches were played in 2013 or 2016?",
        "question_toks": [
            "How",
            "many",
            "matches",
            "were",
            "played",
            "in",
            "2013",
            "or",
            "2016",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 451,
        "query": "SELECT p.country_code, p.first_name FROM players p WHERE EXISTS (SELECT 1 FROM matches m WHERE m.winner_id = p.player_id AND m.tourney_name = 'WTA Championships') AND EXISTS (SELECT 1 FROM matches m WHERE m.winner_id = p.player_id AND m.tourney_name = 'Australian Open')",
        "query_toks": [
            "SELECT",
            "p.country_code,",
            "p.first_name",
            "FROM",
            "players",
            "p",
            "WHERE",
            "EXISTS",
            "(",
            "SELECT",
            "1",
            "FROM",
            "matches",
            "m",
            "WHERE",
            "m.winner_id",
            "=",
            "p.player_id",
            "AND",
            "m.tourney_name",
            "=",
            "'WTA",
            "Championships",
            "'",
            ")",
            "AND",
            "EXISTS",
            "(",
            "SELECT",
            "1",
            "FROM",
            "matches",
            "m",
            "WHERE",
            "m.winner_id",
            "=",
            "p.player_id",
            "AND",
            "m.tourney_name",
            "=",
            "'Australian",
            "Open",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "p.country_code,",
            "p.first_name",
            "from",
            "players",
            "p",
            "where",
            "exists",
            "(",
            "select",
            "value",
            "from",
            "matches",
            "m",
            "where",
            "m.winner_id",
            "=",
            "p.player_id",
            "and",
            "m.tourney_name",
            "=",
            "value",
            ")",
            "and",
            "exists",
            "(",
            "select",
            "value",
            "from",
            "matches",
            "m",
            "where",
            "m.winner_id",
            "=",
            "p.player_id",
            "and",
            "m.tourney_name",
            "=",
            "value",
            ")"
        ],
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "question_toks": [
            "What",
            "are",
            "the",
            "country",
            "code",
            "and",
            "first",
            "name",
            "of",
            "the",
            "players",
            "who",
            "won",
            "in",
            "both",
            "tourney",
            "WTA",
            "Championships",
            "and",
            "Australian",
            "Open",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 452,
        "query": "SELECT first_name, country_code FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships' INTERSECT SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open')",
        "query_toks": [
            "SELECT",
            "first_name,",
            "country_code",
            "FROM",
            "players",
            "WHERE",
            "player_id",
            "IN",
            "(",
            "SELECT",
            "winner_id",
            "FROM",
            "matches",
            "WHERE",
            "tourney_name",
            "=",
            "'WTA",
            "Championships",
            "'",
            "INTERSECT",
            "SELECT",
            "winner_id",
            "FROM",
            "matches",
            "WHERE",
            "tourney_name",
            "=",
            "'Australian",
            "Open",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "first_name,",
            "country_code",
            "from",
            "players",
            "where",
            "player_id",
            "in",
            "(",
            "select",
            "winner_id",
            "from",
            "matches",
            "where",
            "tourney_name",
            "=",
            "value",
            "intersect",
            "select",
            "winner_id",
            "from",
            "matches",
            "where",
            "tourney_name",
            "=",
            "value",
            ")"
        ],
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "question_toks": [
            "What",
            "are",
            "the",
            "first",
            "names",
            "and",
            "country",
            "codes",
            "for",
            "players",
            "who",
            "won",
            "both",
            "the",
            "WTA",
            "Championships",
            "and",
            "the",
            "Australian",
            "Open",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 453,
        "query": "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players)",
        "query_toks": [
            "SELECT",
            "first_name,",
            "country_code",
            "FROM",
            "players",
            "WHERE",
            "birth_date",
            "=",
            "(",
            "SELECT",
            "MIN",
            "(",
            "birth_date",
            ")",
            "FROM",
            "players",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "first_name,",
            "country_code",
            "from",
            "players",
            "where",
            "birth_date",
            "=",
            "(",
            "select",
            "min",
            "(",
            "birth_date",
            ")",
            "from",
            "players",
            ")"
        ],
        "question": "Find the first name and country code of each oldest player.",
        "question_toks": [
            "Find",
            "the",
            "first",
            "name",
            "and",
            "country",
            "code",
            "of",
            "each",
            "oldest",
            "player",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 454,
        "query": "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players)",
        "query_toks": [
            "SELECT",
            "first_name,",
            "country_code",
            "FROM",
            "players",
            "WHERE",
            "birth_date",
            "=",
            "(",
            "SELECT",
            "MIN",
            "(",
            "birth_date",
            ")",
            "FROM",
            "players",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "first_name,",
            "country_code",
            "from",
            "players",
            "where",
            "birth_date",
            "=",
            "(",
            "select",
            "min",
            "(",
            "birth_date",
            ")",
            "from",
            "players",
            ")"
        ],
        "question": "List the first names and country codes of all oldest players.",
        "question_toks": [
            "List",
            "the",
            "first",
            "names",
            "and",
            "country",
            "codes",
            "of",
            "all",
            "oldest",
            "players",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 455,
        "query": "SELECT first_name, last_name FROM players ORDER BY birth_date, last_name, player_id",
        "query_toks": [
            "SELECT",
            "first_name,",
            "last_name",
            "FROM",
            "players",
            "ORDER",
            "BY",
            "birth_date,",
            "last_name,",
            "player_id"
        ],
        "query_toks_no_value": [
            "select",
            "first_name,",
            "last_name",
            "from",
            "players",
            "order",
            "by",
            "birth_date,",
            "last_name,",
            "player_id"
        ],
        "question": "List the first and last name of all players ordered by birth date, and in case of a tie, sort by last name alphabetically and then by player id ascending.",
        "question_toks": [
            "List",
            "the",
            "first",
            "and",
            "last",
            "name",
            "of",
            "all",
            "players",
            "ordered",
            "by",
            "birth",
            "date",
            ",",
            "and",
            "in",
            "case",
            "of",
            "a",
            "tie",
            ",",
            "sort",
            "by",
            "last",
            "name",
            "alphabetically",
            "and",
            "then",
            "by",
            "player",
            "id",
            "ascending",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 456,
        "query": "SELECT first_name, last_name FROM players ORDER BY birth_date, player_id",
        "query_toks": [
            "SELECT",
            "first_name,",
            "last_name",
            "FROM",
            "players",
            "ORDER",
            "BY",
            "birth_date,",
            "player_id"
        ],
        "query_toks_no_value": [
            "select",
            "first_name,",
            "last_name",
            "from",
            "players",
            "order",
            "by",
            "birth_date,",
            "player_id"
        ],
        "question": "What are the full names of all players, sorted by birth date and then ascending player id if birth dates are the same?",
        "question_toks": [
            "What",
            "are",
            "the",
            "full",
            "names",
            "of",
            "all",
            "players",
            ",",
            "sorted",
            "by",
            "birth",
            "date",
            "and",
            "then",
            "ascending",
            "player",
            "id",
            "if",
            "birth",
            "dates",
            "are",
            "the",
            "same",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 457,
        "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            "FROM",
            "players",
            "WHERE",
            "hand",
            "=",
            "'L",
            "'",
            "ORDER",
            "BY",
            "birth_date"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "last_name",
            "from",
            "players",
            "where",
            "hand",
            "=",
            "value",
            "order",
            "by",
            "birth_date"
        ],
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "question_toks": [
            "List",
            "the",
            "first",
            "and",
            "last",
            "name",
            "of",
            "all",
            "players",
            "who",
            "are",
            "left",
            "/",
            "L",
            "hand",
            "in",
            "the",
            "order",
            "of",
            "birth",
            "date",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 458,
        "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            "FROM",
            "players",
            "WHERE",
            "hand",
            "=",
            "'L",
            "'",
            "ORDER",
            "BY",
            "birth_date"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "last_name",
            "from",
            "players",
            "where",
            "hand",
            "=",
            "value",
            "order",
            "by",
            "birth_date"
        ],
        "question": "What are the full names of all left handed players, in order of birth date?",
        "question_toks": [
            "What",
            "are",
            "the",
            "full",
            "names",
            "of",
            "all",
            "left",
            "handed",
            "players",
            ",",
            "in",
            "order",
            "of",
            "birth",
            "date",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 459,
        "query": "SELECT p.first_name, p.country_code FROM players p, (SELECT player_id FROM rankings GROUP BY player_id HAVING MAX(tours) = (SELECT MAX(tours) FROM rankings)) as r WHERE p.player_id = r.player_id",
        "query_toks": [
            "SELECT",
            "p.first_name,",
            "p.country_code",
            "FROM",
            "players",
            "p,",
            "(",
            "SELECT",
            "player_id",
            "FROM",
            "rankings",
            "GROUP",
            "BY",
            "player_id",
            "HAVING",
            "MAX",
            "(",
            "tours",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "tours",
            ")",
            "FROM",
            "rankings",
            ")",
            ")",
            "as",
            "r",
            "WHERE",
            "p.player_id",
            "=",
            "r.player_id"
        ],
        "query_toks_no_value": [
            "select",
            "p.first_name,",
            "p.country_code",
            "from",
            "players",
            "p,",
            "(",
            "select",
            "player_id",
            "from",
            "rankings",
            "group",
            "by",
            "player_id",
            "having",
            "max",
            "(",
            "tours",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "tours",
            ")",
            "from",
            "rankings",
            ")",
            ")",
            "as",
            "r",
            "where",
            "p.player_id",
            "=",
            "r.player_id"
        ],
        "question": "Find the first name and country code of each player who did the most number of tours.",
        "question_toks": [
            "Find",
            "the",
            "first",
            "name",
            "and",
            "country",
            "code",
            "of",
            "each",
            "player",
            "who",
            "did",
            "the",
            "most",
            "number",
            "of",
            "tours",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 460,
        "query": "SELECT T1.first_name, T1.country_code FROM players AS T1 WHERE T1.player_id IN (SELECT T2.player_id FROM rankings AS T2 WHERE T2.tours = (SELECT MAX(tours) FROM rankings))",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "first_name,",
            "T1",
            ".",
            "country_code",
            "FROM",
            "players",
            "AS",
            "T1",
            "WHERE",
            "T1",
            ".",
            "player_id",
            "IN",
            "(",
            "SELECT",
            "T2",
            ".",
            "player_id",
            "FROM",
            "rankings",
            "AS",
            "T2",
            "WHERE",
            "T2",
            ".",
            "tours",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "tours",
            ")",
            "FROM",
            "rankings",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "first_name,",
            "t1",
            ".",
            "country_code",
            "from",
            "players",
            "as",
            "t1",
            "where",
            "t1",
            ".",
            "player_id",
            "in",
            "(",
            "select",
            "t2",
            ".",
            "player_id",
            "from",
            "rankings",
            "as",
            "t2",
            "where",
            "t2",
            ".",
            "tours",
            "=",
            "(",
            "select",
            "max",
            "(",
            "tours",
            ")",
            "from",
            "rankings",
            ")",
            ")"
        ],
        "question": "Show the first name and country code of each player with the most tours.",
        "question_toks": [
            "Show",
            "the",
            "first",
            "name",
            "and",
            "country",
            "code",
            "of",
            "each",
            "player",
            "with",
            "the",
            "most",
            "tours",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 461,
        "query": "SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC, year ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "year",
            "FROM",
            "matches",
            "GROUP",
            "BY",
            "year",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC,",
            "year",
            "ASC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "year",
            "from",
            "matches",
            "group",
            "by",
            "year",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc,",
            "year",
            "asc",
            "limit",
            "value"
        ],
        "question": "Find the year that has the most number of matches. If there is a tie, return the earliest year.",
        "question_toks": [
            "Find",
            "the",
            "year",
            "that",
            "has",
            "the",
            "most",
            "number",
            "of",
            "matches",
            ".",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "return",
            "the",
            "earliest",
            "year",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 462,
        "query": "SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC, year ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "year",
            "FROM",
            "matches",
            "GROUP",
            "BY",
            "year",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC,",
            "year",
            "ASC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "year",
            "from",
            "matches",
            "group",
            "by",
            "year",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc,",
            "year",
            "asc",
            "limit",
            "value"
        ],
        "question": "Which year had the most matches? If there is a tie, return the earliest year.",
        "question_toks": [
            "Which",
            "year",
            "had",
            "the",
            "most",
            "matches",
            "?",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "return",
            "the",
            "earliest",
            "year",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 463,
        "query": "SELECT first_name, last_name, SUM(winner_rank_points) AS total_winner_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY winner_id HAVING COUNT(*) = (SELECT max(cnt) FROM (SELECT COUNT(*) AS cnt FROM matches GROUP BY winner_id))",
        "query_toks": [
            "SELECT",
            "first_name,",
            "last_name,",
            "SUM",
            "(",
            "winner_rank_points",
            ")",
            "AS",
            "total_winner_rank_points",
            "FROM",
            "matches",
            "JOIN",
            "players",
            "ON",
            "matches.winner_id",
            "=",
            "players.player_id",
            "GROUP",
            "BY",
            "winner_id",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "cnt",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "cnt",
            "FROM",
            "matches",
            "GROUP",
            "BY",
            "winner_id",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "first_name,",
            "last_name,",
            "sum",
            "(",
            "winner_rank_points",
            ")",
            "as",
            "total_winner_rank_points",
            "from",
            "matches",
            "join",
            "players",
            "on",
            "matches.winner_id",
            "=",
            "players.player_id",
            "group",
            "by",
            "winner_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "cnt",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "cnt",
            "from",
            "matches",
            "group",
            "by",
            "winner_id",
            ")",
            ")"
        ],
        "question": "Find the first name, last name and summation of winner rank points of all players who won the most times.",
        "question_toks": [
            "Find",
            "the",
            "first",
            "name",
            ",",
            "last",
            "name",
            "and",
            "summation",
            "of",
            "winner",
            "rank",
            "points",
            "of",
            "all",
            "players",
            "who",
            "won",
            "the",
            "most",
            "times",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 464,
        "query": "SELECT p.first_name, p.last_name, T.total_winner_rank_points FROM players AS p JOIN (SELECT m1.winner_id, SUM(m1.winner_rank_points) AS total_winner_rank_points FROM matches AS m1 GROUP BY m1.winner_id HAVING count(*) = (SELECT count(*) AS C FROM matches m JOIN players p ON m.winner_id = p.player_id GROUP BY m.winner_id ORDER BY C DESC LIMIT 1)) AS T on p.player_id = T.winner_id",
        "query_toks": [
            "SELECT",
            "p.first_name,",
            "p.last_name,",
            "T",
            ".",
            "total_winner_rank_points",
            "FROM",
            "players",
            "AS",
            "p",
            "JOIN",
            "(",
            "SELECT",
            "m1.winner_id,",
            "SUM",
            "(",
            "m1.winner_rank_points",
            ")",
            "AS",
            "total_winner_rank_points",
            "FROM",
            "matches",
            "AS",
            "m1",
            "GROUP",
            "BY",
            "m1.winner_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "AS",
            "C",
            "FROM",
            "matches",
            "m",
            "JOIN",
            "players",
            "p",
            "ON",
            "m.winner_id",
            "=",
            "p.player_id",
            "GROUP",
            "BY",
            "m.winner_id",
            "ORDER",
            "BY",
            "C",
            "DESC",
            "LIMIT",
            "1",
            ")",
            ")",
            "AS",
            "T",
            "on",
            "p.player_id",
            "=",
            "T",
            ".",
            "winner_id"
        ],
        "query_toks_no_value": [
            "select",
            "p.first_name,",
            "p.last_name,",
            "t",
            ".",
            "total_winner_rank_points",
            "from",
            "players",
            "as",
            "p",
            "join",
            "(",
            "select",
            "m1.winner_id,",
            "sum",
            "(",
            "m1.winner_rank_points",
            ")",
            "as",
            "total_winner_rank_points",
            "from",
            "matches",
            "as",
            "m1",
            "group",
            "by",
            "m1.winner_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "c",
            "from",
            "matches",
            "m",
            "join",
            "players",
            "p",
            "on",
            "m.winner_id",
            "=",
            "p.player_id",
            "group",
            "by",
            "m.winner_id",
            "order",
            "by",
            "c",
            "desc",
            "limit",
            "value",
            ")",
            ")",
            "as",
            "t",
            "on",
            "p.player_id",
            "=",
            "t",
            ".",
            "winner_id"
        ],
        "question": "What is the winner's full name (first name and last name) of the player who has won the most matches, and how many total winner rank points does this player have?",
        "question_toks": [
            "What",
            "is",
            "the",
            "winner",
            "'",
            "s",
            "full",
            "name",
            "(",
            "first",
            "name",
            "and",
            "last",
            "name",
            ")",
            "of",
            "the",
            "player",
            "who",
            "has",
            "won",
            "the",
            "most",
            "matches",
            ",",
            "and",
            "how",
            "many",
            "total",
            "winner",
            "rank",
            "points",
            "does",
            "this",
            "player",
            "have",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 465,
        "query": "SELECT first_name, last_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open'))",
        "query_toks": [
            "SELECT",
            "first_name,",
            "last_name",
            "FROM",
            "players",
            "WHERE",
            "player_id",
            "IN",
            "(",
            "SELECT",
            "winner_id",
            "FROM",
            "matches",
            "WHERE",
            "tourney_name",
            "=",
            "'Australian",
            "Open",
            "'",
            "AND",
            "winner_rank_points",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "winner_rank_points",
            ")",
            "FROM",
            "matches",
            "WHERE",
            "tourney_name",
            "=",
            "'Australian",
            "Open",
            "'",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "first_name,",
            "last_name",
            "from",
            "players",
            "where",
            "player_id",
            "in",
            "(",
            "select",
            "winner_id",
            "from",
            "matches",
            "where",
            "tourney_name",
            "=",
            "value",
            "and",
            "winner_rank_points",
            "=",
            "(",
            "select",
            "max",
            "(",
            "winner_rank_points",
            ")",
            "from",
            "matches",
            "where",
            "tourney_name",
            "=",
            "value",
            ")",
            ")"
        ],
        "question": "Find the first name and last name of the winner who has the highest winner rank points and participated in the Australian Open tourney.",
        "question_toks": [
            "Find",
            "the",
            "first",
            "name",
            "and",
            "last",
            "name",
            "of",
            "the",
            "winner",
            "who",
            "has",
            "the",
            "highest",
            "winner",
            "rank",
            "points",
            "and",
            "participated",
            "in",
            "the",
            "Australian",
            "Open",
            "tourney",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 466,
        "query": "SELECT first_name, last_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open'))",
        "query_toks": [
            "SELECT",
            "first_name,",
            "last_name",
            "FROM",
            "players",
            "WHERE",
            "player_id",
            "IN",
            "(",
            "SELECT",
            "winner_id",
            "FROM",
            "matches",
            "WHERE",
            "tourney_name",
            "=",
            "'Australian",
            "Open",
            "'",
            "AND",
            "winner_rank_points",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "winner_rank_points",
            ")",
            "FROM",
            "matches",
            "WHERE",
            "tourney_name",
            "=",
            "'Australian",
            "Open",
            "'",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "first_name,",
            "last_name",
            "from",
            "players",
            "where",
            "player_id",
            "in",
            "(",
            "select",
            "winner_id",
            "from",
            "matches",
            "where",
            "tourney_name",
            "=",
            "value",
            "and",
            "winner_rank_points",
            "=",
            "(",
            "select",
            "max",
            "(",
            "winner_rank_points",
            ")",
            "from",
            "matches",
            "where",
            "tourney_name",
            "=",
            "value",
            ")",
            ")"
        ],
        "question": "What is the first name and last name of the winner with the most winner rank points who participated in the Australian Open tournament?",
        "question_toks": [
            "What",
            "is",
            "the",
            "first",
            "name",
            "and",
            "last",
            "name",
            "of",
            "the",
            "winner",
            "with",
            "the",
            "most",
            "winner",
            "rank",
            "points",
            "who",
            "participated",
            "in",
            "the",
            "Australian",
            "Open",
            "tournament",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 467,
        "query": "WITH LongestMatch AS (SELECT MAX(minutes) AS max_minutes FROM matches) SELECT m.winner_name, m.loser_name FROM matches m JOIN LongestMatch lm ON m.minutes = lm.max_minutes",
        "query_toks": [
            "WITH",
            "LongestMatch",
            "AS",
            "(",
            "SELECT",
            "MAX",
            "(",
            "minutes",
            ")",
            "AS",
            "max_minutes",
            "FROM",
            "matches",
            ")",
            "SELECT",
            "m.winner_name,",
            "m.loser_name",
            "FROM",
            "matches",
            "m",
            "JOIN",
            "LongestMatch",
            "lm",
            "ON",
            "m.minutes",
            "=",
            "lm.max_minutes"
        ],
        "query_toks_no_value": [
            "with",
            "longestmatch",
            "as",
            "(",
            "select",
            "max",
            "(",
            "minutes",
            ")",
            "as",
            "max_minutes",
            "from",
            "matches",
            ")",
            "select",
            "m.winner_name,",
            "m.loser_name",
            "from",
            "matches",
            "m",
            "join",
            "longestmatch",
            "lm",
            "on",
            "m.minutes",
            "=",
            "lm.max_minutes"
        ],
        "question": "find the names of loser and winner who played in the match with the greatest number of minutes. If there is a tie, return all of them.",
        "question_toks": [
            "find",
            "the",
            "names",
            "of",
            "loser",
            "and",
            "winner",
            "who",
            "played",
            "in",
            "the",
            "match",
            "with",
            "the",
            "greatest",
            "number",
            "of",
            "minutes",
            ".",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "return",
            "all",
            "of",
            "them",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 468,
        "query": "WITH LongestMatch AS (SELECT MAX(minutes) AS max_minutes FROM matches) SELECT m.winner_name, m.loser_name FROM matches m JOIN LongestMatch lm ON m.minutes = lm.max_minutes",
        "query_toks": [
            "WITH",
            "LongestMatch",
            "AS",
            "(",
            "SELECT",
            "MAX",
            "(",
            "minutes",
            ")",
            "AS",
            "max_minutes",
            "FROM",
            "matches",
            ")",
            "SELECT",
            "m.winner_name,",
            "m.loser_name",
            "FROM",
            "matches",
            "m",
            "JOIN",
            "LongestMatch",
            "lm",
            "ON",
            "m.minutes",
            "=",
            "lm.max_minutes"
        ],
        "query_toks_no_value": [
            "with",
            "longestmatch",
            "as",
            "(",
            "select",
            "max",
            "(",
            "minutes",
            ")",
            "as",
            "max_minutes",
            "from",
            "matches",
            ")",
            "select",
            "m.winner_name,",
            "m.loser_name",
            "from",
            "matches",
            "m",
            "join",
            "longestmatch",
            "lm",
            "on",
            "m.minutes",
            "=",
            "lm.max_minutes"
        ],
        "question": "What are the winner name and loser name of the players who played in the longest match?",
        "question_toks": [
            "What",
            "are",
            "the",
            "winner",
            "name",
            "and",
            "loser",
            "name",
            "of",
            "the",
            "players",
            "who",
            "played",
            "in",
            "the",
            "longest",
            "match",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 469,
        "query": "SELECT T1.player_id, avg(ranking), T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id, T1.first_name",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "player_id,",
            "avg",
            "(",
            "ranking",
            ")",
            ",",
            "T1",
            ".",
            "first_name",
            "FROM",
            "players",
            "AS",
            "T1",
            "JOIN",
            "rankings",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "player_id",
            "=",
            "T2",
            ".",
            "player_id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "player_id,",
            "T1",
            ".",
            "first_name"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "player_id,",
            "avg",
            "(",
            "ranking",
            ")",
            ",",
            "t1",
            ".",
            "first_name",
            "from",
            "players",
            "as",
            "t1",
            "join",
            "rankings",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "player_id",
            "=",
            "t2",
            ".",
            "player_id",
            "group",
            "by",
            "t1",
            ".",
            "player_id,",
            "t1",
            ".",
            "first_name"
        ],
        "question": "Find the average ranking for each player, including the player's first name and player ID.",
        "question_toks": [
            "Find",
            "the",
            "average",
            "ranking",
            "for",
            "each",
            "player",
            ",",
            "including",
            "the",
            "player",
            "'",
            "s",
            "first",
            "name",
            "and",
            "player",
            "ID",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 470,
        "query": "SELECT T1.first_name, T1.player_id, COALESCE(AVG(T2.ranking), 0) AS average_ranking FROM players AS T1 LEFT JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name, T1.player_id",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "first_name,",
            "T1",
            ".",
            "player_id,",
            "COALESCE",
            "(",
            "AVG",
            "(",
            "T2",
            ".",
            "ranking",
            ")",
            ",",
            "0",
            ")",
            "AS",
            "average_ranking",
            "FROM",
            "players",
            "AS",
            "T1",
            "LEFT",
            "JOIN",
            "rankings",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "player_id",
            "=",
            "T2",
            ".",
            "player_id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "first_name,",
            "T1",
            ".",
            "player_id"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "first_name,",
            "t1",
            ".",
            "player_id,",
            "coalesce",
            "(",
            "avg",
            "(",
            "t2",
            ".",
            "ranking",
            ")",
            ",",
            "value",
            ")",
            "as",
            "average_ranking",
            "from",
            "players",
            "as",
            "t1",
            "left",
            "join",
            "rankings",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "player_id",
            "=",
            "t2",
            ".",
            "player_id",
            "group",
            "by",
            "t1",
            ".",
            "first_name,",
            "t1",
            ".",
            "player_id"
        ],
        "question": "What are the first names of all players, their player ID, and their average rankings, assigning zero points if ranking is not available?",
        "question_toks": [
            "What",
            "are",
            "the",
            "first",
            "names",
            "of",
            "all",
            "players",
            ",",
            "their",
            "player",
            "ID",
            ",",
            "and",
            "their",
            "average",
            "rankings",
            ",",
            "assigning",
            "zero",
            "points",
            "if",
            "ranking",
            "is",
            "not",
            "available",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 471,
        "query": "SELECT sum(ranking_points), T1.first_name, T1.player_id FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name, T1.player_id",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "ranking_points",
            ")",
            ",",
            "T1",
            ".",
            "first_name,",
            "T1",
            ".",
            "player_id",
            "FROM",
            "players",
            "AS",
            "T1",
            "JOIN",
            "rankings",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "player_id",
            "=",
            "T2",
            ".",
            "player_id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "first_name,",
            "T1",
            ".",
            "player_id"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "ranking_points",
            ")",
            ",",
            "t1",
            ".",
            "first_name,",
            "t1",
            ".",
            "player_id",
            "from",
            "players",
            "as",
            "t1",
            "join",
            "rankings",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "player_id",
            "=",
            "t2",
            ".",
            "player_id",
            "group",
            "by",
            "t1",
            ".",
            "first_name,",
            "t1",
            ".",
            "player_id"
        ],
        "question": "Find the total ranking points for each player, including their first name and player ID.",
        "question_toks": [
            "Find",
            "the",
            "total",
            "ranking",
            "points",
            "for",
            "each",
            "player",
            ",",
            "including",
            "their",
            "first",
            "name",
            "and",
            "player",
            "ID",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 472,
        "query": "SELECT p.first_name, IFNULL(SUM(r.ranking_points), 0) FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id",
        "query_toks": [
            "SELECT",
            "p.first_name,",
            "IFNULL",
            "(",
            "SUM",
            "(",
            "r.ranking_points",
            ")",
            ",",
            "0",
            ")",
            "FROM",
            "players",
            "p",
            "LEFT",
            "JOIN",
            "rankings",
            "r",
            "ON",
            "p.player_id",
            "=",
            "r.player_id",
            "GROUP",
            "BY",
            "p.player_id"
        ],
        "query_toks_no_value": [
            "select",
            "p.first_name,",
            "ifnull",
            "(",
            "sum",
            "(",
            "r.ranking_points",
            ")",
            ",",
            "value",
            ")",
            "from",
            "players",
            "p",
            "left",
            "join",
            "rankings",
            "r",
            "on",
            "p.player_id",
            "=",
            "r.player_id",
            "group",
            "by",
            "p.player_id"
        ],
        "question": "What are the first names of all players and their total ranking points, assigning zero points if ranking is not available?",
        "question_toks": [
            "What",
            "are",
            "the",
            "first",
            "names",
            "of",
            "all",
            "players",
            "and",
            "their",
            "total",
            "ranking",
            "points",
            ",",
            "assigning",
            "zero",
            "points",
            "if",
            "ranking",
            "is",
            "not",
            "available",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 473,
        "query": "SELECT count(*) , country_code FROM players GROUP BY country_code",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "country_code",
            "FROM",
            "players",
            "GROUP",
            "BY",
            "country_code"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "country_code",
            "from",
            "players",
            "group",
            "by",
            "country_code"
        ],
        "question": "find the number of players for each country.",
        "question_toks": [
            "find",
            "the",
            "number",
            "of",
            "players",
            "for",
            "each",
            "country",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 474,
        "query": "SELECT count(*) , country_code FROM players GROUP BY country_code",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "country_code",
            "FROM",
            "players",
            "GROUP",
            "BY",
            "country_code"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "country_code",
            "from",
            "players",
            "group",
            "by",
            "country_code"
        ],
        "question": "How many players are from each country?",
        "question_toks": [
            "How",
            "many",
            "players",
            "are",
            "from",
            "each",
            "country",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 475,
        "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*) = (SELECT max(count) FROM (SELECT count(*) AS count FROM players GROUP BY country_code) AS counts)",
        "query_toks": [
            "SELECT",
            "country_code",
            "FROM",
            "players",
            "GROUP",
            "BY",
            "country_code",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "count",
            ")",
            "FROM",
            "(",
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "AS",
            "count",
            "FROM",
            "players",
            "GROUP",
            "BY",
            "country_code",
            ")",
            "AS",
            "counts",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "country_code",
            "from",
            "players",
            "group",
            "by",
            "country_code",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "count",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "count",
            "from",
            "players",
            "group",
            "by",
            "country_code",
            ")",
            "as",
            "counts",
            ")"
        ],
        "question": "Find the code of the country that has the greatest number of players. If there is a tie, include all such country codes.",
        "question_toks": [
            "Find",
            "the",
            "code",
            "of",
            "the",
            "country",
            "that",
            "has",
            "the",
            "greatest",
            "number",
            "of",
            "players",
            ".",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "include",
            "all",
            "such",
            "country",
            "codes",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 476,
        "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*) = (SELECT MAX(player_count) FROM (SELECT count(*) AS player_count FROM players GROUP BY country_code) AS counts)",
        "query_toks": [
            "SELECT",
            "country_code",
            "FROM",
            "players",
            "GROUP",
            "BY",
            "country_code",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "player_count",
            ")",
            "FROM",
            "(",
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "AS",
            "player_count",
            "FROM",
            "players",
            "GROUP",
            "BY",
            "country_code",
            ")",
            "AS",
            "counts",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "country_code",
            "from",
            "players",
            "group",
            "by",
            "country_code",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "player_count",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "player_count",
            "from",
            "players",
            "group",
            "by",
            "country_code",
            ")",
            "as",
            "counts",
            ")"
        ],
        "question": "List all country codes of countries with the most players.",
        "question_toks": [
            "List",
            "all",
            "country",
            "codes",
            "of",
            "countries",
            "with",
            "the",
            "most",
            "players",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 477,
        "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50",
        "query_toks": [
            "SELECT",
            "country_code",
            "FROM",
            "players",
            "GROUP",
            "BY",
            "country_code",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "50"
        ],
        "query_toks_no_value": [
            "select",
            "country_code",
            "from",
            "players",
            "group",
            "by",
            "country_code",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Find the codes of countries that have more than 50 players.",
        "question_toks": [
            "Find",
            "the",
            "codes",
            "of",
            "countries",
            "that",
            "have",
            "more",
            "than",
            "50",
            "players",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 478,
        "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50",
        "query_toks": [
            "SELECT",
            "country_code",
            "FROM",
            "players",
            "GROUP",
            "BY",
            "country_code",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "50"
        ],
        "query_toks_no_value": [
            "select",
            "country_code",
            "from",
            "players",
            "group",
            "by",
            "country_code",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "What are the codes of countries with more than 50 players?",
        "question_toks": [
            "What",
            "are",
            "the",
            "codes",
            "of",
            "countries",
            "with",
            "more",
            "than",
            "50",
            "players",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 479,
        "query": "SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "tours",
            ")",
            ",",
            "ranking_date",
            "FROM",
            "rankings",
            "GROUP",
            "BY",
            "ranking_date"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "tours",
            ")",
            ",",
            "ranking_date",
            "from",
            "rankings",
            "group",
            "by",
            "ranking_date"
        ],
        "question": "Find the total number of tours for each ranking date.",
        "question_toks": [
            "Find",
            "the",
            "total",
            "number",
            "of",
            "tours",
            "for",
            "each",
            "ranking",
            "date",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 480,
        "query": "SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "tours",
            ")",
            ",",
            "ranking_date",
            "FROM",
            "rankings",
            "GROUP",
            "BY",
            "ranking_date"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "tours",
            ")",
            ",",
            "ranking_date",
            "from",
            "rankings",
            "group",
            "by",
            "ranking_date"
        ],
        "question": "How many total tours were there for each ranking date?",
        "question_toks": [
            "How",
            "many",
            "total",
            "tours",
            "were",
            "there",
            "for",
            "each",
            "ranking",
            "date",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 481,
        "query": "SELECT count(*) , YEAR FROM matches GROUP BY YEAR",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "YEAR",
            "FROM",
            "matches",
            "GROUP",
            "BY",
            "YEAR"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "year",
            "from",
            "matches",
            "group",
            "by",
            "year"
        ],
        "question": "Find the number of matches happened in each year.",
        "question_toks": [
            "Find",
            "the",
            "number",
            "of",
            "matches",
            "happened",
            "in",
            "each",
            "year",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 482,
        "query": "SELECT count(*) , YEAR FROM matches GROUP BY YEAR",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "YEAR",
            "FROM",
            "matches",
            "GROUP",
            "BY",
            "YEAR"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "year",
            "from",
            "matches",
            "group",
            "by",
            "year"
        ],
        "question": "How many matches were played in each year?",
        "question_toks": [
            "How",
            "many",
            "matches",
            "were",
            "played",
            "in",
            "each",
            "year",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 483,
        "query": "SELECT winner_name, winner_rank FROM matches WHERE winner_age <= (SELECT MAX(winner_age) FROM (SELECT winner_age AS winner_age FROM matches ORDER BY winner_age Limit 3)) ORDER BY winner_age",
        "query_toks": [
            "SELECT",
            "winner_name,",
            "winner_rank",
            "FROM",
            "matches",
            "WHERE",
            "winner_age",
            "<",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "winner_age",
            ")",
            "FROM",
            "(",
            "SELECT",
            "winner_age",
            "AS",
            "winner_age",
            "FROM",
            "matches",
            "ORDER",
            "BY",
            "winner_age",
            "Limit",
            "3",
            ")",
            ")",
            "ORDER",
            "BY",
            "winner_age"
        ],
        "query_toks_no_value": [
            "select",
            "winner_name,",
            "winner_rank",
            "from",
            "matches",
            "where",
            "winner_age",
            "<",
            "=",
            "(",
            "select",
            "max",
            "(",
            "winner_age",
            ")",
            "from",
            "(",
            "select",
            "winner_age",
            "as",
            "winner_age",
            "from",
            "matches",
            "order",
            "by",
            "winner_age",
            "limit",
            "value",
            ")",
            ")",
            "order",
            "by",
            "winner_age"
        ],
        "question": "Find the winner name and winner rank of each of the 3 youngest winners across all matches.",
        "question_toks": [
            "Find",
            "the",
            "winner",
            "name",
            "and",
            "winner",
            "rank",
            "of",
            "each",
            "of",
            "the",
            "3",
            "youngest",
            "winners",
            "across",
            "all",
            "matches",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 484,
        "query": "SELECT winner_name, winner_rank FROM matches WHERE winner_age <= (SELECT MAX(winner_age) FROM (SELECT winner_age AS winner_age FROM matches ORDER BY winner_age Limit 3)) ORDER BY winner_age",
        "query_toks": [
            "SELECT",
            "winner_name,",
            "winner_rank",
            "FROM",
            "matches",
            "WHERE",
            "winner_age",
            "<",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "winner_age",
            ")",
            "FROM",
            "(",
            "SELECT",
            "winner_age",
            "AS",
            "winner_age",
            "FROM",
            "matches",
            "ORDER",
            "BY",
            "winner_age",
            "Limit",
            "3",
            ")",
            ")",
            "ORDER",
            "BY",
            "winner_age"
        ],
        "query_toks_no_value": [
            "select",
            "winner_name,",
            "winner_rank",
            "from",
            "matches",
            "where",
            "winner_age",
            "<",
            "=",
            "(",
            "select",
            "max",
            "(",
            "winner_age",
            ")",
            "from",
            "(",
            "select",
            "winner_age",
            "as",
            "winner_age",
            "from",
            "matches",
            "order",
            "by",
            "winner_age",
            "limit",
            "value",
            ")",
            ")",
            "order",
            "by",
            "winner_age"
        ],
        "question": "What are the names and ranks of the three youngest winners across all matches?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "and",
            "ranks",
            "of",
            "the",
            "three",
            "youngest",
            "winners",
            "across",
            "all",
            "matches",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 485,
        "query": "SELECT count(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "winner_id",
            ")",
            "FROM",
            "matches",
            "WHERE",
            "tourney_name",
            "=",
            "'WTA",
            "Championships",
            "'",
            "AND",
            "winner_hand",
            "=",
            "'L",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "winner_id",
            ")",
            "from",
            "matches",
            "where",
            "tourney_name",
            "=",
            "value",
            "and",
            "winner_hand",
            "=",
            "value"
        ],
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "question_toks": [
            "How",
            "many",
            "different",
            "winners",
            "both",
            "participated",
            "in",
            "the",
            "WTA",
            "Championships",
            "and",
            "were",
            "left",
            "handed",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 486,
        "query": "SELECT count(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "winner_id",
            ")",
            "FROM",
            "matches",
            "WHERE",
            "tourney_name",
            "=",
            "'WTA",
            "Championships",
            "'",
            "AND",
            "winner_hand",
            "=",
            "'L",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "winner_id",
            ")",
            "from",
            "matches",
            "where",
            "tourney_name",
            "=",
            "value",
            "and",
            "winner_hand",
            "=",
            "value"
        ],
        "question": "Find the number of left handed winners who participated in the WTA Championships.",
        "question_toks": [
            "Find",
            "the",
            "number",
            "of",
            "left",
            "handed",
            "winners",
            "who",
            "participated",
            "in",
            "the",
            "WTA",
            "Championships",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 487,
        "query": "SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 WHERE T1.player_id IN (SELECT T2.winner_id FROM matches AS T2 WHERE T2.winner_rank_points = (SELECT max(T3.winner_rank_points) FROM matches AS T3))",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "first_name,",
            "T1",
            ".",
            "country_code,",
            "T1",
            ".",
            "birth_date",
            "FROM",
            "players",
            "AS",
            "T1",
            "WHERE",
            "T1",
            ".",
            "player_id",
            "IN",
            "(",
            "SELECT",
            "T2",
            ".",
            "winner_id",
            "FROM",
            "matches",
            "AS",
            "T2",
            "WHERE",
            "T2",
            ".",
            "winner_rank_points",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "T3",
            ".",
            "winner_rank_points",
            ")",
            "FROM",
            "matches",
            "AS",
            "T3",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "first_name,",
            "t1",
            ".",
            "country_code,",
            "t1",
            ".",
            "birth_date",
            "from",
            "players",
            "as",
            "t1",
            "where",
            "t1",
            ".",
            "player_id",
            "in",
            "(",
            "select",
            "t2",
            ".",
            "winner_id",
            "from",
            "matches",
            "as",
            "t2",
            "where",
            "t2",
            ".",
            "winner_rank_points",
            "=",
            "(",
            "select",
            "max",
            "(",
            "t3",
            ".",
            "winner_rank_points",
            ")",
            "from",
            "matches",
            "as",
            "t3",
            ")",
            ")"
        ],
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "question_toks": [
            "Find",
            "the",
            "first",
            "name",
            ",",
            "country",
            "code",
            "and",
            "birth",
            "date",
            "of",
            "the",
            "winner",
            "who",
            "has",
            "the",
            "highest",
            "rank",
            "points",
            "in",
            "all",
            "matches",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 488,
        "query": "SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 WHERE T1.player_id IN (SELECT T2.winner_id FROM matches AS T2 WHERE T2.winner_rank_points = (SELECT max(T3.winner_rank_points) FROM matches AS T3))",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "first_name,",
            "T1",
            ".",
            "country_code,",
            "T1",
            ".",
            "birth_date",
            "FROM",
            "players",
            "AS",
            "T1",
            "WHERE",
            "T1",
            ".",
            "player_id",
            "IN",
            "(",
            "SELECT",
            "T2",
            ".",
            "winner_id",
            "FROM",
            "matches",
            "AS",
            "T2",
            "WHERE",
            "T2",
            ".",
            "winner_rank_points",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "T3",
            ".",
            "winner_rank_points",
            ")",
            "FROM",
            "matches",
            "AS",
            "T3",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "first_name,",
            "t1",
            ".",
            "country_code,",
            "t1",
            ".",
            "birth_date",
            "from",
            "players",
            "as",
            "t1",
            "where",
            "t1",
            ".",
            "player_id",
            "in",
            "(",
            "select",
            "t2",
            ".",
            "winner_id",
            "from",
            "matches",
            "as",
            "t2",
            "where",
            "t2",
            ".",
            "winner_rank_points",
            "=",
            "(",
            "select",
            "max",
            "(",
            "t3",
            ".",
            "winner_rank_points",
            ")",
            "from",
            "matches",
            "as",
            "t3",
            ")",
            ")"
        ],
        "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "question_toks": [
            "What",
            "is",
            "the",
            "first",
            "name",
            ",",
            "country",
            "code",
            ",",
            "and",
            "birth",
            "date",
            "of",
            "the",
            "player",
            "with",
            "the",
            "most",
            "winner",
            "rank",
            "points",
            "across",
            "all",
            "matches",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 489,
        "query": "SELECT count(*) , hand FROM players GROUP BY hand",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "hand",
            "FROM",
            "players",
            "GROUP",
            "BY",
            "hand"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "hand",
            "from",
            "players",
            "group",
            "by",
            "hand"
        ],
        "question": "Find the number of players for each hand type.",
        "question_toks": [
            "Find",
            "the",
            "number",
            "of",
            "players",
            "for",
            "each",
            "hand",
            "type",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "wta_1",
        "id": 490,
        "query": "SELECT count(*) , hand FROM players GROUP BY hand",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "hand",
            "FROM",
            "players",
            "GROUP",
            "BY",
            "hand"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "hand",
            "from",
            "players",
            "group",
            "by",
            "hand"
        ],
        "question": "How many players are there for each hand type?",
        "question_toks": [
            "How",
            "many",
            "players",
            "are",
            "there",
            "for",
            "each",
            "hand",
            "type",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "battle_death",
        "id": 491,
        "query": "SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "ship",
            "WHERE",
            "disposition_of_ship",
            "=",
            "'Captured",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "ship",
            "where",
            "disposition_of_ship",
            "=",
            "value"
        ],
        "question": "How many ships ended up being 'Captured'?",
        "question_toks": [
            "How",
            "many",
            "ships",
            "ended",
            "up",
            "being",
            "'Captured",
            "'",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "battle_death",
        "id": 492,
        "query": "SELECT name, tonnage FROM ship ORDER BY name DESC, tonnage ASC",
        "query_toks": [
            "SELECT",
            "name,",
            "tonnage",
            "FROM",
            "ship",
            "ORDER",
            "BY",
            "name",
            "DESC,",
            "tonnage",
            "ASC"
        ],
        "query_toks_no_value": [
            "select",
            "name,",
            "tonnage",
            "from",
            "ship",
            "order",
            "by",
            "name",
            "desc,",
            "tonnage",
            "asc"
        ],
        "question": "List the name and tonnage ordered by name in descending alphabetical order and tonnage in ascending order.",
        "question_toks": [
            "List",
            "the",
            "name",
            "and",
            "tonnage",
            "ordered",
            "by",
            "name",
            "in",
            "descending",
            "alphabetical",
            "order",
            "and",
            "tonnage",
            "in",
            "ascending",
            "order",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "battle_death",
        "id": 493,
        "query": "SELECT name, date, result FROM battle",
        "query_toks": [
            "SELECT",
            "name,",
            "date,",
            "result",
            "FROM",
            "battle"
        ],
        "query_toks_no_value": [
            "select",
            "name,",
            "date,",
            "result",
            "from",
            "battle"
        ],
        "question": "List the name, date and result of each battle.",
        "question_toks": [
            "List",
            "the",
            "name",
            ",",
            "date",
            "and",
            "result",
            "of",
            "each",
            "battle",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "battle_death",
        "id": 494,
        "query": "SELECT max(killed) , min(killed) FROM death",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "killed",
            ")",
            ",",
            "min",
            "(",
            "killed",
            ")",
            "FROM",
            "death"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "killed",
            ")",
            ",",
            "min",
            "(",
            "killed",
            ")",
            "from",
            "death"
        ],
        "question": "What is maximum and minimum death toll caused each time?",
        "question_toks": [
            "What",
            "is",
            "maximum",
            "and",
            "minimum",
            "death",
            "toll",
            "caused",
            "each",
            "time",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "battle_death",
        "id": 495,
        "query": "SELECT avg(injured) FROM death",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "injured",
            ")",
            "FROM",
            "death"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "injured",
            ")",
            "from",
            "death"
        ],
        "question": "What is the average number of injuries caused each time?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "number",
            "of",
            "injuries",
            "caused",
            "each",
            "time",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "battle_death",
        "id": 496,
        "query": "SELECT T1.killed , T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "killed",
            ",",
            "T1",
            ".",
            "injured",
            "FROM",
            "death",
            "AS",
            "T1",
            "JOIN",
            "ship",
            "AS",
            "t2",
            "ON",
            "T1",
            ".",
            "caused_by_ship_id",
            "=",
            "T2",
            ".",
            "id",
            "WHERE",
            "T2",
            ".",
            "tonnage",
            "=",
            "'t",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "killed",
            ",",
            "t1",
            ".",
            "injured",
            "from",
            "death",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "caused_by_ship_id",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "tonnage",
            "=",
            "value"
        ],
        "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
        "question_toks": [
            "What",
            "are",
            "the",
            "death",
            "and",
            "injury",
            "situations",
            "caused",
            "by",
            "the",
            "ship",
            "with",
            "tonnage",
            "'t",
            "'",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "battle_death",
        "id": 497,
        "query": "SELECT name , RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "RESULT",
            "FROM",
            "battle",
            "WHERE",
            "bulgarian_commander",
            "!",
            "=",
            "'Boril",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "result",
            "from",
            "battle",
            "where",
            "bulgarian_commander",
            "!",
            "=",
            "value"
        ],
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "question_toks": [
            "What",
            "are",
            "the",
            "name",
            "and",
            "results",
            "of",
            "the",
            "battles",
            "when",
            "the",
            "bulgarian",
            "commander",
            "is",
            "not",
            "'Boril",
            "'"
        ],
        "sql": ""
    },
    {
        "db_id": "battle_death",
        "id": 498,
        "query": "SELECT DISTINCT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1",
            ".",
            "id",
            ",",
            "T1",
            ".",
            "name",
            "FROM",
            "battle",
            "AS",
            "T1",
            "JOIN",
            "ship",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "id",
            "=",
            "T2",
            ".",
            "lost_in_battle",
            "WHERE",
            "T2",
            ".",
            "ship_type",
            "=",
            "'Brig",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "t1",
            ".",
            "id",
            ",",
            "t1",
            ".",
            "name",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "where",
            "t2",
            ".",
            "ship_type",
            "=",
            "value"
        ],
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "question_toks": [
            "What",
            "are",
            "the",
            "different",
            "ids",
            "and",
            "names",
            "of",
            "the",
            "battles",
            "that",
            "lost",
            "any",
            "'Brig",
            "'",
            "type",
            "shipes",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "battle_death",
        "id": 499,
        "query": "SELECT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed) > 10",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "id",
            ",",
            "T1",
            ".",
            "name",
            "FROM",
            "battle",
            "AS",
            "T1",
            "JOIN",
            "ship",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "id",
            "=",
            "T2",
            ".",
            "lost_in_battle",
            "JOIN",
            "death",
            "AS",
            "T3",
            "ON",
            "T2",
            ".",
            "id",
            "=",
            "T3",
            ".",
            "caused_by_ship_id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "id",
            "HAVING",
            "sum",
            "(",
            "T3",
            ".",
            "killed",
            ")",
            ">",
            "10"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "id",
            ",",
            "t1",
            ".",
            "name",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "join",
            "death",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "id",
            "=",
            "t3",
            ".",
            "caused_by_ship_id",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "having",
            "sum",
            "(",
            "t3",
            ".",
            "killed",
            ")",
            ">",
            "value"
        ],
        "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "question_toks": [
            "What",
            "are",
            "the",
            "ids",
            "and",
            "names",
            "of",
            "the",
            "battles",
            "that",
            "led",
            "to",
            "more",
            "than",
            "10",
            "people",
            "killed",
            "in",
            "total",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "battle_death",
        "id": 500,
        "query": "SELECT T2.id, T2.name FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id GROUP BY T2.id HAVING SUM(T1.injured) = (SELECT max(total_injured) FROM (SELECT SUM(T3.injured) AS total_injured FROM death AS T3 JOIN ship AS T4 ON T3.caused_by_ship_id = T4.id GROUP BY T4.id))",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "id,",
            "T2",
            ".",
            "name",
            "FROM",
            "death",
            "AS",
            "T1",
            "JOIN",
            "ship",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "caused_by_ship_id",
            "=",
            "T2",
            ".",
            "id",
            "GROUP",
            "BY",
            "T2",
            ".",
            "id",
            "HAVING",
            "SUM",
            "(",
            "T1",
            ".",
            "injured",
            ")",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "total_injured",
            ")",
            "FROM",
            "(",
            "SELECT",
            "SUM",
            "(",
            "T3",
            ".",
            "injured",
            ")",
            "AS",
            "total_injured",
            "FROM",
            "death",
            "AS",
            "T3",
            "JOIN",
            "ship",
            "AS",
            "T4",
            "ON",
            "T3",
            ".",
            "caused_by_ship_id",
            "=",
            "T4",
            ".",
            "id",
            "GROUP",
            "BY",
            "T4",
            ".",
            "id",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "id,",
            "t2",
            ".",
            "name",
            "from",
            "death",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "caused_by_ship_id",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t2",
            ".",
            "id",
            "having",
            "sum",
            "(",
            "t1",
            ".",
            "injured",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "total_injured",
            ")",
            "from",
            "(",
            "select",
            "sum",
            "(",
            "t3",
            ".",
            "injured",
            ")",
            "as",
            "total_injured",
            "from",
            "death",
            "as",
            "t3",
            "join",
            "ship",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "caused_by_ship_id",
            "=",
            "t4",
            ".",
            "id",
            "group",
            "by",
            "t4",
            ".",
            "id",
            ")",
            ")"
        ],
        "question": "What is the ship id and name that caused the highest number of total injuries? If there is a tie, list all ships.",
        "question_toks": [
            "What",
            "is",
            "the",
            "ship",
            "id",
            "and",
            "name",
            "that",
            "caused",
            "the",
            "highest",
            "number",
            "of",
            "total",
            "injuries",
            "?",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "list",
            "all",
            "ships",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "battle_death",
        "id": 501,
        "query": "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "name",
            "FROM",
            "battle",
            "WHERE",
            "bulgarian_commander",
            "=",
            "'Kaloyan",
            "'",
            "AND",
            "latin_commander",
            "=",
            "'Baldwin",
            "I",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "name",
            "from",
            "battle",
            "where",
            "bulgarian_commander",
            "=",
            "value",
            "and",
            "latin_commander",
            "=",
            "value"
        ],
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "question_toks": [
            "What",
            "are",
            "the",
            "distinct",
            "battle",
            "names",
            "which",
            "are",
            "between",
            "bulgarian",
            "commander",
            "'Kaloyan",
            "'",
            "and",
            "latin",
            "commander",
            "'Baldwin",
            "I",
            "'",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "battle_death",
        "id": 502,
        "query": "SELECT count(DISTINCT RESULT) FROM battle",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "RESULT",
            ")",
            "FROM",
            "battle"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "result",
            ")",
            "from",
            "battle"
        ],
        "question": "How many different results are there for the battles?",
        "question_toks": [
            "How",
            "many",
            "different",
            "results",
            "are",
            "there",
            "for",
            "the",
            "battles",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "battle_death",
        "id": 503,
        "query": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage = '225' );",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "battle",
            "WHERE",
            "id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "lost_in_battle",
            "FROM",
            "ship",
            "WHERE",
            "tonnage",
            "=",
            "'225",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "battle",
            "where",
            "id",
            "not",
            "in",
            "(",
            "select",
            "lost_in_battle",
            "from",
            "ship",
            "where",
            "tonnage",
            "=",
            "value",
            ")"
        ],
        "question": "How many battles did not lose any ship with tonnage '225'?",
        "question_toks": [
            "How",
            "many",
            "battles",
            "did",
            "not",
            "lose",
            "any",
            "ship",
            "with",
            "tonnage",
            "'225",
            "'",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "battle_death",
        "id": 504,
        "query": "SELECT T3.name, T3.date FROM (SELECT T1.id, T1.name, T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' INTERSECT SELECT T1.id, T1.name, T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'HMS Atalanta') AS T3",
        "query_toks": [
            "SELECT",
            "T3",
            ".",
            "name,",
            "T3",
            ".",
            "date",
            "FROM",
            "(",
            "SELECT",
            "T1",
            ".",
            "id,",
            "T1",
            ".",
            "name,",
            "T1",
            ".",
            "date",
            "FROM",
            "battle",
            "AS",
            "T1",
            "JOIN",
            "ship",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "id",
            "=",
            "T2",
            ".",
            "lost_in_battle",
            "WHERE",
            "T2",
            ".",
            "name",
            "=",
            "'Lettice",
            "'",
            "INTERSECT",
            "SELECT",
            "T1",
            ".",
            "id,",
            "T1",
            ".",
            "name,",
            "T1",
            ".",
            "date",
            "FROM",
            "battle",
            "AS",
            "T1",
            "JOIN",
            "ship",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "id",
            "=",
            "T2",
            ".",
            "lost_in_battle",
            "WHERE",
            "T2",
            ".",
            "name",
            "=",
            "'HMS",
            "Atalanta",
            "'",
            ")",
            "AS",
            "T3"
        ],
        "query_toks_no_value": [
            "select",
            "t3",
            ".",
            "name,",
            "t3",
            ".",
            "date",
            "from",
            "(",
            "select",
            "t1",
            ".",
            "id,",
            "t1",
            ".",
            "name,",
            "t1",
            ".",
            "date",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "value",
            "intersect",
            "select",
            "t1",
            ".",
            "id,",
            "t1",
            ".",
            "name,",
            "t1",
            ".",
            "date",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "value",
            ")",
            "as",
            "t3"
        ],
        "question": "List the name and date of the battle or battles that have lost the ship named 'Lettice' and the ship named 'HMS Atalanta'.",
        "question_toks": [
            "List",
            "the",
            "name",
            "and",
            "date",
            "of",
            "the",
            "battle",
            "or",
            "battles",
            "that",
            "have",
            "lost",
            "the",
            "ship",
            "named",
            "'",
            "Lettice",
            "'",
            "and",
            "the",
            "ship",
            "named",
            "'",
            "HMS",
            "Atalanta",
            "'."
        ],
        "sql": ""
    },
    {
        "db_id": "battle_death",
        "id": 505,
        "query": "SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel')",
        "query_toks": [
            "SELECT",
            "name,",
            "result,",
            "bulgarian_commander",
            "FROM",
            "battle",
            "WHERE",
            "id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "lost_in_battle",
            "FROM",
            "ship",
            "WHERE",
            "location",
            "=",
            "'English",
            "Channel",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name,",
            "result,",
            "bulgarian_commander",
            "from",
            "battle",
            "where",
            "id",
            "not",
            "in",
            "(",
            "select",
            "lost_in_battle",
            "from",
            "ship",
            "where",
            "location",
            "=",
            "value",
            ")"
        ],
        "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "question_toks": [
            "Show",
            "names",
            ",",
            "results",
            "and",
            "bulgarian",
            "commanders",
            "of",
            "the",
            "battles",
            "with",
            "no",
            "ships",
            "lost",
            "in",
            "the",
            "'English",
            "Channel",
            "'",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "battle_death",
        "id": 506,
        "query": "SELECT note FROM death WHERE note LIKE '%East%'",
        "query_toks": [
            "SELECT",
            "note",
            "FROM",
            "death",
            "WHERE",
            "note",
            "LIKE",
            "'%East%",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "note",
            "from",
            "death",
            "where",
            "note",
            "like",
            "value"
        ],
        "question": "What are the notes of the death events which has substring 'East'?",
        "question_toks": [
            "What",
            "are",
            "the",
            "notes",
            "of",
            "the",
            "death",
            "events",
            "which",
            "has",
            "substring",
            "'East",
            "'",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 507,
        "query": "SELECT line_1 , line_2 FROM addresses",
        "query_toks": [
            "SELECT",
            "line_1",
            ",",
            "line_2",
            "FROM",
            "addresses"
        ],
        "query_toks_no_value": [
            "select",
            "line_1",
            ",",
            "line_2",
            "from",
            "addresses"
        ],
        "question": "what are all the addresses including line 1 and line 2?",
        "question_toks": [
            "what",
            "are",
            "all",
            "the",
            "addresses",
            "including",
            "line",
            "1",
            "and",
            "line",
            "2",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 508,
        "query": "SELECT line_1 , line_2 FROM addresses",
        "query_toks": [
            "SELECT",
            "line_1",
            ",",
            "line_2",
            "FROM",
            "addresses"
        ],
        "query_toks_no_value": [
            "select",
            "line_1",
            ",",
            "line_2",
            "from",
            "addresses"
        ],
        "question": "What is the first and second line for all addresses?",
        "question_toks": [
            "What",
            "is",
            "the",
            "first",
            "and",
            "second",
            "line",
            "for",
            "all",
            "addresses",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 509,
        "query": "SELECT count(*) FROM Courses",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Courses"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "courses"
        ],
        "question": "How many courses in total are listed?",
        "question_toks": [
            "How",
            "many",
            "courses",
            "in",
            "total",
            "are",
            "listed",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 510,
        "query": "SELECT count(*) FROM Courses",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Courses"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "courses"
        ],
        "question": "How many courses are there?",
        "question_toks": [
            "How",
            "many",
            "courses",
            "are",
            "there",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 511,
        "query": "SELECT course_description FROM Courses WHERE course_name = 'math'",
        "query_toks": [
            "SELECT",
            "course_description",
            "FROM",
            "Courses",
            "WHERE",
            "course_name",
            "=",
            "'math",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "course_description",
            "from",
            "courses",
            "where",
            "course_name",
            "=",
            "value"
        ],
        "question": "How is the math course described?",
        "question_toks": [
            "How",
            "is",
            "the",
            "math",
            "course",
            "described",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 512,
        "query": "SELECT course_description FROM Courses WHERE course_name = 'math'",
        "query_toks": [
            "SELECT",
            "course_description",
            "FROM",
            "Courses",
            "WHERE",
            "course_name",
            "=",
            "'math",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "course_description",
            "from",
            "courses",
            "where",
            "course_name",
            "=",
            "value"
        ],
        "question": "What are the descriptions for all the math courses?",
        "question_toks": [
            "What",
            "are",
            "the",
            "descriptions",
            "for",
            "all",
            "the",
            "math",
            "courses",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 513,
        "query": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
        "query_toks": [
            "SELECT",
            "zip_postcode",
            "FROM",
            "Addresses",
            "WHERE",
            "city",
            "=",
            "'Port",
            "Chelsea",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "zip_postcode",
            "from",
            "addresses",
            "where",
            "city",
            "=",
            "value"
        ],
        "question": "What is the zip code of the address in the city Port Chelsea?",
        "question_toks": [
            "What",
            "is",
            "the",
            "zip",
            "code",
            "of",
            "the",
            "address",
            "in",
            "the",
            "city",
            "Port",
            "Chelsea",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 514,
        "query": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
        "query_toks": [
            "SELECT",
            "zip_postcode",
            "FROM",
            "Addresses",
            "WHERE",
            "city",
            "=",
            "'Port",
            "Chelsea",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "zip_postcode",
            "from",
            "addresses",
            "where",
            "city",
            "=",
            "value"
        ],
        "question": "What is the zip code for Port Chelsea?",
        "question_toks": [
            "What",
            "is",
            "the",
            "zip",
            "code",
            "for",
            "Port",
            "Chelsea",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 515,
        "query": "WITH DegreeCount AS (SELECT department_id, COUNT(*) AS num_degrees FROM Degree_Programs GROUP BY department_id) SELECT D.department_name, D.department_id FROM Departments AS D JOIN DegreeCount AS DC ON D.department_id = DC.department_id WHERE DC.num_degrees = (SELECT MAX(num_degrees) FROM DegreeCount)",
        "query_toks": [
            "WITH",
            "DegreeCount",
            "AS",
            "(",
            "SELECT",
            "department_id,",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "num_degrees",
            "FROM",
            "Degree_Programs",
            "GROUP",
            "BY",
            "department_id",
            ")",
            "SELECT",
            "D.department_name,",
            "D.department_id",
            "FROM",
            "Departments",
            "AS",
            "D",
            "JOIN",
            "DegreeCount",
            "AS",
            "DC",
            "ON",
            "D.department_id",
            "=",
            "DC.department_id",
            "WHERE",
            "DC.num_degrees",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "num_degrees",
            ")",
            "FROM",
            "DegreeCount",
            ")"
        ],
        "query_toks_no_value": [
            "with",
            "degreecount",
            "as",
            "(",
            "select",
            "department_id,",
            "count",
            "(",
            "*",
            ")",
            "as",
            "num_degrees",
            "from",
            "degree_programs",
            "group",
            "by",
            "department_id",
            ")",
            "select",
            "d.department_name,",
            "d.department_id",
            "from",
            "departments",
            "as",
            "d",
            "join",
            "degreecount",
            "as",
            "dc",
            "on",
            "d.department_id",
            "=",
            "dc.department_id",
            "where",
            "dc.num_degrees",
            "=",
            "(",
            "select",
            "max",
            "(",
            "num_degrees",
            ")",
            "from",
            "degreecount",
            ")"
        ],
        "question": "List the department names and ids of all departments that offer the most number of degrees.",
        "question_toks": [
            "List",
            "the",
            "department",
            "names",
            "and",
            "ids",
            "of",
            "all",
            "departments",
            "that",
            "offer",
            "the",
            "most",
            "number",
            "of",
            "degrees",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 516,
        "query": "SELECT t2.department_name, t1.department_id FROM degree_programs AS t1 JOIN departments AS t2 ON t1.department_id = t2.department_id GROUP BY t1.department_id HAVING COUNT(*) = (SELECT MAX(degree_count) FROM (SELECT COUNT(*) AS degree_count FROM degree_programs GROUP BY department_id) AS counts)",
        "query_toks": [
            "SELECT",
            "t2",
            ".",
            "department_name,",
            "t1",
            ".",
            "department_id",
            "FROM",
            "degree_programs",
            "AS",
            "t1",
            "JOIN",
            "departments",
            "AS",
            "t2",
            "ON",
            "t1",
            ".",
            "department_id",
            "=",
            "t2",
            ".",
            "department_id",
            "GROUP",
            "BY",
            "t1",
            ".",
            "department_id",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "degree_count",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "degree_count",
            "FROM",
            "degree_programs",
            "GROUP",
            "BY",
            "department_id",
            ")",
            "AS",
            "counts",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "department_name,",
            "t1",
            ".",
            "department_id",
            "from",
            "degree_programs",
            "as",
            "t1",
            "join",
            "departments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "department_id",
            "=",
            "t2",
            ".",
            "department_id",
            "group",
            "by",
            "t1",
            ".",
            "department_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "degree_count",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "degree_count",
            "from",
            "degree_programs",
            "group",
            "by",
            "department_id",
            ")",
            "as",
            "counts",
            ")"
        ],
        "question": "What is the name and id of the department with the most number of degrees? If there is a tie, return all of them.",
        "question_toks": [
            "What",
            "is",
            "the",
            "name",
            "and",
            "id",
            "of",
            "the",
            "department",
            "with",
            "the",
            "most",
            "number",
            "of",
            "degrees",
            "?",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "return",
            "all",
            "of",
            "them",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 517,
        "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "department_id",
            ")",
            "FROM",
            "Degree_Programs"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "department_id",
            ")",
            "from",
            "degree_programs"
        ],
        "question": "How many departments offer any degree?",
        "question_toks": [
            "How",
            "many",
            "departments",
            "offer",
            "any",
            "degree",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 518,
        "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "department_id",
            ")",
            "FROM",
            "Degree_Programs"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "department_id",
            ")",
            "from",
            "degree_programs"
        ],
        "question": "How many different departments offer degrees?",
        "question_toks": [
            "How",
            "many",
            "different",
            "departments",
            "offer",
            "degrees",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 519,
        "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "degree_summary_name",
            ")",
            "FROM",
            "Degree_Programs"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "degree_summary_name",
            ")",
            "from",
            "degree_programs"
        ],
        "question": "How many different degree names are offered?",
        "question_toks": [
            "How",
            "many",
            "different",
            "degree",
            "names",
            "are",
            "offered",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 520,
        "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "degree_summary_name",
            ")",
            "FROM",
            "Degree_Programs"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "degree_summary_name",
            ")",
            "from",
            "degree_programs"
        ],
        "question": "How many different degrees are offered?",
        "question_toks": [
            "How",
            "many",
            "different",
            "degrees",
            "are",
            "offered",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 521,
        "query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Departments",
            "AS",
            "T1",
            "JOIN",
            "Degree_Programs",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "department_id",
            "=",
            "T2",
            ".",
            "department_id",
            "WHERE",
            "T1",
            ".",
            "department_name",
            "=",
            "'engineer",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "departments",
            "as",
            "t1",
            "join",
            "degree_programs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "department_id",
            "=",
            "t2",
            ".",
            "department_id",
            "where",
            "t1",
            ".",
            "department_name",
            "=",
            "value"
        ],
        "question": "How many degrees does the engineering department offer?",
        "question_toks": [
            "How",
            "many",
            "degrees",
            "does",
            "the",
            "engineering",
            "department",
            "offer",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 522,
        "query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Departments",
            "AS",
            "T1",
            "JOIN",
            "Degree_Programs",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "department_id",
            "=",
            "T2",
            ".",
            "department_id",
            "WHERE",
            "T1",
            ".",
            "department_name",
            "=",
            "'engineer",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "departments",
            "as",
            "t1",
            "join",
            "degree_programs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "department_id",
            "=",
            "t2",
            ".",
            "department_id",
            "where",
            "t1",
            ".",
            "department_name",
            "=",
            "value"
        ],
        "question": "How many degrees does the engineering department have?",
        "question_toks": [
            "How",
            "many",
            "degrees",
            "does",
            "the",
            "engineering",
            "department",
            "have",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 523,
        "query": "SELECT section_name , section_description FROM Sections",
        "query_toks": [
            "SELECT",
            "section_name",
            ",",
            "section_description",
            "FROM",
            "Sections"
        ],
        "query_toks_no_value": [
            "select",
            "section_name",
            ",",
            "section_description",
            "from",
            "sections"
        ],
        "question": "What are the names and descriptions of all the sections?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "and",
            "descriptions",
            "of",
            "all",
            "the",
            "sections",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 524,
        "query": "SELECT section_name , section_description FROM Sections",
        "query_toks": [
            "SELECT",
            "section_name",
            ",",
            "section_description",
            "FROM",
            "Sections"
        ],
        "query_toks_no_value": [
            "select",
            "section_name",
            ",",
            "section_description",
            "from",
            "sections"
        ],
        "question": "What are the names and descriptions for all the sections?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "and",
            "descriptions",
            "for",
            "all",
            "the",
            "sections",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 525,
        "query": "SELECT c.course_id, c.course_name FROM courses c WHERE (SELECT COUNT(*) FROM sections s WHERE s.course_id = c.course_id) <= 2",
        "query_toks": [
            "SELECT",
            "c.course_id,",
            "c.course_name",
            "FROM",
            "courses",
            "c",
            "WHERE",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "sections",
            "s",
            "WHERE",
            "s.course_id",
            "=",
            "c.course_id",
            ")",
            "<",
            "=",
            "2"
        ],
        "query_toks_no_value": [
            "select",
            "c.course_id,",
            "c.course_name",
            "from",
            "courses",
            "c",
            "where",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "sections",
            "s",
            "where",
            "s.course_id",
            "=",
            "c.course_id",
            ")",
            "<",
            "=",
            "value"
        ],
        "question": "What are the names and id of courses having at most 2 sections?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "and",
            "id",
            "of",
            "courses",
            "having",
            "at",
            "most",
            "2",
            "sections",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 526,
        "query": "SELECT c.course_name, c.course_id FROM courses c WHERE (SELECT COUNT(*) FROM sections s WHERE s.course_id = c.course_id) < 2",
        "query_toks": [
            "SELECT",
            "c.course_name,",
            "c.course_id",
            "FROM",
            "courses",
            "c",
            "WHERE",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "sections",
            "s",
            "WHERE",
            "s.course_id",
            "=",
            "c.course_id",
            ")",
            "<",
            "2"
        ],
        "query_toks_no_value": [
            "select",
            "c.course_name,",
            "c.course_id",
            "from",
            "courses",
            "c",
            "where",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "sections",
            "s",
            "where",
            "s.course_id",
            "=",
            "c.course_id",
            ")",
            "<",
            "value"
        ],
        "question": "What are the names and ids of every course with less than 2 sections?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "and",
            "ids",
            "of",
            "every",
            "course",
            "with",
            "less",
            "than",
            "2",
            "sections",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 527,
        "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "query_toks": [
            "SELECT",
            "section_name",
            "FROM",
            "Sections",
            "ORDER",
            "BY",
            "section_name",
            "DESC"
        ],
        "query_toks_no_value": [
            "select",
            "section_name",
            "from",
            "sections",
            "order",
            "by",
            "section_name",
            "desc"
        ],
        "question": "List the section_name in reversed lexicographical order.",
        "question_toks": [
            "List",
            "the",
            "section_name",
            "in",
            "reversed",
            "lexicographical",
            "order",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 528,
        "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "query_toks": [
            "SELECT",
            "section_name",
            "FROM",
            "Sections",
            "ORDER",
            "BY",
            "section_name",
            "DESC"
        ],
        "query_toks_no_value": [
            "select",
            "section_name",
            "from",
            "sections",
            "order",
            "by",
            "section_name",
            "desc"
        ],
        "question": "What are the names of the sections in reverse alphabetical order?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "the",
            "sections",
            "in",
            "reverse",
            "alphabetical",
            "order",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 529,
        "query": "SELECT T1.semester_name, T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id HAVING count(*) = (SELECT MAX(counted) FROM (SELECT count(*) as counted FROM Student_Enrolment GROUP BY semester_id) AS temp)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "semester_name,",
            "T1",
            ".",
            "semester_id",
            "FROM",
            "Semesters",
            "AS",
            "T1",
            "JOIN",
            "Student_Enrolment",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "semester_id",
            "=",
            "T2",
            ".",
            "semester_id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "semester_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "counted",
            ")",
            "FROM",
            "(",
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "as",
            "counted",
            "FROM",
            "Student_Enrolment",
            "GROUP",
            "BY",
            "semester_id",
            ")",
            "AS",
            "temp",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "semester_name,",
            "t1",
            ".",
            "semester_id",
            "from",
            "semesters",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "semester_id",
            "=",
            "t2",
            ".",
            "semester_id",
            "group",
            "by",
            "t1",
            ".",
            "semester_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "counted",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "counted",
            "from",
            "student_enrolment",
            "group",
            "by",
            "semester_id",
            ")",
            "as",
            "temp",
            ")"
        ],
        "question": "What are the semesters with the most student registrations? Show both the name and the id.",
        "question_toks": [
            "What",
            "are",
            "the",
            "semesters",
            "with",
            "the",
            "most",
            "student",
            "registrations",
            "?",
            "Show",
            "both",
            "the",
            "name",
            "and",
            "the",
            "id",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 530,
        "query": "SELECT T1.semester_name, T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id HAVING COUNT(*) = (SELECT MAX(total_enrolments) FROM (SELECT COUNT(*) AS total_enrolments FROM Student_Enrolment GROUP BY semester_id) AS enrolment_counts)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "semester_name,",
            "T1",
            ".",
            "semester_id",
            "FROM",
            "Semesters",
            "AS",
            "T1",
            "JOIN",
            "Student_Enrolment",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "semester_id",
            "=",
            "T2",
            ".",
            "semester_id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "semester_id",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "total_enrolments",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "total_enrolments",
            "FROM",
            "Student_Enrolment",
            "GROUP",
            "BY",
            "semester_id",
            ")",
            "AS",
            "enrolment_counts",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "semester_name,",
            "t1",
            ".",
            "semester_id",
            "from",
            "semesters",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "semester_id",
            "=",
            "t2",
            ".",
            "semester_id",
            "group",
            "by",
            "t1",
            ".",
            "semester_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "total_enrolments",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "total_enrolments",
            "from",
            "student_enrolment",
            "group",
            "by",
            "semester_id",
            ")",
            "as",
            "enrolment_counts",
            ")"
        ],
        "question": "What are the names and ids of the semesters with the most student registrations? In the case of a tie, return all semesters.",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "and",
            "ids",
            "of",
            "the",
            "semesters",
            "with",
            "the",
            "most",
            "student",
            "registrations",
            "?",
            "In",
            "the",
            "case",
            "of",
            "a",
            "tie",
            ",",
            "return",
            "all",
            "semesters",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 531,
        "query": "SELECT department_description FROM departments WHERE department_name LIKE '%the computer%'",
        "query_toks": [
            "SELECT",
            "department_description",
            "FROM",
            "departments",
            "WHERE",
            "department_name",
            "LIKE",
            "'%the",
            "computer%",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "department_description",
            "from",
            "departments",
            "where",
            "department_name",
            "like",
            "value"
        ],
        "question": "What is the description of the department whose name has the substring the computer?",
        "question_toks": [
            "What",
            "is",
            "the",
            "description",
            "of",
            "the",
            "department",
            "whose",
            "name",
            "has",
            "the",
            "substring",
            "the",
            "computer",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 532,
        "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "query_toks": [
            "SELECT",
            "department_description",
            "FROM",
            "Departments",
            "WHERE",
            "department_name",
            "LIKE",
            "'%computer%",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "department_description",
            "from",
            "departments",
            "where",
            "department_name",
            "like",
            "value"
        ],
        "question": "What is the department description for the one whose name has the word computer?",
        "question_toks": [
            "What",
            "is",
            "the",
            "department",
            "description",
            "for",
            "the",
            "one",
            "whose",
            "name",
            "has",
            "the",
            "word",
            "computer",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 533,
        "query": "SELECT DISTINCT s.first_name, s.middle_name, s.last_name, s.student_id FROM students s WHERE EXISTS (SELECT 1 FROM student_enrolment se WHERE se.student_id = s.student_id GROUP BY se.semester_id HAVING COUNT(DISTINCT se.degree_program_id) = 2)",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "s.first_name,",
            "s.middle_name,",
            "s.last_name,",
            "s.student_id",
            "FROM",
            "students",
            "s",
            "WHERE",
            "EXISTS",
            "(",
            "SELECT",
            "1",
            "FROM",
            "student_enrolment",
            "se",
            "WHERE",
            "se.student_id",
            "=",
            "s.student_id",
            "GROUP",
            "BY",
            "se.semester_id",
            "HAVING",
            "COUNT",
            "(",
            "DISTINCT",
            "se.degree_program_id",
            ")",
            "=",
            "2",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "s.first_name,",
            "s.middle_name,",
            "s.last_name,",
            "s.student_id",
            "from",
            "students",
            "s",
            "where",
            "exists",
            "(",
            "select",
            "value",
            "from",
            "student_enrolment",
            "se",
            "where",
            "se.student_id",
            "=",
            "s.student_id",
            "group",
            "by",
            "se.semester_id",
            "having",
            "count",
            "(",
            "distinct",
            "se.degree_program_id",
            ")",
            "=",
            "value",
            ")"
        ],
        "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "question_toks": [
            "Who",
            "are",
            "enrolled",
            "in",
            "2",
            "degree",
            "programs",
            "in",
            "one",
            "semester",
            "?",
            "List",
            "the",
            "first",
            "name",
            ",",
            "middle",
            "name",
            "and",
            "last",
            "name",
            "and",
            "the",
            "id",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 534,
        "query": "SELECT DISTINCT s.student_id, s.first_name, s.middle_name, s.last_name FROM students s JOIN student_enrolment se ON s.student_id = se.student_id JOIN (SELECT student_id, semester_id FROM student_enrolment GROUP BY student_id, semester_id HAVING COUNT(DISTINCT degree_program_id) = 2) ds ON s.student_id = ds.student_id AND se.semester_id = ds.semester_id",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "s.student_id,",
            "s.first_name,",
            "s.middle_name,",
            "s.last_name",
            "FROM",
            "students",
            "s",
            "JOIN",
            "student_enrolment",
            "se",
            "ON",
            "s.student_id",
            "=",
            "se.student_id",
            "JOIN",
            "(",
            "SELECT",
            "student_id,",
            "semester_id",
            "FROM",
            "student_enrolment",
            "GROUP",
            "BY",
            "student_id,",
            "semester_id",
            "HAVING",
            "COUNT",
            "(",
            "DISTINCT",
            "degree_program_id",
            ")",
            "=",
            "2",
            ")",
            "ds",
            "ON",
            "s.student_id",
            "=",
            "ds.student_id",
            "AND",
            "se.semester_id",
            "=",
            "ds.semester_id"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "s.student_id,",
            "s.first_name,",
            "s.middle_name,",
            "s.last_name",
            "from",
            "students",
            "s",
            "join",
            "student_enrolment",
            "se",
            "on",
            "s.student_id",
            "=",
            "se.student_id",
            "join",
            "(",
            "select",
            "student_id,",
            "semester_id",
            "from",
            "student_enrolment",
            "group",
            "by",
            "student_id,",
            "semester_id",
            "having",
            "count",
            "(",
            "distinct",
            "degree_program_id",
            ")",
            "=",
            "value",
            ")",
            "ds",
            "on",
            "s.student_id",
            "=",
            "ds.student_id",
            "and",
            "se.semester_id",
            "=",
            "ds.semester_id"
        ],
        "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "question_toks": [
            "What",
            "are",
            "the",
            "first",
            ",",
            "middle",
            ",",
            "and",
            "last",
            "names",
            ",",
            "along",
            "with",
            "the",
            "ids",
            ",",
            "of",
            "all",
            "students",
            "who",
            "enrolled",
            "in",
            "2",
            "degree",
            "programs",
            "in",
            "one",
            "semester",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 535,
        "query": "SELECT first_name, middle_name, last_name FROM students WHERE student_id IN (SELECT student_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelor'))",
        "query_toks": [
            "SELECT",
            "first_name,",
            "middle_name,",
            "last_name",
            "FROM",
            "students",
            "WHERE",
            "student_id",
            "IN",
            "(",
            "SELECT",
            "student_id",
            "FROM",
            "student_enrolment",
            "WHERE",
            "degree_program_id",
            "IN",
            "(",
            "SELECT",
            "degree_program_id",
            "FROM",
            "degree_programs",
            "WHERE",
            "degree_summary_name",
            "=",
            "'Bachelor",
            "'",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "first_name,",
            "middle_name,",
            "last_name",
            "from",
            "students",
            "where",
            "student_id",
            "in",
            "(",
            "select",
            "student_id",
            "from",
            "student_enrolment",
            "where",
            "degree_program_id",
            "in",
            "(",
            "select",
            "degree_program_id",
            "from",
            "degree_programs",
            "where",
            "degree_summary_name",
            "=",
            "value",
            ")",
            ")"
        ],
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "question_toks": [
            "Who",
            "is",
            "enrolled",
            "in",
            "a",
            "Bachelor",
            "degree",
            "program",
            "?",
            "List",
            "the",
            "first",
            "name",
            ",",
            "middle",
            "name",
            ",",
            "last",
            "name",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 536,
        "query": "SELECT first_name, middle_name, last_name FROM students WHERE student_id IN (SELECT student_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors'))",
        "query_toks": [
            "SELECT",
            "first_name,",
            "middle_name,",
            "last_name",
            "FROM",
            "students",
            "WHERE",
            "student_id",
            "IN",
            "(",
            "SELECT",
            "student_id",
            "FROM",
            "student_enrolment",
            "WHERE",
            "degree_program_id",
            "IN",
            "(",
            "SELECT",
            "degree_program_id",
            "FROM",
            "degree_programs",
            "WHERE",
            "degree_summary_name",
            "=",
            "'Bachelors",
            "'",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "first_name,",
            "middle_name,",
            "last_name",
            "from",
            "students",
            "where",
            "student_id",
            "in",
            "(",
            "select",
            "student_id",
            "from",
            "student_enrolment",
            "where",
            "degree_program_id",
            "in",
            "(",
            "select",
            "degree_program_id",
            "from",
            "degree_programs",
            "where",
            "degree_summary_name",
            "=",
            "value",
            ")",
            ")"
        ],
        "question": "What are the first, middle, and last names for everybody enrolled in a degree program with the degree summary name 'Bachelors'?",
        "question_toks": [
            "What",
            "are",
            "the",
            "first",
            ",",
            "middle",
            ",",
            "and",
            "last",
            "names",
            "for",
            "everybody",
            "enrolled",
            "in",
            "a",
            "degree",
            "program",
            "with",
            "the",
            "degree",
            "summary",
            "name",
            "'",
            "Bachelors",
            "'?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 537,
        "query": "SELECT dp.degree_summary_name FROM degree_programs dp INNER JOIN student_enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_summary_name HAVING COUNT(DISTINCT se.student_id) = (SELECT MAX(total_enrolled) FROM (SELECT COUNT(DISTINCT student_id) AS total_enrolled FROM student_enrolment GROUP BY degree_program_id))",
        "query_toks": [
            "SELECT",
            "dp.degree_summary_name",
            "FROM",
            "degree_programs",
            "dp",
            "INNER",
            "JOIN",
            "student_enrolment",
            "se",
            "ON",
            "dp.degree_program_id",
            "=",
            "se.degree_program_id",
            "GROUP",
            "BY",
            "dp.degree_summary_name",
            "HAVING",
            "COUNT",
            "(",
            "DISTINCT",
            "se.student_id",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "total_enrolled",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "DISTINCT",
            "student_id",
            ")",
            "AS",
            "total_enrolled",
            "FROM",
            "student_enrolment",
            "GROUP",
            "BY",
            "degree_program_id",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "dp.degree_summary_name",
            "from",
            "degree_programs",
            "dp",
            "inner",
            "join",
            "student_enrolment",
            "se",
            "on",
            "dp.degree_program_id",
            "=",
            "se.degree_program_id",
            "group",
            "by",
            "dp.degree_summary_name",
            "having",
            "count",
            "(",
            "distinct",
            "se.student_id",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "total_enrolled",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "distinct",
            "student_id",
            ")",
            "as",
            "total_enrolled",
            "from",
            "student_enrolment",
            "group",
            "by",
            "degree_program_id",
            ")",
            ")"
        ],
        "question": "Show the kinds of programs with the most number of students enrolled.",
        "question_toks": [
            "Show",
            "the",
            "kinds",
            "of",
            "programs",
            "with",
            "the",
            "most",
            "number",
            "of",
            "students",
            "enrolled",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 538,
        "query": "WITH EnrollmentCounts AS (SELECT T1.degree_summary_name, COUNT(*) AS student_count FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name) SELECT degree_summary_name FROM EnrollmentCounts WHERE student_count = (SELECT MAX(student_count) FROM EnrollmentCounts)",
        "query_toks": [
            "WITH",
            "EnrollmentCounts",
            "AS",
            "(",
            "SELECT",
            "T1",
            ".",
            "degree_summary_name,",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "student_count",
            "FROM",
            "Degree_Programs",
            "AS",
            "T1",
            "JOIN",
            "Student_Enrolment",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "degree_program_id",
            "=",
            "T2",
            ".",
            "degree_program_id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "degree_summary_name",
            ")",
            "SELECT",
            "degree_summary_name",
            "FROM",
            "EnrollmentCounts",
            "WHERE",
            "student_count",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "student_count",
            ")",
            "FROM",
            "EnrollmentCounts",
            ")"
        ],
        "query_toks_no_value": [
            "with",
            "enrollmentcounts",
            "as",
            "(",
            "select",
            "t1",
            ".",
            "degree_summary_name,",
            "count",
            "(",
            "*",
            ")",
            "as",
            "student_count",
            "from",
            "degree_programs",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "degree_program_id",
            "=",
            "t2",
            ".",
            "degree_program_id",
            "group",
            "by",
            "t1",
            ".",
            "degree_summary_name",
            ")",
            "select",
            "degree_summary_name",
            "from",
            "enrollmentcounts",
            "where",
            "student_count",
            "=",
            "(",
            "select",
            "max",
            "(",
            "student_count",
            ")",
            "from",
            "enrollmentcounts",
            ")"
        ],
        "question": "What are the degree summary names that have the most number of students enrolled?",
        "question_toks": [
            "What",
            "are",
            "the",
            "degree",
            "summary",
            "names",
            "that",
            "have",
            "the",
            "most",
            "number",
            "of",
            "students",
            "enrolled",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 539,
        "query": "SELECT T1.degree_program_id, T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id HAVING COUNT(*) = (SELECT MAX(student_count) FROM (SELECT degree_program_id, COUNT(*) as student_count FROM Student_Enrolment GROUP BY degree_program_id) AS counts)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "degree_program_id,",
            "T1",
            ".",
            "degree_summary_name",
            "FROM",
            "Degree_Programs",
            "AS",
            "T1",
            "JOIN",
            "Student_Enrolment",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "degree_program_id",
            "=",
            "T2",
            ".",
            "degree_program_id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "degree_program_id",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "student_count",
            ")",
            "FROM",
            "(",
            "SELECT",
            "degree_program_id,",
            "COUNT",
            "(",
            "*",
            ")",
            "as",
            "student_count",
            "FROM",
            "Student_Enrolment",
            "GROUP",
            "BY",
            "degree_program_id",
            ")",
            "AS",
            "counts",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "degree_program_id,",
            "t1",
            ".",
            "degree_summary_name",
            "from",
            "degree_programs",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "degree_program_id",
            "=",
            "t2",
            ".",
            "degree_program_id",
            "group",
            "by",
            "t1",
            ".",
            "degree_program_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "student_count",
            ")",
            "from",
            "(",
            "select",
            "degree_program_id,",
            "count",
            "(",
            "*",
            ")",
            "as",
            "student_count",
            "from",
            "student_enrolment",
            "group",
            "by",
            "degree_program_id",
            ")",
            "as",
            "counts",
            ")"
        ],
        "question": "Find the programs with the most student enrollments. List both the id and the summary.",
        "question_toks": [
            "Find",
            "the",
            "programs",
            "with",
            "the",
            "most",
            "student",
            "enrollments",
            ".",
            "List",
            "both",
            "the",
            "id",
            "and",
            "the",
            "summary",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 540,
        "query": "SELECT T1.degree_program_id, T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id HAVING COUNT(*) = (SELECT MAX(total_enrolled) FROM (SELECT COUNT(*) AS total_enrolled FROM Student_Enrolment GROUP BY degree_program_id) AS counts)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "degree_program_id,",
            "T1",
            ".",
            "degree_summary_name",
            "FROM",
            "Degree_Programs",
            "AS",
            "T1",
            "JOIN",
            "Student_Enrolment",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "degree_program_id",
            "=",
            "T2",
            ".",
            "degree_program_id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "degree_program_id",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "total_enrolled",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "total_enrolled",
            "FROM",
            "Student_Enrolment",
            "GROUP",
            "BY",
            "degree_program_id",
            ")",
            "AS",
            "counts",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "degree_program_id,",
            "t1",
            ".",
            "degree_summary_name",
            "from",
            "degree_programs",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "degree_program_id",
            "=",
            "t2",
            ".",
            "degree_program_id",
            "group",
            "by",
            "t1",
            ".",
            "degree_program_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "total_enrolled",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "total_enrolled",
            "from",
            "student_enrolment",
            "group",
            "by",
            "degree_program_id",
            ")",
            "as",
            "counts",
            ")"
        ],
        "question": "What are the program ids and summaries of all degrees with the most students enrolled?",
        "question_toks": [
            "What",
            "are",
            "the",
            "program",
            "ids",
            "and",
            "summaries",
            "of",
            "all",
            "degrees",
            "with",
            "the",
            "most",
            "students",
            "enrolled",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 541,
        "query": "WITH EnrollmentCounts AS (SELECT student_id, COUNT(*) AS num_enrollments FROM Student_Enrolment GROUP BY student_id) SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, EnrollmentCounts.num_enrollments FROM Students JOIN EnrollmentCounts ON Students.student_id = EnrollmentCounts.student_id WHERE EnrollmentCounts.num_enrollments = (SELECT MAX(num_enrollments) FROM EnrollmentCounts)",
        "query_toks": [
            "WITH",
            "EnrollmentCounts",
            "AS",
            "(",
            "SELECT",
            "student_id,",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "num_enrollments",
            "FROM",
            "Student_Enrolment",
            "GROUP",
            "BY",
            "student_id",
            ")",
            "SELECT",
            "Students.student_id,",
            "Students.first_name,",
            "Students.middle_name,",
            "Students.last_name,",
            "EnrollmentCounts.num_enrollments",
            "FROM",
            "Students",
            "JOIN",
            "EnrollmentCounts",
            "ON",
            "Students.student_id",
            "=",
            "EnrollmentCounts.student_id",
            "WHERE",
            "EnrollmentCounts.num_enrollments",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "num_enrollments",
            ")",
            "FROM",
            "EnrollmentCounts",
            ")"
        ],
        "query_toks_no_value": [
            "with",
            "enrollmentcounts",
            "as",
            "(",
            "select",
            "student_id,",
            "count",
            "(",
            "*",
            ")",
            "as",
            "num_enrollments",
            "from",
            "student_enrolment",
            "group",
            "by",
            "student_id",
            ")",
            "select",
            "students.student_id,",
            "students.first_name,",
            "students.middle_name,",
            "students.last_name,",
            "enrollmentcounts.num_enrollments",
            "from",
            "students",
            "join",
            "enrollmentcounts",
            "on",
            "students.student_id",
            "=",
            "enrollmentcounts.student_id",
            "where",
            "enrollmentcounts.num_enrollments",
            "=",
            "(",
            "select",
            "max",
            "(",
            "num_enrollments",
            ")",
            "from",
            "enrollmentcounts",
            ")"
        ],
        "question": "List the ids, first names, middle names, last names, and the numbers of enrollments of all students who have enrolled the most times in any program.",
        "question_toks": [
            "List",
            "the",
            "ids",
            ",",
            "first",
            "names",
            ",",
            "middle",
            "names",
            ",",
            "last",
            "names",
            ",",
            "and",
            "the",
            "numbers",
            "of",
            "enrollments",
            "of",
            "all",
            "students",
            "who",
            "have",
            "enrolled",
            "the",
            "most",
            "times",
            "in",
            "any",
            "program",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 542,
        "query": "SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id, COUNT(T2.student_id) AS num_enrollments FROM students T1 INNER JOIN student_enrolment T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING num_enrollments = (SELECT COUNT(*) AS num_enrollments FROM student_enrolment AS T3 GROUP BY T3.student_id ORDER BY num_enrollments DESC LIMIT 1)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "first_name,",
            "T1",
            ".",
            "middle_name,",
            "T1",
            ".",
            "last_name,",
            "T1",
            ".",
            "student_id,",
            "COUNT",
            "(",
            "T2",
            ".",
            "student_id",
            ")",
            "AS",
            "num_enrollments",
            "FROM",
            "students",
            "T1",
            "INNER",
            "JOIN",
            "student_enrolment",
            "T2",
            "ON",
            "T1",
            ".",
            "student_id",
            "=",
            "T2",
            ".",
            "student_id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "student_id",
            "HAVING",
            "num_enrollments",
            "=",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "num_enrollments",
            "FROM",
            "student_enrolment",
            "AS",
            "T3",
            "GROUP",
            "BY",
            "T3",
            ".",
            "student_id",
            "ORDER",
            "BY",
            "num_enrollments",
            "DESC",
            "LIMIT",
            "1",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "first_name,",
            "t1",
            ".",
            "middle_name,",
            "t1",
            ".",
            "last_name,",
            "t1",
            ".",
            "student_id,",
            "count",
            "(",
            "t2",
            ".",
            "student_id",
            ")",
            "as",
            "num_enrollments",
            "from",
            "students",
            "t1",
            "inner",
            "join",
            "student_enrolment",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "group",
            "by",
            "t1",
            ".",
            "student_id",
            "having",
            "num_enrollments",
            "=",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "num_enrollments",
            "from",
            "student_enrolment",
            "as",
            "t3",
            "group",
            "by",
            "t3",
            ".",
            "student_id",
            "order",
            "by",
            "num_enrollments",
            "desc",
            "limit",
            "value",
            ")"
        ],
        "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "question_toks": [
            "What",
            "is",
            "the",
            "first",
            ",",
            "middle",
            ",",
            "and",
            "last",
            "name",
            ",",
            "along",
            "with",
            "the",
            "id",
            "and",
            "number",
            "of",
            "enrollments",
            ",",
            "for",
            "the",
            "student",
            "who",
            "enrolled",
            "the",
            "most",
            "in",
            "any",
            "program",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 543,
        "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "query_toks": [
            "SELECT",
            "semester_name",
            "FROM",
            "Semesters",
            "WHERE",
            "semester_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "semester_id",
            "FROM",
            "Student_Enrolment",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "semester_name",
            "from",
            "semesters",
            "where",
            "semester_id",
            "not",
            "in",
            "(",
            "select",
            "semester_id",
            "from",
            "student_enrolment",
            ")"
        ],
        "question": "Which semesters do not have any student enrolled? List the semester name.",
        "question_toks": [
            "Which",
            "semesters",
            "do",
            "not",
            "have",
            "any",
            "student",
            "enrolled",
            "?",
            "List",
            "the",
            "semester",
            "name",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 544,
        "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "query_toks": [
            "SELECT",
            "semester_name",
            "FROM",
            "Semesters",
            "WHERE",
            "semester_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "semester_id",
            "FROM",
            "Student_Enrolment",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "semester_name",
            "from",
            "semesters",
            "where",
            "semester_id",
            "not",
            "in",
            "(",
            "select",
            "semester_id",
            "from",
            "student_enrolment",
            ")"
        ],
        "question": "What is the name of the semester with no students enrolled?",
        "question_toks": [
            "What",
            "is",
            "the",
            "name",
            "of",
            "the",
            "semester",
            "with",
            "no",
            "students",
            "enrolled",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 545,
        "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1",
            ".",
            "course_name",
            "FROM",
            "Courses",
            "AS",
            "T1",
            "JOIN",
            "Student_Enrolment_Courses",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "course_id",
            "=",
            "T2",
            ".",
            "course_id"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "t1",
            ".",
            "course_name",
            "from",
            "courses",
            "as",
            "t1",
            "join",
            "student_enrolment_courses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id"
        ],
        "question": "What are all the unique course names of the courses which ever have students enrolled in?",
        "question_toks": [
            "What",
            "are",
            "all",
            "the",
            "unique",
            "course",
            "names",
            "of",
            "the",
            "courses",
            "which",
            "ever",
            "have",
            "students",
            "enrolled",
            "in",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 546,
        "query": "SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_enrolment_courses)",
        "query_toks": [
            "SELECT",
            "course_name",
            "FROM",
            "courses",
            "WHERE",
            "course_id",
            "IN",
            "(",
            "SELECT",
            "course_id",
            "FROM",
            "student_enrolment_courses",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "course_name",
            "from",
            "courses",
            "where",
            "course_id",
            "in",
            "(",
            "select",
            "course_id",
            "from",
            "student_enrolment_courses",
            ")"
        ],
        "question": "What are the names of all courses that have some students enrolled?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "all",
            "courses",
            "that",
            "have",
            "some",
            "students",
            "enrolled",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 547,
        "query": "SELECT C.course_name FROM courses C INNER JOIN (SELECT course_id FROM student_enrolment_courses GROUP BY course_id HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM student_enrolment_courses GROUP BY course_id))) SC ON C.course_id = SC.course_id",
        "query_toks": [
            "SELECT",
            "C.course_name",
            "FROM",
            "courses",
            "C",
            "INNER",
            "JOIN",
            "(",
            "SELECT",
            "course_id",
            "FROM",
            "student_enrolment_courses",
            "GROUP",
            "BY",
            "course_id",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "cnt",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "as",
            "cnt",
            "FROM",
            "student_enrolment_courses",
            "GROUP",
            "BY",
            "course_id",
            ")",
            ")",
            ")",
            "SC",
            "ON",
            "C.course_id",
            "=",
            "SC.course_id"
        ],
        "query_toks_no_value": [
            "select",
            "c.course_name",
            "from",
            "courses",
            "c",
            "inner",
            "join",
            "(",
            "select",
            "course_id",
            "from",
            "student_enrolment_courses",
            "group",
            "by",
            "course_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "cnt",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "cnt",
            "from",
            "student_enrolment_courses",
            "group",
            "by",
            "course_id",
            ")",
            ")",
            ")",
            "sc",
            "on",
            "c.course_id",
            "=",
            "sc.course_id"
        ],
        "question": "Show the names of all courses with the most number of enrollments.",
        "question_toks": [
            "Show",
            "the",
            "names",
            "of",
            "all",
            "courses",
            "with",
            "the",
            "most",
            "number",
            "of",
            "enrollments",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 548,
        "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_enrolment_courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING COUNT(*) = (SELECT COUNT(*) AS C FROM student_enrolment_courses GROUP BY course_id ORDER BY C DESC LIMIT 1)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "course_name",
            "FROM",
            "courses",
            "AS",
            "T1",
            "JOIN",
            "student_enrolment_courses",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "course_id",
            "=",
            "T2",
            ".",
            "course_id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "course_id",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "C",
            "FROM",
            "student_enrolment_courses",
            "GROUP",
            "BY",
            "course_id",
            "ORDER",
            "BY",
            "C",
            "DESC",
            "LIMIT",
            "1",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "course_name",
            "from",
            "courses",
            "as",
            "t1",
            "join",
            "student_enrolment_courses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "group",
            "by",
            "t1",
            ".",
            "course_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "c",
            "from",
            "student_enrolment_courses",
            "group",
            "by",
            "course_id",
            "order",
            "by",
            "c",
            "desc",
            "limit",
            "value",
            ")"
        ],
        "question": "Show the names of all courses with the most students enrolled.",
        "question_toks": [
            "Show",
            "the",
            "names",
            "of",
            "all",
            "courses",
            "with",
            "the",
            "most",
            "students",
            "enrolled",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 549,
        "query": "SELECT T.last_name FROM (SELECT T1.student_id, T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'North Carolina' EXCEPT SELECT T3.student_id, T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id) AS T",
        "query_toks": [
            "SELECT",
            "T",
            ".",
            "last_name",
            "FROM",
            "(",
            "SELECT",
            "T1",
            ".",
            "student_id,",
            "T1",
            ".",
            "last_name",
            "FROM",
            "Students",
            "AS",
            "T1",
            "JOIN",
            "Addresses",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "current_address_id",
            "=",
            "T2",
            ".",
            "address_id",
            "WHERE",
            "T2",
            ".",
            "state_province_county",
            "=",
            "'North",
            "Carolina",
            "'",
            "EXCEPT",
            "SELECT",
            "T3",
            ".",
            "student_id,",
            "T3",
            ".",
            "last_name",
            "FROM",
            "Students",
            "AS",
            "T3",
            "JOIN",
            "Student_Enrolment",
            "AS",
            "T4",
            "ON",
            "T3",
            ".",
            "student_id",
            "=",
            "T4",
            ".",
            "student_id",
            ")",
            "AS",
            "T"
        ],
        "query_toks_no_value": [
            "select",
            "t",
            ".",
            "last_name",
            "from",
            "(",
            "select",
            "t1",
            ".",
            "student_id,",
            "t1",
            ".",
            "last_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "current_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t2",
            ".",
            "state_province_county",
            "=",
            "value",
            "except",
            "select",
            "t3",
            ".",
            "student_id,",
            "t3",
            ".",
            "last_name",
            "from",
            "students",
            "as",
            "t3",
            "join",
            "student_enrolment",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "student_id",
            "=",
            "t4",
            ".",
            "student_id",
            ")",
            "as",
            "t"
        ],
        "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "question_toks": [
            "Find",
            "the",
            "last",
            "name",
            "of",
            "the",
            "students",
            "who",
            "currently",
            "live",
            "in",
            "the",
            "state",
            "of",
            "North",
            "Carolina",
            "but",
            "have",
            "not",
            "registered",
            "in",
            "any",
            "degree",
            "program",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 550,
        "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' and T1.student_id not in (SELECT T3.student_id From Student_Enrolment AS T3)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "last_name",
            "FROM",
            "Students",
            "AS",
            "T1",
            "JOIN",
            "Addresses",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "current_address_id",
            "=",
            "T2",
            ".",
            "address_id",
            "WHERE",
            "T2",
            ".",
            "state_province_county",
            "=",
            "'NorthCarolina",
            "'",
            "and",
            "T1",
            ".",
            "student_id",
            "not",
            "in",
            "(",
            "SELECT",
            "T3",
            ".",
            "student_id",
            "From",
            "Student_Enrolment",
            "AS",
            "T3",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "last_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "current_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t2",
            ".",
            "state_province_county",
            "=",
            "value",
            "and",
            "t1",
            ".",
            "student_id",
            "not",
            "in",
            "(",
            "select",
            "t3",
            ".",
            "student_id",
            "from",
            "student_enrolment",
            "as",
            "t3",
            ")"
        ],
        "question": "What are the last names of the students who live in North Carolina (considering current address) but have never registered in any degree programs?",
        "question_toks": [
            "What",
            "are",
            "the",
            "last",
            "names",
            "of",
            "the",
            "students",
            "who",
            "live",
            "in",
            "North",
            "Carolina",
            "(",
            "considering",
            "current",
            "address",
            ")",
            "but",
            "have",
            "never",
            "registered",
            "in",
            "any",
            "degree",
            "programs",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 551,
        "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count(*) >= 2",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "transcript_date",
            ",",
            "T1",
            ".",
            "transcript_id",
            "FROM",
            "Transcript_Contents",
            "AS",
            "T1",
            "JOIN",
            "Transcripts",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "transcript_id",
            "=",
            "T2",
            ".",
            "transcript_id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "transcript_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "transcript_date",
            ",",
            "t1",
            ".",
            "transcript_id",
            "from",
            "transcript_contents",
            "as",
            "t1",
            "join",
            "transcripts",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "transcript_id",
            "=",
            "t2",
            ".",
            "transcript_id",
            "group",
            "by",
            "t1",
            ".",
            "transcript_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value"
        ],
        "question": "Show the date and id of the transcript with at least 2 course results.",
        "question_toks": [
            "Show",
            "the",
            "date",
            "and",
            "id",
            "of",
            "the",
            "transcript",
            "with",
            "at",
            "least",
            "2",
            "course",
            "results",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 552,
        "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count(*) >= 2",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "transcript_date",
            ",",
            "T1",
            ".",
            "transcript_id",
            "FROM",
            "Transcript_Contents",
            "AS",
            "T1",
            "JOIN",
            "Transcripts",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "transcript_id",
            "=",
            "T2",
            ".",
            "transcript_id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "transcript_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "transcript_date",
            ",",
            "t1",
            ".",
            "transcript_id",
            "from",
            "transcript_contents",
            "as",
            "t1",
            "join",
            "transcripts",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "transcript_id",
            "=",
            "t2",
            ".",
            "transcript_id",
            "group",
            "by",
            "t1",
            ".",
            "transcript_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value"
        ],
        "question": "What is the date and id of the transcript with at least 2 courses listed?",
        "question_toks": [
            "What",
            "is",
            "the",
            "date",
            "and",
            "id",
            "of",
            "the",
            "transcript",
            "with",
            "at",
            "least",
            "2",
            "courses",
            "listed",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 553,
        "query": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
        "query_toks": [
            "SELECT",
            "cell_mobile_number",
            "FROM",
            "Students",
            "WHERE",
            "first_name",
            "=",
            "'Timmothy",
            "'",
            "AND",
            "last_name",
            "=",
            "'Ward",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "cell_mobile_number",
            "from",
            "students",
            "where",
            "first_name",
            "=",
            "value",
            "and",
            "last_name",
            "=",
            "value"
        ],
        "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "question_toks": [
            "What",
            "is",
            "the",
            "phone",
            "number",
            "of",
            "the",
            "man",
            "with",
            "the",
            "first",
            "name",
            "Timmothy",
            "and",
            "the",
            "last",
            "name",
            "Ward",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 554,
        "query": "select cell_mobile_number from students where first_name = 'Timmothy' and last_name = 'Ward'",
        "query_toks": [
            "select",
            "cell_mobile_number",
            "from",
            "students",
            "where",
            "first_name",
            "=",
            "'Timmothy",
            "'",
            "and",
            "last_name",
            "=",
            "'Ward",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "cell_mobile_number",
            "from",
            "students",
            "where",
            "first_name",
            "=",
            "value",
            "and",
            "last_name",
            "=",
            "value"
        ],
        "question": "What is the mobile phone number of the student named Timmothy Ward ?",
        "question_toks": [
            "What",
            "is",
            "the",
            "mobile",
            "phone",
            "number",
            "of",
            "the",
            "student",
            "named",
            "Timmothy",
            "Ward",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 555,
        "query": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC, student_id ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "first_name,",
            "middle_name,",
            "last_name",
            "FROM",
            "Students",
            "ORDER",
            "BY",
            "date_first_registered",
            "ASC,",
            "student_id",
            "ASC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "first_name,",
            "middle_name,",
            "last_name",
            "from",
            "students",
            "order",
            "by",
            "date_first_registered",
            "asc,",
            "student_id",
            "asc",
            "limit",
            "value"
        ],
        "question": "Who is the first student to register? List the first name, middle name and last name, prioritizing the lowest student id in case of a tie.",
        "question_toks": [
            "Who",
            "is",
            "the",
            "first",
            "student",
            "to",
            "register",
            "?",
            "List",
            "the",
            "first",
            "name",
            ",",
            "middle",
            "name",
            "and",
            "last",
            "name",
            ",",
            "prioritizing",
            "the",
            "lowest",
            "student",
            "id",
            "in",
            "case",
            "of",
            "a",
            "tie",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 556,
        "query": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC, student_id ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "first_name,",
            "middle_name,",
            "last_name",
            "FROM",
            "Students",
            "ORDER",
            "BY",
            "date_first_registered",
            "ASC,",
            "student_id",
            "ASC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "first_name,",
            "middle_name,",
            "last_name",
            "from",
            "students",
            "order",
            "by",
            "date_first_registered",
            "asc,",
            "student_id",
            "asc",
            "limit",
            "value"
        ],
        "question": "What is the first, middle, and last name of the first student to register, prioritizing the lowest student ID in case of a tie?",
        "question_toks": [
            "What",
            "is",
            "the",
            "first",
            ",",
            "middle",
            ",",
            "and",
            "last",
            "name",
            "of",
            "the",
            "first",
            "student",
            "to",
            "register",
            ",",
            "prioritizing",
            "the",
            "lowest",
            "student",
            "ID",
            "in",
            "case",
            "of",
            "a",
            "tie",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 557,
        "query": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_left ASC, student_id ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "first_name,",
            "middle_name,",
            "last_name",
            "FROM",
            "Students",
            "ORDER",
            "BY",
            "date_left",
            "ASC,",
            "student_id",
            "ASC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "first_name,",
            "middle_name,",
            "last_name",
            "from",
            "students",
            "order",
            "by",
            "date_left",
            "asc,",
            "student_id",
            "asc",
            "limit",
            "value"
        ],
        "question": "Who is the earliest graduate of the school considering the earliest date left, with tie-breaker as the lowest student id? List the first name, middle name and last name.",
        "question_toks": [
            "Who",
            "is",
            "the",
            "earliest",
            "graduate",
            "of",
            "the",
            "school",
            "considering",
            "the",
            "earliest",
            "date",
            "left",
            ",",
            "with",
            "tie",
            "-",
            "breaker",
            "as",
            "the",
            "lowest",
            "student",
            "id",
            "?",
            "List",
            "the",
            "first",
            "name",
            ",",
            "middle",
            "name",
            "and",
            "last",
            "name",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 558,
        "query": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_left ASC, student_id ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "first_name,",
            "middle_name,",
            "last_name",
            "FROM",
            "Students",
            "ORDER",
            "BY",
            "date_left",
            "ASC,",
            "student_id",
            "ASC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "first_name,",
            "middle_name,",
            "last_name",
            "from",
            "students",
            "order",
            "by",
            "date_left",
            "asc,",
            "student_id",
            "asc",
            "limit",
            "value"
        ],
        "question": "What is the first, middle, and last name of the earliest school graduate, prioritizing the lowest student ID in case of a tie?",
        "question_toks": [
            "What",
            "is",
            "the",
            "first",
            ",",
            "middle",
            ",",
            "and",
            "last",
            "name",
            "of",
            "the",
            "earliest",
            "school",
            "graduate",
            ",",
            "prioritizing",
            "the",
            "lowest",
            "student",
            "ID",
            "in",
            "case",
            "of",
            "a",
            "tie",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 559,
        "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "query_toks": [
            "SELECT",
            "first_name",
            "FROM",
            "Students",
            "WHERE",
            "current_address_id",
            "!",
            "=",
            "permanent_address_id"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            "from",
            "students",
            "where",
            "current_address_id",
            "!",
            "=",
            "permanent_address_id"
        ],
        "question": "Whose permanent address is different from his or her current address? List his or her first name.",
        "question_toks": [
            "Whose",
            "permanent",
            "address",
            "is",
            "different",
            "from",
            "his",
            "or",
            "her",
            "current",
            "address",
            "?",
            "List",
            "his",
            "or",
            "her",
            "first",
            "name",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 560,
        "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "query_toks": [
            "SELECT",
            "first_name",
            "FROM",
            "Students",
            "WHERE",
            "current_address_id",
            "!",
            "=",
            "permanent_address_id"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            "from",
            "students",
            "where",
            "current_address_id",
            "!",
            "=",
            "permanent_address_id"
        ],
        "question": "What is the first name of the student whose permanent address is different from his or her current one?",
        "question_toks": [
            "What",
            "is",
            "the",
            "first",
            "name",
            "of",
            "the",
            "student",
            "whose",
            "permanent",
            "address",
            "is",
            "different",
            "from",
            "his",
            "or",
            "her",
            "current",
            "one",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 561,
        "query": "SELECT A.address_id, A.line_1, A.line_2, A.line_3 FROM addresses A INNER JOIN students S ON A.address_id = S.current_address_id GROUP BY A.address_id, A.line_1, A.line_2, A.line_3 HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) count FROM students GROUP BY current_address_id))",
        "query_toks": [
            "SELECT",
            "A.address_id,",
            "A.line_1,",
            "A.line_2,",
            "A.line_3",
            "FROM",
            "addresses",
            "A",
            "INNER",
            "JOIN",
            "students",
            "S",
            "ON",
            "A.address_id",
            "=",
            "S.current_address_id",
            "GROUP",
            "BY",
            "A.address_id,",
            "A.line_1,",
            "A.line_2,",
            "A.line_3",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "count",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "count",
            "FROM",
            "students",
            "GROUP",
            "BY",
            "current_address_id",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "a.address_id,",
            "a.line_1,",
            "a.line_2,",
            "a.line_3",
            "from",
            "addresses",
            "a",
            "inner",
            "join",
            "students",
            "s",
            "on",
            "a.address_id",
            "=",
            "s.current_address_id",
            "group",
            "by",
            "a.address_id,",
            "a.line_1,",
            "a.line_2,",
            "a.line_3",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "count",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "count",
            "from",
            "students",
            "group",
            "by",
            "current_address_id",
            ")",
            ")"
        ],
        "question": "Which address holds the most number of students currently? List the address id and all lines.",
        "question_toks": [
            "Which",
            "address",
            "holds",
            "the",
            "most",
            "number",
            "of",
            "students",
            "currently",
            "?",
            "List",
            "the",
            "address",
            "id",
            "and",
            "all",
            "lines",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 562,
        "query": "SELECT T1.address_id, T1.line_1, T1.line_2 FROM Addresses AS T1 JOIN (SELECT current_address_id AS address_id FROM Students UNION ALL SELECT permanent_address_id AS address_id FROM Students) AS T2 ON T1.address_id = T2.address_id GROUP BY T1.address_id ORDER BY COUNT(*) DESC, T1.address_id ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "address_id,",
            "T1",
            ".",
            "line_1,",
            "T1",
            ".",
            "line_2",
            "FROM",
            "Addresses",
            "AS",
            "T1",
            "JOIN",
            "(",
            "SELECT",
            "current_address_id",
            "AS",
            "address_id",
            "FROM",
            "Students",
            "UNION",
            "ALL",
            "SELECT",
            "permanent_address_id",
            "AS",
            "address_id",
            "FROM",
            "Students",
            ")",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "address_id",
            "=",
            "T2",
            ".",
            "address_id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "address_id",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC,",
            "T1",
            ".",
            "address_id",
            "ASC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "address_id,",
            "t1",
            ".",
            "line_1,",
            "t1",
            ".",
            "line_2",
            "from",
            "addresses",
            "as",
            "t1",
            "join",
            "(",
            "select",
            "current_address_id",
            "as",
            "address_id",
            "from",
            "students",
            "union",
            "all",
            "select",
            "permanent_address_id",
            "as",
            "address_id",
            "from",
            "students",
            ")",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "group",
            "by",
            "t1",
            ".",
            "address_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc,",
            "t1",
            ".",
            "address_id",
            "asc",
            "limit",
            "value"
        ],
        "question": "What is the id, line 1, and line 2 of the address (considering both current and permanent) that has the highest number of associated students, with tie-breaker as the smallest address id?",
        "question_toks": [
            "What",
            "is",
            "the",
            "id",
            ",",
            "line",
            "1",
            ",",
            "and",
            "line",
            "2",
            "of",
            "the",
            "address",
            "(",
            "considering",
            "both",
            "current",
            "and",
            "permanent",
            ")",
            "that",
            "has",
            "the",
            "highest",
            "number",
            "of",
            "associated",
            "students",
            ",",
            "with",
            "tie",
            "-",
            "breaker",
            "as",
            "the",
            "smallest",
            "address",
            "id",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 563,
        "query": "SELECT AVG(strftime('%Y', transcript_date) ) FROM Transcripts",
        "query_toks": [
            "SELECT",
            "AVG",
            "(",
            "strftime",
            "(",
            "'%Y',",
            "transcript_date",
            ")",
            ")",
            "FROM",
            "Transcripts"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "strftime",
            "("
        ],
        "question": "What is the average year when the transcripts were printed?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "year",
            "when",
            "the",
            "transcripts",
            "were",
            "printed",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 564,
        "query": "SELECT avg(transcript_date) FROM Transcripts",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "transcript_date",
            ")",
            "FROM",
            "Transcripts"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "transcript_date",
            ")",
            "from",
            "transcripts"
        ],
        "question": "What is the average transcript date?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "transcript",
            "date",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 565,
        "query": "SELECT transcript_date, other_details FROM Transcripts WHERE transcript_date = (SELECT min(transcript_date) FROM Transcripts)",
        "query_toks": [
            "SELECT",
            "transcript_date,",
            "other_details",
            "FROM",
            "Transcripts",
            "WHERE",
            "transcript_date",
            "=",
            "(",
            "SELECT",
            "min",
            "(",
            "transcript_date",
            ")",
            "FROM",
            "Transcripts",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "transcript_date,",
            "other_details",
            "from",
            "transcripts",
            "where",
            "transcript_date",
            "=",
            "(",
            "select",
            "min",
            "(",
            "transcript_date",
            ")",
            "from",
            "transcripts",
            ")"
        ],
        "question": "When is the first transcript released? List the date and details.",
        "question_toks": [
            "When",
            "is",
            "the",
            "first",
            "transcript",
            "released",
            "?",
            "List",
            "the",
            "date",
            "and",
            "details",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 566,
        "query": "SELECT transcript_date, other_details FROM Transcripts WHERE transcript_date = (SELECT MIN(transcript_date) FROM Transcripts)",
        "query_toks": [
            "SELECT",
            "transcript_date,",
            "other_details",
            "FROM",
            "Transcripts",
            "WHERE",
            "transcript_date",
            "=",
            "(",
            "SELECT",
            "MIN",
            "(",
            "transcript_date",
            ")",
            "FROM",
            "Transcripts",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "transcript_date,",
            "other_details",
            "from",
            "transcripts",
            "where",
            "transcript_date",
            "=",
            "(",
            "select",
            "min",
            "(",
            "transcript_date",
            ")",
            "from",
            "transcripts",
            ")"
        ],
        "question": "What is the earliest date of a transcript release, and what details are associated with all transcripts on that date?",
        "question_toks": [
            "What",
            "is",
            "the",
            "earliest",
            "date",
            "of",
            "a",
            "transcript",
            "release",
            ",",
            "and",
            "what",
            "details",
            "are",
            "associated",
            "with",
            "all",
            "transcripts",
            "on",
            "that",
            "date",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 567,
        "query": "SELECT count(*) FROM Transcripts",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Transcripts"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "transcripts"
        ],
        "question": "How many transcripts are released?",
        "question_toks": [
            "How",
            "many",
            "transcripts",
            "are",
            "released",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 568,
        "query": "SELECT count(*) FROM Transcripts",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Transcripts"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "transcripts"
        ],
        "question": "How many transcripts are listed?",
        "question_toks": [
            "How",
            "many",
            "transcripts",
            "are",
            "listed",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 569,
        "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "transcript_date",
            "FROM",
            "Transcripts",
            "ORDER",
            "BY",
            "transcript_date",
            "DESC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "transcript_date",
            "from",
            "transcripts",
            "order",
            "by",
            "transcript_date",
            "desc",
            "limit",
            "value"
        ],
        "question": "What is the last transcript release date?",
        "question_toks": [
            "What",
            "is",
            "the",
            "last",
            "transcript",
            "release",
            "date",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 570,
        "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "transcript_date",
            "FROM",
            "Transcripts",
            "ORDER",
            "BY",
            "transcript_date",
            "DESC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "transcript_date",
            "from",
            "transcripts",
            "order",
            "by",
            "transcript_date",
            "desc",
            "limit",
            "value"
        ],
        "question": "When was the last transcript released?",
        "question_toks": [
            "When",
            "was",
            "the",
            "last",
            "transcript",
            "released",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 571,
        "query": "WITH CountPerStudentCourse AS (SELECT student_course_id, COUNT(*) AS cnt FROM Transcript_Contents GROUP BY student_course_id) SELECT cnt, student_course_id FROM CountPerStudentCourse WHERE cnt = (SELECT MAX(cnt) FROM CountPerStudentCourse)",
        "query_toks": [
            "WITH",
            "CountPerStudentCourse",
            "AS",
            "(",
            "SELECT",
            "student_course_id,",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "cnt",
            "FROM",
            "Transcript_Contents",
            "GROUP",
            "BY",
            "student_course_id",
            ")",
            "SELECT",
            "cnt,",
            "student_course_id",
            "FROM",
            "CountPerStudentCourse",
            "WHERE",
            "cnt",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "cnt",
            ")",
            "FROM",
            "CountPerStudentCourse",
            ")"
        ],
        "query_toks_no_value": [
            "with",
            "countperstudentcourse",
            "as",
            "(",
            "select",
            "student_course_id,",
            "count",
            "(",
            "*",
            ")",
            "as",
            "cnt",
            "from",
            "transcript_contents",
            "group",
            "by",
            "student_course_id",
            ")",
            "select",
            "cnt,",
            "student_course_id",
            "from",
            "countperstudentcourse",
            "where",
            "cnt",
            "=",
            "(",
            "select",
            "max",
            "(",
            "cnt",
            ")",
            "from",
            "countperstudentcourse",
            ")"
        ],
        "question": "How many times can course enrollments show in different transcripts at most? Also, show all course enrollment ids that match this maximum count.",
        "question_toks": [
            "How",
            "many",
            "times",
            "can",
            "course",
            "enrollments",
            "show",
            "in",
            "different",
            "transcripts",
            "at",
            "most",
            "?",
            "Also",
            ",",
            "show",
            "all",
            "course",
            "enrollment",
            "ids",
            "that",
            "match",
            "this",
            "maximum",
            "count",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 572,
        "query": "SELECT count(*) as num_transcripts, student_course_id FROM Transcript_Contents GROUP BY student_course_id HAVING count(*) = (SELECT max(counts) FROM (SELECT count(*) as counts FROM Transcript_Contents GROUP BY student_course_id) as subquery)",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "as",
            "num_transcripts,",
            "student_course_id",
            "FROM",
            "Transcript_Contents",
            "GROUP",
            "BY",
            "student_course_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "counts",
            ")",
            "FROM",
            "(",
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "as",
            "counts",
            "FROM",
            "Transcript_Contents",
            "GROUP",
            "BY",
            "student_course_id",
            ")",
            "as",
            "subquery",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "num_transcripts,",
            "student_course_id",
            "from",
            "transcript_contents",
            "group",
            "by",
            "student_course_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "counts",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "counts",
            "from",
            "transcript_contents",
            "group",
            "by",
            "student_course_id",
            ")",
            "as",
            "subquery",
            ")"
        ],
        "question": "What are the courses with the maximum number of appearances in different transcripts and what are their enrollment ids?",
        "question_toks": [
            "What",
            "are",
            "the",
            "courses",
            "with",
            "the",
            "maximum",
            "number",
            "of",
            "appearances",
            "in",
            "different",
            "transcripts",
            "and",
            "what",
            "are",
            "their",
            "enrollment",
            "ids",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 573,
        "query": "SELECT T2.transcript_date, T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY COUNT(*), T1.transcript_id ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "transcript_date,",
            "T1",
            ".",
            "transcript_id",
            "FROM",
            "Transcript_Contents",
            "AS",
            "T1",
            "JOIN",
            "Transcripts",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "transcript_id",
            "=",
            "T2",
            ".",
            "transcript_id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "transcript_id",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            ",",
            "T1",
            ".",
            "transcript_id",
            "ASC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "transcript_date,",
            "t1",
            ".",
            "transcript_id",
            "from",
            "transcript_contents",
            "as",
            "t1",
            "join",
            "transcripts",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "transcript_id",
            "=",
            "t2",
            ".",
            "transcript_id",
            "group",
            "by",
            "t1",
            ".",
            "transcript_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            ",",
            "t1",
            ".",
            "transcript_id",
            "asc",
            "limit",
            "value"
        ],
        "question": "Show the date of the transcript with the fewest student courses linked to it, also list the transcript ID. In case of ties, return the transcript with the smallest ID.",
        "question_toks": [
            "Show",
            "the",
            "date",
            "of",
            "the",
            "transcript",
            "with",
            "the",
            "fewest",
            "student",
            "courses",
            "linked",
            "to",
            "it",
            ",",
            "also",
            "list",
            "the",
            "transcript",
            "ID",
            ".",
            "In",
            "case",
            "of",
            "ties",
            ",",
            "return",
            "the",
            "transcript",
            "with",
            "the",
            "smallest",
            "ID",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 574,
        "query": "SELECT T2.transcript_date, T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count(*) = (SELECT COUNT(*) AS c FROM Transcript_Contents AS T3 JOIN Transcripts AS T4 ON T3.transcript_id = T4.transcript_id GROUP BY T3.transcript_id ORDER BY c LIMIT 1)",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "transcript_date,",
            "T1",
            ".",
            "transcript_id",
            "FROM",
            "Transcript_Contents",
            "AS",
            "T1",
            "JOIN",
            "Transcripts",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "transcript_id",
            "=",
            "T2",
            ".",
            "transcript_id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "transcript_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "c",
            "FROM",
            "Transcript_Contents",
            "AS",
            "T3",
            "JOIN",
            "Transcripts",
            "AS",
            "T4",
            "ON",
            "T3",
            ".",
            "transcript_id",
            "=",
            "T4",
            ".",
            "transcript_id",
            "GROUP",
            "BY",
            "T3",
            ".",
            "transcript_id",
            "ORDER",
            "BY",
            "c",
            "LIMIT",
            "1",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "transcript_date,",
            "t1",
            ".",
            "transcript_id",
            "from",
            "transcript_contents",
            "as",
            "t1",
            "join",
            "transcripts",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "transcript_id",
            "=",
            "t2",
            ".",
            "transcript_id",
            "group",
            "by",
            "t1",
            ".",
            "transcript_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "c",
            "from",
            "transcript_contents",
            "as",
            "t3",
            "join",
            "transcripts",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "transcript_id",
            "=",
            "t4",
            ".",
            "transcript_id",
            "group",
            "by",
            "t3",
            ".",
            "transcript_id",
            "order",
            "by",
            "c",
            "limit",
            "value",
            ")"
        ],
        "question": "What is the date and id of the transcript with the least number of results?",
        "question_toks": [
            "What",
            "is",
            "the",
            "date",
            "and",
            "id",
            "of",
            "the",
            "transcript",
            "with",
            "the",
            "least",
            "number",
            "of",
            "results",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 575,
        "query": "SELECT s.semester_name FROM semesters s WHERE s.semester_id IN (SELECT se.semester_id FROM student_enrolment se JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Master' INTERSECT SELECT se.semester_id FROM student_enrolment se JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Bachelor')",
        "query_toks": [
            "SELECT",
            "s.semester_name",
            "FROM",
            "semesters",
            "s",
            "WHERE",
            "s.semester_id",
            "IN",
            "(",
            "SELECT",
            "se.semester_id",
            "FROM",
            "student_enrolment",
            "se",
            "JOIN",
            "degree_programs",
            "dp",
            "ON",
            "se.degree_program_id",
            "=",
            "dp.degree_program_id",
            "WHERE",
            "dp.degree_summary_name",
            "=",
            "'Master",
            "'",
            "INTERSECT",
            "SELECT",
            "se.semester_id",
            "FROM",
            "student_enrolment",
            "se",
            "JOIN",
            "degree_programs",
            "dp",
            "ON",
            "se.degree_program_id",
            "=",
            "dp.degree_program_id",
            "WHERE",
            "dp.degree_summary_name",
            "=",
            "'Bachelor",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "s.semester_name",
            "from",
            "semesters",
            "s",
            "where",
            "s.semester_id",
            "in",
            "(",
            "select",
            "se.semester_id",
            "from",
            "student_enrolment",
            "se",
            "join",
            "degree_programs",
            "dp",
            "on",
            "se.degree_program_id",
            "=",
            "dp.degree_program_id",
            "where",
            "dp.degree_summary_name",
            "=",
            "value",
            "intersect",
            "select",
            "se.semester_id",
            "from",
            "student_enrolment",
            "se",
            "join",
            "degree_programs",
            "dp",
            "on",
            "se.degree_program_id",
            "=",
            "dp.degree_program_id",
            "where",
            "dp.degree_summary_name",
            "=",
            "value",
            ")"
        ],
        "question": "Find the semester name when both Master students and Bachelor students got enrolled in.",
        "question_toks": [
            "Find",
            "the",
            "semester",
            "name",
            "when",
            "both",
            "Master",
            "students",
            "and",
            "Bachelor",
            "students",
            "got",
            "enrolled",
            "in",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 576,
        "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T2",
            ".",
            "semester_id",
            "FROM",
            "Degree_Programs",
            "AS",
            "T1",
            "JOIN",
            "Student_Enrolment",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "degree_program_id",
            "=",
            "T2",
            ".",
            "degree_program_id",
            "WHERE",
            "degree_summary_name",
            "=",
            "'Master",
            "'",
            "INTERSECT",
            "SELECT",
            "DISTINCT",
            "T2",
            ".",
            "semester_id",
            "FROM",
            "Degree_Programs",
            "AS",
            "T1",
            "JOIN",
            "Student_Enrolment",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "degree_program_id",
            "=",
            "T2",
            ".",
            "degree_program_id",
            "WHERE",
            "degree_summary_name",
            "=",
            "'Bachelor",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "t2",
            ".",
            "semester_id",
            "from",
            "degree_programs",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "degree_program_id",
            "=",
            "t2",
            ".",
            "degree_program_id",
            "where",
            "degree_summary_name",
            "=",
            "value",
            "intersect",
            "select",
            "distinct",
            "t2",
            ".",
            "semester_id",
            "from",
            "degree_programs",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "degree_program_id",
            "=",
            "t2",
            ".",
            "degree_program_id",
            "where",
            "degree_summary_name",
            "=",
            "value"
        ],
        "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "question_toks": [
            "What",
            "is",
            "the",
            "id",
            "of",
            "the",
            "semester",
            "that",
            "had",
            "both",
            "Masters",
            "and",
            "Bachelors",
            "students",
            "enrolled",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 577,
        "query": "SELECT count(DISTINCT current_address_id) FROM Students",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "current_address_id",
            ")",
            "FROM",
            "Students"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "current_address_id",
            ")",
            "from",
            "students"
        ],
        "question": "How many different addresses do the students currently live?",
        "question_toks": [
            "How",
            "many",
            "different",
            "addresses",
            "do",
            "the",
            "students",
            "currently",
            "live",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 578,
        "query": "SELECT COUNT(*) FROM (SELECT current_address_id FROM Students UNION SELECT permanent_address_id FROM Students) AS T",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "(",
            "SELECT",
            "current_address_id",
            "FROM",
            "Students",
            "UNION",
            "SELECT",
            "permanent_address_id",
            "FROM",
            "Students",
            ")",
            "AS",
            "T"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "(",
            "select",
            "current_address_id",
            "from",
            "students",
            "union",
            "select",
            "permanent_address_id",
            "from",
            "students",
            ")",
            "as",
            "t"
        ],
        "question": "What are the different addresses (considering both current and permanent) that have students living there?",
        "question_toks": [
            "What",
            "are",
            "the",
            "different",
            "addresses",
            "(",
            "considering",
            "both",
            "current",
            "and",
            "permanent",
            ")",
            "that",
            "have",
            "students",
            "living",
            "there",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 579,
        "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "query_toks": [
            "SELECT",
            "other_student_details",
            "FROM",
            "Students",
            "ORDER",
            "BY",
            "other_student_details",
            "DESC"
        ],
        "query_toks_no_value": [
            "select",
            "other_student_details",
            "from",
            "students",
            "order",
            "by",
            "other_student_details",
            "desc"
        ],
        "question": "List all the student details in reversed lexicographical order.",
        "question_toks": [
            "List",
            "all",
            "the",
            "student",
            "details",
            "in",
            "reversed",
            "lexicographical",
            "order",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 580,
        "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "query_toks": [
            "SELECT",
            "other_student_details",
            "FROM",
            "Students",
            "ORDER",
            "BY",
            "other_student_details",
            "DESC"
        ],
        "query_toks_no_value": [
            "select",
            "other_student_details",
            "from",
            "students",
            "order",
            "by",
            "other_student_details",
            "desc"
        ],
        "question": "What other details can you tell me about students in reverse alphabetical order?",
        "question_toks": [
            "What",
            "other",
            "details",
            "can",
            "you",
            "tell",
            "me",
            "about",
            "students",
            "in",
            "reverse",
            "alphabetical",
            "order",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 581,
        "query": "SELECT section_description FROM Sections WHERE section_name = 'H'",
        "query_toks": [
            "SELECT",
            "section_description",
            "FROM",
            "Sections",
            "WHERE",
            "section_name",
            "=",
            "'H",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "section_description",
            "from",
            "sections",
            "where",
            "section_name",
            "=",
            "value"
        ],
        "question": "Show the section description of section H",
        "question_toks": [
            "Show",
            "the",
            "section",
            "description",
            "of",
            "section",
            "H"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 582,
        "query": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "query_toks": [
            "SELECT",
            "section_description",
            "FROM",
            "Sections",
            "WHERE",
            "section_name",
            "=",
            "'h",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "section_description",
            "from",
            "sections",
            "where",
            "section_name",
            "=",
            "value"
        ],
        "question": "What is the description for the section named h?",
        "question_toks": [
            "What",
            "is",
            "the",
            "description",
            "for",
            "the",
            "section",
            "named",
            "h",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 583,
        "query": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id = t2.address_id where t2.country = 'Haiti' or t1.cell_mobile_number = '09700166582'",
        "query_toks": [
            "select",
            "t1",
            ".",
            "first_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "permanent_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t2",
            ".",
            "country",
            "=",
            "'Haiti",
            "'",
            "or",
            "t1",
            ".",
            "cell_mobile_number",
            "=",
            "'09700166582",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "first_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "permanent_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t2",
            ".",
            "country",
            "=",
            "value",
            "or",
            "t1",
            ".",
            "cell_mobile_number",
            "=",
            "value"
        ],
        "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "question_toks": [
            "Find",
            "the",
            "first",
            "name",
            "of",
            "the",
            "students",
            "who",
            "permanently",
            "live",
            "in",
            "the",
            "country",
            "Haiti",
            "or",
            "have",
            "the",
            "cell",
            "phone",
            "number",
            "09700166582",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "student_transcripts_tracking",
        "id": 584,
        "query": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id = t2.address_id where t2.country = 'Haiti' or t1.cell_mobile_number = '09700166582'",
        "query_toks": [
            "select",
            "t1",
            ".",
            "first_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "permanent_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t2",
            ".",
            "country",
            "=",
            "'Haiti",
            "'",
            "or",
            "t1",
            ".",
            "cell_mobile_number",
            "=",
            "'09700166582",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "first_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "permanent_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t2",
            ".",
            "country",
            "=",
            "value",
            "or",
            "t1",
            ".",
            "cell_mobile_number",
            "=",
            "value"
        ],
        "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "question_toks": [
            "What",
            "are",
            "the",
            "first",
            "names",
            "of",
            "the",
            "students",
            "who",
            "live",
            "in",
            "Haiti",
            "permanently",
            "or",
            "have",
            "the",
            "cell",
            "phone",
            "number",
            "09700166582",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 585,
        "query": "SELECT Title FROM Cartoon ORDER BY title",
        "query_toks": [
            "SELECT",
            "Title",
            "FROM",
            "Cartoon",
            "ORDER",
            "BY",
            "title"
        ],
        "query_toks_no_value": [
            "select",
            "title",
            "from",
            "cartoon",
            "order",
            "by",
            "title"
        ],
        "question": "List the title of all cartoons in alphabetical order.",
        "question_toks": [
            "List",
            "the",
            "title",
            "of",
            "all",
            "cartoons",
            "in",
            "alphabetical",
            "order",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 586,
        "query": "SELECT Title FROM Cartoon ORDER BY title",
        "query_toks": [
            "SELECT",
            "Title",
            "FROM",
            "Cartoon",
            "ORDER",
            "BY",
            "title"
        ],
        "query_toks_no_value": [
            "select",
            "title",
            "from",
            "cartoon",
            "order",
            "by",
            "title"
        ],
        "question": "What are the titles of the cartoons sorted alphabetically?",
        "question_toks": [
            "What",
            "are",
            "the",
            "titles",
            "of",
            "the",
            "cartoons",
            "sorted",
            "alphabetically",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 587,
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';",
        "query_toks": [
            "SELECT",
            "Title",
            "FROM",
            "Cartoon",
            "WHERE",
            "Directed_by",
            "=",
            "'Ben",
            "Jones",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "title",
            "from",
            "cartoon",
            "where",
            "directed_by",
            "=",
            "value"
        ],
        "question": "List all cartoon directed by 'Ben Jones'.",
        "question_toks": [
            "List",
            "all",
            "cartoon",
            "directed",
            "by",
            "``",
            "Ben",
            "Jones",
            "''",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 588,
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';",
        "query_toks": [
            "SELECT",
            "Title",
            "FROM",
            "Cartoon",
            "WHERE",
            "Directed_by",
            "=",
            "'Ben",
            "Jones",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "title",
            "from",
            "cartoon",
            "where",
            "directed_by",
            "=",
            "value"
        ],
        "question": "What are the names of all cartoons directed by Ben Jones?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "all",
            "cartoons",
            "directed",
            "by",
            "Ben",
            "Jones",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 589,
        "query": "SELECT count(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Cartoon",
            "WHERE",
            "Written_by",
            "=",
            "'Joseph",
            "Kuhr",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cartoon",
            "where",
            "written_by",
            "=",
            "value"
        ],
        "question": "How many cartoons were written by 'Joseph Kuhr'?",
        "question_toks": [
            "How",
            "many",
            "cartoons",
            "were",
            "written",
            "by",
            "``",
            "Joseph",
            "Kuhr",
            "''",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 590,
        "query": "SELECT count(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Cartoon",
            "WHERE",
            "Written_by",
            "=",
            "'Joseph",
            "Kuhr",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cartoon",
            "where",
            "written_by",
            "=",
            "value"
        ],
        "question": "What is the number of cartoones written by Joseph Kuhr?",
        "question_toks": [
            "What",
            "is",
            "the",
            "number",
            "of",
            "cartoones",
            "written",
            "by",
            "Joseph",
            "Kuhr",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 591,
        "query": "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date, id",
        "query_toks": [
            "SELECT",
            "Title,",
            "Directed_by",
            "FROM",
            "Cartoon",
            "ORDER",
            "BY",
            "Original_air_date,",
            "id"
        ],
        "query_toks_no_value": [
            "select",
            "title,",
            "directed_by",
            "from",
            "cartoon",
            "order",
            "by",
            "original_air_date,",
            "id"
        ],
        "question": "list all cartoon titles and their directors ordered first by their air date and then by their ids",
        "question_toks": [
            "list",
            "all",
            "cartoon",
            "titles",
            "and",
            "their",
            "directors",
            "ordered",
            "first",
            "by",
            "their",
            "air",
            "date",
            "and",
            "then",
            "by",
            "their",
            "ids"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 592,
        "query": "SELECT title, Directed_by FROM Cartoon ORDER BY Original_air_date, id ASC",
        "query_toks": [
            "SELECT",
            "title,",
            "Directed_by",
            "FROM",
            "Cartoon",
            "ORDER",
            "BY",
            "Original_air_date,",
            "id",
            "ASC"
        ],
        "query_toks_no_value": [
            "select",
            "title,",
            "directed_by",
            "from",
            "cartoon",
            "order",
            "by",
            "original_air_date,",
            "id",
            "asc"
        ],
        "question": "What is the name and directors of all the cartoons that are ordered by air date and then ascending id if air dates are the same?",
        "question_toks": [
            "What",
            "is",
            "the",
            "name",
            "and",
            "directors",
            "of",
            "all",
            "the",
            "cartoons",
            "that",
            "are",
            "ordered",
            "by",
            "air",
            "date",
            "and",
            "then",
            "ascending",
            "id",
            "if",
            "air",
            "dates",
            "are",
            "the",
            "same",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 593,
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';",
        "query_toks": [
            "SELECT",
            "Title",
            "FROM",
            "Cartoon",
            "WHERE",
            "Directed_by",
            "=",
            "'Ben",
            "Jones",
            "'",
            "OR",
            "Directed_by",
            "=",
            "'Brandon",
            "Vietti",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "title",
            "from",
            "cartoon",
            "where",
            "directed_by",
            "=",
            "value",
            "or",
            "directed_by",
            "=",
            "value"
        ],
        "question": "List the title of all cartoon directed by 'Ben Jones' or 'Brandon Vietti'.",
        "question_toks": [
            "List",
            "the",
            "title",
            "of",
            "all",
            "cartoon",
            "directed",
            "by",
            "``",
            "Ben",
            "Jones",
            "''",
            "or",
            "``",
            "Brandon",
            "Vietti",
            "''",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 594,
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';",
        "query_toks": [
            "SELECT",
            "Title",
            "FROM",
            "Cartoon",
            "WHERE",
            "Directed_by",
            "=",
            "'Ben",
            "Jones",
            "'",
            "OR",
            "Directed_by",
            "=",
            "'Brandon",
            "Vietti",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "title",
            "from",
            "cartoon",
            "where",
            "directed_by",
            "=",
            "value",
            "or",
            "directed_by",
            "=",
            "value"
        ],
        "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "question_toks": [
            "What",
            "are",
            "the",
            "titles",
            "of",
            "all",
            "cartoons",
            "directed",
            "by",
            "Ben",
            "Jones",
            "or",
            "Brandon",
            "Vietti",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 595,
        "query": "WITH ranked_countries AS (SELECT country, COUNT(id) AS total_channels, RANK() OVER (ORDER BY COUNT(id) DESC) AS rank FROM tv_channel GROUP BY country) SELECT country, total_channels FROM ranked_countries WHERE rank = 1",
        "query_toks": [
            "WITH",
            "ranked_countries",
            "AS",
            "(",
            "SELECT",
            "country,",
            "COUNT",
            "(",
            "id",
            ")",
            "AS",
            "total_channels,",
            "RANK",
            "(",
            ")",
            "OVER",
            "(",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "id",
            ")",
            "DESC",
            ")",
            "AS",
            "rank",
            "FROM",
            "tv_channel",
            "GROUP",
            "BY",
            "country",
            ")",
            "SELECT",
            "country,",
            "total_channels",
            "FROM",
            "ranked_countries",
            "WHERE",
            "rank",
            "=",
            "1"
        ],
        "query_toks_no_value": [
            "with",
            "ranked_countries",
            "as",
            "(",
            "select",
            "country,",
            "count",
            "(",
            "id",
            ")",
            "as",
            "total_channels,",
            "rank",
            "(",
            ")",
            "over",
            "(",
            "order",
            "by",
            "count",
            "(",
            "id",
            ")",
            "desc",
            ")",
            "as",
            "rank",
            "from",
            "tv_channel",
            "group",
            "by",
            "country",
            ")",
            "select",
            "country,",
            "total_channels",
            "from",
            "ranked_countries",
            "where",
            "rank",
            "=",
            "value"
        ],
        "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "question_toks": [
            "Which",
            "country",
            "has",
            "the",
            "most",
            "of",
            "TV",
            "Channels",
            "?",
            "List",
            "the",
            "country",
            "and",
            "number",
            "of",
            "TV",
            "Channels",
            "it",
            "has",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 596,
        "query": "SELECT Country, count(*) FROM TV_Channel GROUP BY Country HAVING count(*) = (SELECT count(*) as c FROM TV_Channel GROUP BY Country ORDER BY c DESC LIMIT 1)",
        "query_toks": [
            "SELECT",
            "Country,",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "TV_Channel",
            "GROUP",
            "BY",
            "Country",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "as",
            "c",
            "FROM",
            "TV_Channel",
            "GROUP",
            "BY",
            "Country",
            "ORDER",
            "BY",
            "c",
            "DESC",
            "LIMIT",
            "1",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "country,",
            "count",
            "(",
            "*",
            ")",
            "from",
            "tv_channel",
            "group",
            "by",
            "country",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "c",
            "from",
            "tv_channel",
            "group",
            "by",
            "country",
            "order",
            "by",
            "c",
            "desc",
            "limit",
            "value",
            ")"
        ],
        "question": "What is the country with the most number of TV Channels and how many does it have?",
        "question_toks": [
            "What",
            "is",
            "the",
            "country",
            "with",
            "the",
            "most",
            "number",
            "of",
            "TV",
            "Channels",
            "and",
            "how",
            "many",
            "does",
            "it",
            "have",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 597,
        "query": "SELECT count(DISTINCT series_name) , count(DISTINCT content) FROM TV_Channel;",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "series_name",
            ")",
            ",",
            "count",
            "(",
            "DISTINCT",
            "content",
            ")",
            "FROM",
            "TV_Channel"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "series_name",
            ")",
            ",",
            "count",
            "(",
            "distinct",
            "content",
            ")",
            "from",
            "tv_channel"
        ],
        "question": "List the number of different series names and the number of different contents in the TV Channel table.",
        "question_toks": [
            "List",
            "the",
            "number",
            "of",
            "different",
            "series",
            "names",
            "and",
            "the",
            "number",
            "of",
            "different",
            "contents",
            "in",
            "the",
            "TV",
            "Channel",
            "table",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 598,
        "query": "SELECT count(DISTINCT series_name) , count(DISTINCT content) FROM TV_Channel;",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "series_name",
            ")",
            ",",
            "count",
            "(",
            "DISTINCT",
            "content",
            ")",
            "FROM",
            "TV_Channel"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "series_name",
            ")",
            ",",
            "count",
            "(",
            "distinct",
            "content",
            ")",
            "from",
            "tv_channel"
        ],
        "question": "How many unique series names and unique content types are listed in the TV Channel table?",
        "question_toks": [
            "How",
            "many",
            "unique",
            "series",
            "names",
            "and",
            "unique",
            "content",
            "types",
            "are",
            "listed",
            "in",
            "the",
            "TV",
            "Channel",
            "table",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 599,
        "query": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';",
        "query_toks": [
            "SELECT",
            "Content",
            "FROM",
            "TV_Channel",
            "WHERE",
            "series_name",
            "=",
            "'Sky",
            "Radio",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "content",
            "from",
            "tv_channel",
            "where",
            "series_name",
            "=",
            "value"
        ],
        "question": "What is the content of TV Channel with serial name 'Sky Radio'?",
        "question_toks": [
            "What",
            "is",
            "the",
            "content",
            "of",
            "TV",
            "Channel",
            "with",
            "serial",
            "name",
            "``",
            "Sky",
            "Radio",
            "''",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 600,
        "query": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';",
        "query_toks": [
            "SELECT",
            "Content",
            "FROM",
            "TV_Channel",
            "WHERE",
            "series_name",
            "=",
            "'Sky",
            "Radio",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "content",
            "from",
            "tv_channel",
            "where",
            "series_name",
            "=",
            "value"
        ],
        "question": "What is the content of the series Sky Radio?",
        "question_toks": [
            "What",
            "is",
            "the",
            "content",
            "of",
            "the",
            "series",
            "Sky",
            "Radio",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 601,
        "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';",
        "query_toks": [
            "SELECT",
            "Package_Option",
            "FROM",
            "TV_Channel",
            "WHERE",
            "series_name",
            "=",
            "'Sky",
            "Radio",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "package_option",
            "from",
            "tv_channel",
            "where",
            "series_name",
            "=",
            "value"
        ],
        "question": "What is the Package Option of TV Channel with serial name 'Sky Radio'?",
        "question_toks": [
            "What",
            "is",
            "the",
            "Package",
            "Option",
            "of",
            "TV",
            "Channel",
            "with",
            "serial",
            "name",
            "``",
            "Sky",
            "Radio",
            "''",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 602,
        "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';",
        "query_toks": [
            "SELECT",
            "Package_Option",
            "FROM",
            "TV_Channel",
            "WHERE",
            "series_name",
            "=",
            "'Sky",
            "Radio",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "package_option",
            "from",
            "tv_channel",
            "where",
            "series_name",
            "=",
            "value"
        ],
        "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "question_toks": [
            "What",
            "are",
            "the",
            "Package",
            "Options",
            "of",
            "the",
            "TV",
            "Channels",
            "whose",
            "series",
            "names",
            "are",
            "Sky",
            "Radio",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 603,
        "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = 'English';",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "TV_Channel",
            "WHERE",
            "LANGUAGE",
            "=",
            "'English",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "tv_channel",
            "where",
            "language",
            "=",
            "value"
        ],
        "question": "How many TV Channel using language English?",
        "question_toks": [
            "How",
            "many",
            "TV",
            "Channel",
            "using",
            "language",
            "English",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 604,
        "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = 'English';",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "TV_Channel",
            "WHERE",
            "LANGUAGE",
            "=",
            "'English",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "tv_channel",
            "where",
            "language",
            "=",
            "value"
        ],
        "question": "How many TV Channels use the English language?",
        "question_toks": [
            "How",
            "many",
            "TV",
            "Channels",
            "use",
            "the",
            "English",
            "language",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 605,
        "query": "SELECT LANGUAGE, COUNT(*) FROM TV_Channel GROUP BY LANGUAGE HAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT COUNT(*) as count FROM TV_Channel GROUP BY LANGUAGE) as subquery)",
        "query_toks": [
            "SELECT",
            "LANGUAGE,",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "TV_Channel",
            "GROUP",
            "BY",
            "LANGUAGE",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MIN",
            "(",
            "count",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "as",
            "count",
            "FROM",
            "TV_Channel",
            "GROUP",
            "BY",
            "LANGUAGE",
            ")",
            "as",
            "subquery",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "language,",
            "count",
            "(",
            "*",
            ")",
            "from",
            "tv_channel",
            "group",
            "by",
            "language",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "min",
            "(",
            "count",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "count",
            "from",
            "tv_channel",
            "group",
            "by",
            "language",
            ")",
            "as",
            "subquery",
            ")"
        ],
        "question": "List the language(s) used by the least number of TV Channel. List language and number of TV Channel.",
        "question_toks": [
            "List",
            "the",
            "language",
            "(",
            "s",
            ")",
            "used",
            "by",
            "the",
            "least",
            "number",
            "of",
            "TV",
            "Channel",
            ".",
            "List",
            "language",
            "and",
            "number",
            "of",
            "TV",
            "Channel",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 606,
        "query": "WITH Language_Count AS (SELECT LANGUAGE, COUNT(*) AS num_channels FROM TV_Channel GROUP BY LANGUAGE) SELECT LANGUAGE, num_channels FROM Language_Count WHERE num_channels = (SELECT MIN(num_channels) FROM Language_Count);",
        "query_toks": [
            "WITH",
            "Language_Count",
            "AS",
            "(",
            "SELECT",
            "LANGUAGE,",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "num_channels",
            "FROM",
            "TV_Channel",
            "GROUP",
            "BY",
            "LANGUAGE",
            ")",
            "SELECT",
            "LANGUAGE,",
            "num_channels",
            "FROM",
            "Language_Count",
            "WHERE",
            "num_channels",
            "=",
            "(",
            "SELECT",
            "MIN",
            "(",
            "num_channels",
            ")",
            "FROM",
            "Language_Count",
            ")"
        ],
        "query_toks_no_value": [
            "with",
            "language_count",
            "as",
            "(",
            "select",
            "language,",
            "count",
            "(",
            "*",
            ")",
            "as",
            "num_channels",
            "from",
            "tv_channel",
            "group",
            "by",
            "language",
            ")",
            "select",
            "language,",
            "num_channels",
            "from",
            "language_count",
            "where",
            "num_channels",
            "=",
            "(",
            "select",
            "min",
            "(",
            "num_channels",
            ")",
            "from",
            "language_count",
            ")"
        ],
        "question": "What are the languages used by the least number of TV Channels and how many channels use it? In case of a tie, list all such languages.",
        "question_toks": [
            "What",
            "are",
            "the",
            "languages",
            "used",
            "by",
            "the",
            "least",
            "number",
            "of",
            "TV",
            "Channels",
            "and",
            "how",
            "many",
            "channels",
            "use",
            "it",
            "?",
            "In",
            "case",
            "of",
            "a",
            "tie",
            ",",
            "list",
            "all",
            "such",
            "languages",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 607,
        "query": "SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "query_toks": [
            "SELECT",
            "LANGUAGE",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "TV_Channel",
            "GROUP",
            "BY",
            "LANGUAGE"
        ],
        "query_toks_no_value": [
            "select",
            "language",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "tv_channel",
            "group",
            "by",
            "language"
        ],
        "question": "List each language and the number of TV Channels using it.",
        "question_toks": [
            "List",
            "each",
            "language",
            "and",
            "the",
            "number",
            "of",
            "TV",
            "Channels",
            "using",
            "it",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 608,
        "query": "SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "query_toks": [
            "SELECT",
            "LANGUAGE",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "TV_Channel",
            "GROUP",
            "BY",
            "LANGUAGE"
        ],
        "query_toks_no_value": [
            "select",
            "language",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "tv_channel",
            "group",
            "by",
            "language"
        ],
        "question": "For each language, list the number of TV Channels that use it.",
        "question_toks": [
            "For",
            "each",
            "language",
            ",",
            "list",
            "the",
            "number",
            "of",
            "TV",
            "Channels",
            "that",
            "use",
            "it",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 609,
        "query": "SELECT series_name FROM tv_channel WHERE id IN (SELECT channel FROM cartoon WHERE title = 'The Rise of the Blue Beetle!')",
        "query_toks": [
            "SELECT",
            "series_name",
            "FROM",
            "tv_channel",
            "WHERE",
            "id",
            "IN",
            "(",
            "SELECT",
            "channel",
            "FROM",
            "cartoon",
            "WHERE",
            "title",
            "=",
            "'The",
            "Rise",
            "of",
            "the",
            "Blue",
            "Beetle",
            "!",
            "",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "series_name",
            "from",
            "tv_channel",
            "where",
            "id",
            "in",
            "(",
            "select",
            "channel",
            "from",
            "cartoon",
            "where",
            "title",
            "=",
            "value",
            ")"
        ],
        "question": "What is the TV Channel that shows the cartoon 'The Rise of the Blue Beetle!'? List the TV Channel's series name.",
        "question_toks": [
            "What",
            "is",
            "the",
            "TV",
            "Channel",
            "that",
            "shows",
            "the",
            "cartoon",
            "``",
            "The",
            "Rise",
            "of",
            "the",
            "Blue",
            "Beetle",
            "!",
            "''",
            "?",
            "List",
            "the",
            "TV",
            "Channel",
            "'s",
            "series",
            "name",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 610,
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 WHERE T1.id IN (SELECT T2.Channel FROM Cartoon AS T2 WHERE T2.Title = 'The Rise of the Blue Beetle!')",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "series_name",
            "FROM",
            "TV_Channel",
            "AS",
            "T1",
            "WHERE",
            "T1",
            ".",
            "id",
            "IN",
            "(",
            "SELECT",
            "T2",
            ".",
            "Channel",
            "FROM",
            "Cartoon",
            "AS",
            "T2",
            "WHERE",
            "T2",
            ".",
            "Title",
            "=",
            "'The",
            "Rise",
            "of",
            "the",
            "Blue",
            "Beetle",
            "!",
            "",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "series_name",
            "from",
            "tv_channel",
            "as",
            "t1",
            "where",
            "t1",
            ".",
            "id",
            "in",
            "(",
            "select",
            "t2",
            ".",
            "channel",
            "from",
            "cartoon",
            "as",
            "t2",
            "where",
            "t2",
            ".",
            "title",
            "=",
            "value",
            ")"
        ],
        "question": "What is the series name of the TV Channel that shows the cartoon 'The Rise of the Blue Beetle'?",
        "question_toks": [
            "What",
            "is",
            "the",
            "series",
            "name",
            "of",
            "the",
            "TV",
            "Channel",
            "that",
            "shows",
            "the",
            "cartoon",
            "``",
            "The",
            "Rise",
            "of",
            "the",
            "Blue",
            "Beetle",
            "''",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 611,
        "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio';",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "Title",
            "FROM",
            "TV_Channel",
            "AS",
            "T1",
            "JOIN",
            "Cartoon",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "id",
            "=",
            "T2",
            ".",
            "Channel",
            "WHERE",
            "T1",
            ".",
            "series_name",
            "=",
            "'Sky",
            "Radio",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "title",
            "from",
            "tv_channel",
            "as",
            "t1",
            "join",
            "cartoon",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "channel",
            "where",
            "t1",
            ".",
            "series_name",
            "=",
            "value"
        ],
        "question": "List the title of all  Cartoons showed on TV Channel with series name 'Sky Radio'.",
        "question_toks": [
            "List",
            "the",
            "title",
            "of",
            "all",
            "Cartoons",
            "showed",
            "on",
            "TV",
            "Channel",
            "with",
            "series",
            "name",
            "``",
            "Sky",
            "Radio",
            "''",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 612,
        "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio';",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "Title",
            "FROM",
            "TV_Channel",
            "AS",
            "T1",
            "JOIN",
            "Cartoon",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "id",
            "=",
            "T2",
            ".",
            "Channel",
            "WHERE",
            "T1",
            ".",
            "series_name",
            "=",
            "'Sky",
            "Radio",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "title",
            "from",
            "tv_channel",
            "as",
            "t1",
            "join",
            "cartoon",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "channel",
            "where",
            "t1",
            ".",
            "series_name",
            "=",
            "value"
        ],
        "question": "What is the title of all the cartools that are on the TV Channel with the series name 'Sky Radio'?",
        "question_toks": [
            "What",
            "is",
            "the",
            "title",
            "of",
            "all",
            "the",
            "cartools",
            "that",
            "are",
            "on",
            "the",
            "TV",
            "Channel",
            "with",
            "the",
            "series",
            "name",
            "``",
            "Sky",
            "Radio",
            "''",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 613,
        "query": "SELECT Episode FROM TV_series ORDER BY Rating, id ASC",
        "query_toks": [
            "SELECT",
            "Episode",
            "FROM",
            "TV_series",
            "ORDER",
            "BY",
            "Rating,",
            "id",
            "ASC"
        ],
        "query_toks_no_value": [
            "select",
            "episode",
            "from",
            "tv_series",
            "order",
            "by",
            "rating,",
            "id",
            "asc"
        ],
        "question": "List the Episode of all TV series sorted by rating and id in ascending order.",
        "question_toks": [
            "List",
            "the",
            "Episode",
            "of",
            "all",
            "TV",
            "series",
            "sorted",
            "by",
            "rating",
            "and",
            "id",
            "in",
            "ascending",
            "order",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 614,
        "query": "SELECT Episode FROM TV_series ORDER BY Rating, id ASC",
        "query_toks": [
            "SELECT",
            "Episode",
            "FROM",
            "TV_series",
            "ORDER",
            "BY",
            "Rating,",
            "id",
            "ASC"
        ],
        "query_toks_no_value": [
            "select",
            "episode",
            "from",
            "tv_series",
            "order",
            "by",
            "rating,",
            "id",
            "asc"
        ],
        "question": "What are all of the episodes ordered by ratings and then ascending id if ratings are the same?",
        "question_toks": [
            "What",
            "are",
            "all",
            "of",
            "the",
            "episodes",
            "ordered",
            "by",
            "ratings",
            "and",
            "then",
            "ascending",
            "id",
            "if",
            "ratings",
            "are",
            "the",
            "same",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 615,
        "query": "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC, Episode ASC LIMIT 3",
        "query_toks": [
            "SELECT",
            "Episode,",
            "Rating",
            "FROM",
            "TV_series",
            "ORDER",
            "BY",
            "Rating",
            "DESC,",
            "Episode",
            "ASC",
            "LIMIT",
            "3"
        ],
        "query_toks_no_value": [
            "select",
            "episode,",
            "rating",
            "from",
            "tv_series",
            "order",
            "by",
            "rating",
            "desc,",
            "episode",
            "asc",
            "limit",
            "value"
        ],
        "question": "List top 3 highest Rating TV series (sorted alphabetically by Episode title in case of ties). List the TV series's Episode and Rating.",
        "question_toks": [
            "List",
            "top",
            "3",
            "highest",
            "Rating",
            "TV",
            "series",
            "(",
            "sorted",
            "alphabetically",
            "by",
            "Episode",
            "title",
            "in",
            "case",
            "of",
            "ties",
            ").",
            "List",
            "the",
            "TV",
            "series",
            "'",
            "s",
            "Episode",
            "and",
            "Rating",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 616,
        "query": "SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "query_toks": [
            "SELECT",
            "Episode",
            ",",
            "Rating",
            "FROM",
            "TV_series",
            "ORDER",
            "BY",
            "Rating",
            "DESC",
            "LIMIT",
            "3"
        ],
        "query_toks_no_value": [
            "select",
            "episode",
            ",",
            "rating",
            "from",
            "tv_series",
            "order",
            "by",
            "rating",
            "desc",
            "limit",
            "value"
        ],
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "question_toks": [
            "What",
            "are",
            "3",
            "most",
            "highly",
            "rated",
            "episodes",
            "in",
            "the",
            "TV",
            "series",
            "table",
            "and",
            "what",
            "were",
            "those",
            "ratings",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 617,
        "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "SHARE",
            ")",
            ",",
            "min",
            "(",
            "SHARE",
            ")",
            "FROM",
            "TV_series"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "share",
            ")",
            ",",
            "min",
            "(",
            "share",
            ")",
            "from",
            "tv_series"
        ],
        "question": "What is minimum and maximum share of TV series?",
        "question_toks": [
            "What",
            "is",
            "minimum",
            "and",
            "maximum",
            "share",
            "of",
            "TV",
            "series",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 618,
        "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "SHARE",
            ")",
            ",",
            "min",
            "(",
            "SHARE",
            ")",
            "FROM",
            "TV_series"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "share",
            ")",
            ",",
            "min",
            "(",
            "share",
            ")",
            "from",
            "tv_series"
        ],
        "question": "What is the maximum and minimum share for the TV series?",
        "question_toks": [
            "What",
            "is",
            "the",
            "maximum",
            "and",
            "minimum",
            "share",
            "for",
            "the",
            "TV",
            "series",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 619,
        "query": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';",
        "query_toks": [
            "SELECT",
            "Air_Date",
            "FROM",
            "TV_series",
            "WHERE",
            "Episode",
            "=",
            "'A",
            "Love",
            "of",
            "a",
            "Lifetime",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "air_date",
            "from",
            "tv_series",
            "where",
            "episode",
            "=",
            "value"
        ],
        "question": "What is the air date of TV series with Episode 'A Love of a Lifetime'?",
        "question_toks": [
            "What",
            "is",
            "the",
            "air",
            "date",
            "of",
            "TV",
            "series",
            "with",
            "Episode",
            "``",
            "A",
            "Love",
            "of",
            "a",
            "Lifetime",
            "''",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 620,
        "query": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';",
        "query_toks": [
            "SELECT",
            "Air_Date",
            "FROM",
            "TV_series",
            "WHERE",
            "Episode",
            "=",
            "'A",
            "Love",
            "of",
            "a",
            "Lifetime",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "air_date",
            "from",
            "tv_series",
            "where",
            "episode",
            "=",
            "value"
        ],
        "question": "When did the episode 'A Love of a Lifetime' air?",
        "question_toks": [
            "When",
            "did",
            "the",
            "episode",
            "``",
            "A",
            "Love",
            "of",
            "a",
            "Lifetime",
            "''",
            "air",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 621,
        "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';",
        "query_toks": [
            "SELECT",
            "Weekly_Rank",
            "FROM",
            "TV_series",
            "WHERE",
            "Episode",
            "=",
            "'A",
            "Love",
            "of",
            "a",
            "Lifetime",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "weekly_rank",
            "from",
            "tv_series",
            "where",
            "episode",
            "=",
            "value"
        ],
        "question": "What is Weekly Rank of TV series with Episode 'A Love of a Lifetime'?",
        "question_toks": [
            "What",
            "is",
            "Weekly",
            "Rank",
            "of",
            "TV",
            "series",
            "with",
            "Episode",
            "``",
            "A",
            "Love",
            "of",
            "a",
            "Lifetime",
            "''",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 622,
        "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';",
        "query_toks": [
            "SELECT",
            "Weekly_Rank",
            "FROM",
            "TV_series",
            "WHERE",
            "Episode",
            "=",
            "'A",
            "Love",
            "of",
            "a",
            "Lifetime",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "weekly_rank",
            "from",
            "tv_series",
            "where",
            "episode",
            "=",
            "value"
        ],
        "question": "What is the weekly rank for the episode 'A Love of a Lifetime'?",
        "question_toks": [
            "What",
            "is",
            "the",
            "weekly",
            "rank",
            "for",
            "the",
            "episode",
            "``",
            "A",
            "Love",
            "of",
            "a",
            "Lifetime",
            "''",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 623,
        "query": "SELECT series_name FROM tv_channel WHERE id IN (SELECT channel FROM tv_series WHERE episode = 'A Love of a Lifetime')",
        "query_toks": [
            "SELECT",
            "series_name",
            "FROM",
            "tv_channel",
            "WHERE",
            "id",
            "IN",
            "(",
            "SELECT",
            "channel",
            "FROM",
            "tv_series",
            "WHERE",
            "episode",
            "=",
            "'A",
            "Love",
            "of",
            "a",
            "Lifetime",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "series_name",
            "from",
            "tv_channel",
            "where",
            "id",
            "in",
            "(",
            "select",
            "channel",
            "from",
            "tv_series",
            "where",
            "episode",
            "=",
            "value",
            ")"
        ],
        "question": "What is the TV Channel of TV series with Episode 'A Love of a Lifetime'? List the TV Channel's series name.",
        "question_toks": [
            "What",
            "is",
            "the",
            "TV",
            "Channel",
            "of",
            "TV",
            "series",
            "with",
            "Episode",
            "``",
            "A",
            "Love",
            "of",
            "a",
            "Lifetime",
            "''",
            "?",
            "List",
            "the",
            "TV",
            "Channel",
            "'s",
            "series",
            "name",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 624,
        "query": "SELECT series_name FROM tv_channel WHERE id IN (SELECT channel FROM tv_series WHERE episode = 'A Love of a Lifetime')",
        "query_toks": [
            "SELECT",
            "series_name",
            "FROM",
            "tv_channel",
            "WHERE",
            "id",
            "IN",
            "(",
            "SELECT",
            "channel",
            "FROM",
            "tv_series",
            "WHERE",
            "episode",
            "=",
            "'A",
            "Love",
            "of",
            "a",
            "Lifetime",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "series_name",
            "from",
            "tv_channel",
            "where",
            "id",
            "in",
            "(",
            "select",
            "channel",
            "from",
            "tv_series",
            "where",
            "episode",
            "=",
            "value",
            ")"
        ],
        "question": "What is the name of the series that has the episode 'A Love of a Lifetime'?",
        "question_toks": [
            "What",
            "is",
            "the",
            "name",
            "of",
            "the",
            "series",
            "that",
            "has",
            "the",
            "episode",
            "``",
            "A",
            "Love",
            "of",
            "a",
            "Lifetime",
            "''",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 625,
        "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio';",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "Episode",
            "FROM",
            "TV_Channel",
            "AS",
            "T1",
            "JOIN",
            "TV_series",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "id",
            "=",
            "T2",
            ".",
            "Channel",
            "WHERE",
            "T1",
            ".",
            "series_name",
            "=",
            "'Sky",
            "Radio",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "episode",
            "from",
            "tv_channel",
            "as",
            "t1",
            "join",
            "tv_series",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "channel",
            "where",
            "t1",
            ".",
            "series_name",
            "=",
            "value"
        ],
        "question": "List the Episode of all  TV series showed on TV Channel with series name 'Sky Radio'.",
        "question_toks": [
            "List",
            "the",
            "Episode",
            "of",
            "all",
            "TV",
            "series",
            "showed",
            "on",
            "TV",
            "Channel",
            "with",
            "series",
            "name",
            "``",
            "Sky",
            "Radio",
            "''",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 626,
        "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio';",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "Episode",
            "FROM",
            "TV_Channel",
            "AS",
            "T1",
            "JOIN",
            "TV_series",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "id",
            "=",
            "T2",
            ".",
            "Channel",
            "WHERE",
            "T1",
            ".",
            "series_name",
            "=",
            "'Sky",
            "Radio",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "episode",
            "from",
            "tv_channel",
            "as",
            "t1",
            "join",
            "tv_series",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "channel",
            "where",
            "t1",
            ".",
            "series_name",
            "=",
            "value"
        ],
        "question": "What is the episode for the TV series named 'Sky Radio'?",
        "question_toks": [
            "What",
            "is",
            "the",
            "episode",
            "for",
            "the",
            "TV",
            "series",
            "named",
            "``",
            "Sky",
            "Radio",
            "''",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 627,
        "query": "SELECT count(*) , Directed_by FROM cartoon GROUP BY Directed_by",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "Directed_by",
            "FROM",
            "cartoon",
            "GROUP",
            "BY",
            "Directed_by"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "directed_by",
            "from",
            "cartoon",
            "group",
            "by",
            "directed_by"
        ],
        "question": "Find the number of cartoons directed by each of the listed directors.",
        "question_toks": [
            "Find",
            "the",
            "number",
            "of",
            "cartoons",
            "directed",
            "by",
            "each",
            "of",
            "the",
            "listed",
            "directors",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 628,
        "query": "SELECT count(*) , Directed_by FROM cartoon GROUP BY Directed_by",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "Directed_by",
            "FROM",
            "cartoon",
            "GROUP",
            "BY",
            "Directed_by"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "directed_by",
            "from",
            "cartoon",
            "group",
            "by",
            "directed_by"
        ],
        "question": "How many cartoons did each director create?",
        "question_toks": [
            "How",
            "many",
            "cartoons",
            "did",
            "each",
            "director",
            "create",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 629,
        "query": "SELECT production_code, channel FROM cartoon WHERE original_air_date = (SELECT MAX(original_air_date) FROM cartoon)",
        "query_toks": [
            "SELECT",
            "production_code,",
            "channel",
            "FROM",
            "cartoon",
            "WHERE",
            "original_air_date",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "original_air_date",
            ")",
            "FROM",
            "cartoon",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "production_code,",
            "channel",
            "from",
            "cartoon",
            "where",
            "original_air_date",
            "=",
            "(",
            "select",
            "max",
            "(",
            "original_air_date",
            ")",
            "from",
            "cartoon",
            ")"
        ],
        "question": "Find the production code and channel of all cartoons aired on the most recent date.",
        "question_toks": [
            "Find",
            "the",
            "production",
            "code",
            "and",
            "channel",
            "of",
            "all",
            "cartoons",
            "aired",
            "on",
            "the",
            "most",
            "recent",
            "date",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 630,
        "query": "select production_code, channel from cartoon where Original_air_date = (SELECT max(original_air_date) FROM cartoon)",
        "query_toks": [
            "select",
            "production_code,",
            "channel",
            "from",
            "cartoon",
            "where",
            "Original_air_date",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "original_air_date",
            ")",
            "FROM",
            "cartoon",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "production_code,",
            "channel",
            "from",
            "cartoon",
            "where",
            "original_air_date",
            "=",
            "(",
            "select",
            "max",
            "(",
            "original_air_date",
            ")",
            "from",
            "cartoon",
            ")"
        ],
        "question": "What is the produdction code and channel of the most recent cartoon ?",
        "question_toks": [
            "What",
            "is",
            "the",
            "produdction",
            "code",
            "and",
            "channel",
            "of",
            "the",
            "most",
            "recent",
            "cartoon",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 631,
        "query": "SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV = 'yes'",
        "query_toks": [
            "SELECT",
            "package_option",
            ",",
            "series_name",
            "FROM",
            "TV_Channel",
            "WHERE",
            "hight_definition_TV",
            "=",
            "'yes",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "package_option",
            ",",
            "series_name",
            "from",
            "tv_channel",
            "where",
            "hight_definition_tv",
            "=",
            "value"
        ],
        "question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "question_toks": [
            "Find",
            "the",
            "package",
            "choice",
            "and",
            "series",
            "name",
            "of",
            "the",
            "TV",
            "channel",
            "that",
            "has",
            "high",
            "definition",
            "TV",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 632,
        "query": "SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV = 'yes'",
        "query_toks": [
            "SELECT",
            "package_option",
            ",",
            "series_name",
            "FROM",
            "TV_Channel",
            "WHERE",
            "hight_definition_TV",
            "=",
            "'yes",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "package_option",
            ",",
            "series_name",
            "from",
            "tv_channel",
            "where",
            "hight_definition_tv",
            "=",
            "value"
        ],
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "question_toks": [
            "What",
            "are",
            "the",
            "package",
            "options",
            "and",
            "the",
            "name",
            "of",
            "the",
            "series",
            "for",
            "the",
            "TV",
            "Channel",
            "that",
            "supports",
            "high",
            "definition",
            "TV",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 633,
        "query": "SELECT DISTINCT country FROM tv_channel WHERE id IN (SELECT channel FROM cartoon WHERE written_by = 'Todd Casey')",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "country",
            "FROM",
            "tv_channel",
            "WHERE",
            "id",
            "IN",
            "(",
            "SELECT",
            "channel",
            "FROM",
            "cartoon",
            "WHERE",
            "written_by",
            "=",
            "'Todd",
            "Casey",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "country",
            "from",
            "tv_channel",
            "where",
            "id",
            "in",
            "(",
            "select",
            "channel",
            "from",
            "cartoon",
            "where",
            "written_by",
            "=",
            "value",
            ")"
        ],
        "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "question_toks": [
            "which",
            "countries",
            "'",
            "tv",
            "channels",
            "are",
            "playing",
            "some",
            "cartoon",
            "written",
            "by",
            "Todd",
            "Casey",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 634,
        "query": "SELECT DISTINCT tc.country FROM tv_channel tc JOIN cartoon c ON tc.id = c.channel WHERE c.written_by = 'Todd Casey'",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "tc",
            ".",
            "country",
            "FROM",
            "tv_channel",
            "tc",
            "JOIN",
            "cartoon",
            "c",
            "ON",
            "tc",
            ".",
            "id",
            "=",
            "c.channel",
            "WHERE",
            "c.written_by",
            "=",
            "'Todd",
            "Casey",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "tc",
            ".",
            "country",
            "from",
            "tv_channel",
            "tc",
            "join",
            "cartoon",
            "c",
            "on",
            "tc",
            ".",
            "id",
            "=",
            "c.channel",
            "where",
            "c.written_by",
            "=",
            "value"
        ],
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "question_toks": [
            "What",
            "are",
            "the",
            "countries",
            "that",
            "have",
            "cartoons",
            "on",
            "TV",
            "that",
            "were",
            "written",
            "by",
            "Todd",
            "Casey",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 635,
        "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
        "query_toks": [
            "SELECT",
            "country",
            "FROM",
            "TV_Channel",
            "EXCEPT",
            "SELECT",
            "T1",
            ".",
            "country",
            "FROM",
            "TV_Channel",
            "AS",
            "T1",
            "JOIN",
            "cartoon",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "id",
            "=",
            "T2",
            ".",
            "Channel",
            "WHERE",
            "T2",
            ".",
            "written_by",
            "=",
            "'Todd",
            "Casey",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "country",
            "from",
            "tv_channel",
            "except",
            "select",
            "t1",
            ".",
            "country",
            "from",
            "tv_channel",
            "as",
            "t1",
            "join",
            "cartoon",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "channel",
            "where",
            "t2",
            ".",
            "written_by",
            "=",
            "value"
        ],
        "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "question_toks": [
            "which",
            "countries",
            "'",
            "tv",
            "channels",
            "are",
            "not",
            "playing",
            "any",
            "cartoon",
            "written",
            "by",
            "Todd",
            "Casey",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 636,
        "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
        "query_toks": [
            "SELECT",
            "country",
            "FROM",
            "TV_Channel",
            "EXCEPT",
            "SELECT",
            "T1",
            ".",
            "country",
            "FROM",
            "TV_Channel",
            "AS",
            "T1",
            "JOIN",
            "cartoon",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "id",
            "=",
            "T2",
            ".",
            "Channel",
            "WHERE",
            "T2",
            ".",
            "written_by",
            "=",
            "'Todd",
            "Casey",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "country",
            "from",
            "tv_channel",
            "except",
            "select",
            "t1",
            ".",
            "country",
            "from",
            "tv_channel",
            "as",
            "t1",
            "join",
            "cartoon",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "channel",
            "where",
            "t2",
            ".",
            "written_by",
            "=",
            "value"
        ],
        "question": "What are the countries that are not playing cartoons written by Todd Casey?",
        "question_toks": [
            "What",
            "are",
            "the",
            "countries",
            "that",
            "are",
            "not",
            "playing",
            "cartoons",
            "written",
            "by",
            "Todd",
            "Casey",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 637,
        "query": "SELECT T1.series_name, T1.country FROM TV_Channel AS T1 WHERE T1.id IN (SELECT T2.id FROM TV_Channel AS T2 JOIN cartoon AS T3 ON T2.id = T3.Channel WHERE T3.directed_by = 'Michael Chang' INTERSECT SELECT T2.Id FROM TV_Channel AS T2 JOIN cartoon AS T3 ON T2.id = T3.Channel WHERE T3.directed_by = 'Ben Jones')",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "series_name,",
            "T1",
            ".",
            "country",
            "FROM",
            "TV_Channel",
            "AS",
            "T1",
            "WHERE",
            "T1",
            ".",
            "id",
            "IN",
            "(",
            "SELECT",
            "T2",
            ".",
            "id",
            "FROM",
            "TV_Channel",
            "AS",
            "T2",
            "JOIN",
            "cartoon",
            "AS",
            "T3",
            "ON",
            "T2",
            ".",
            "id",
            "=",
            "T3",
            ".",
            "Channel",
            "WHERE",
            "T3",
            ".",
            "directed_by",
            "=",
            "'Michael",
            "Chang",
            "'",
            "INTERSECT",
            "SELECT",
            "T2",
            ".",
            "Id",
            "FROM",
            "TV_Channel",
            "AS",
            "T2",
            "JOIN",
            "cartoon",
            "AS",
            "T3",
            "ON",
            "T2",
            ".",
            "id",
            "=",
            "T3",
            ".",
            "Channel",
            "WHERE",
            "T3",
            ".",
            "directed_by",
            "=",
            "'Ben",
            "Jones",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "series_name,",
            "t1",
            ".",
            "country",
            "from",
            "tv_channel",
            "as",
            "t1",
            "where",
            "t1",
            ".",
            "id",
            "in",
            "(",
            "select",
            "t2",
            ".",
            "id",
            "from",
            "tv_channel",
            "as",
            "t2",
            "join",
            "cartoon",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "id",
            "=",
            "t3",
            ".",
            "channel",
            "where",
            "t3",
            ".",
            "directed_by",
            "=",
            "value",
            "intersect",
            "select",
            "t2",
            ".",
            "id",
            "from",
            "tv_channel",
            "as",
            "t2",
            "join",
            "cartoon",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "id",
            "=",
            "t3",
            ".",
            "channel",
            "where",
            "t3",
            ".",
            "directed_by",
            "=",
            "value",
            ")"
        ],
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "question_toks": [
            "Find",
            "the",
            "series",
            "name",
            "and",
            "country",
            "of",
            "the",
            "tv",
            "channel",
            "that",
            "is",
            "playing",
            "some",
            "cartoons",
            "directed",
            "by",
            "Ben",
            "Jones",
            "and",
            "Michael",
            "Chang",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 638,
        "query": "SELECT T1.series_name, T1.country FROM TV_Channel AS T1 WHERE T1.id IN (SELECT T2.id FROM TV_Channel AS T2 JOIN cartoon AS T3 ON T2.id = T3.Channel WHERE T3.directed_by = 'Michael Chang' INTERSECT SELECT T2.Id FROM TV_Channel AS T2 JOIN cartoon AS T3 ON T2.id = T3.Channel WHERE T3.directed_by = 'Ben Jones')",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "series_name,",
            "T1",
            ".",
            "country",
            "FROM",
            "TV_Channel",
            "AS",
            "T1",
            "WHERE",
            "T1",
            ".",
            "id",
            "IN",
            "(",
            "SELECT",
            "T2",
            ".",
            "id",
            "FROM",
            "TV_Channel",
            "AS",
            "T2",
            "JOIN",
            "cartoon",
            "AS",
            "T3",
            "ON",
            "T2",
            ".",
            "id",
            "=",
            "T3",
            ".",
            "Channel",
            "WHERE",
            "T3",
            ".",
            "directed_by",
            "=",
            "'Michael",
            "Chang",
            "'",
            "INTERSECT",
            "SELECT",
            "T2",
            ".",
            "Id",
            "FROM",
            "TV_Channel",
            "AS",
            "T2",
            "JOIN",
            "cartoon",
            "AS",
            "T3",
            "ON",
            "T2",
            ".",
            "id",
            "=",
            "T3",
            ".",
            "Channel",
            "WHERE",
            "T3",
            ".",
            "directed_by",
            "=",
            "'Ben",
            "Jones",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "series_name,",
            "t1",
            ".",
            "country",
            "from",
            "tv_channel",
            "as",
            "t1",
            "where",
            "t1",
            ".",
            "id",
            "in",
            "(",
            "select",
            "t2",
            ".",
            "id",
            "from",
            "tv_channel",
            "as",
            "t2",
            "join",
            "cartoon",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "id",
            "=",
            "t3",
            ".",
            "channel",
            "where",
            "t3",
            ".",
            "directed_by",
            "=",
            "value",
            "intersect",
            "select",
            "t2",
            ".",
            "id",
            "from",
            "tv_channel",
            "as",
            "t2",
            "join",
            "cartoon",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "id",
            "=",
            "t3",
            ".",
            "channel",
            "where",
            "t3",
            ".",
            "directed_by",
            "=",
            "value",
            ")"
        ],
        "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "question_toks": [
            "What",
            "is",
            "the",
            "series",
            "name",
            "and",
            "country",
            "of",
            "all",
            "TV",
            "channels",
            "that",
            "are",
            "playing",
            "cartoons",
            "directed",
            "by",
            "Ben",
            "Jones",
            "and",
            "cartoons",
            "directed",
            "by",
            "Michael",
            "Chang",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 639,
        "query": "SELECT Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'",
        "query_toks": [
            "SELECT",
            "Pixel_aspect_ratio_PAR",
            ",",
            "country",
            "FROM",
            "tv_channel",
            "WHERE",
            "LANGUAGE",
            "!",
            "=",
            "'English",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "pixel_aspect_ratio_par",
            ",",
            "country",
            "from",
            "tv_channel",
            "where",
            "language",
            "!",
            "=",
            "value"
        ],
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "question_toks": [
            "find",
            "the",
            "pixel",
            "aspect",
            "ratio",
            "and",
            "nation",
            "of",
            "the",
            "tv",
            "channels",
            "that",
            "do",
            "not",
            "use",
            "English",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 640,
        "query": "SELECT Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'",
        "query_toks": [
            "SELECT",
            "Pixel_aspect_ratio_PAR",
            ",",
            "country",
            "FROM",
            "tv_channel",
            "WHERE",
            "LANGUAGE",
            "!",
            "=",
            "'English",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "pixel_aspect_ratio_par",
            ",",
            "country",
            "from",
            "tv_channel",
            "where",
            "language",
            "!",
            "=",
            "value"
        ],
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "question_toks": [
            "What",
            "is",
            "the",
            "pixel",
            "aspect",
            "ratio",
            "and",
            "country",
            "of",
            "origin",
            "for",
            "all",
            "TV",
            "channels",
            "that",
            "do",
            "not",
            "use",
            "English",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 641,
        "query": "SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2)",
        "query_toks": [
            "SELECT",
            "id",
            "FROM",
            "TV_Channel",
            "WHERE",
            "Country",
            "IN",
            "(",
            "SELECT",
            "Country",
            "FROM",
            "TV_Channel",
            "GROUP",
            "BY",
            "Country",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "2",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "id",
            "from",
            "tv_channel",
            "where",
            "country",
            "in",
            "(",
            "select",
            "country",
            "from",
            "tv_channel",
            "group",
            "by",
            "country",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value",
            ")"
        ],
        "question": "find id of the tv channels that are from the countries where there are more than two tv channels in total.",
        "question_toks": [
            "find",
            "id",
            "of",
            "the",
            "tv",
            "channels",
            "that",
            "are",
            "from",
            "the",
            "countries",
            "where",
            "there",
            "are",
            "more",
            "than",
            "two",
            "tv",
            "channels",
            "in",
            "total",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 642,
        "query": "SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2)",
        "query_toks": [
            "SELECT",
            "id",
            "FROM",
            "TV_Channel",
            "WHERE",
            "Country",
            "IN",
            "(",
            "SELECT",
            "Country",
            "FROM",
            "TV_Channel",
            "GROUP",
            "BY",
            "Country",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "2",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "id",
            "from",
            "tv_channel",
            "where",
            "country",
            "in",
            "(",
            "select",
            "country",
            "from",
            "tv_channel",
            "group",
            "by",
            "country",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value",
            ")"
        ],
        "question": "What are the ids of all the TV channels in a country that includes more than two TV channels?",
        "question_toks": [
            "What",
            "are",
            "the",
            "ids",
            "of",
            "all",
            "the",
            "TV",
            "channels",
            "in",
            "a",
            "country",
            "that",
            "includes",
            "more",
            "than",
            "two",
            "TV",
            "channels",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 643,
        "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
        "query_toks": [
            "SELECT",
            "id",
            "FROM",
            "TV_Channel",
            "EXCEPT",
            "SELECT",
            "channel",
            "FROM",
            "cartoon",
            "WHERE",
            "directed_by",
            "=",
            "'Ben",
            "Jones",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "id",
            "from",
            "tv_channel",
            "except",
            "select",
            "channel",
            "from",
            "cartoon",
            "where",
            "directed_by",
            "=",
            "value"
        ],
        "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "question_toks": [
            "find",
            "the",
            "id",
            "of",
            "tv",
            "channels",
            "that",
            "do",
            "not",
            "play",
            "any",
            "cartoon",
            "directed",
            "by",
            "Ben",
            "Jones",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 644,
        "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
        "query_toks": [
            "SELECT",
            "id",
            "FROM",
            "TV_Channel",
            "EXCEPT",
            "SELECT",
            "channel",
            "FROM",
            "cartoon",
            "WHERE",
            "directed_by",
            "=",
            "'Ben",
            "Jones",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "id",
            "from",
            "tv_channel",
            "except",
            "select",
            "channel",
            "from",
            "cartoon",
            "where",
            "directed_by",
            "=",
            "value"
        ],
        "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "question_toks": [
            "What",
            "are",
            "the",
            "ids",
            "of",
            "the",
            "TV",
            "channels",
            "that",
            "do",
            "not",
            "have",
            "any",
            "cartoons",
            "directed",
            "by",
            "Ben",
            "Jones",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 645,
        "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')",
        "query_toks": [
            "SELECT",
            "package_option",
            "FROM",
            "TV_Channel",
            "WHERE",
            "id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "channel",
            "FROM",
            "cartoon",
            "WHERE",
            "directed_by",
            "=",
            "'Ben",
            "Jones",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "package_option",
            "from",
            "tv_channel",
            "where",
            "id",
            "not",
            "in",
            "(",
            "select",
            "channel",
            "from",
            "cartoon",
            "where",
            "directed_by",
            "=",
            "value",
            ")"
        ],
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "question_toks": [
            "find",
            "the",
            "package",
            "option",
            "of",
            "the",
            "tv",
            "channel",
            "that",
            "do",
            "not",
            "have",
            "any",
            "cartoon",
            "directed",
            "by",
            "Ben",
            "Jones",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "tvshow",
        "id": 646,
        "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')",
        "query_toks": [
            "SELECT",
            "package_option",
            "FROM",
            "TV_Channel",
            "WHERE",
            "id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "channel",
            "FROM",
            "cartoon",
            "WHERE",
            "directed_by",
            "=",
            "'Ben",
            "Jones",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "package_option",
            "from",
            "tv_channel",
            "where",
            "id",
            "not",
            "in",
            "(",
            "select",
            "channel",
            "from",
            "cartoon",
            "where",
            "directed_by",
            "=",
            "value",
            ")"
        ],
        "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "question_toks": [
            "What",
            "are",
            "the",
            "package",
            "options",
            "of",
            "all",
            "tv",
            "channels",
            "that",
            "are",
            "not",
            "playing",
            "any",
            "cartoons",
            "directed",
            "by",
            "Ben",
            "Jones",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 647,
        "query": "SELECT count(*) FROM poker_player",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "poker_player"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "poker_player"
        ],
        "question": "How many poker players are there?",
        "question_toks": [
            "How",
            "many",
            "poker",
            "players",
            "are",
            "there",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 648,
        "query": "SELECT count(*) FROM poker_player",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "poker_player"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "poker_player"
        ],
        "question": "Count the number of poker players.",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "poker",
            "players",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 649,
        "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "query_toks": [
            "SELECT",
            "Earnings",
            "FROM",
            "poker_player",
            "ORDER",
            "BY",
            "Earnings",
            "DESC"
        ],
        "query_toks_no_value": [
            "select",
            "earnings",
            "from",
            "poker_player",
            "order",
            "by",
            "earnings",
            "desc"
        ],
        "question": "List the earnings of poker players in descending order.",
        "question_toks": [
            "List",
            "the",
            "earnings",
            "of",
            "poker",
            "players",
            "in",
            "descending",
            "order",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 650,
        "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC, Poker_Player_ID ASC",
        "query_toks": [
            "SELECT",
            "Earnings",
            "FROM",
            "poker_player",
            "ORDER",
            "BY",
            "Earnings",
            "DESC,",
            "Poker_Player_ID",
            "ASC"
        ],
        "query_toks_no_value": [
            "select",
            "earnings",
            "from",
            "poker_player",
            "order",
            "by",
            "earnings",
            "desc,",
            "poker_player_id",
            "asc"
        ],
        "question": "What are the earnings of poker players, ordered descending by value, and in case of a tie, sort by player id in ascending order?",
        "question_toks": [
            "What",
            "are",
            "the",
            "earnings",
            "of",
            "poker",
            "players",
            ",",
            "ordered",
            "descending",
            "by",
            "value",
            ",",
            "and",
            "in",
            "case",
            "of",
            "a",
            "tie",
            ",",
            "sort",
            "by",
            "player",
            "id",
            "in",
            "ascending",
            "order",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 651,
        "query": "SELECT Final_Table_Made , Best_Finish FROM poker_player",
        "query_toks": [
            "SELECT",
            "Final_Table_Made",
            ",",
            "Best_Finish",
            "FROM",
            "poker_player"
        ],
        "query_toks_no_value": [
            "select",
            "final_table_made",
            ",",
            "best_finish",
            "from",
            "poker_player"
        ],
        "question": "List the final tables made and the best finishes of poker players.",
        "question_toks": [
            "List",
            "the",
            "final",
            "tables",
            "made",
            "and",
            "the",
            "best",
            "finishes",
            "of",
            "poker",
            "players",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 652,
        "query": "SELECT Final_Table_Made , Best_Finish FROM poker_player",
        "query_toks": [
            "SELECT",
            "Final_Table_Made",
            ",",
            "Best_Finish",
            "FROM",
            "poker_player"
        ],
        "query_toks_no_value": [
            "select",
            "final_table_made",
            ",",
            "best_finish",
            "from",
            "poker_player"
        ],
        "question": "What are the final tables made and best finishes for all poker players?",
        "question_toks": [
            "What",
            "are",
            "the",
            "final",
            "tables",
            "made",
            "and",
            "best",
            "finishes",
            "for",
            "all",
            "poker",
            "players",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 653,
        "query": "SELECT avg(Earnings) FROM poker_player",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "Earnings",
            ")",
            "FROM",
            "poker_player"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "earnings",
            ")",
            "from",
            "poker_player"
        ],
        "question": "What is the average earnings of poker players?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "earnings",
            "of",
            "poker",
            "players",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 654,
        "query": "SELECT avg(Earnings) FROM poker_player",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "Earnings",
            ")",
            "FROM",
            "poker_player"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "earnings",
            ")",
            "from",
            "poker_player"
        ],
        "question": "Return the average earnings across all poker players.",
        "question_toks": [
            "Return",
            "the",
            "average",
            "earnings",
            "across",
            "all",
            "poker",
            "players",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 655,
        "query": "SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)",
        "query_toks": [
            "SELECT",
            "Money_Rank",
            "FROM",
            "poker_player",
            "WHERE",
            "Earnings",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "Earnings",
            ")",
            "FROM",
            "poker_player",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "money_rank",
            "from",
            "poker_player",
            "where",
            "earnings",
            "=",
            "(",
            "select",
            "max",
            "(",
            "earnings",
            ")",
            "from",
            "poker_player",
            ")"
        ],
        "question": "What is the money rank of all poker players with the highest earnings?",
        "question_toks": [
            "What",
            "is",
            "the",
            "money",
            "rank",
            "of",
            "all",
            "poker",
            "players",
            "with",
            "the",
            "highest",
            "earnings",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 656,
        "query": "SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)",
        "query_toks": [
            "SELECT",
            "Money_Rank",
            "FROM",
            "poker_player",
            "WHERE",
            "Earnings",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "Earnings",
            ")",
            "FROM",
            "poker_player",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "money_rank",
            "from",
            "poker_player",
            "where",
            "earnings",
            "=",
            "(",
            "select",
            "max",
            "(",
            "earnings",
            ")",
            "from",
            "poker_player",
            ")"
        ],
        "question": "Return the money rank(s) of the player(s) with the greatest earnings.",
        "question_toks": [
            "Return",
            "the",
            "money",
            "rank",
            "(",
            "s",
            ")",
            "of",
            "the",
            "player",
            "(",
            "s",
            ")",
            "with",
            "the",
            "greatest",
            "earnings",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 657,
        "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "Final_Table_Made",
            ")",
            "FROM",
            "poker_player",
            "WHERE",
            "Earnings",
            "<",
            "200000"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "final_table_made",
            ")",
            "from",
            "poker_player",
            "where",
            "earnings",
            "<",
            "value"
        ],
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "question_toks": [
            "What",
            "is",
            "the",
            "maximum",
            "number",
            "of",
            "final",
            "tables",
            "made",
            "among",
            "poker",
            "players",
            "with",
            "earnings",
            "less",
            "than",
            "200000",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 658,
        "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "Final_Table_Made",
            ")",
            "FROM",
            "poker_player",
            "WHERE",
            "Earnings",
            "<",
            "200000"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "final_table_made",
            ")",
            "from",
            "poker_player",
            "where",
            "earnings",
            "<",
            "value"
        ],
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "question_toks": [
            "Return",
            "the",
            "maximum",
            "final",
            "tables",
            "made",
            "across",
            "all",
            "poker",
            "players",
            "who",
            "have",
            "earnings",
            "below",
            "200000",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 659,
        "query": "SELECT name FROM people WHERE exists (SELECT 1 FROM poker_player WHERE poker_player.people_id = people.people_id)",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "people",
            "WHERE",
            "exists",
            "(",
            "SELECT",
            "1",
            "FROM",
            "poker_player",
            "WHERE",
            "poker_player.people_id",
            "=",
            "people.people_id",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "people",
            "where",
            "exists",
            "(",
            "select",
            "value",
            "from",
            "poker_player",
            "where",
            "poker_player.people_id",
            "=",
            "people.people_id",
            ")"
        ],
        "question": "What are the names of poker players?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "poker",
            "players",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 660,
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "Name",
            "FROM",
            "people",
            "AS",
            "T1",
            "JOIN",
            "poker_player",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "People_ID",
            "=",
            "T2",
            ".",
            "People_ID"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id"
        ],
        "question": "Return the names of all the poker players.",
        "question_toks": [
            "Return",
            "the",
            "names",
            "of",
            "all",
            "the",
            "poker",
            "players",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 661,
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "Name",
            "FROM",
            "people",
            "AS",
            "T1",
            "JOIN",
            "poker_player",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "People_ID",
            "=",
            "T2",
            ".",
            "People_ID",
            "WHERE",
            "T2",
            ".",
            "Earnings",
            ">",
            "300000"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "where",
            "t2",
            ".",
            "earnings",
            ">",
            "value"
        ],
        "question": "What are the names of poker players whose earnings is higher than 300000?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "poker",
            "players",
            "whose",
            "earnings",
            "is",
            "higher",
            "than",
            "300000",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 662,
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "Name",
            "FROM",
            "people",
            "AS",
            "T1",
            "JOIN",
            "poker_player",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "People_ID",
            "=",
            "T2",
            ".",
            "People_ID",
            "WHERE",
            "T2",
            ".",
            "Earnings",
            ">",
            "300000"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "where",
            "t2",
            ".",
            "earnings",
            ">",
            "value"
        ],
        "question": "Give the names of poker players who have earnings above 300000.",
        "question_toks": [
            "Give",
            "the",
            "names",
            "of",
            "poker",
            "players",
            "who",
            "have",
            "earnings",
            "above",
            "300000",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 663,
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made ASC, T2.Earnings DESC, T2.Poker_Player_ID ASC",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "Name",
            "FROM",
            "people",
            "AS",
            "T1",
            "JOIN",
            "poker_player",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "People_ID",
            "=",
            "T2",
            ".",
            "People_ID",
            "ORDER",
            "BY",
            "T2",
            ".",
            "Final_Table_Made",
            "ASC,",
            "T2",
            ".",
            "Earnings",
            "DESC,",
            "T2",
            ".",
            "Poker_Player_ID",
            "ASC"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "order",
            "by",
            "t2",
            ".",
            "final_table_made",
            "asc,",
            "t2",
            ".",
            "earnings",
            "desc,",
            "t2",
            ".",
            "poker_player_id",
            "asc"
        ],
        "question": "List the names of poker players ordered by the final tables made in ascending order, and in case of a tie, sort by earnings in descending order and then ascending order of poker player id.",
        "question_toks": [
            "List",
            "the",
            "names",
            "of",
            "poker",
            "players",
            "ordered",
            "by",
            "the",
            "final",
            "tables",
            "made",
            "in",
            "ascending",
            "order",
            ",",
            "and",
            "in",
            "case",
            "of",
            "a",
            "tie",
            ",",
            "sort",
            "by",
            "earnings",
            "in",
            "descending",
            "order",
            "and",
            "then",
            "ascending",
            "order",
            "of",
            "poker",
            "player",
            "id",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 664,
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made ASC, T1.Name ASC, T2.Poker_Player_ID ASC",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "Name",
            "FROM",
            "people",
            "AS",
            "T1",
            "JOIN",
            "poker_player",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "People_ID",
            "=",
            "T2",
            ".",
            "People_ID",
            "ORDER",
            "BY",
            "T2",
            ".",
            "Final_Table_Made",
            "ASC,",
            "T1",
            ".",
            "Name",
            "ASC,",
            "T2",
            ".",
            "Poker_Player_ID",
            "ASC"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "order",
            "by",
            "t2",
            ".",
            "final_table_made",
            "asc,",
            "t1",
            ".",
            "name",
            "asc,",
            "t2",
            ".",
            "poker_player_id",
            "asc"
        ],
        "question": "What are the names of poker players, ordered ascending by the number of final tables they have made, and in case of a tie, sort by ascending name and then by ascending Poker Player ID?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "poker",
            "players",
            ",",
            "ordered",
            "ascending",
            "by",
            "the",
            "number",
            "of",
            "final",
            "tables",
            "they",
            "have",
            "made",
            ",",
            "and",
            "in",
            "case",
            "of",
            "a",
            "tie",
            ",",
            "sort",
            "by",
            "ascending",
            "name",
            "and",
            "then",
            "by",
            "ascending",
            "Poker",
            "Player",
            "ID",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 665,
        "query": "SELECT birth_date FROM people WHERE people_id IN (SELECT people_id FROM poker_player WHERE earnings = (SELECT MIN(earnings) FROM poker_player))",
        "query_toks": [
            "SELECT",
            "birth_date",
            "FROM",
            "people",
            "WHERE",
            "people_id",
            "IN",
            "(",
            "SELECT",
            "people_id",
            "FROM",
            "poker_player",
            "WHERE",
            "earnings",
            "=",
            "(",
            "SELECT",
            "MIN",
            "(",
            "earnings",
            ")",
            "FROM",
            "poker_player",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "birth_date",
            "from",
            "people",
            "where",
            "people_id",
            "in",
            "(",
            "select",
            "people_id",
            "from",
            "poker_player",
            "where",
            "earnings",
            "=",
            "(",
            "select",
            "min",
            "(",
            "earnings",
            ")",
            "from",
            "poker_player",
            ")",
            ")"
        ],
        "question": "Return the birth date of all poker players with the lowest earnings.",
        "question_toks": [
            "Return",
            "the",
            "birth",
            "date",
            "of",
            "all",
            "poker",
            "players",
            "with",
            "the",
            "lowest",
            "earnings",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 666,
        "query": "SELECT birth_date FROM people WHERE people_id IN (SELECT people_id FROM poker_player WHERE earnings = (SELECT MIN(earnings) FROM poker_player))",
        "query_toks": [
            "SELECT",
            "birth_date",
            "FROM",
            "people",
            "WHERE",
            "people_id",
            "IN",
            "(",
            "SELECT",
            "people_id",
            "FROM",
            "poker_player",
            "WHERE",
            "earnings",
            "=",
            "(",
            "SELECT",
            "MIN",
            "(",
            "earnings",
            ")",
            "FROM",
            "poker_player",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "birth_date",
            "from",
            "people",
            "where",
            "people_id",
            "in",
            "(",
            "select",
            "people_id",
            "from",
            "poker_player",
            "where",
            "earnings",
            "=",
            "(",
            "select",
            "min",
            "(",
            "earnings",
            ")",
            "from",
            "poker_player",
            ")",
            ")"
        ],
        "question": "Return the birth date of all poker players with the lowest earnings.",
        "question_toks": [
            "Return",
            "the",
            "birth",
            "date",
            "of",
            "all",
            "poker",
            "players",
            "with",
            "the",
            "lowest",
            "earnings",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 667,
        "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height = (SELECT MAX(Height) FROM people AS T3 JOIN poker_player AS T4 ON T3.People_ID = T4.People_ID)",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "Money_Rank",
            "FROM",
            "people",
            "AS",
            "T1",
            "JOIN",
            "poker_player",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "People_ID",
            "=",
            "T2",
            ".",
            "People_ID",
            "WHERE",
            "T1",
            ".",
            "Height",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "Height",
            ")",
            "FROM",
            "people",
            "AS",
            "T3",
            "JOIN",
            "poker_player",
            "AS",
            "T4",
            "ON",
            "T3",
            ".",
            "People_ID",
            "=",
            "T4",
            ".",
            "People_ID",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "money_rank",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "where",
            "t1",
            ".",
            "height",
            "=",
            "(",
            "select",
            "max",
            "(",
            "height",
            ")",
            "from",
            "people",
            "as",
            "t3",
            "join",
            "poker_player",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "people_id",
            "=",
            "t4",
            ".",
            "people_id",
            ")"
        ],
        "question": "What is the money rank of all tallest poker players?",
        "question_toks": [
            "What",
            "is",
            "the",
            "money",
            "rank",
            "of",
            "all",
            "tallest",
            "poker",
            "players",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 668,
        "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height = (SELECT MAX(Height) FROM people AS T3 JOIN poker_player AS T4 ON T3.People_ID = T4.People_ID)",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "Money_Rank",
            "FROM",
            "people",
            "AS",
            "T1",
            "JOIN",
            "poker_player",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "People_ID",
            "=",
            "T2",
            ".",
            "People_ID",
            "WHERE",
            "T1",
            ".",
            "Height",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "Height",
            ")",
            "FROM",
            "people",
            "AS",
            "T3",
            "JOIN",
            "poker_player",
            "AS",
            "T4",
            "ON",
            "T3",
            ".",
            "People_ID",
            "=",
            "T4",
            ".",
            "People_ID",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "money_rank",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "where",
            "t1",
            ".",
            "height",
            "=",
            "(",
            "select",
            "max",
            "(",
            "height",
            ")",
            "from",
            "people",
            "as",
            "t3",
            "join",
            "poker_player",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "people_id",
            "=",
            "t4",
            ".",
            "people_id",
            ")"
        ],
        "question": "Return the money rank(s) of the poker player(s) with the greatest height.",
        "question_toks": [
            "Return",
            "the",
            "money",
            "rank",
            "(",
            "s",
            ")",
            "of",
            "the",
            "poker",
            "player",
            "(",
            "s",
            ")",
            "with",
            "the",
            "greatest",
            "height",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 669,
        "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "T2",
            ".",
            "Earnings",
            ")",
            "FROM",
            "people",
            "AS",
            "T1",
            "JOIN",
            "poker_player",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "People_ID",
            "=",
            "T2",
            ".",
            "People_ID",
            "WHERE",
            "T1",
            ".",
            "Height",
            ">",
            "200"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "t2",
            ".",
            "earnings",
            ")",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "where",
            "t1",
            ".",
            "height",
            ">",
            "value"
        ],
        "question": "What is the average earnings of poker players with height higher than 200?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "earnings",
            "of",
            "poker",
            "players",
            "with",
            "height",
            "higher",
            "than",
            "200",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 670,
        "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "T2",
            ".",
            "Earnings",
            ")",
            "FROM",
            "people",
            "AS",
            "T1",
            "JOIN",
            "poker_player",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "People_ID",
            "=",
            "T2",
            ".",
            "People_ID",
            "WHERE",
            "T1",
            ".",
            "Height",
            ">",
            "200"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "t2",
            ".",
            "earnings",
            ")",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "where",
            "t1",
            ".",
            "height",
            ">",
            "value"
        ],
        "question": "Give average earnings of poker players who are taller than 200.",
        "question_toks": [
            "Give",
            "average",
            "earnings",
            "of",
            "poker",
            "players",
            "who",
            "are",
            "taller",
            "than",
            "200",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 671,
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC, T1.Name ASC",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "Name",
            "FROM",
            "people",
            "AS",
            "T1",
            "JOIN",
            "poker_player",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "People_ID",
            "=",
            "T2",
            ".",
            "People_ID",
            "ORDER",
            "BY",
            "T2",
            ".",
            "Earnings",
            "DESC,",
            "T1",
            ".",
            "Name",
            "ASC"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "order",
            "by",
            "t2",
            ".",
            "earnings",
            "desc,",
            "t1",
            ".",
            "name",
            "asc"
        ],
        "question": "What are the names of poker players in descending order of earnings, and in case of a tie, sort by name alphabetically?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "poker",
            "players",
            "in",
            "descending",
            "order",
            "of",
            "earnings",
            ",",
            "and",
            "in",
            "case",
            "of",
            "a",
            "tie",
            ",",
            "sort",
            "by",
            "name",
            "alphabetically",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 672,
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC, T1.Name ASC, T2.Poker_Player_ID ASC",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "Name",
            "FROM",
            "people",
            "AS",
            "T1",
            "JOIN",
            "poker_player",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "People_ID",
            "=",
            "T2",
            ".",
            "People_ID",
            "ORDER",
            "BY",
            "T2",
            ".",
            "Earnings",
            "DESC,",
            "T1",
            ".",
            "Name",
            "ASC,",
            "T2",
            ".",
            "Poker_Player_ID",
            "ASC"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "order",
            "by",
            "t2",
            ".",
            "earnings",
            "desc,",
            "t1",
            ".",
            "name",
            "asc,",
            "t2",
            ".",
            "poker_player_id",
            "asc"
        ],
        "question": "Return the names of poker players sorted by their earnings descending, and in case of a tie, sort alphabetically by name and then by Poker Player ID in ascending order.",
        "question_toks": [
            "Return",
            "the",
            "names",
            "of",
            "poker",
            "players",
            "sorted",
            "by",
            "their",
            "earnings",
            "descending",
            ",",
            "and",
            "in",
            "case",
            "of",
            "a",
            "tie",
            ",",
            "sort",
            "alphabetically",
            "by",
            "name",
            "and",
            "then",
            "by",
            "Poker",
            "Player",
            "ID",
            "in",
            "ascending",
            "order",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 673,
        "query": "SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "query_toks": [
            "SELECT",
            "Nationality",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Nationality"
        ],
        "query_toks_no_value": [
            "select",
            "nationality",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "people",
            "group",
            "by",
            "nationality"
        ],
        "question": "What are different nationalities of people and the corresponding number of people from each nation?",
        "question_toks": [
            "What",
            "are",
            "different",
            "nationalities",
            "of",
            "people",
            "and",
            "the",
            "corresponding",
            "number",
            "of",
            "people",
            "from",
            "each",
            "nation",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 674,
        "query": "SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "query_toks": [
            "SELECT",
            "Nationality",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Nationality"
        ],
        "query_toks_no_value": [
            "select",
            "nationality",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "people",
            "group",
            "by",
            "nationality"
        ],
        "question": "How many people are there of each nationality?",
        "question_toks": [
            "How",
            "many",
            "people",
            "are",
            "there",
            "of",
            "each",
            "nationality",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 675,
        "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) = (SELECT MAX(ncount) FROM (SELECT COUNT(*) as ncount FROM people GROUP BY Nationality) as counts)",
        "query_toks": [
            "SELECT",
            "Nationality",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Nationality",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "ncount",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "as",
            "ncount",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Nationality",
            ")",
            "as",
            "counts",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "nationality",
            "from",
            "people",
            "group",
            "by",
            "nationality",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "ncount",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "ncount",
            "from",
            "people",
            "group",
            "by",
            "nationality",
            ")",
            "as",
            "counts",
            ")"
        ],
        "question": "What are the nationalities with the highest frequency among all people?",
        "question_toks": [
            "What",
            "are",
            "the",
            "nationalities",
            "with",
            "the",
            "highest",
            "frequency",
            "among",
            "all",
            "people",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 676,
        "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) = (SELECT MAX(ncount) FROM (SELECT COUNT(*) as ncount FROM people GROUP BY Nationality) as counts)",
        "query_toks": [
            "SELECT",
            "Nationality",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Nationality",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "ncount",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "as",
            "ncount",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Nationality",
            ")",
            "as",
            "counts",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "nationality",
            "from",
            "people",
            "group",
            "by",
            "nationality",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "ncount",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "ncount",
            "from",
            "people",
            "group",
            "by",
            "nationality",
            ")",
            "as",
            "counts",
            ")"
        ],
        "question": "Give the nationality that is most common across all people. In case of a tie, list all such nationalities.",
        "question_toks": [
            "Give",
            "the",
            "nationality",
            "that",
            "is",
            "most",
            "common",
            "across",
            "all",
            "people",
            ".",
            "In",
            "case",
            "of",
            "a",
            "tie",
            ",",
            "list",
            "all",
            "such",
            "nationalities",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 677,
        "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
        "query_toks": [
            "SELECT",
            "Nationality",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Nationality",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "query_toks_no_value": [
            "select",
            "nationality",
            "from",
            "people",
            "group",
            "by",
            "nationality",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value"
        ],
        "question": "What are the nationalities that are shared by at least two people?",
        "question_toks": [
            "What",
            "are",
            "the",
            "nationalities",
            "that",
            "are",
            "shared",
            "by",
            "at",
            "least",
            "two",
            "people",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 678,
        "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
        "query_toks": [
            "SELECT",
            "Nationality",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Nationality",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "query_toks_no_value": [
            "select",
            "nationality",
            "from",
            "people",
            "group",
            "by",
            "nationality",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value"
        ],
        "question": "Return the nationalities for which there are two or more people.",
        "question_toks": [
            "Return",
            "the",
            "nationalities",
            "for",
            "which",
            "there",
            "are",
            "two",
            "or",
            "more",
            "people",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 679,
        "query": "SELECT Name, Birth_Date FROM people ORDER BY Name ASC, People_ID ASC",
        "query_toks": [
            "SELECT",
            "Name,",
            "Birth_Date",
            "FROM",
            "people",
            "ORDER",
            "BY",
            "Name",
            "ASC,",
            "People_ID",
            "ASC"
        ],
        "query_toks_no_value": [
            "select",
            "name,",
            "birth_date",
            "from",
            "people",
            "order",
            "by",
            "name",
            "asc,",
            "people_id",
            "asc"
        ],
        "question": "List the names and birth dates of people in ascending alphabetical order of name and ascending order of People_ID if names are the same.",
        "question_toks": [
            "List",
            "the",
            "names",
            "and",
            "birth",
            "dates",
            "of",
            "people",
            "in",
            "ascending",
            "alphabetical",
            "order",
            "of",
            "name",
            "and",
            "ascending",
            "order",
            "of",
            "People_ID",
            "if",
            "names",
            "are",
            "the",
            "same",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 680,
        "query": "SELECT Name, Birth_Date FROM people ORDER BY Name ASC, People_ID ASC",
        "query_toks": [
            "SELECT",
            "Name,",
            "Birth_Date",
            "FROM",
            "people",
            "ORDER",
            "BY",
            "Name",
            "ASC,",
            "People_ID",
            "ASC"
        ],
        "query_toks_no_value": [
            "select",
            "name,",
            "birth_date",
            "from",
            "people",
            "order",
            "by",
            "name",
            "asc,",
            "people_id",
            "asc"
        ],
        "question": "What are the names and birth dates of people, ordered by their names in alphabetical order, and in case of a tie, sort by their people id in ascending order?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "and",
            "birth",
            "dates",
            "of",
            "people",
            ",",
            "ordered",
            "by",
            "their",
            "names",
            "in",
            "alphabetical",
            "order",
            ",",
            "and",
            "in",
            "case",
            "of",
            "a",
            "tie",
            ",",
            "sort",
            "by",
            "their",
            "people",
            "id",
            "in",
            "ascending",
            "order",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 681,
        "query": "SELECT Name FROM people WHERE Nationality != 'Russia'",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "people",
            "WHERE",
            "Nationality",
            "!",
            "=",
            "'Russia",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "people",
            "where",
            "nationality",
            "!",
            "=",
            "value"
        ],
        "question": "Show names of people whose nationality is not 'Russia'.",
        "question_toks": [
            "Show",
            "names",
            "of",
            "people",
            "whose",
            "nationality",
            "is",
            "not",
            "``",
            "Russia",
            "''",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 682,
        "query": "SELECT Name FROM people WHERE Nationality != 'Russia'",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "people",
            "WHERE",
            "Nationality",
            "!",
            "=",
            "'Russia",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "people",
            "where",
            "nationality",
            "!",
            "=",
            "value"
        ],
        "question": "What are the names of people who are not from Russia?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "people",
            "who",
            "are",
            "not",
            "from",
            "Russia",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 683,
        "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "people",
            "WHERE",
            "People_ID",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "People_ID",
            "FROM",
            "poker_player",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "people",
            "where",
            "people_id",
            "not",
            "in",
            "(",
            "select",
            "people_id",
            "from",
            "poker_player",
            ")"
        ],
        "question": "List the names of people that are not poker players.",
        "question_toks": [
            "List",
            "the",
            "names",
            "of",
            "people",
            "that",
            "are",
            "not",
            "poker",
            "players",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 684,
        "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "people",
            "WHERE",
            "People_ID",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "People_ID",
            "FROM",
            "poker_player",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "people",
            "where",
            "people_id",
            "not",
            "in",
            "(",
            "select",
            "people_id",
            "from",
            "poker_player",
            ")"
        ],
        "question": "What are the names of people who do not play poker?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "people",
            "who",
            "do",
            "not",
            "play",
            "poker",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 685,
        "query": "SELECT count(DISTINCT Nationality) FROM people",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "Nationality",
            ")",
            "FROM",
            "people"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "nationality",
            ")",
            "from",
            "people"
        ],
        "question": "How many distinct nationalities are there?",
        "question_toks": [
            "How",
            "many",
            "distinct",
            "nationalities",
            "are",
            "there",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "poker_player",
        "id": 686,
        "query": "SELECT count(DISTINCT Nationality) FROM people",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "Nationality",
            ")",
            "FROM",
            "people"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "nationality",
            ")",
            "from",
            "people"
        ],
        "question": "Count the number of different nationalities.",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "different",
            "nationalities",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "voter_1",
        "id": 687,
        "query": "SELECT count(*) FROM area_code_state",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "area_code_state"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "area_code_state"
        ],
        "question": "How many states are there?",
        "question_toks": [
            "How",
            "many",
            "states",
            "are",
            "there",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "voter_1",
        "id": 688,
        "query": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
        "query_toks": [
            "SELECT",
            "contestant_number",
            ",",
            "contestant_name",
            "FROM",
            "contestants",
            "ORDER",
            "BY",
            "contestant_name",
            "DESC"
        ],
        "query_toks_no_value": [
            "select",
            "contestant_number",
            ",",
            "contestant_name",
            "from",
            "contestants",
            "order",
            "by",
            "contestant_name",
            "desc"
        ],
        "question": "List the contestant numbers and names, ordered by contestant name descending.",
        "question_toks": [
            "List",
            "the",
            "contestant",
            "numbers",
            "and",
            "names",
            ",",
            "ordered",
            "by",
            "contestant",
            "name",
            "descending",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "voter_1",
        "id": 689,
        "query": "SELECT vote_id , phone_number , state FROM votes",
        "query_toks": [
            "SELECT",
            "vote_id",
            ",",
            "phone_number",
            ",",
            "state",
            "FROM",
            "votes"
        ],
        "query_toks_no_value": [
            "select",
            "vote_id",
            ",",
            "phone_number",
            ",",
            "state",
            "from",
            "votes"
        ],
        "question": "List the vote ids, phone numbers and states of all votes.",
        "question_toks": [
            "List",
            "the",
            "vote",
            "ids",
            ",",
            "phone",
            "numbers",
            "and",
            "states",
            "of",
            "all",
            "votes",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "voter_1",
        "id": 690,
        "query": "SELECT max(area_code) , min(area_code) FROM area_code_state",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "area_code",
            ")",
            ",",
            "min",
            "(",
            "area_code",
            ")",
            "FROM",
            "area_code_state"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "area_code",
            ")",
            ",",
            "min",
            "(",
            "area_code",
            ")",
            "from",
            "area_code_state"
        ],
        "question": "What are the maximum and minimum values of area codes?",
        "question_toks": [
            "What",
            "are",
            "the",
            "maximum",
            "and",
            "minimum",
            "values",
            "of",
            "area",
            "codes",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "voter_1",
        "id": 691,
        "query": "SELECT max(created) FROM votes WHERE state  =  'CA'",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "created",
            ")",
            "FROM",
            "votes",
            "WHERE",
            "state",
            "=",
            "'CA",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "created",
            ")",
            "from",
            "votes",
            "where",
            "state",
            "=",
            "value"
        ],
        "question": "What is last date created of votes from the state 'CA'?",
        "question_toks": [
            "What",
            "is",
            "last",
            "date",
            "created",
            "of",
            "votes",
            "from",
            "the",
            "state",
            "'CA",
            "'",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "voter_1",
        "id": 692,
        "query": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
        "query_toks": [
            "SELECT",
            "contestant_name",
            "FROM",
            "contestants",
            "WHERE",
            "contestant_name",
            "!",
            "=",
            "'Jessie",
            "Alloway",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "contestant_name",
            "from",
            "contestants",
            "where",
            "contestant_name",
            "!",
            "=",
            "value"
        ],
        "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "the",
            "contestants",
            "whose",
            "names",
            "are",
            "not",
            "'Jessie",
            "Alloway",
            "'"
        ],
        "sql": ""
    },
    {
        "db_id": "voter_1",
        "id": 693,
        "query": "SELECT DISTINCT state , created FROM votes",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "state",
            ",",
            "created",
            "FROM",
            "votes"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "state",
            ",",
            "created",
            "from",
            "votes"
        ],
        "question": "What are the distinct states and create time of all votes?",
        "question_toks": [
            "What",
            "are",
            "the",
            "distinct",
            "states",
            "and",
            "create",
            "time",
            "of",
            "all",
            "votes",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "voter_1",
        "id": 694,
        "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING count(*) >= 2",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "contestant_number",
            ",",
            "T1",
            ".",
            "contestant_name",
            "FROM",
            "contestants",
            "AS",
            "T1",
            "JOIN",
            "votes",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "contestant_number",
            "=",
            "T2",
            ".",
            "contestant_number",
            "GROUP",
            "BY",
            "T1",
            ".",
            "contestant_number",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "contestant_number",
            ",",
            "t1",
            ".",
            "contestant_name",
            "from",
            "contestants",
            "as",
            "t1",
            "join",
            "votes",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contestant_number",
            "=",
            "t2",
            ".",
            "contestant_number",
            "group",
            "by",
            "t1",
            ".",
            "contestant_number",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value"
        ],
        "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "question_toks": [
            "What",
            "are",
            "the",
            "contestant",
            "numbers",
            "and",
            "names",
            "of",
            "the",
            "contestants",
            "who",
            "had",
            "at",
            "least",
            "two",
            "votes",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "voter_1",
        "id": 695,
        "query": "WITH VoteCounts AS (SELECT contestant_number, COUNT(*) AS vote_count FROM votes GROUP BY contestant_number), MinVotes AS (SELECT MIN(vote_count) AS min_votes FROM VoteCounts) SELECT C.contestant_number, C.contestant_name FROM CONTESTANTS C JOIN VoteCounts VC ON C.contestant_number = VC.contestant_number JOIN MinVotes MV ON VC.vote_count = MV.min_votes",
        "query_toks": [
            "WITH",
            "VoteCounts",
            "AS",
            "(",
            "SELECT",
            "contestant_number,",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "vote_count",
            "FROM",
            "votes",
            "GROUP",
            "BY",
            "contestant_number",
            ")",
            ",",
            "MinVotes",
            "AS",
            "(",
            "SELECT",
            "MIN",
            "(",
            "vote_count",
            ")",
            "AS",
            "min_votes",
            "FROM",
            "VoteCounts",
            ")",
            "SELECT",
            "C.contestant_number,",
            "C.contestant_name",
            "FROM",
            "CONTESTANTS",
            "C",
            "JOIN",
            "VoteCounts",
            "VC",
            "ON",
            "C.contestant_number",
            "=",
            "VC.contestant_number",
            "JOIN",
            "MinVotes",
            "MV",
            "ON",
            "VC.vote_count",
            "=",
            "MV.min_votes"
        ],
        "query_toks_no_value": [
            "with",
            "votecounts",
            "as",
            "(",
            "select",
            "contestant_number,",
            "count",
            "(",
            "*",
            ")",
            "as",
            "vote_count",
            "from",
            "votes",
            "group",
            "by",
            "contestant_number",
            ")",
            ",",
            "minvotes",
            "as",
            "(",
            "select",
            "min",
            "(",
            "vote_count",
            ")",
            "as",
            "min_votes",
            "from",
            "votecounts",
            ")",
            "select",
            "c.contestant_number,",
            "c.contestant_name",
            "from",
            "contestants",
            "c",
            "join",
            "votecounts",
            "vc",
            "on",
            "c.contestant_number",
            "=",
            "vc.contestant_number",
            "join",
            "minvotes",
            "mv",
            "on",
            "vc.vote_count",
            "=",
            "mv.min_votes"
        ],
        "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes? If there is a tie, return all of them.",
        "question_toks": [
            "Of",
            "all",
            "the",
            "contestants",
            "who",
            "got",
            "voted",
            ",",
            "what",
            "is",
            "the",
            "contestant",
            "number",
            "and",
            "name",
            "of",
            "the",
            "contestant",
            "who",
            "got",
            "least",
            "votes",
            "?",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "return",
            "all",
            "of",
            "them",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "voter_1",
        "id": 696,
        "query": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "votes",
            "WHERE",
            "state",
            "=",
            "'NY",
            "'",
            "OR",
            "state",
            "=",
            "'CA",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "votes",
            "where",
            "state",
            "=",
            "value",
            "or",
            "state",
            "=",
            "value"
        ],
        "question": "What are the number of votes from state 'NY' or 'CA'?",
        "question_toks": [
            "What",
            "are",
            "the",
            "number",
            "of",
            "votes",
            "from",
            "state",
            "'NY",
            "'",
            "or",
            "'CA",
            "'",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "voter_1",
        "id": 697,
        "query": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "contestants",
            "WHERE",
            "contestant_number",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "contestant_number",
            "FROM",
            "votes",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "contestants",
            "where",
            "contestant_number",
            "not",
            "in",
            "(",
            "select",
            "contestant_number",
            "from",
            "votes",
            ")"
        ],
        "question": "How many contestants did not get voted?",
        "question_toks": [
            "How",
            "many",
            "contestants",
            "did",
            "not",
            "get",
            "voted",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "voter_1",
        "id": 698,
        "query": "SELECT T1.area_code FROM area_code_state AS T1 JOIN (SELECT state, COUNT(*) as votes_count FROM votes GROUP BY state) AS T2 ON T1.state = T2.state WHERE T2.votes_count = (SELECT MAX(votes_count) FROM (SELECT state, COUNT(*) AS votes_count FROM votes GROUP BY state) AS V2)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "area_code",
            "FROM",
            "area_code_state",
            "AS",
            "T1",
            "JOIN",
            "(",
            "SELECT",
            "state,",
            "COUNT",
            "(",
            "*",
            ")",
            "as",
            "votes_count",
            "FROM",
            "votes",
            "GROUP",
            "BY",
            "state",
            ")",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "state",
            "=",
            "T2",
            ".",
            "state",
            "WHERE",
            "T2",
            ".",
            "votes_count",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "votes_count",
            ")",
            "FROM",
            "(",
            "SELECT",
            "state,",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "votes_count",
            "FROM",
            "votes",
            "GROUP",
            "BY",
            "state",
            ")",
            "AS",
            "V2",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "area_code",
            "from",
            "area_code_state",
            "as",
            "t1",
            "join",
            "(",
            "select",
            "state,",
            "count",
            "(",
            "*",
            ")",
            "as",
            "votes_count",
            "from",
            "votes",
            "group",
            "by",
            "state",
            ")",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "state",
            "=",
            "t2",
            ".",
            "state",
            "where",
            "t2",
            ".",
            "votes_count",
            "=",
            "(",
            "select",
            "max",
            "(",
            "votes_count",
            ")",
            "from",
            "(",
            "select",
            "state,",
            "count",
            "(",
            "*",
            ")",
            "as",
            "votes_count",
            "from",
            "votes",
            "group",
            "by",
            "state",
            ")",
            "as",
            "v2",
            ")"
        ],
        "question": "What are the area codes associated with all states that are tied for the most votes?",
        "question_toks": [
            "What",
            "are",
            "the",
            "area",
            "codes",
            "associated",
            "with",
            "all",
            "states",
            "that",
            "are",
            "tied",
            "for",
            "the",
            "most",
            "votes",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "voter_1",
        "id": 699,
        "query": "SELECT T2.created , T2.state , T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number WHERE T1.contestant_name = 'Tabatha Gehling'",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "created",
            ",",
            "T2",
            ".",
            "state",
            ",",
            "T2",
            ".",
            "phone_number",
            "FROM",
            "contestants",
            "AS",
            "T1",
            "JOIN",
            "votes",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "contestant_number",
            "=",
            "T2",
            ".",
            "contestant_number",
            "WHERE",
            "T1",
            ".",
            "contestant_name",
            "=",
            "'Tabatha",
            "Gehling",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "created",
            ",",
            "t2",
            ".",
            "state",
            ",",
            "t2",
            ".",
            "phone_number",
            "from",
            "contestants",
            "as",
            "t1",
            "join",
            "votes",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contestant_number",
            "=",
            "t2",
            ".",
            "contestant_number",
            "where",
            "t1",
            ".",
            "contestant_name",
            "=",
            "value"
        ],
        "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "question_toks": [
            "What",
            "are",
            "the",
            "create",
            "dates",
            ",",
            "states",
            ",",
            "and",
            "phone",
            "numbers",
            "of",
            "the",
            "votes",
            "that",
            "were",
            "for",
            "the",
            "contestant",
            "named",
            "'Tabatha",
            "Gehling",
            "'",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "voter_1",
        "id": 700,
        "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Kelly Clauss'",
        "query_toks": [
            "SELECT",
            "T3",
            ".",
            "area_code",
            "FROM",
            "contestants",
            "AS",
            "T1",
            "JOIN",
            "votes",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "contestant_number",
            "=",
            "T2",
            ".",
            "contestant_number",
            "JOIN",
            "area_code_state",
            "AS",
            "T3",
            "ON",
            "T2",
            ".",
            "state",
            "=",
            "T3",
            ".",
            "state",
            "WHERE",
            "T1",
            ".",
            "contestant_name",
            "=",
            "'Tabatha",
            "Gehling",
            "'",
            "INTERSECT",
            "SELECT",
            "T3",
            ".",
            "area_code",
            "FROM",
            "contestants",
            "AS",
            "T1",
            "JOIN",
            "votes",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "contestant_number",
            "=",
            "T2",
            ".",
            "contestant_number",
            "JOIN",
            "area_code_state",
            "AS",
            "T3",
            "ON",
            "T2",
            ".",
            "state",
            "=",
            "T3",
            ".",
            "state",
            "WHERE",
            "T1",
            ".",
            "contestant_name",
            "=",
            "'Kelly",
            "Clauss",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "t3",
            ".",
            "area_code",
            "from",
            "contestants",
            "as",
            "t1",
            "join",
            "votes",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contestant_number",
            "=",
            "t2",
            ".",
            "contestant_number",
            "join",
            "area_code_state",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "state",
            "=",
            "t3",
            ".",
            "state",
            "where",
            "t1",
            ".",
            "contestant_name",
            "=",
            "value",
            "intersect",
            "select",
            "t3",
            ".",
            "area_code",
            "from",
            "contestants",
            "as",
            "t1",
            "join",
            "votes",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contestant_number",
            "=",
            "t2",
            ".",
            "contestant_number",
            "join",
            "area_code_state",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "state",
            "=",
            "t3",
            ".",
            "state",
            "where",
            "t1",
            ".",
            "contestant_name",
            "=",
            "value"
        ],
        "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "question_toks": [
            "List",
            "the",
            "area",
            "codes",
            "in",
            "which",
            "voters",
            "voted",
            "both",
            "for",
            "the",
            "contestant",
            "'Tabatha",
            "Gehling",
            "'",
            "and",
            "the",
            "contestant",
            "'Kelly",
            "Clauss",
            "'",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "voter_1",
        "id": 701,
        "query": "select contestant_name from contestants where contestant_name like '%al%'",
        "query_toks": [
            "select",
            "contestant_name",
            "from",
            "contestants",
            "where",
            "contestant_name",
            "like",
            "'%al%",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "contestant_name",
            "from",
            "contestants",
            "where",
            "contestant_name",
            "like",
            "value"
        ],
        "question": "Return the names of the contestants whose names contain the substring 'Al' .",
        "question_toks": [
            "Return",
            "the",
            "names",
            "of",
            "the",
            "contestants",
            "whose",
            "names",
            "contain",
            "the",
            "substring",
            "'Al'",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 702,
        "query": "SELECT Name FROM country WHERE IndepYear > 1950",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "country",
            "WHERE",
            "IndepYear",
            ">",
            "1950"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "indepyear",
            ">",
            "value"
        ],
        "question": "What are the names of all the countries that became independent after 1950?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "all",
            "the",
            "countries",
            "that",
            "became",
            "independent",
            "after",
            "1950",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 703,
        "query": "SELECT Name FROM country WHERE IndepYear > 1950",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "country",
            "WHERE",
            "IndepYear",
            ">",
            "1950"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "indepyear",
            ">",
            "value"
        ],
        "question": "Give the names of the nations that were founded after 1950.",
        "question_toks": [
            "Give",
            "the",
            "names",
            "of",
            "the",
            "nations",
            "that",
            "were",
            "founded",
            "after",
            "1950",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 704,
        "query": "SELECT count(*) FROM country WHERE GovernmentForm = 'Republic'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "country",
            "WHERE",
            "GovernmentForm",
            "=",
            "'Republic",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country",
            "where",
            "governmentform",
            "=",
            "value"
        ],
        "question": "How many countries have a republic as their form of government?",
        "question_toks": [
            "How",
            "many",
            "countries",
            "have",
            "a",
            "republic",
            "as",
            "their",
            "form",
            "of",
            "government",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 705,
        "query": "SELECT count(*) FROM country WHERE GovernmentForm = 'Republic'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "country",
            "WHERE",
            "GovernmentForm",
            "=",
            "'Republic",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country",
            "where",
            "governmentform",
            "=",
            "value"
        ],
        "question": "How many countries have governments that are republics?",
        "question_toks": [
            "How",
            "many",
            "countries",
            "have",
            "governments",
            "that",
            "are",
            "republics",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 706,
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Region = 'Caribbean'",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "SurfaceArea",
            ")",
            "FROM",
            "country",
            "WHERE",
            "Region",
            "=",
            "'Caribbean",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "surfacearea",
            ")",
            "from",
            "country",
            "where",
            "region",
            "=",
            "value"
        ],
        "question": "What is the total surface area of the countries in the Caribbean region?",
        "question_toks": [
            "What",
            "is",
            "the",
            "total",
            "surface",
            "area",
            "of",
            "the",
            "countries",
            "in",
            "the",
            "Caribbean",
            "region",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 707,
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  'Caribbean'",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "SurfaceArea",
            ")",
            "FROM",
            "country",
            "WHERE",
            "Region",
            "=",
            "'Caribbean",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "surfacearea",
            ")",
            "from",
            "country",
            "where",
            "region",
            "=",
            "value"
        ],
        "question": "How much surface area do the countires in the Carribean cover together?",
        "question_toks": [
            "How",
            "much",
            "surface",
            "area",
            "do",
            "the",
            "countires",
            "in",
            "the",
            "Carribean",
            "cover",
            "together",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 708,
        "query": "SELECT Continent FROM country WHERE Name = 'Anguilla'",
        "query_toks": [
            "SELECT",
            "Continent",
            "FROM",
            "country",
            "WHERE",
            "Name",
            "=",
            "'Anguilla",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "continent",
            "from",
            "country",
            "where",
            "name",
            "=",
            "value"
        ],
        "question": "Which continent is Anguilla in?",
        "question_toks": [
            "Which",
            "continent",
            "is",
            "Anguilla",
            "in",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 709,
        "query": "SELECT Continent FROM country WHERE Name = 'Anguilla'",
        "query_toks": [
            "SELECT",
            "Continent",
            "FROM",
            "country",
            "WHERE",
            "Name",
            "=",
            "'Anguilla",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "continent",
            "from",
            "country",
            "where",
            "name",
            "=",
            "value"
        ],
        "question": "What is the continent name which Anguilla belongs to?",
        "question_toks": [
            "What",
            "is",
            "the",
            "continent",
            "name",
            "which",
            "Anguilla",
            "belongs",
            "to",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 710,
        "query": "SELECT region FROM country WHERE code IN (SELECT countrycode FROM city WHERE name = 'Kabul')",
        "query_toks": [
            "SELECT",
            "region",
            "FROM",
            "country",
            "WHERE",
            "code",
            "IN",
            "(",
            "SELECT",
            "countrycode",
            "FROM",
            "city",
            "WHERE",
            "name",
            "=",
            "'Kabul",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "region",
            "from",
            "country",
            "where",
            "code",
            "in",
            "(",
            "select",
            "countrycode",
            "from",
            "city",
            "where",
            "name",
            "=",
            "value",
            ")"
        ],
        "question": "Which region is the city Kabul located in?",
        "question_toks": [
            "Which",
            "region",
            "is",
            "the",
            "city",
            "Kabul",
            "located",
            "in",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 711,
        "query": "SELECT region FROM country WHERE code IN (SELECT countrycode FROM city WHERE name = 'Kabul');",
        "query_toks": [
            "SELECT",
            "region",
            "FROM",
            "country",
            "WHERE",
            "code",
            "IN",
            "(",
            "SELECT",
            "countrycode",
            "FROM",
            "city",
            "WHERE",
            "name",
            "=",
            "'Kabul",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "region",
            "from",
            "country",
            "where",
            "code",
            "in",
            "(",
            "select",
            "countrycode",
            "from",
            "city",
            "where",
            "name",
            "=",
            "value",
            ")"
        ],
        "question": "What region is Kabul in?",
        "question_toks": [
            "What",
            "region",
            "is",
            "Kabul",
            "in",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 712,
        "query": "SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE name = 'Aruba') AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE name = 'Aruba'))",
        "query_toks": [
            "SELECT",
            "language",
            "FROM",
            "countrylanguage",
            "WHERE",
            "countrycode",
            "IN",
            "(",
            "SELECT",
            "code",
            "FROM",
            "country",
            "WHERE",
            "name",
            "=",
            "'Aruba",
            "'",
            ")",
            "AND",
            "percentage",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "percentage",
            ")",
            "FROM",
            "countrylanguage",
            "WHERE",
            "countrycode",
            "IN",
            "(",
            "SELECT",
            "code",
            "FROM",
            "country",
            "WHERE",
            "name",
            "=",
            "'Aruba",
            "'",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "language",
            "from",
            "countrylanguage",
            "where",
            "countrycode",
            "in",
            "(",
            "select",
            "code",
            "from",
            "country",
            "where",
            "name",
            "=",
            "value",
            ")",
            "and",
            "percentage",
            "=",
            "(",
            "select",
            "max",
            "(",
            "percentage",
            ")",
            "from",
            "countrylanguage",
            "where",
            "countrycode",
            "in",
            "(",
            "select",
            "code",
            "from",
            "country",
            "where",
            "name",
            "=",
            "value",
            ")",
            ")"
        ],
        "question": "List the languages that are most popular in Aruba, including any ties.",
        "question_toks": [
            "List",
            "the",
            "languages",
            "that",
            "are",
            "most",
            "popular",
            "in",
            "Aruba",
            ",",
            "including",
            "any",
            "ties",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 713,
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba' AND Percentage = (SELECT max(T4.Percentage) FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T3.Name = 'Aruba')",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "Language",
            "FROM",
            "country",
            "AS",
            "T1",
            "JOIN",
            "countrylanguage",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Code",
            "=",
            "T2",
            ".",
            "CountryCode",
            "WHERE",
            "T1",
            ".",
            "Name",
            "=",
            "'Aruba",
            "'",
            "AND",
            "Percentage",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "T4",
            ".",
            "Percentage",
            ")",
            "FROM",
            "country",
            "AS",
            "T3",
            "JOIN",
            "countrylanguage",
            "AS",
            "T4",
            "ON",
            "T3",
            ".",
            "Code",
            "=",
            "T4",
            ".",
            "CountryCode",
            "WHERE",
            "T3",
            ".",
            "Name",
            "=",
            "'Aruba",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "language",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "value",
            "and",
            "percentage",
            "=",
            "(",
            "select",
            "max",
            "(",
            "t4",
            ".",
            "percentage",
            ")",
            "from",
            "country",
            "as",
            "t3",
            "join",
            "countrylanguage",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "code",
            "=",
            "t4",
            ".",
            "countrycode",
            "where",
            "t3",
            ".",
            "name",
            "=",
            "value",
            ")"
        ],
        "question": "What language is predominantly spoken in Aruba?",
        "question_toks": [
            "What",
            "language",
            "is",
            "predominantly",
            "spoken",
            "in",
            "Aruba",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 714,
        "query": "SELECT Population , LifeExpectancy FROM country WHERE Name = 'Brazil'",
        "query_toks": [
            "SELECT",
            "Population",
            ",",
            "LifeExpectancy",
            "FROM",
            "country",
            "WHERE",
            "Name",
            "=",
            "'Brazil",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "population",
            ",",
            "lifeexpectancy",
            "from",
            "country",
            "where",
            "name",
            "=",
            "value"
        ],
        "question": "What are the population and life expectancies in Brazil?",
        "question_toks": [
            "What",
            "are",
            "the",
            "population",
            "and",
            "life",
            "expectancies",
            "in",
            "Brazil",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 715,
        "query": "SELECT Population , LifeExpectancy FROM country WHERE Name = 'Brazil'",
        "query_toks": [
            "SELECT",
            "Population",
            ",",
            "LifeExpectancy",
            "FROM",
            "country",
            "WHERE",
            "Name",
            "=",
            "'Brazil",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "population",
            ",",
            "lifeexpectancy",
            "from",
            "country",
            "where",
            "name",
            "=",
            "value"
        ],
        "question": "Give me Brazil\u2019s population and life expectancies.",
        "question_toks": [
            "Give",
            "me",
            "Brazil\u2019s",
            "population",
            "and",
            "life",
            "expectancies",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 716,
        "query": "SELECT Population , Region FROM country WHERE Name = 'Angola'",
        "query_toks": [
            "SELECT",
            "Population",
            ",",
            "Region",
            "FROM",
            "country",
            "WHERE",
            "Name",
            "=",
            "'Angola",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "population",
            ",",
            "region",
            "from",
            "country",
            "where",
            "name",
            "=",
            "value"
        ],
        "question": "What are the region and population of Angola?",
        "question_toks": [
            "What",
            "are",
            "the",
            "region",
            "and",
            "population",
            "of",
            "Angola",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 717,
        "query": "SELECT Population , Region FROM country WHERE Name = 'Angola'",
        "query_toks": [
            "SELECT",
            "Population",
            ",",
            "Region",
            "FROM",
            "country",
            "WHERE",
            "Name",
            "=",
            "'Angola",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "population",
            ",",
            "region",
            "from",
            "country",
            "where",
            "name",
            "=",
            "value"
        ],
        "question": "What region does Angola belong to and what is its population?",
        "question_toks": [
            "What",
            "region",
            "does",
            "Angola",
            "belong",
            "to",
            "and",
            "what",
            "is",
            "its",
            "population",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 718,
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  'Central Africa'",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "LifeExpectancy",
            ")",
            "FROM",
            "country",
            "WHERE",
            "Region",
            "=",
            "'Central",
            "Africa",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "from",
            "country",
            "where",
            "region",
            "=",
            "value"
        ],
        "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "expected",
            "life",
            "expectancy",
            "for",
            "countries",
            "in",
            "the",
            "region",
            "of",
            "Central",
            "Africa",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 719,
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Region = 'Central Africa'",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "LifeExpectancy",
            ")",
            "FROM",
            "country",
            "WHERE",
            "Region",
            "=",
            "'Central",
            "Africa",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "from",
            "country",
            "where",
            "region",
            "=",
            "value"
        ],
        "question": "How long is the people\u2019s average life expectancy in Central Africa?",
        "question_toks": [
            "How",
            "long",
            "is",
            "the",
            "people\u2019s",
            "average",
            "life",
            "expectancy",
            "in",
            "Central",
            "Africa",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 720,
        "query": "SELECT Name FROM country WHERE Continent = 'Asia' AND LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia')",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "'Asia",
            "'",
            "AND",
            "LifeExpectancy",
            "=",
            "(",
            "SELECT",
            "MIN",
            "(",
            "LifeExpectancy",
            ")",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "'Asia",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            "and",
            "lifeexpectancy",
            "=",
            "(",
            "select",
            "min",
            "(",
            "lifeexpectancy",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            ")"
        ],
        "question": "Show the name of each country that has the shortest life expectancy in Asia.",
        "question_toks": [
            "Show",
            "the",
            "name",
            "of",
            "each",
            "country",
            "that",
            "has",
            "the",
            "shortest",
            "life",
            "expectancy",
            "in",
            "Asia",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 721,
        "query": "SELECT name FROM country WHERE continent = 'Asia' AND lifeexpectancy = (SELECT MIN(lifeexpectancy) FROM country WHERE continent = 'Asia')",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "country",
            "WHERE",
            "continent",
            "=",
            "'Asia",
            "'",
            "AND",
            "lifeexpectancy",
            "=",
            "(",
            "SELECT",
            "MIN",
            "(",
            "lifeexpectancy",
            ")",
            "FROM",
            "country",
            "WHERE",
            "continent",
            "=",
            "'Asia",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            "and",
            "lifeexpectancy",
            "=",
            "(",
            "select",
            "min",
            "(",
            "lifeexpectancy",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            ")"
        ],
        "question": "Give the name of the country in Asia with the lowest life expectancy.",
        "question_toks": [
            "Give",
            "the",
            "name",
            "of",
            "the",
            "country",
            "in",
            "Asia",
            "with",
            "the",
            "lowest",
            "life",
            "expectancy",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 722,
        "query": "SELECT sum(Population) , max(GNP) FROM country WHERE Continent = 'Asia'",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "Population",
            ")",
            ",",
            "max",
            "(",
            "GNP",
            ")",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "'Asia",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "max",
            "(",
            "gnp",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value"
        ],
        "question": "What is the total population and maximum GNP in Asia?",
        "question_toks": [
            "What",
            "is",
            "the",
            "total",
            "population",
            "and",
            "maximum",
            "GNP",
            "in",
            "Asia",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 723,
        "query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  'Asia'",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "Population",
            ")",
            ",",
            "max",
            "(",
            "GNP",
            ")",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "'Asia",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "max",
            "(",
            "gnp",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value"
        ],
        "question": "How many people live in countries in Asia, and what is the largest GNP among these countries?",
        "question_toks": [
            "How",
            "many",
            "people",
            "live",
            "in",
            "countries",
            "in",
            "Asia",
            ",",
            "and",
            "what",
            "is",
            "the",
            "largest",
            "GNP",
            "among",
            "these",
            "countries",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 724,
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "LifeExpectancy",
            ")",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "'Africa",
            "'",
            "AND",
            "GovernmentForm",
            "=",
            "'Republic",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            "and",
            "governmentform",
            "=",
            "value"
        ],
        "question": "What is the average life expectancy in African countries that are republics?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "life",
            "expectancy",
            "in",
            "African",
            "countries",
            "that",
            "are",
            "republics",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 725,
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "LifeExpectancy",
            ")",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "'Africa",
            "'",
            "AND",
            "GovernmentForm",
            "=",
            "'Republic",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            "and",
            "governmentform",
            "=",
            "value"
        ],
        "question": "Give the average life expectancy for countries in Africa which are republics?",
        "question_toks": [
            "Give",
            "the",
            "average",
            "life",
            "expectancy",
            "for",
            "countries",
            "in",
            "Africa",
            "which",
            "are",
            "republics",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 726,
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "SurfaceArea",
            ")",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "'Asia",
            "'",
            "OR",
            "Continent",
            "=",
            "'Europe",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "surfacearea",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            "or",
            "continent",
            "=",
            "value"
        ],
        "question": "What is the total surface area of the continents Asia and Europe?",
        "question_toks": [
            "What",
            "is",
            "the",
            "total",
            "surface",
            "area",
            "of",
            "the",
            "continents",
            "Asia",
            "and",
            "Europe",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 727,
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "SurfaceArea",
            ")",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "'Asia",
            "'",
            "OR",
            "Continent",
            "=",
            "'Europe",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "surfacearea",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            "or",
            "continent",
            "=",
            "value"
        ],
        "question": "Give the total surface area covered by countries in Asia or Europe.",
        "question_toks": [
            "Give",
            "the",
            "total",
            "surface",
            "area",
            "covered",
            "by",
            "countries",
            "in",
            "Asia",
            "or",
            "Europe",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 728,
        "query": "SELECT sum(Population) FROM city WHERE District  =  'Gelderland'",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "Population",
            ")",
            "FROM",
            "city",
            "WHERE",
            "District",
            "=",
            "'Gelderland",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            "from",
            "city",
            "where",
            "district",
            "=",
            "value"
        ],
        "question": "How many people live in Gelderland district?",
        "question_toks": [
            "How",
            "many",
            "people",
            "live",
            "in",
            "Gelderland",
            "district",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 729,
        "query": "SELECT sum(Population) FROM city WHERE District  =  'Gelderland'",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "Population",
            ")",
            "FROM",
            "city",
            "WHERE",
            "District",
            "=",
            "'Gelderland",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            "from",
            "city",
            "where",
            "district",
            "=",
            "value"
        ],
        "question": "What is the total population of Gelderland district?",
        "question_toks": [
            "What",
            "is",
            "the",
            "total",
            "population",
            "of",
            "Gelderland",
            "district",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 730,
        "query": "SELECT avg(GNP), sum(population) FROM country WHERE GovernmentForm = 'US territory'",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "GNP",
            ")",
            ",",
            "sum",
            "(",
            "population",
            ")",
            "FROM",
            "country",
            "WHERE",
            "GovernmentForm",
            "=",
            "'US",
            "territory",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "gnp",
            ")",
            ",",
            "sum",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "governmentform",
            "=",
            "value"
        ],
        "question": "What is the average GNP and total population in all nations whose government is US territory?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "GNP",
            "and",
            "total",
            "population",
            "in",
            "all",
            "nations",
            "whose",
            "government",
            "is",
            "US",
            "territory",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 731,
        "query": "SELECT avg(GNP), sum(population) FROM country WHERE GovernmentForm = 'US territory'",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "GNP",
            ")",
            ",",
            "sum",
            "(",
            "population",
            ")",
            "FROM",
            "country",
            "WHERE",
            "GovernmentForm",
            "=",
            "'US",
            "territory",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "gnp",
            ")",
            ",",
            "sum",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "governmentform",
            "=",
            "value"
        ],
        "question": "Give the mean GNP and total population of nations which are considered US territory.",
        "question_toks": [
            "Give",
            "the",
            "mean",
            "GNP",
            "and",
            "total",
            "population",
            "of",
            "nations",
            "which",
            "are",
            "considered",
            "US",
            "territory",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 732,
        "query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "LANGUAGE",
            ")",
            "FROM",
            "countrylanguage"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "language",
            ")",
            "from",
            "countrylanguage"
        ],
        "question": "How many unique languages are spoken in the world?",
        "question_toks": [
            "How",
            "many",
            "unique",
            "languages",
            "are",
            "spoken",
            "in",
            "the",
            "world",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 733,
        "query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "LANGUAGE",
            ")",
            "FROM",
            "countrylanguage"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "language",
            ")",
            "from",
            "countrylanguage"
        ],
        "question": "What is the number of distinct languages used around the world?",
        "question_toks": [
            "What",
            "is",
            "the",
            "number",
            "of",
            "distinct",
            "languages",
            "used",
            "around",
            "the",
            "world",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 734,
        "query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "GovernmentForm",
            ")",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "'Africa",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "governmentform",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value"
        ],
        "question": "How many type of governments are in Africa?",
        "question_toks": [
            "How",
            "many",
            "type",
            "of",
            "governments",
            "are",
            "in",
            "Africa",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 735,
        "query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "GovernmentForm",
            ")",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "'Africa",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "governmentform",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value"
        ],
        "question": "How many different forms of governments are there in Africa?",
        "question_toks": [
            "How",
            "many",
            "different",
            "forms",
            "of",
            "governments",
            "are",
            "there",
            "in",
            "Africa",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 736,
        "query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba'",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "T2",
            ".",
            "Language",
            ")",
            "FROM",
            "country",
            "AS",
            "T1",
            "JOIN",
            "countrylanguage",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Code",
            "=",
            "T2",
            ".",
            "CountryCode",
            "WHERE",
            "T1",
            ".",
            "Name",
            "=",
            "'Aruba",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "t2",
            ".",
            "language",
            ")",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "value"
        ],
        "question": "What is the total number of languages used in Aruba?",
        "question_toks": [
            "What",
            "is",
            "the",
            "total",
            "number",
            "of",
            "languages",
            "used",
            "in",
            "Aruba",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 737,
        "query": "SELECT COUNT(DISTINCT countrylanguage.language) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.name = 'Aruba'",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "DISTINCT",
            "countrylanguage.language",
            ")",
            "FROM",
            "countrylanguage",
            "JOIN",
            "country",
            "ON",
            "countrylanguage.countrycode",
            "=",
            "country.code",
            "WHERE",
            "country.name",
            "=",
            "'Aruba",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "countrylanguage.language",
            ")",
            "from",
            "countrylanguage",
            "join",
            "country",
            "on",
            "countrylanguage.countrycode",
            "=",
            "country.code",
            "where",
            "country.name",
            "=",
            "value"
        ],
        "question": "How many languages are spoken in Aruba?",
        "question_toks": [
            "How",
            "many",
            "languages",
            "are",
            "spoken",
            "in",
            "Aruba",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 738,
        "query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Afghanistan' AND IsOfficial = 'T'",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "country",
            "AS",
            "T1",
            "JOIN",
            "countrylanguage",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Code",
            "=",
            "T2",
            ".",
            "CountryCode",
            "WHERE",
            "T1",
            ".",
            "Name",
            "=",
            "'Afghanistan",
            "'",
            "AND",
            "IsOfficial",
            "=",
            "'T",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "value",
            "and",
            "isofficial",
            "=",
            "value"
        ],
        "question": "How many official languages does Afghanistan have?",
        "question_toks": [
            "How",
            "many",
            "official",
            "languages",
            "does",
            "Afghanistan",
            "have",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 739,
        "query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Afghanistan' AND IsOfficial = 'T'",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "country",
            "AS",
            "T1",
            "JOIN",
            "countrylanguage",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Code",
            "=",
            "T2",
            ".",
            "CountryCode",
            "WHERE",
            "T1",
            ".",
            "Name",
            "=",
            "'Afghanistan",
            "'",
            "AND",
            "IsOfficial",
            "=",
            "'T",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "value",
            "and",
            "isofficial",
            "=",
            "value"
        ],
        "question": "How many official languages are spoken in Afghanistan?",
        "question_toks": [
            "How",
            "many",
            "official",
            "languages",
            "are",
            "spoken",
            "in",
            "Afghanistan",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 740,
        "query": "SELECT T1.name FROM country AS T1 WHERE T1.Code IN (SELECT T2.CountryCode FROM countrylanguage AS T2 GROUP BY T2.CountryCode HAVING count(*) = (SELECT COUNT(*) AS C FROM countrylanguage AS T3 GROUP BY T3.CountryCode ORDER BY C DESC LIMIT 1))",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "name",
            "FROM",
            "country",
            "AS",
            "T1",
            "WHERE",
            "T1",
            ".",
            "Code",
            "IN",
            "(",
            "SELECT",
            "T2",
            ".",
            "CountryCode",
            "FROM",
            "countrylanguage",
            "AS",
            "T2",
            "GROUP",
            "BY",
            "T2",
            ".",
            "CountryCode",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "C",
            "FROM",
            "countrylanguage",
            "AS",
            "T3",
            "GROUP",
            "BY",
            "T3",
            ".",
            "CountryCode",
            "ORDER",
            "BY",
            "C",
            "DESC",
            "LIMIT",
            "1",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "where",
            "t1",
            ".",
            "code",
            "in",
            "(",
            "select",
            "t2",
            ".",
            "countrycode",
            "from",
            "countrylanguage",
            "as",
            "t2",
            "group",
            "by",
            "t2",
            ".",
            "countrycode",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "c",
            "from",
            "countrylanguage",
            "as",
            "t3",
            "group",
            "by",
            "t3",
            ".",
            "countrycode",
            "order",
            "by",
            "c",
            "desc",
            "limit",
            "value",
            ")",
            ")"
        ],
        "question": "What is name of the country that speaks the largest number of languages?",
        "question_toks": [
            "What",
            "is",
            "name",
            "of",
            "the",
            "country",
            "that",
            "speaks",
            "the",
            "largest",
            "number",
            "of",
            "languages",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 741,
        "query": "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage GROUP BY countrycode HAVING COUNT(DISTINCT language) = (SELECT MAX(lang_count) FROM (SELECT COUNT(DISTINCT language) AS lang_count FROM countrylanguage GROUP BY countrycode)))",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "country",
            "WHERE",
            "code",
            "IN",
            "(",
            "SELECT",
            "countrycode",
            "FROM",
            "countrylanguage",
            "GROUP",
            "BY",
            "countrycode",
            "HAVING",
            "COUNT",
            "(",
            "DISTINCT",
            "language",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "lang_count",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "DISTINCT",
            "language",
            ")",
            "AS",
            "lang_count",
            "FROM",
            "countrylanguage",
            "GROUP",
            "BY",
            "countrycode",
            ")",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "code",
            "in",
            "(",
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "group",
            "by",
            "countrycode",
            "having",
            "count",
            "(",
            "distinct",
            "language",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "lang_count",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "distinct",
            "language",
            ")",
            "as",
            "lang_count",
            "from",
            "countrylanguage",
            "group",
            "by",
            "countrycode",
            ")",
            ")",
            ")"
        ],
        "question": "List all names of nations that use the greatest amount of languages, including any ties.",
        "question_toks": [
            "List",
            "all",
            "names",
            "of",
            "nations",
            "that",
            "use",
            "the",
            "greatest",
            "amount",
            "of",
            "languages",
            ",",
            "including",
            "any",
            "ties",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 742,
        "query": "SELECT continent FROM (SELECT continent, COUNT(DISTINCT language) AS lang_count FROM country c INNER JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY continent ORDER BY lang_count DESC) WHERE lang_count = (SELECT MAX(lang_count) FROM (SELECT continent, COUNT(DISTINCT language) AS lang_count FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY continent))",
        "query_toks": [
            "SELECT",
            "continent",
            "FROM",
            "(",
            "SELECT",
            "continent,",
            "COUNT",
            "(",
            "DISTINCT",
            "language",
            ")",
            "AS",
            "lang_count",
            "FROM",
            "country",
            "c",
            "INNER",
            "JOIN",
            "countrylanguage",
            "cl",
            "ON",
            "c.code",
            "=",
            "cl.countrycode",
            "GROUP",
            "BY",
            "continent",
            "ORDER",
            "BY",
            "lang_count",
            "DESC",
            ")",
            "WHERE",
            "lang_count",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "lang_count",
            ")",
            "FROM",
            "(",
            "SELECT",
            "continent,",
            "COUNT",
            "(",
            "DISTINCT",
            "language",
            ")",
            "AS",
            "lang_count",
            "FROM",
            "country",
            "INNER",
            "JOIN",
            "countrylanguage",
            "ON",
            "country.code",
            "=",
            "countrylanguage.countrycode",
            "GROUP",
            "BY",
            "continent",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "continent",
            "from",
            "(",
            "select",
            "continent,",
            "count",
            "(",
            "distinct",
            "language",
            ")",
            "as",
            "lang_count",
            "from",
            "country",
            "c",
            "inner",
            "join",
            "countrylanguage",
            "cl",
            "on",
            "c.code",
            "=",
            "cl.countrycode",
            "group",
            "by",
            "continent",
            "order",
            "by",
            "lang_count",
            "desc",
            ")",
            "where",
            "lang_count",
            "=",
            "(",
            "select",
            "max",
            "(",
            "lang_count",
            ")",
            "from",
            "(",
            "select",
            "continent,",
            "count",
            "(",
            "distinct",
            "language",
            ")",
            "as",
            "lang_count",
            "from",
            "country",
            "inner",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode",
            "group",
            "by",
            "continent",
            ")",
            ")"
        ],
        "question": "Which continent has the most diverse languages? If there is a tie, show all such continents.",
        "question_toks": [
            "Which",
            "continent",
            "has",
            "the",
            "most",
            "diverse",
            "languages",
            "?",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "show",
            "all",
            "such",
            "continents",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 743,
        "query": "WITH LanguageCount AS (SELECT continent, COUNT(DISTINCT language) AS NumLanguages FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY continent) SELECT continent FROM LanguageCount WHERE NumLanguages = (SELECT MAX(NumLanguages) FROM LanguageCount)",
        "query_toks": [
            "WITH",
            "LanguageCount",
            "AS",
            "(",
            "SELECT",
            "continent,",
            "COUNT",
            "(",
            "DISTINCT",
            "language",
            ")",
            "AS",
            "NumLanguages",
            "FROM",
            "country",
            "INNER",
            "JOIN",
            "countrylanguage",
            "ON",
            "country.code",
            "=",
            "countrylanguage.countrycode",
            "GROUP",
            "BY",
            "continent",
            ")",
            "SELECT",
            "continent",
            "FROM",
            "LanguageCount",
            "WHERE",
            "NumLanguages",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "NumLanguages",
            ")",
            "FROM",
            "LanguageCount",
            ")"
        ],
        "query_toks_no_value": [
            "with",
            "languagecount",
            "as",
            "(",
            "select",
            "continent,",
            "count",
            "(",
            "distinct",
            "language",
            ")",
            "as",
            "numlanguages",
            "from",
            "country",
            "inner",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode",
            "group",
            "by",
            "continent",
            ")",
            "select",
            "continent",
            "from",
            "languagecount",
            "where",
            "numlanguages",
            "=",
            "(",
            "select",
            "max",
            "(",
            "numlanguages",
            ")",
            "from",
            "languagecount",
            ")"
        ],
        "question": "Which continent speaks the most languages? If there is a tie, list all tied continents.",
        "question_toks": [
            "Which",
            "continent",
            "speaks",
            "the",
            "most",
            "languages",
            "?",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "list",
            "all",
            "tied",
            "continents",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 744,
        "query": "SELECT COUNT(DISTINCT a.code) FROM country AS a JOIN countrylanguage AS b ON a.code = b.countrycode WHERE b.language IN ('English', 'Dutch') GROUP BY a.code HAVING COUNT(DISTINCT b.language) = 2",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "DISTINCT",
            "a.code",
            ")",
            "FROM",
            "country",
            "AS",
            "a",
            "JOIN",
            "countrylanguage",
            "AS",
            "b",
            "ON",
            "a.code",
            "=",
            "b.countrycode",
            "WHERE",
            "b.language",
            "IN",
            "(",
            "'English',",
            "'Dutch",
            "'",
            ")",
            "GROUP",
            "BY",
            "a.code",
            "HAVING",
            "COUNT",
            "(",
            "DISTINCT",
            "b.language",
            ")",
            "=",
            "2"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "a.code",
            ")",
            "from",
            "country",
            "as",
            "a",
            "join",
            "countrylanguage",
            "as",
            "b",
            "on",
            "a.code",
            "=",
            "b.countrycode",
            "where",
            "b.language",
            "in",
            "(",
            "value",
            ")",
            "group",
            "by",
            "a.code",
            "having",
            "count",
            "(",
            "distinct",
            "b.language",
            ")",
            "=",
            "value"
        ],
        "question": "How many countries speak both English and Dutch?",
        "question_toks": [
            "How",
            "many",
            "countries",
            "speak",
            "both",
            "English",
            "and",
            "Dutch",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 745,
        "query": "SELECT COUNT(*) FROM (SELECT T1.Code, T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Code, T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Dutch');",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "(",
            "SELECT",
            "T1",
            ".",
            "Code,",
            "T1",
            ".",
            "Name",
            "FROM",
            "country",
            "AS",
            "T1",
            "JOIN",
            "countrylanguage",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Code",
            "=",
            "T2",
            ".",
            "CountryCode",
            "WHERE",
            "T2",
            ".",
            "Language",
            "=",
            "'English",
            "'",
            "INTERSECT",
            "SELECT",
            "T1",
            ".",
            "Code,",
            "T1",
            ".",
            "Name",
            "FROM",
            "country",
            "AS",
            "T1",
            "JOIN",
            "countrylanguage",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Code",
            "=",
            "T2",
            ".",
            "CountryCode",
            "WHERE",
            "T2",
            ".",
            "Language",
            "=",
            "'Dutch",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "(",
            "select",
            "t1",
            ".",
            "code,",
            "t1",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "value",
            "intersect",
            "select",
            "t1",
            ".",
            "code,",
            "t1",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "value",
            ")"
        ],
        "question": "What is the number of nations that use English and Dutch?",
        "question_toks": [
            "What",
            "is",
            "the",
            "number",
            "of",
            "nations",
            "that",
            "use",
            "English",
            "and",
            "Dutch",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 746,
        "query": "SELECT T1.Name FROM country AS T1 WHERE T1.Code IN (SELECT T2.Code FROM country AS T2 JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = 'English' INTERSECT SELECT T2.Code FROM country AS T2 JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = 'French')",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "Name",
            "FROM",
            "country",
            "AS",
            "T1",
            "WHERE",
            "T1",
            ".",
            "Code",
            "IN",
            "(",
            "SELECT",
            "T2",
            ".",
            "Code",
            "FROM",
            "country",
            "AS",
            "T2",
            "JOIN",
            "countrylanguage",
            "AS",
            "T3",
            "ON",
            "T2",
            ".",
            "Code",
            "=",
            "T3",
            ".",
            "CountryCode",
            "WHERE",
            "T3",
            ".",
            "Language",
            "=",
            "'English",
            "'",
            "INTERSECT",
            "SELECT",
            "T2",
            ".",
            "Code",
            "FROM",
            "country",
            "AS",
            "T2",
            "JOIN",
            "countrylanguage",
            "AS",
            "T3",
            "ON",
            "T2",
            ".",
            "Code",
            "=",
            "T3",
            ".",
            "CountryCode",
            "WHERE",
            "T3",
            ".",
            "Language",
            "=",
            "'French",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "where",
            "t1",
            ".",
            "code",
            "in",
            "(",
            "select",
            "t2",
            ".",
            "code",
            "from",
            "country",
            "as",
            "t2",
            "join",
            "countrylanguage",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "code",
            "=",
            "t3",
            ".",
            "countrycode",
            "where",
            "t3",
            ".",
            "language",
            "=",
            "value",
            "intersect",
            "select",
            "t2",
            ".",
            "code",
            "from",
            "country",
            "as",
            "t2",
            "join",
            "countrylanguage",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "code",
            "=",
            "t3",
            ".",
            "countrycode",
            "where",
            "t3",
            ".",
            "language",
            "=",
            "value",
            ")"
        ],
        "question": "What are the names of nations speak both English and French?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "nations",
            "speak",
            "both",
            "English",
            "and",
            "French",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 747,
        "query": "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English') AND code IN (SELECT countrycode FROM countrylanguage WHERE language = 'French')",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "country",
            "WHERE",
            "code",
            "IN",
            "(",
            "SELECT",
            "countrycode",
            "FROM",
            "countrylanguage",
            "WHERE",
            "language",
            "=",
            "'English",
            "'",
            ")",
            "AND",
            "code",
            "IN",
            "(",
            "SELECT",
            "countrycode",
            "FROM",
            "countrylanguage",
            "WHERE",
            "language",
            "=",
            "'French",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "code",
            "in",
            "(",
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "value",
            ")",
            "and",
            "code",
            "in",
            "(",
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "value",
            ")"
        ],
        "question": "Give the names of nations that speak both English and French.",
        "question_toks": [
            "Give",
            "the",
            "names",
            "of",
            "nations",
            "that",
            "speak",
            "both",
            "English",
            "and",
            "French",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 748,
        "query": "SELECT country.name FROM country JOIN countrylanguage AS cl1 ON country.code = cl1.countrycode JOIN countrylanguage AS cl2 ON country.code = cl2.countrycode WHERE cl1.language = 'English' AND cl1.isofficial = 'T' AND cl2.language = 'French' AND cl2.isofficial = 'T'",
        "query_toks": [
            "SELECT",
            "country.name",
            "FROM",
            "country",
            "JOIN",
            "countrylanguage",
            "AS",
            "cl1",
            "ON",
            "country.code",
            "=",
            "cl1.countrycode",
            "JOIN",
            "countrylanguage",
            "AS",
            "cl2",
            "ON",
            "country.code",
            "=",
            "cl2.countrycode",
            "WHERE",
            "cl1.language",
            "=",
            "'English",
            "'",
            "AND",
            "cl1.isofficial",
            "=",
            "'T",
            "'",
            "AND",
            "cl2.language",
            "=",
            "'French",
            "'",
            "AND",
            "cl2.isofficial",
            "=",
            "'T",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "country.name",
            "from",
            "country",
            "join",
            "countrylanguage",
            "as",
            "cl1",
            "on",
            "country.code",
            "=",
            "cl1.countrycode",
            "join",
            "countrylanguage",
            "as",
            "cl2",
            "on",
            "country.code",
            "=",
            "cl2.countrycode",
            "where",
            "cl1.language",
            "=",
            "value",
            "and",
            "cl1.isofficial",
            "=",
            "value",
            "and",
            "cl2.language",
            "=",
            "value",
            "and",
            "cl2.isofficial",
            "=",
            "value"
        ],
        "question": "What are the names of nations where both English and French are official languages?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "nations",
            "where",
            "both",
            "English",
            "and",
            "French",
            "are",
            "official",
            "languages",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 749,
        "query": "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE isofficial = 'T' AND language = 'English') AND code IN (SELECT countrycode FROM countrylanguage WHERE isofficial = 'T' AND language = 'French')",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "country",
            "WHERE",
            "code",
            "IN",
            "(",
            "SELECT",
            "countrycode",
            "FROM",
            "countrylanguage",
            "WHERE",
            "isofficial",
            "=",
            "'T",
            "'",
            "AND",
            "language",
            "=",
            "'English",
            "'",
            ")",
            "AND",
            "code",
            "IN",
            "(",
            "SELECT",
            "countrycode",
            "FROM",
            "countrylanguage",
            "WHERE",
            "isofficial",
            "=",
            "'T",
            "'",
            "AND",
            "language",
            "=",
            "'French",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "code",
            "in",
            "(",
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "isofficial",
            "=",
            "value",
            "and",
            "language",
            "=",
            "value",
            ")",
            "and",
            "code",
            "in",
            "(",
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "isofficial",
            "=",
            "value",
            "and",
            "language",
            "=",
            "value",
            ")"
        ],
        "question": "Give the names of countries with English and French as official languages.",
        "question_toks": [
            "Give",
            "the",
            "names",
            "of",
            "countries",
            "with",
            "English",
            "and",
            "French",
            "as",
            "official",
            "languages",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 750,
        "query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese'",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "DISTINCT",
            "Continent",
            ")",
            "FROM",
            "country",
            "AS",
            "T1",
            "JOIN",
            "countrylanguage",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Code",
            "=",
            "T2",
            ".",
            "CountryCode",
            "WHERE",
            "T2",
            ".",
            "Language",
            "=",
            "'Chinese",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "continent",
            ")",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "value"
        ],
        "question": "What is the number of distinct continents where Chinese is spoken?",
        "question_toks": [
            "What",
            "is",
            "the",
            "number",
            "of",
            "distinct",
            "continents",
            "where",
            "Chinese",
            "is",
            "spoken",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 751,
        "query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese'",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "DISTINCT",
            "Continent",
            ")",
            "FROM",
            "country",
            "AS",
            "T1",
            "JOIN",
            "countrylanguage",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Code",
            "=",
            "T2",
            ".",
            "CountryCode",
            "WHERE",
            "T2",
            ".",
            "Language",
            "=",
            "'Chinese",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "continent",
            ")",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "value"
        ],
        "question": "How many continents speak Chinese?",
        "question_toks": [
            "How",
            "many",
            "continents",
            "speak",
            "Chinese",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 752,
        "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' OR T2.Language = 'Dutch'",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1",
            ".",
            "Region",
            "FROM",
            "country",
            "AS",
            "T1",
            "JOIN",
            "countrylanguage",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Code",
            "=",
            "T2",
            ".",
            "CountryCode",
            "WHERE",
            "T2",
            ".",
            "Language",
            "=",
            "'English",
            "'",
            "OR",
            "T2",
            ".",
            "Language",
            "=",
            "'Dutch",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "t1",
            ".",
            "region",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "value",
            "or",
            "t2",
            ".",
            "language",
            "=",
            "value"
        ],
        "question": "What are the regions that use English or Dutch?",
        "question_toks": [
            "What",
            "are",
            "the",
            "regions",
            "that",
            "use",
            "English",
            "or",
            "Dutch",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 753,
        "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' OR T2.Language = 'Dutch'",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1",
            ".",
            "Region",
            "FROM",
            "country",
            "AS",
            "T1",
            "JOIN",
            "countrylanguage",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Code",
            "=",
            "T2",
            ".",
            "CountryCode",
            "WHERE",
            "T2",
            ".",
            "Language",
            "=",
            "'English",
            "'",
            "OR",
            "T2",
            ".",
            "Language",
            "=",
            "'Dutch",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "t1",
            ".",
            "region",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "value",
            "or",
            "t2",
            ".",
            "language",
            "=",
            "value"
        ],
        "question": "Which regions speak Dutch or English?",
        "question_toks": [
            "Which",
            "regions",
            "speak",
            "Dutch",
            "or",
            "English",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 754,
        "query": "select t1.Code from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where (t2.language = 'English' or t2.language = 'Dutch') and isofficial = 't'",
        "query_toks": [
            "select",
            "t1",
            ".",
            "Code",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "(",
            "t2",
            ".",
            "language",
            "=",
            "'English",
            "'",
            "or",
            "t2",
            ".",
            "language",
            "=",
            "'Dutch",
            "'",
            ")",
            "and",
            "isofficial",
            "=",
            "'t",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "code",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "(",
            "t2",
            ".",
            "language",
            "=",
            "value",
            "or",
            "t2",
            ".",
            "language",
            "=",
            "value",
            ")",
            "and",
            "isofficial",
            "=",
            "value"
        ],
        "question": "What are the countries where either English or Dutch is the official language ?",
        "question_toks": [
            "What",
            "are",
            "the",
            "countries",
            "where",
            "either",
            "English",
            "or",
            "Dutch",
            "is",
            "the",
            "official",
            "language",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 755,
        "query": "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE isofficial = 'T' AND language IN ('English', 'Dutch'))",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "country",
            "WHERE",
            "code",
            "IN",
            "(",
            "SELECT",
            "countrycode",
            "FROM",
            "countrylanguage",
            "WHERE",
            "isofficial",
            "=",
            "'T",
            "'",
            "AND",
            "language",
            "IN",
            "(",
            "'English',",
            "'Dutch",
            "'",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "code",
            "in",
            "(",
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "isofficial",
            "=",
            "value",
            "and",
            "language",
            "in",
            "(",
            "value",
            ")",
            ")"
        ],
        "question": "Which countries have either English or Dutch as an official language?",
        "question_toks": [
            "Which",
            "countries",
            "have",
            "either",
            "English",
            "or",
            "Dutch",
            "as",
            "an",
            "official",
            "language",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 756,
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' GROUP BY T2.Language HAVING COUNT(*) = (SELECT MAX(LangCount) FROM (SELECT COUNT(*) AS LangCount FROM country AS SubT1 JOIN countrylanguage AS SubT2 ON SubT1.Code = SubT2.CountryCode WHERE SubT1.Continent = 'Asia' GROUP BY SubT2.Language) AS Counts)",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "Language",
            "FROM",
            "country",
            "AS",
            "T1",
            "JOIN",
            "countrylanguage",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Code",
            "=",
            "T2",
            ".",
            "CountryCode",
            "WHERE",
            "T1",
            ".",
            "Continent",
            "=",
            "'Asia",
            "'",
            "GROUP",
            "BY",
            "T2",
            ".",
            "Language",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "LangCount",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "LangCount",
            "FROM",
            "country",
            "AS",
            "SubT1",
            "JOIN",
            "countrylanguage",
            "AS",
            "SubT2",
            "ON",
            "SubT1.Code",
            "=",
            "SubT2.CountryCode",
            "WHERE",
            "SubT1.Continent",
            "=",
            "'Asia",
            "'",
            "GROUP",
            "BY",
            "SubT2.Language",
            ")",
            "AS",
            "Counts",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "language",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "continent",
            "=",
            "value",
            "group",
            "by",
            "t2",
            ".",
            "language",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "langcount",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "langcount",
            "from",
            "country",
            "as",
            "subt1",
            "join",
            "countrylanguage",
            "as",
            "subt2",
            "on",
            "subt1.code",
            "=",
            "subt2.countrycode",
            "where",
            "subt1.continent",
            "=",
            "value",
            "group",
            "by",
            "subt2.language",
            ")",
            "as",
            "counts",
            ")"
        ],
        "question": "List all languages that are the most popular on the Asian continent, including any ties.",
        "question_toks": [
            "List",
            "all",
            "languages",
            "that",
            "are",
            "the",
            "most",
            "popular",
            "on",
            "the",
            "Asian",
            "continent",
            ",",
            "including",
            "any",
            "ties",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 757,
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' GROUP BY T2.Language HAVING COUNT(*) = (SELECT MAX(c) FROM (SELECT COUNT(*) as c FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' GROUP BY T2.Language) as counts)",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "Language",
            "FROM",
            "country",
            "AS",
            "T1",
            "JOIN",
            "countrylanguage",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Code",
            "=",
            "T2",
            ".",
            "CountryCode",
            "WHERE",
            "T1",
            ".",
            "Continent",
            "=",
            "'Asia",
            "'",
            "GROUP",
            "BY",
            "T2",
            ".",
            "Language",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "c",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "as",
            "c",
            "FROM",
            "country",
            "AS",
            "T1",
            "JOIN",
            "countrylanguage",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Code",
            "=",
            "T2",
            ".",
            "CountryCode",
            "WHERE",
            "T1",
            ".",
            "Continent",
            "=",
            "'Asia",
            "'",
            "GROUP",
            "BY",
            "T2",
            ".",
            "Language",
            ")",
            "as",
            "counts",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "language",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "continent",
            "=",
            "value",
            "group",
            "by",
            "t2",
            ".",
            "language",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "c",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "c",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "continent",
            "=",
            "value",
            "group",
            "by",
            "t2",
            ".",
            "language",
            ")",
            "as",
            "counts",
            ")"
        ],
        "question": "List all languages that are used by the largest number of Asian nations, including any ties.",
        "question_toks": [
            "List",
            "all",
            "languages",
            "that",
            "are",
            "used",
            "by",
            "the",
            "largest",
            "number",
            "of",
            "Asian",
            "nations",
            ",",
            "including",
            "any",
            "ties",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 758,
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = 'Republic' GROUP BY T2.Language HAVING COUNT(*) = 1",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "Language",
            "FROM",
            "country",
            "AS",
            "T1",
            "JOIN",
            "countrylanguage",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Code",
            "=",
            "T2",
            ".",
            "CountryCode",
            "WHERE",
            "T1",
            ".",
            "GovernmentForm",
            "=",
            "'Republic",
            "'",
            "GROUP",
            "BY",
            "T2",
            ".",
            "Language",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "language",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "governmentform",
            "=",
            "value",
            "group",
            "by",
            "t2",
            ".",
            "language",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "value"
        ],
        "question": "Which languages are spoken by only one country in republic governments?",
        "question_toks": [
            "Which",
            "languages",
            "are",
            "spoken",
            "by",
            "only",
            "one",
            "country",
            "in",
            "republic",
            "governments",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 759,
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  'Republic' GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "Language",
            "FROM",
            "country",
            "AS",
            "T1",
            "JOIN",
            "countrylanguage",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Code",
            "=",
            "T2",
            ".",
            "CountryCode",
            "WHERE",
            "T1",
            ".",
            "GovernmentForm",
            "=",
            "'Republic",
            "'",
            "GROUP",
            "BY",
            "T2",
            ".",
            "Language",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "language",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "governmentform",
            "=",
            "value",
            "group",
            "by",
            "t2",
            ".",
            "language",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "value"
        ],
        "question": "What languages are only used by a single country with a republic government?",
        "question_toks": [
            "What",
            "languages",
            "are",
            "only",
            "used",
            "by",
            "a",
            "single",
            "country",
            "with",
            "a",
            "republic",
            "government",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 760,
        "query": "SELECT T1.Name, T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' AND T1.Population = (SELECT max(T3.Population) FROM city AS T3 JOIN countrylanguage AS T4 ON T3.CountryCode = T4.CountryCode WHERE T4.Language = 'English')",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "Name,",
            "T1",
            ".",
            "Population",
            "FROM",
            "city",
            "AS",
            "T1",
            "JOIN",
            "countrylanguage",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "CountryCode",
            "=",
            "T2",
            ".",
            "CountryCode",
            "WHERE",
            "T2",
            ".",
            "Language",
            "=",
            "'English",
            "'",
            "AND",
            "T1",
            ".",
            "Population",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "T3",
            ".",
            "Population",
            ")",
            "FROM",
            "city",
            "AS",
            "T3",
            "JOIN",
            "countrylanguage",
            "AS",
            "T4",
            "ON",
            "T3",
            ".",
            "CountryCode",
            "=",
            "T4",
            ".",
            "CountryCode",
            "WHERE",
            "T4",
            ".",
            "Language",
            "=",
            "'English",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "name,",
            "t1",
            ".",
            "population",
            "from",
            "city",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "countrycode",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "value",
            "and",
            "t1",
            ".",
            "population",
            "=",
            "(",
            "select",
            "max",
            "(",
            "t3",
            ".",
            "population",
            ")",
            "from",
            "city",
            "as",
            "t3",
            "join",
            "countrylanguage",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "countrycode",
            "=",
            "t4",
            ".",
            "countrycode",
            "where",
            "t4",
            ".",
            "language",
            "=",
            "value",
            ")"
        ],
        "question": "Find the name and population of the city with the largest population that uses English.",
        "question_toks": [
            "Find",
            "the",
            "name",
            "and",
            "population",
            "of",
            "the",
            "city",
            "with",
            "the",
            "largest",
            "population",
            "that",
            "uses",
            "English",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 761,
        "query": "SELECT T1.Name, T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' AND T1.Population = (SELECT max(T3.Population) FROM city AS T3 JOIN countrylanguage AS T4 ON T3.CountryCode = T4.CountryCode WHERE T4.Language = 'English')",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "Name,",
            "T1",
            ".",
            "Population",
            "FROM",
            "city",
            "AS",
            "T1",
            "JOIN",
            "countrylanguage",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "CountryCode",
            "=",
            "T2",
            ".",
            "CountryCode",
            "WHERE",
            "T2",
            ".",
            "Language",
            "=",
            "'English",
            "'",
            "AND",
            "T1",
            ".",
            "Population",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "T3",
            ".",
            "Population",
            ")",
            "FROM",
            "city",
            "AS",
            "T3",
            "JOIN",
            "countrylanguage",
            "AS",
            "T4",
            "ON",
            "T3",
            ".",
            "CountryCode",
            "=",
            "T4",
            ".",
            "CountryCode",
            "WHERE",
            "T4",
            ".",
            "Language",
            "=",
            "'English",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "name,",
            "t1",
            ".",
            "population",
            "from",
            "city",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "countrycode",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "value",
            "and",
            "t1",
            ".",
            "population",
            "=",
            "(",
            "select",
            "max",
            "(",
            "t3",
            ".",
            "population",
            ")",
            "from",
            "city",
            "as",
            "t3",
            "join",
            "countrylanguage",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "countrycode",
            "=",
            "t4",
            ".",
            "countrycode",
            "where",
            "t4",
            ".",
            "language",
            "=",
            "value",
            ")"
        ],
        "question": "Show the name and population of the most populace city that speaks English",
        "question_toks": [
            "Show",
            "the",
            "name",
            "and",
            "population",
            "of",
            "the",
            "most",
            "populace",
            "city",
            "that",
            "speaks",
            "English"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 762,
        "query": "SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' AND SurfaceArea = (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Asia')",
        "query_toks": [
            "SELECT",
            "Name,",
            "Population,",
            "LifeExpectancy",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "'Asia",
            "'",
            "AND",
            "SurfaceArea",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "SurfaceArea",
            ")",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "'Asia",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name,",
            "population,",
            "lifeexpectancy",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            "and",
            "surfacearea",
            "=",
            "(",
            "select",
            "max",
            "(",
            "surfacearea",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            ")"
        ],
        "question": "Find the name, population and expected life length for all Asian countries with the largest area.",
        "question_toks": [
            "Find",
            "the",
            "name",
            ",",
            "population",
            "and",
            "expected",
            "life",
            "length",
            "for",
            "all",
            "Asian",
            "countries",
            "with",
            "the",
            "largest",
            "area",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 763,
        "query": "SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' AND SurfaceArea = (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Asia')",
        "query_toks": [
            "SELECT",
            "Name,",
            "Population,",
            "LifeExpectancy",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "'Asia",
            "'",
            "AND",
            "SurfaceArea",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "SurfaceArea",
            ")",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "'Asia",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name,",
            "population,",
            "lifeexpectancy",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            "and",
            "surfacearea",
            "=",
            "(",
            "select",
            "max",
            "(",
            "surfacearea",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            ")"
        ],
        "question": "What are the name, population, and life expectancy of all Asian countries with the largest land area?",
        "question_toks": [
            "What",
            "are",
            "the",
            "name",
            ",",
            "population",
            ",",
            "and",
            "life",
            "expectancy",
            "of",
            "all",
            "Asian",
            "countries",
            "with",
            "the",
            "largest",
            "land",
            "area",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 764,
        "query": "SELECT AVG(c.lifeexpectancy) FROM country AS c WHERE c.code NOT IN (SELECT cl.countrycode FROM countrylanguage AS cl WHERE cl.language = 'English' AND cl.isofficial = 'T')",
        "query_toks": [
            "SELECT",
            "AVG",
            "(",
            "c.lifeexpectancy",
            ")",
            "FROM",
            "country",
            "AS",
            "c",
            "WHERE",
            "c.code",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "cl.countrycode",
            "FROM",
            "countrylanguage",
            "AS",
            "cl",
            "WHERE",
            "cl.language",
            "=",
            "'English",
            "'",
            "AND",
            "cl.isofficial",
            "=",
            "'T",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "c.lifeexpectancy",
            ")",
            "from",
            "country",
            "as",
            "c",
            "where",
            "c.code",
            "not",
            "in",
            "(",
            "select",
            "cl.countrycode",
            "from",
            "countrylanguage",
            "as",
            "cl",
            "where",
            "cl.language",
            "=",
            "value",
            "and",
            "cl.isofficial",
            "=",
            "value",
            ")"
        ],
        "question": "What is average life expectancy in the countries where English is not the official language?",
        "question_toks": [
            "What",
            "is",
            "average",
            "life",
            "expectancy",
            "in",
            "the",
            "countries",
            "where",
            "English",
            "is",
            "not",
            "the",
            "official",
            "language",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 765,
        "query": "SELECT AVG(c.lifeexpectancy) FROM country c WHERE NOT EXISTS (SELECT 1 FROM countrylanguage cl WHERE cl.countrycode = c.code AND cl.language = 'English' AND cl.isofficial = 'T')",
        "query_toks": [
            "SELECT",
            "AVG",
            "(",
            "c.lifeexpectancy",
            ")",
            "FROM",
            "country",
            "c",
            "WHERE",
            "NOT",
            "EXISTS",
            "(",
            "SELECT",
            "1",
            "FROM",
            "countrylanguage",
            "cl",
            "WHERE",
            "cl.countrycode",
            "=",
            "c.code",
            "AND",
            "cl.language",
            "=",
            "'English",
            "'",
            "AND",
            "cl.isofficial",
            "=",
            "'T",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "c.lifeexpectancy",
            ")",
            "from",
            "country",
            "c",
            "where",
            "not",
            "exists",
            "(",
            "select",
            "value",
            "from",
            "countrylanguage",
            "cl",
            "where",
            "cl.countrycode",
            "=",
            "c.code",
            "and",
            "cl.language",
            "=",
            "value",
            "and",
            "cl.isofficial",
            "=",
            "value",
            ")"
        ],
        "question": "Give the mean life expectancy of countries in which English is not the official language.",
        "question_toks": [
            "Give",
            "the",
            "mean",
            "life",
            "expectancy",
            "of",
            "countries",
            "in",
            "which",
            "English",
            "is",
            "not",
            "the",
            "official",
            "language",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 766,
        "query": "SELECT SUM(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')",
        "query_toks": [
            "SELECT",
            "SUM",
            "(",
            "population",
            ")",
            "FROM",
            "country",
            "WHERE",
            "code",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "countrycode",
            "FROM",
            "countrylanguage",
            "WHERE",
            "language",
            "=",
            "'English",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "code",
            "not",
            "in",
            "(",
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "value",
            ")"
        ],
        "question": "What is the total number of people living in the nations that do not use English?",
        "question_toks": [
            "What",
            "is",
            "the",
            "total",
            "number",
            "of",
            "people",
            "living",
            "in",
            "the",
            "nations",
            "that",
            "do",
            "not",
            "use",
            "English",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 767,
        "query": "SELECT SUM(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')",
        "query_toks": [
            "SELECT",
            "SUM",
            "(",
            "population",
            ")",
            "FROM",
            "country",
            "WHERE",
            "code",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "countrycode",
            "FROM",
            "countrylanguage",
            "WHERE",
            "language",
            "=",
            "'English",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "code",
            "not",
            "in",
            "(",
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "value",
            ")"
        ],
        "question": "How many people live in countries that do not speak English?",
        "question_toks": [
            "How",
            "many",
            "people",
            "live",
            "in",
            "countries",
            "that",
            "do",
            "not",
            "speak",
            "English",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 768,
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Beatrix' AND T2.IsOfficial = 'T'",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "Language",
            "FROM",
            "country",
            "AS",
            "T1",
            "JOIN",
            "countrylanguage",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Code",
            "=",
            "T2",
            ".",
            "CountryCode",
            "WHERE",
            "T1",
            ".",
            "HeadOfState",
            "=",
            "'Beatrix",
            "'",
            "AND",
            "T2",
            ".",
            "IsOfficial",
            "=",
            "'T",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "language",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "headofstate",
            "=",
            "value",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "value"
        ],
        "question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "question_toks": [
            "What",
            "is",
            "the",
            "official",
            "language",
            "spoken",
            "in",
            "the",
            "country",
            "whose",
            "head",
            "of",
            "state",
            "is",
            "Beatrix",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 769,
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Beatrix' AND T2.IsOfficial = 'T'",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "Language",
            "FROM",
            "country",
            "AS",
            "T1",
            "JOIN",
            "countrylanguage",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Code",
            "=",
            "T2",
            ".",
            "CountryCode",
            "WHERE",
            "T1",
            ".",
            "HeadOfState",
            "=",
            "'Beatrix",
            "'",
            "AND",
            "T2",
            ".",
            "IsOfficial",
            "=",
            "'T",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "language",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "headofstate",
            "=",
            "value",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "value"
        ],
        "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "question_toks": [
            "What",
            "is",
            "the",
            "official",
            "language",
            "used",
            "in",
            "the",
            "country",
            "the",
            "name",
            "of",
            "whose",
            "head",
            "of",
            "state",
            "is",
            "Beatrix",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 770,
        "query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = 'T'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "T2",
            ".",
            "Language",
            ")",
            "FROM",
            "country",
            "AS",
            "T1",
            "JOIN",
            "countrylanguage",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Code",
            "=",
            "T2",
            ".",
            "CountryCode",
            "WHERE",
            "IndepYear",
            "<",
            "1930",
            "AND",
            "T2",
            ".",
            "IsOfficial",
            "=",
            "'T",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "t2",
            ".",
            "language",
            ")",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "indepyear",
            "<",
            "value",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "value"
        ],
        "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "question_toks": [
            "What",
            "is",
            "the",
            "total",
            "number",
            "of",
            "unique",
            "official",
            "languages",
            "spoken",
            "in",
            "the",
            "countries",
            "that",
            "are",
            "founded",
            "before",
            "1930",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 771,
        "query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = 'T'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "T2",
            ".",
            "Language",
            ")",
            "FROM",
            "country",
            "AS",
            "T1",
            "JOIN",
            "countrylanguage",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Code",
            "=",
            "T2",
            ".",
            "CountryCode",
            "WHERE",
            "IndepYear",
            "<",
            "1930",
            "AND",
            "T2",
            ".",
            "IsOfficial",
            "=",
            "'T",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "t2",
            ".",
            "language",
            ")",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "indepyear",
            "<",
            "value",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "value"
        ],
        "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
        "question_toks": [
            "For",
            "the",
            "countries",
            "founded",
            "before",
            "1930",
            ",",
            "what",
            "is",
            "the",
            "total",
            "number",
            "of",
            "distinct",
            "official",
            "languages",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 772,
        "query": "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "country",
            "WHERE",
            "surfacearea",
            ">",
            "(",
            "SELECT",
            "MAX",
            "(",
            "surfacearea",
            ")",
            "FROM",
            "country",
            "WHERE",
            "continent",
            "=",
            "'Europe",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "surfacearea",
            ">",
            "(",
            "select",
            "max",
            "(",
            "surfacearea",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            ")"
        ],
        "question": "What are the countries that have greater surface area than any country in Europe?",
        "question_toks": [
            "What",
            "are",
            "the",
            "countries",
            "that",
            "have",
            "greater",
            "surface",
            "area",
            "than",
            "any",
            "country",
            "in",
            "Europe",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 773,
        "query": "SELECT Name FROM country WHERE SurfaceArea > (SELECT max(SurfaceArea) FROM country WHERE Continent = 'Europe')",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "country",
            "WHERE",
            "SurfaceArea",
            ">",
            "(",
            "SELECT",
            "max",
            "(",
            "SurfaceArea",
            ")",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "'Europe",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "surfacearea",
            ">",
            "(",
            "select",
            "max",
            "(",
            "surfacearea",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            ")"
        ],
        "question": "List the names of countries that have a greater surface area than the largest surface area of any country in Europe.",
        "question_toks": [
            "List",
            "the",
            "names",
            "of",
            "countries",
            "that",
            "have",
            "a",
            "greater",
            "surface",
            "area",
            "than",
            "the",
            "largest",
            "surface",
            "area",
            "of",
            "any",
            "country",
            "in",
            "Europe",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 774,
        "query": "SELECT A.name FROM country AS A WHERE A.continent = 'Africa' AND A.population < (SELECT MIN(B.population) FROM country B WHERE B.continent = 'Asia')",
        "query_toks": [
            "SELECT",
            "A.name",
            "FROM",
            "country",
            "AS",
            "A",
            "WHERE",
            "A.continent",
            "=",
            "'Africa",
            "'",
            "AND",
            "A.population",
            "<",
            "(",
            "SELECT",
            "MIN",
            "(",
            "B.population",
            ")",
            "FROM",
            "country",
            "B",
            "WHERE",
            "B.continent",
            "=",
            "'Asia",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "a.name",
            "from",
            "country",
            "as",
            "a",
            "where",
            "a.continent",
            "=",
            "value",
            "and",
            "a.population",
            "<",
            "(",
            "select",
            "min",
            "(",
            "b.population",
            ")",
            "from",
            "country",
            "b",
            "where",
            "b.continent",
            "=",
            "value",
            ")"
        ],
        "question": "What are the African countries that have a  population less than any country in Asia?",
        "question_toks": [
            "What",
            "are",
            "the",
            "African",
            "countries",
            "that",
            "have",
            "a",
            "population",
            "less",
            "than",
            "any",
            "country",
            "in",
            "Asia",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 775,
        "query": "SELECT Name FROM country WHERE Continent = 'Africa' AND population < (SELECT min(population) FROM country WHERE Continent = 'Asia')",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "'Africa",
            "'",
            "AND",
            "population",
            "<",
            "(",
            "SELECT",
            "min",
            "(",
            "population",
            ")",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "'Asia",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            "and",
            "population",
            "<",
            "(",
            "select",
            "min",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            ")"
        ],
        "question": "Which African countries have a smaller population than that of any country in Asia?",
        "question_toks": [
            "Which",
            "African",
            "countries",
            "have",
            "a",
            "smaller",
            "population",
            "than",
            "that",
            "of",
            "any",
            "country",
            "in",
            "Asia",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 776,
        "query": "SELECT Name FROM country WHERE Continent = 'Asia' AND population > (SELECT max(population) FROM country WHERE Continent = 'Africa')",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "'Asia",
            "'",
            "AND",
            "population",
            ">",
            "(",
            "SELECT",
            "max",
            "(",
            "population",
            ")",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "'Africa",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            "and",
            "population",
            ">",
            "(",
            "select",
            "max",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            ")"
        ],
        "question": "Which Asian countries have a population that is larger than any country in Africa?",
        "question_toks": [
            "Which",
            "Asian",
            "countries",
            "have",
            "a",
            "population",
            "that",
            "is",
            "larger",
            "than",
            "any",
            "country",
            "in",
            "Africa",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 777,
        "query": "SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "'Asia",
            "'",
            "AND",
            "Population",
            ">",
            "(",
            "SELECT",
            "MAX",
            "(",
            "Population",
            ")",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "'Africa",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            "and",
            "population",
            ">",
            "(",
            "select",
            "max",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            ")"
        ],
        "question": "List the names of Asian countries which have a population larger than that of each individual country in Africa.",
        "question_toks": [
            "List",
            "the",
            "names",
            "of",
            "Asian",
            "countries",
            "which",
            "have",
            "a",
            "population",
            "larger",
            "than",
            "that",
            "of",
            "each",
            "individual",
            "country",
            "in",
            "Africa",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 778,
        "query": "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')",
        "query_toks": [
            "SELECT",
            "code",
            "FROM",
            "country",
            "WHERE",
            "code",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "countrycode",
            "FROM",
            "countrylanguage",
            "WHERE",
            "language",
            "=",
            "'English",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "code",
            "from",
            "country",
            "where",
            "code",
            "not",
            "in",
            "(",
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "value",
            ")"
        ],
        "question": "What are the country codes for countries that do not speak English?",
        "question_toks": [
            "What",
            "are",
            "the",
            "country",
            "codes",
            "for",
            "countries",
            "that",
            "do",
            "not",
            "speak",
            "English",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 779,
        "query": "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')",
        "query_toks": [
            "SELECT",
            "code",
            "FROM",
            "country",
            "WHERE",
            "code",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "countrycode",
            "FROM",
            "countrylanguage",
            "WHERE",
            "language",
            "=",
            "'English",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "code",
            "from",
            "country",
            "where",
            "code",
            "not",
            "in",
            "(",
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "value",
            ")"
        ],
        "question": "Return the country codes for countries that do not speak English.",
        "question_toks": [
            "Return",
            "the",
            "country",
            "codes",
            "for",
            "countries",
            "that",
            "do",
            "not",
            "speak",
            "English",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 780,
        "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != 'English'",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "CountryCode",
            "FROM",
            "countrylanguage",
            "WHERE",
            "LANGUAGE",
            "!",
            "=",
            "'English",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "language",
            "!",
            "=",
            "value"
        ],
        "question": "What are the country codes of countries where people use languages other than English?",
        "question_toks": [
            "What",
            "are",
            "the",
            "country",
            "codes",
            "of",
            "countries",
            "where",
            "people",
            "use",
            "languages",
            "other",
            "than",
            "English",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 781,
        "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != 'English'",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "CountryCode",
            "FROM",
            "countrylanguage",
            "WHERE",
            "LANGUAGE",
            "!",
            "=",
            "'English",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "language",
            "!",
            "=",
            "value"
        ],
        "question": "Give the country codes for countries in which people speak langauges that are not English.",
        "question_toks": [
            "Give",
            "the",
            "country",
            "codes",
            "for",
            "countries",
            "in",
            "which",
            "people",
            "speak",
            "langauges",
            "that",
            "are",
            "not",
            "English",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 782,
        "query": "SELECT Code FROM country WHERE GovernmentForm != 'Republic' EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'English'",
        "query_toks": [
            "SELECT",
            "Code",
            "FROM",
            "country",
            "WHERE",
            "GovernmentForm",
            "!",
            "=",
            "'Republic",
            "'",
            "EXCEPT",
            "SELECT",
            "CountryCode",
            "FROM",
            "countrylanguage",
            "WHERE",
            "LANGUAGE",
            "=",
            "'English",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "code",
            "from",
            "country",
            "where",
            "governmentform",
            "!",
            "=",
            "value",
            "except",
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "value"
        ],
        "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "question_toks": [
            "What",
            "are",
            "the",
            "codes",
            "of",
            "the",
            "countries",
            "that",
            "do",
            "not",
            "speak",
            "English",
            "and",
            "whose",
            "government",
            "forms",
            "are",
            "not",
            "Republic",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 783,
        "query": "SELECT Code FROM country WHERE GovernmentForm != 'Republic' EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  'English'",
        "query_toks": [
            "SELECT",
            "Code",
            "FROM",
            "country",
            "WHERE",
            "GovernmentForm",
            "!",
            "=",
            "'Republic",
            "'",
            "EXCEPT",
            "SELECT",
            "CountryCode",
            "FROM",
            "countrylanguage",
            "WHERE",
            "LANGUAGE",
            "=",
            "'English",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "code",
            "from",
            "country",
            "where",
            "governmentform",
            "!",
            "=",
            "value",
            "except",
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "value"
        ],
        "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "question_toks": [
            "Return",
            "the",
            "codes",
            "of",
            "countries",
            "that",
            "do",
            "not",
            "speak",
            "English",
            "and",
            "do",
            "not",
            "have",
            "Republics",
            "for",
            "governments",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 784,
        "query": "SELECT T1.name FROM city AS T1 WHERE T1.countrycode IN (SELECT T2.code FROM country AS T2 WHERE T2.continent = 'Europe' AND NOT EXISTS (SELECT countrycode FROM countrylanguage AS T3 WHERE T2.code = T3.countrycode AND T3.language = 'English' AND T3.isofficial = 'T'))",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "name",
            "FROM",
            "city",
            "AS",
            "T1",
            "WHERE",
            "T1",
            ".",
            "countrycode",
            "IN",
            "(",
            "SELECT",
            "T2",
            ".",
            "code",
            "FROM",
            "country",
            "AS",
            "T2",
            "WHERE",
            "T2",
            ".",
            "continent",
            "=",
            "'Europe",
            "'",
            "AND",
            "NOT",
            "EXISTS",
            "(",
            "SELECT",
            "countrycode",
            "FROM",
            "countrylanguage",
            "AS",
            "T3",
            "WHERE",
            "T2",
            ".",
            "code",
            "=",
            "T3",
            ".",
            "countrycode",
            "AND",
            "T3",
            ".",
            "language",
            "=",
            "'English",
            "'",
            "AND",
            "T3",
            ".",
            "isofficial",
            "=",
            "'T",
            "'",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "city",
            "as",
            "t1",
            "where",
            "t1",
            ".",
            "countrycode",
            "in",
            "(",
            "select",
            "t2",
            ".",
            "code",
            "from",
            "country",
            "as",
            "t2",
            "where",
            "t2",
            ".",
            "continent",
            "=",
            "value",
            "and",
            "not",
            "exists",
            "(",
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "as",
            "t3",
            "where",
            "t2",
            ".",
            "code",
            "=",
            "t3",
            ".",
            "countrycode",
            "and",
            "t3",
            ".",
            "language",
            "=",
            "value",
            "and",
            "t3",
            ".",
            "isofficial",
            "=",
            "value",
            ")",
            ")"
        ],
        "question": "Which cities are in European countries where English is not the official language?",
        "question_toks": [
            "Which",
            "cities",
            "are",
            "in",
            "European",
            "countries",
            "where",
            "English",
            "is",
            "not",
            "the",
            "official",
            "language",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 785,
        "query": "SELECT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND T1.Code NOT IN (SELECT T3.Code FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English')",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "Name",
            "FROM",
            "country",
            "AS",
            "T1",
            "JOIN",
            "city",
            "AS",
            "T2",
            "ON",
            "T2",
            ".",
            "CountryCode",
            "=",
            "T1",
            ".",
            "Code",
            "WHERE",
            "T1",
            ".",
            "Continent",
            "=",
            "'Europe",
            "'",
            "AND",
            "T1",
            ".",
            "Code",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "T3",
            ".",
            "Code",
            "FROM",
            "country",
            "AS",
            "T3",
            "JOIN",
            "countrylanguage",
            "AS",
            "T4",
            "ON",
            "T3",
            ".",
            "Code",
            "=",
            "T4",
            ".",
            "CountryCode",
            "WHERE",
            "T4",
            ".",
            "IsOfficial",
            "=",
            "'T",
            "'",
            "AND",
            "T4",
            ".",
            "Language",
            "=",
            "'English",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "city",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "countrycode",
            "=",
            "t1",
            ".",
            "code",
            "where",
            "t1",
            ".",
            "continent",
            "=",
            "value",
            "and",
            "t1",
            ".",
            "code",
            "not",
            "in",
            "(",
            "select",
            "t3",
            ".",
            "code",
            "from",
            "country",
            "as",
            "t3",
            "join",
            "countrylanguage",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "code",
            "=",
            "t4",
            ".",
            "countrycode",
            "where",
            "t4",
            ".",
            "isofficial",
            "=",
            "value",
            "and",
            "t4",
            ".",
            "language",
            "=",
            "value",
            ")"
        ],
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "cities",
            "in",
            "Europe",
            "for",
            "which",
            "English",
            "is",
            "not",
            "the",
            "official",
            "language",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 786,
        "query": "select t3.name, t3.population from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode join city as t3 on t1.code = t3.countrycode where t2.isofficial = 't' and t2.language = 'Chinese' and t1.continent = 'Asia'",
        "query_toks": [
            "select",
            "t3",
            ".",
            "name,",
            "t3",
            ".",
            "population",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "join",
            "city",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t3",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "isofficial",
            "=",
            "'t",
            "'",
            "and",
            "t2",
            ".",
            "language",
            "=",
            "'Chinese",
            "'",
            "and",
            "t1",
            ".",
            "continent",
            "=",
            "'Asia",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "t3",
            ".",
            "name,",
            "t3",
            ".",
            "population",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "join",
            "city",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t3",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "isofficial",
            "=",
            "value",
            "and",
            "t2",
            ".",
            "language",
            "=",
            "value",
            "and",
            "t1",
            ".",
            "continent",
            "=",
            "value"
        ],
        "question": "List the names and populations of unique cities in Asian countries where Chinese is the official language.",
        "question_toks": [
            "List",
            "the",
            "names",
            "and",
            "populations",
            "of",
            "unique",
            "cities",
            "in",
            "Asian",
            "countries",
            "where",
            "Chinese",
            "is",
            "the",
            "official",
            "language",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 787,
        "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode JOIN city AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' AND T2.Language = 'Chinese' AND T1.Continent = 'Asia'",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T3",
            ".",
            "Name",
            "FROM",
            "country",
            "AS",
            "T1",
            "JOIN",
            "countrylanguage",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Code",
            "=",
            "T2",
            ".",
            "CountryCode",
            "JOIN",
            "city",
            "AS",
            "T3",
            "ON",
            "T1",
            ".",
            "Code",
            "=",
            "T3",
            ".",
            "CountryCode",
            "WHERE",
            "T2",
            ".",
            "IsOfficial",
            "=",
            "'T",
            "'",
            "AND",
            "T2",
            ".",
            "Language",
            "=",
            "'Chinese",
            "'",
            "AND",
            "T1",
            ".",
            "Continent",
            "=",
            "'Asia",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "t3",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "join",
            "city",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t3",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "isofficial",
            "=",
            "value",
            "and",
            "t2",
            ".",
            "language",
            "=",
            "value",
            "and",
            "t1",
            ".",
            "continent",
            "=",
            "value"
        ],
        "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "question_toks": [
            "Return",
            "the",
            "different",
            "names",
            "of",
            "cities",
            "that",
            "are",
            "in",
            "Asia",
            "and",
            "for",
            "which",
            "Chinese",
            "is",
            "the",
            "official",
            "language",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 788,
        "query": "SELECT Name, SurfaceArea, IndepYear FROM country WHERE Population = (SELECT MIN(Population) FROM country)",
        "query_toks": [
            "SELECT",
            "Name,",
            "SurfaceArea,",
            "IndepYear",
            "FROM",
            "country",
            "WHERE",
            "Population",
            "=",
            "(",
            "SELECT",
            "MIN",
            "(",
            "Population",
            ")",
            "FROM",
            "country",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name,",
            "surfacearea,",
            "indepyear",
            "from",
            "country",
            "where",
            "population",
            "=",
            "(",
            "select",
            "min",
            "(",
            "population",
            ")",
            "from",
            "country",
            ")"
        ],
        "question": "What are the name, independence year, and surface area of all countries with the smallest population?",
        "question_toks": [
            "What",
            "are",
            "the",
            "name",
            ",",
            "independence",
            "year",
            ",",
            "and",
            "surface",
            "area",
            "of",
            "all",
            "countries",
            "with",
            "the",
            "smallest",
            "population",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 789,
        "query": "SELECT Name, SurfaceArea, IndepYear FROM country WHERE Population = (SELECT MIN(Population) FROM country)",
        "query_toks": [
            "SELECT",
            "Name,",
            "SurfaceArea,",
            "IndepYear",
            "FROM",
            "country",
            "WHERE",
            "Population",
            "=",
            "(",
            "SELECT",
            "MIN",
            "(",
            "Population",
            ")",
            "FROM",
            "country",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name,",
            "surfacearea,",
            "indepyear",
            "from",
            "country",
            "where",
            "population",
            "=",
            "(",
            "select",
            "min",
            "(",
            "population",
            ")",
            "from",
            "country",
            ")"
        ],
        "question": "Give the name, year of independence, and surface area for all countries that have the lowest population.",
        "question_toks": [
            "Give",
            "the",
            "name",
            ",",
            "year",
            "of",
            "independence",
            ",",
            "and",
            "surface",
            "area",
            "for",
            "all",
            "countries",
            "that",
            "have",
            "the",
            "lowest",
            "population",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 790,
        "query": "SELECT Name, Population, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)",
        "query_toks": [
            "SELECT",
            "Name,",
            "Population,",
            "HeadOfState",
            "FROM",
            "country",
            "WHERE",
            "SurfaceArea",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "SurfaceArea",
            ")",
            "FROM",
            "country",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name,",
            "population,",
            "headofstate",
            "from",
            "country",
            "where",
            "surfacearea",
            "=",
            "(",
            "select",
            "max",
            "(",
            "surfacearea",
            ")",
            "from",
            "country",
            ")"
        ],
        "question": "What are the population, name and leader of all countries with the largest area?",
        "question_toks": [
            "What",
            "are",
            "the",
            "population",
            ",",
            "name",
            "and",
            "leader",
            "of",
            "all",
            "countries",
            "with",
            "the",
            "largest",
            "area",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 791,
        "query": "SELECT Name, Population, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)",
        "query_toks": [
            "SELECT",
            "Name,",
            "Population,",
            "HeadOfState",
            "FROM",
            "country",
            "WHERE",
            "SurfaceArea",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "SurfaceArea",
            ")",
            "FROM",
            "country",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name,",
            "population,",
            "headofstate",
            "from",
            "country",
            "where",
            "surfacearea",
            "=",
            "(",
            "select",
            "max",
            "(",
            "surfacearea",
            ")",
            "from",
            "country",
            ")"
        ],
        "question": "Give the name, population, and head of state for all countries that have the largest area.",
        "question_toks": [
            "Give",
            "the",
            "name",
            ",",
            "population",
            ",",
            "and",
            "head",
            "of",
            "state",
            "for",
            "all",
            "countries",
            "that",
            "have",
            "the",
            "largest",
            "area",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 792,
        "query": "SELECT distinctcountry.name, num_languages FROM (SELECT C.name, COUNT(DISTINCT L.language) AS num_languages FROM country C INNER JOIN countrylanguage L ON C.code = L.countrycode GROUP BY C.code) AS distinctcountry WHERE distinctcountry.num_languages >= 3",
        "query_toks": [
            "SELECT",
            "distinctcountry.name,",
            "num_languages",
            "FROM",
            "(",
            "SELECT",
            "C.name,",
            "COUNT",
            "(",
            "DISTINCT",
            "L.language",
            ")",
            "AS",
            "num_languages",
            "FROM",
            "country",
            "C",
            "INNER",
            "JOIN",
            "countrylanguage",
            "L",
            "ON",
            "C.code",
            "=",
            "L.countrycode",
            "GROUP",
            "BY",
            "C.code",
            ")",
            "AS",
            "distinctcountry",
            "WHERE",
            "distinctcountry.num_languages",
            ">",
            "=",
            "3"
        ],
        "query_toks_no_value": [
            "select",
            "distinctcountry.name,",
            "num_languages",
            "from",
            "(",
            "select",
            "c.name,",
            "count",
            "(",
            "distinct",
            "l.language",
            ")",
            "as",
            "num_languages",
            "from",
            "country",
            "c",
            "inner",
            "join",
            "countrylanguage",
            "l",
            "on",
            "c.code",
            "=",
            "l.countrycode",
            "group",
            "by",
            "c.code",
            ")",
            "as",
            "distinctcountry",
            "where",
            "distinctcountry.num_languages",
            ">",
            "=",
            "value"
        ],
        "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "question_toks": [
            "Return",
            "the",
            "country",
            "name",
            "and",
            "the",
            "numbers",
            "of",
            "languages",
            "spoken",
            "for",
            "each",
            "country",
            "that",
            "speaks",
            "at",
            "least",
            "3",
            "languages",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 793,
        "query": "SELECT country.name, COUNT(DISTINCT countrylanguage.language) AS language_count FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.code HAVING COUNT(DISTINCT countrylanguage.language) > 2",
        "query_toks": [
            "SELECT",
            "country.name,",
            "COUNT",
            "(",
            "DISTINCT",
            "countrylanguage.language",
            ")",
            "AS",
            "language_count",
            "FROM",
            "country",
            "JOIN",
            "countrylanguage",
            "ON",
            "country.code",
            "=",
            "countrylanguage.countrycode",
            "GROUP",
            "BY",
            "country.code",
            "HAVING",
            "COUNT",
            "(",
            "DISTINCT",
            "countrylanguage.language",
            ")",
            ">",
            "2"
        ],
        "query_toks_no_value": [
            "select",
            "country.name,",
            "count",
            "(",
            "distinct",
            "countrylanguage.language",
            ")",
            "as",
            "language_count",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode",
            "group",
            "by",
            "country.code",
            "having",
            "count",
            "(",
            "distinct",
            "countrylanguage.language",
            ")",
            ">",
            "value"
        ],
        "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "countries",
            "that",
            "speak",
            "more",
            "than",
            "2",
            "languages",
            ",",
            "as",
            "well",
            "as",
            "how",
            "many",
            "languages",
            "they",
            "speak",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 794,
        "query": "SELECT count(*) , District FROM city WHERE Population > (SELECT avg(Population) FROM city) GROUP BY District",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "District",
            "FROM",
            "city",
            "WHERE",
            "Population",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "Population",
            ")",
            "FROM",
            "city",
            ")",
            "GROUP",
            "BY",
            "District"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "district",
            "from",
            "city",
            "where",
            "population",
            ">",
            "(",
            "select",
            "avg",
            "(",
            "population",
            ")",
            "from",
            "city",
            ")",
            "group",
            "by",
            "district"
        ],
        "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "question_toks": [
            "Find",
            "the",
            "number",
            "of",
            "cities",
            "in",
            "each",
            "district",
            "whose",
            "population",
            "is",
            "greater",
            "than",
            "the",
            "average",
            "population",
            "of",
            "cities",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 795,
        "query": "SELECT count(*) , District FROM city WHERE Population > (SELECT avg(Population) FROM city) GROUP BY District",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "District",
            "FROM",
            "city",
            "WHERE",
            "Population",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "Population",
            ")",
            "FROM",
            "city",
            ")",
            "GROUP",
            "BY",
            "District"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "district",
            "from",
            "city",
            "where",
            "population",
            ">",
            "(",
            "select",
            "avg",
            "(",
            "population",
            ")",
            "from",
            "city",
            ")",
            "group",
            "by",
            "district"
        ],
        "question": "How many cities in each district have a population that is above the average population across all cities?",
        "question_toks": [
            "How",
            "many",
            "cities",
            "in",
            "each",
            "district",
            "have",
            "a",
            "population",
            "that",
            "is",
            "above",
            "the",
            "average",
            "population",
            "across",
            "all",
            "cities",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 796,
        "query": "SELECT sum(Population) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "Population",
            ")",
            ",",
            "GovernmentForm",
            "FROM",
            "country",
            "GROUP",
            "BY",
            "GovernmentForm",
            "HAVING",
            "avg",
            "(",
            "LifeExpectancy",
            ")",
            ">",
            "72"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "governmentform",
            "from",
            "country",
            "group",
            "by",
            "governmentform",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ">",
            "value"
        ],
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "question_toks": [
            "Find",
            "the",
            "government",
            "form",
            "name",
            "and",
            "total",
            "population",
            "for",
            "each",
            "government",
            "form",
            "whose",
            "average",
            "life",
            "expectancy",
            "is",
            "longer",
            "than",
            "72",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 797,
        "query": "SELECT sum(Population) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "Population",
            ")",
            ",",
            "GovernmentForm",
            "FROM",
            "country",
            "GROUP",
            "BY",
            "GovernmentForm",
            "HAVING",
            "avg",
            "(",
            "LifeExpectancy",
            ")",
            ">",
            "72"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "governmentform",
            "from",
            "country",
            "group",
            "by",
            "governmentform",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ">",
            "value"
        ],
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
        "question_toks": [
            "What",
            "are",
            "the",
            "different",
            "government",
            "forms",
            "and",
            "what",
            "is",
            "the",
            "total",
            "population",
            "of",
            "each",
            "for",
            "government",
            "forms",
            "that",
            "have",
            "an",
            "average",
            "life",
            "expectancy",
            "greater",
            "than",
            "72",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 798,
        "query": "SELECT sum(Population) , avg(LifeExpectancy) , Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "Population",
            ")",
            ",",
            "avg",
            "(",
            "LifeExpectancy",
            ")",
            ",",
            "Continent",
            "FROM",
            "country",
            "GROUP",
            "BY",
            "Continent",
            "HAVING",
            "avg",
            "(",
            "LifeExpectancy",
            ")",
            "<",
            "72"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ",",
            "continent",
            "from",
            "country",
            "group",
            "by",
            "continent",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "<",
            "value"
        ],
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "question_toks": [
            "Find",
            "the",
            "average",
            "life",
            "expectancy",
            "and",
            "total",
            "population",
            "for",
            "each",
            "continent",
            "where",
            "the",
            "average",
            "life",
            "expectancy",
            "is",
            "shorter",
            "than",
            "72",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 799,
        "query": "SELECT sum(Population) , avg(LifeExpectancy) , Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "Population",
            ")",
            ",",
            "avg",
            "(",
            "LifeExpectancy",
            ")",
            ",",
            "Continent",
            "FROM",
            "country",
            "GROUP",
            "BY",
            "Continent",
            "HAVING",
            "avg",
            "(",
            "LifeExpectancy",
            ")",
            "<",
            "72"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ",",
            "continent",
            "from",
            "country",
            "group",
            "by",
            "continent",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "<",
            "value"
        ],
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "question_toks": [
            "What",
            "are",
            "the",
            "different",
            "continents",
            "and",
            "the",
            "total",
            "popuation",
            "and",
            "average",
            "life",
            "expectancy",
            "corresponding",
            "to",
            "each",
            ",",
            "for",
            "continents",
            "that",
            "have",
            "an",
            "average",
            "life",
            "expectancy",
            "less",
            "than",
            "72",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 800,
        "query": "SELECT Name, SurfaceArea, Code FROM country ORDER BY SurfaceArea DESC, Name ASC, Code ASC LIMIT 5",
        "query_toks": [
            "SELECT",
            "Name,",
            "SurfaceArea,",
            "Code",
            "FROM",
            "country",
            "ORDER",
            "BY",
            "SurfaceArea",
            "DESC,",
            "Name",
            "ASC,",
            "Code",
            "ASC",
            "LIMIT",
            "5"
        ],
        "query_toks_no_value": [
            "select",
            "name,",
            "surfacearea,",
            "code",
            "from",
            "country",
            "order",
            "by",
            "surfacearea",
            "desc,",
            "name",
            "asc,",
            "code",
            "asc",
            "limit",
            "value"
        ],
        "question": "What are the names and areas of countries with the top 5 largest area (sorted by name alphabetically and then by ascending country code if tie)?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "and",
            "areas",
            "of",
            "countries",
            "with",
            "the",
            "top",
            "5",
            "largest",
            "area",
            "(",
            "sorted",
            "by",
            "name",
            "alphabetically",
            "and",
            "then",
            "by",
            "ascending",
            "country",
            "code",
            "if",
            "tie",
            ")?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 801,
        "query": "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC, Population DESC, Code ASC LIMIT 5",
        "query_toks": [
            "SELECT",
            "Name,",
            "SurfaceArea",
            "FROM",
            "country",
            "ORDER",
            "BY",
            "SurfaceArea",
            "DESC,",
            "Population",
            "DESC,",
            "Code",
            "ASC",
            "LIMIT",
            "5"
        ],
        "query_toks_no_value": [
            "select",
            "name,",
            "surfacearea",
            "from",
            "country",
            "order",
            "by",
            "surfacearea",
            "desc,",
            "population",
            "desc,",
            "code",
            "asc",
            "limit",
            "value"
        ],
        "question": "Return the names and surface areas of the 5 largest countries sorted by descending surface area and population, and then by ascending country code.",
        "question_toks": [
            "Return",
            "the",
            "names",
            "and",
            "surface",
            "areas",
            "of",
            "the",
            "5",
            "largest",
            "countries",
            "sorted",
            "by",
            "descending",
            "surface",
            "area",
            "and",
            "population",
            ",",
            "and",
            "then",
            "by",
            "ascending",
            "country",
            "code",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 802,
        "query": "SELECT name FROM country ORDER BY population DESC, name, code LIMIT 3",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "country",
            "ORDER",
            "BY",
            "population",
            "DESC,",
            "name,",
            "code",
            "LIMIT",
            "3"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "country",
            "order",
            "by",
            "population",
            "desc,",
            "name,",
            "code",
            "limit",
            "value"
        ],
        "question": "What are names of countries with the top 3 largest population (sorted by name alphabetically and then by ascending country code if tie)?",
        "question_toks": [
            "What",
            "are",
            "names",
            "of",
            "countries",
            "with",
            "the",
            "top",
            "3",
            "largest",
            "population",
            "(",
            "sorted",
            "by",
            "name",
            "alphabetically",
            "and",
            "then",
            "by",
            "ascending",
            "country",
            "code",
            "if",
            "tie",
            ")?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 803,
        "query": "SELECT Name FROM country ORDER BY Population DESC, Name ASC, Code ASC LIMIT 3",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "country",
            "ORDER",
            "BY",
            "Population",
            "DESC,",
            "Name",
            "ASC,",
            "Code",
            "ASC",
            "LIMIT",
            "3"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "country",
            "order",
            "by",
            "population",
            "desc,",
            "name",
            "asc,",
            "code",
            "asc",
            "limit",
            "value"
        ],
        "question": "Return the names of the 3 most populated countries, sorted by name alphabetically and then by ascending country code if tie.",
        "question_toks": [
            "Return",
            "the",
            "names",
            "of",
            "the",
            "3",
            "most",
            "populated",
            "countries",
            ",",
            "sorted",
            "by",
            "name",
            "alphabetically",
            "and",
            "then",
            "by",
            "ascending",
            "country",
            "code",
            "if",
            "tie",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 804,
        "query": "SELECT Name FROM country ORDER BY Population ASC, Name ASC, Code ASC LIMIT 3",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "country",
            "ORDER",
            "BY",
            "Population",
            "ASC,",
            "Name",
            "ASC,",
            "Code",
            "ASC",
            "LIMIT",
            "3"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "country",
            "order",
            "by",
            "population",
            "asc,",
            "name",
            "asc,",
            "code",
            "asc",
            "limit",
            "value"
        ],
        "question": "What are the names of the nations with the 3 lowest populations, in alphabetical order of name and then ascending order of country code if populations are tied.",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "the",
            "nations",
            "with",
            "the",
            "3",
            "lowest",
            "populations",
            ",",
            "in",
            "alphabetical",
            "order",
            "of",
            "name",
            "and",
            "then",
            "ascending",
            "order",
            "of",
            "country",
            "code",
            "if",
            "populations",
            "are",
            "tied",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 805,
        "query": "SELECT Name FROM country ORDER BY Population ASC, Name ASC, Code ASC LIMIT 3",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "country",
            "ORDER",
            "BY",
            "Population",
            "ASC,",
            "Name",
            "ASC,",
            "Code",
            "ASC",
            "LIMIT",
            "3"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "country",
            "order",
            "by",
            "population",
            "asc,",
            "name",
            "asc,",
            "code",
            "asc",
            "limit",
            "value"
        ],
        "question": "Return the names of the 3 countries with the fewest people, in alphabetical order of name and then ascending order of country code if populations are tied.",
        "question_toks": [
            "Return",
            "the",
            "names",
            "of",
            "the",
            "3",
            "countries",
            "with",
            "the",
            "fewest",
            "people",
            ",",
            "in",
            "alphabetical",
            "order",
            "of",
            "name",
            "and",
            "then",
            "ascending",
            "order",
            "of",
            "country",
            "code",
            "if",
            "populations",
            "are",
            "tied",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 806,
        "query": "SELECT count(*) FROM country WHERE continent  =  'Asia'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "country",
            "WHERE",
            "continent",
            "=",
            "'Asia",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value"
        ],
        "question": "how many countries are in Asia?",
        "question_toks": [
            "how",
            "many",
            "countries",
            "are",
            "in",
            "Asia",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 807,
        "query": "SELECT count(*) FROM country WHERE continent  =  'Asia'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "country",
            "WHERE",
            "continent",
            "=",
            "'Asia",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value"
        ],
        "question": "Count the number of countries in Asia.",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "countries",
            "in",
            "Asia",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 808,
        "query": "SELECT Name FROM country WHERE continent = 'Europe' AND Population = '80000'",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "country",
            "WHERE",
            "continent",
            "=",
            "'Europe",
            "'",
            "AND",
            "Population",
            "=",
            "'80000",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            "and",
            "population",
            "=",
            "value"
        ],
        "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "the",
            "countries",
            "that",
            "are",
            "in",
            "the",
            "continent",
            "of",
            "Europe",
            "and",
            "have",
            "a",
            "population",
            "of",
            "80000",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 809,
        "query": "SELECT Name FROM country WHERE continent = 'Europe' AND Population = '80000'",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "country",
            "WHERE",
            "continent",
            "=",
            "'Europe",
            "'",
            "AND",
            "Population",
            "=",
            "'80000",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            "and",
            "population",
            "=",
            "value"
        ],
        "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
        "question_toks": [
            "Give",
            "the",
            "names",
            "of",
            "countries",
            "that",
            "are",
            "in",
            "Europe",
            "and",
            "have",
            "a",
            "population",
            "equal",
            "to",
            "80000",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 810,
        "query": "select sum(population), avg(surfacearea) from country where continent = 'North America' and surfacearea > 3000",
        "query_toks": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "avg",
            "(",
            "surfacearea",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "'North",
            "America",
            "'",
            "and",
            "surfacearea",
            ">",
            "3000"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "avg",
            "(",
            "surfacearea",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            "and",
            "surfacearea",
            ">",
            "value"
        ],
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "question_toks": [
            "What",
            "is",
            "the",
            "total",
            "population",
            "and",
            "average",
            "area",
            "of",
            "countries",
            "in",
            "the",
            "continent",
            "of",
            "North",
            "America",
            "whose",
            "area",
            "is",
            "bigger",
            "than",
            "3000",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 811,
        "query": "select sum(population), avg(surfacearea) from country where continent = 'North America' and surfacearea > 3000",
        "query_toks": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "avg",
            "(",
            "surfacearea",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "'North",
            "America",
            "'",
            "and",
            "surfacearea",
            ">",
            "3000"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "avg",
            "(",
            "surfacearea",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            "and",
            "surfacearea",
            ">",
            "value"
        ],
        "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "question_toks": [
            "Give",
            "the",
            "total",
            "population",
            "and",
            "average",
            "surface",
            "area",
            "corresponding",
            "to",
            "countries",
            "in",
            "North",
            "America",
            "that",
            "have",
            "a",
            "surface",
            "area",
            "greater",
            "than",
            "3000",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 812,
        "query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "city",
            "WHERE",
            "Population",
            "BETWEEN",
            "160000",
            "AND",
            "900000"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "city",
            "where",
            "population",
            "between",
            "value",
            "and",
            "value"
        ],
        "question": "What are the cities whose population is between 160000 and 900000?",
        "question_toks": [
            "What",
            "are",
            "the",
            "cities",
            "whose",
            "population",
            "is",
            "between",
            "160000",
            "and",
            "900000",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 813,
        "query": "select name from city where population between 160000 and 900000",
        "query_toks": [
            "select",
            "name",
            "from",
            "city",
            "where",
            "population",
            "between",
            "160000",
            "and",
            "900000"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "city",
            "where",
            "population",
            "between",
            "value",
            "and",
            "value"
        ],
        "question": "Return the names of cities that have a population between 160000 and 900000 .",
        "question_toks": [
            "Return",
            "the",
            "names",
            "of",
            "cities",
            "that",
            "have",
            "a",
            "population",
            "between",
            "160000",
            "and",
            "900000",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 814,
        "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE HAVING count(*) = (SELECT max(c) FROM (SELECT count(*) as c FROM countrylanguage GROUP BY LANGUAGE) temp)",
        "query_toks": [
            "SELECT",
            "LANGUAGE",
            "FROM",
            "countrylanguage",
            "GROUP",
            "BY",
            "LANGUAGE",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "c",
            ")",
            "FROM",
            "(",
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "as",
            "c",
            "FROM",
            "countrylanguage",
            "GROUP",
            "BY",
            "LANGUAGE",
            ")",
            "temp",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "language",
            "from",
            "countrylanguage",
            "group",
            "by",
            "language",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "c",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "c",
            "from",
            "countrylanguage",
            "group",
            "by",
            "language",
            ")",
            "temp",
            ")"
        ],
        "question": "List all languages that are spoken in the highest number of countries, including any ties.",
        "question_toks": [
            "List",
            "all",
            "languages",
            "that",
            "are",
            "spoken",
            "in",
            "the",
            "highest",
            "number",
            "of",
            "countries",
            ",",
            "including",
            "any",
            "ties",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 815,
        "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE HAVING COUNT(*) = (SELECT MAX(C) FROM (SELECT COUNT(*) AS C FROM countrylanguage GROUP BY LANGUAGE) sub)",
        "query_toks": [
            "SELECT",
            "LANGUAGE",
            "FROM",
            "countrylanguage",
            "GROUP",
            "BY",
            "LANGUAGE",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "C",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "C",
            "FROM",
            "countrylanguage",
            "GROUP",
            "BY",
            "LANGUAGE",
            ")",
            "sub",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "language",
            "from",
            "countrylanguage",
            "group",
            "by",
            "language",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "c",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "c",
            "from",
            "countrylanguage",
            "group",
            "by",
            "language",
            ")",
            "sub",
            ")"
        ],
        "question": "List all languages that are spoken in the highest number of countries, including any ties.",
        "question_toks": [
            "List",
            "all",
            "languages",
            "that",
            "are",
            "spoken",
            "in",
            "the",
            "highest",
            "number",
            "of",
            "countries",
            ",",
            "including",
            "any",
            "ties",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 816,
        "query": "SELECT T1.Language, T1.CountryCode, T2.Name FROM countrylanguage AS T1 JOIN country as T2 on T1.CountryCode = T2.Code WHERE Percentage = (SELECT MAX(Percentage) FROM countrylanguage as T3 WHERE T3.CountryCode = T2.Code)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "Language,",
            "T1",
            ".",
            "CountryCode,",
            "T2",
            ".",
            "Name",
            "FROM",
            "countrylanguage",
            "AS",
            "T1",
            "JOIN",
            "country",
            "as",
            "T2",
            "on",
            "T1",
            ".",
            "CountryCode",
            "=",
            "T2",
            ".",
            "Code",
            "WHERE",
            "Percentage",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "Percentage",
            ")",
            "FROM",
            "countrylanguage",
            "as",
            "T3",
            "WHERE",
            "T3",
            ".",
            "CountryCode",
            "=",
            "T2",
            ".",
            "Code",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "language,",
            "t1",
            ".",
            "countrycode,",
            "t2",
            ".",
            "name",
            "from",
            "countrylanguage",
            "as",
            "t1",
            "join",
            "country",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "countrycode",
            "=",
            "t2",
            ".",
            "code",
            "where",
            "percentage",
            "=",
            "(",
            "select",
            "max",
            "(",
            "percentage",
            ")",
            "from",
            "countrylanguage",
            "as",
            "t3",
            "where",
            "t3",
            ".",
            "countrycode",
            "=",
            "t2",
            ".",
            "code",
            ")"
        ],
        "question": "Show the language spoken by the largest percentage of people in each country, including ties, and the corresponding country code and name.",
        "question_toks": [
            "Show",
            "the",
            "language",
            "spoken",
            "by",
            "the",
            "largest",
            "percentage",
            "of",
            "people",
            "in",
            "each",
            "country",
            ",",
            "including",
            "ties",
            ",",
            "and",
            "the",
            "corresponding",
            "country",
            "code",
            "and",
            "name",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 817,
        "query": "SELECT CountryCode, Language FROM countrylanguage WHERE (CountryCode, Percentage) IN (SELECT CountryCode, max(Percentage) FROM countrylanguage GROUP BY CountryCode)",
        "query_toks": [
            "SELECT",
            "CountryCode,",
            "Language",
            "FROM",
            "countrylanguage",
            "WHERE",
            "(",
            "CountryCode,",
            "Percentage",
            ")",
            "IN",
            "(",
            "SELECT",
            "CountryCode,",
            "max",
            "(",
            "Percentage",
            ")",
            "FROM",
            "countrylanguage",
            "GROUP",
            "BY",
            "CountryCode",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "countrycode,",
            "language",
            "from",
            "countrylanguage",
            "where",
            "(",
            "countrycode,",
            "percentage",
            ")",
            "in",
            "(",
            "select",
            "countrycode,",
            "max",
            "(",
            "percentage",
            ")",
            "from",
            "countrylanguage",
            "group",
            "by",
            "countrycode",
            ")"
        ],
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "question_toks": [
            "What",
            "are",
            "the",
            "country",
            "codes",
            "of",
            "the",
            "different",
            "countries",
            ",",
            "and",
            "what",
            "are",
            "the",
            "languages",
            "spoken",
            "by",
            "the",
            "greatest",
            "percentage",
            "of",
            "people",
            "for",
            "each",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 818,
        "query": "SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage as T1 WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage as T2 WHERE T2.CountryCode = T1.CountryCode)",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "DISTINCT",
            "CountryCode",
            ")",
            "FROM",
            "countrylanguage",
            "as",
            "T1",
            "WHERE",
            "Language",
            "=",
            "'Spanish",
            "'",
            "AND",
            "Percentage",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "Percentage",
            ")",
            "FROM",
            "countrylanguage",
            "as",
            "T2",
            "WHERE",
            "T2",
            ".",
            "CountryCode",
            "=",
            "T1",
            ".",
            "CountryCode",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "countrycode",
            ")",
            "from",
            "countrylanguage",
            "as",
            "t1",
            "where",
            "language",
            "=",
            "value",
            "and",
            "percentage",
            "=",
            "(",
            "select",
            "max",
            "(",
            "percentage",
            ")",
            "from",
            "countrylanguage",
            "as",
            "t2",
            "where",
            "t2",
            ".",
            "countrycode",
            "=",
            "t1",
            ".",
            "countrycode",
            ")"
        ],
        "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people? If there is a tie in percentage between languages, consider all these languages the largest.",
        "question_toks": [
            "What",
            "is",
            "the",
            "total",
            "number",
            "of",
            "countries",
            "where",
            "Spanish",
            "is",
            "spoken",
            "by",
            "the",
            "largest",
            "percentage",
            "of",
            "people",
            "?",
            "If",
            "there",
            "is",
            "a",
            "tie",
            "in",
            "percentage",
            "between",
            "languages",
            ",",
            "consider",
            "all",
            "these",
            "languages",
            "the",
            "largest",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 819,
        "query": "SELECT count(DISTINCT CountryCode) FROM countrylanguage WHERE LANGUAGE = 'Spanish' and (CountryCode, Percentage) IN (SELECT CountryCode, max(Percentage) FROM countrylanguage GROUP BY CountryCode)",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "CountryCode",
            ")",
            "FROM",
            "countrylanguage",
            "WHERE",
            "LANGUAGE",
            "=",
            "'Spanish",
            "'",
            "and",
            "(",
            "CountryCode,",
            "Percentage",
            ")",
            "IN",
            "(",
            "SELECT",
            "CountryCode,",
            "max",
            "(",
            "Percentage",
            ")",
            "FROM",
            "countrylanguage",
            "GROUP",
            "BY",
            "CountryCode",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "countrycode",
            ")",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "value",
            "and",
            "(",
            "countrycode,",
            "percentage",
            ")",
            "in",
            "(",
            "select",
            "countrycode,",
            "max",
            "(",
            "percentage",
            ")",
            "from",
            "countrylanguage",
            "group",
            "by",
            "countrycode",
            ")"
        ],
        "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "countries",
            "for",
            "which",
            "Spanish",
            "is",
            "the",
            "predominantly",
            "spoken",
            "language",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 820,
        "query": "SELECT DISTINCT CountryCode FROM countrylanguage as T1 WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage as T2 WHERE T2.CountryCode = T1.CountryCode)",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "CountryCode",
            "FROM",
            "countrylanguage",
            "as",
            "T1",
            "WHERE",
            "Language",
            "=",
            "'Spanish",
            "'",
            "AND",
            "Percentage",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "Percentage",
            ")",
            "FROM",
            "countrylanguage",
            "as",
            "T2",
            "WHERE",
            "T2",
            ".",
            "CountryCode",
            "=",
            "T1",
            ".",
            "CountryCode",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "countrycode",
            "from",
            "countrylanguage",
            "as",
            "t1",
            "where",
            "language",
            "=",
            "value",
            "and",
            "percentage",
            "=",
            "(",
            "select",
            "max",
            "(",
            "percentage",
            ")",
            "from",
            "countrylanguage",
            "as",
            "t2",
            "where",
            "t2",
            ".",
            "countrycode",
            "=",
            "t1",
            ".",
            "countrycode",
            ")"
        ],
        "question": "List the codes of all countries where Spanish is spoken by the largest percentage of people, including any ties.",
        "question_toks": [
            "List",
            "the",
            "codes",
            "of",
            "all",
            "countries",
            "where",
            "Spanish",
            "is",
            "spoken",
            "by",
            "the",
            "largest",
            "percentage",
            "of",
            "people",
            ",",
            "including",
            "any",
            "ties",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "world_1",
        "id": 821,
        "query": "SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'Spanish' and (CountryCode, Percentage) IN (SELECT CountryCode, max(Percentage) FROM countrylanguage GROUP BY CountryCode)",
        "query_toks": [
            "SELECT",
            "CountryCode",
            "FROM",
            "countrylanguage",
            "WHERE",
            "LANGUAGE",
            "=",
            "'Spanish",
            "'",
            "and",
            "(",
            "CountryCode,",
            "Percentage",
            ")",
            "IN",
            "(",
            "SELECT",
            "CountryCode,",
            "max",
            "(",
            "Percentage",
            ")",
            "FROM",
            "countrylanguage",
            "GROUP",
            "BY",
            "CountryCode",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "value",
            "and",
            "(",
            "countrycode,",
            "percentage",
            ")",
            "in",
            "(",
            "select",
            "countrycode,",
            "max",
            "(",
            "percentage",
            ")",
            "from",
            "countrylanguage",
            "group",
            "by",
            "countrycode",
            ")"
        ],
        "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "question_toks": [
            "Return",
            "the",
            "codes",
            "of",
            "countries",
            "for",
            "which",
            "Spanish",
            "is",
            "the",
            "predominantly",
            "spoken",
            "language",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 822,
        "query": "SELECT count(*) FROM conductor",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "conductor"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "conductor"
        ],
        "question": "How many conductors are there?",
        "question_toks": [
            "How",
            "many",
            "conductors",
            "are",
            "there",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 823,
        "query": "SELECT count(*) FROM conductor",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "conductor"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "conductor"
        ],
        "question": "Count the number of conductors.",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "conductors",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 824,
        "query": "SELECT Name FROM conductor ORDER BY Age ASC, Conductor_ID ASC",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "conductor",
            "ORDER",
            "BY",
            "Age",
            "ASC,",
            "Conductor_ID",
            "ASC"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "conductor",
            "order",
            "by",
            "age",
            "asc,",
            "conductor_id",
            "asc"
        ],
        "question": "List the names of conductors in ascending order of age, and then by their Conductor ID.",
        "question_toks": [
            "List",
            "the",
            "names",
            "of",
            "conductors",
            "in",
            "ascending",
            "order",
            "of",
            "age",
            ",",
            "and",
            "then",
            "by",
            "their",
            "Conductor",
            "ID",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 825,
        "query": "SELECT Name FROM conductor ORDER BY Age ASC, Conductor_ID ASC",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "conductor",
            "ORDER",
            "BY",
            "Age",
            "ASC,",
            "Conductor_ID",
            "ASC"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "conductor",
            "order",
            "by",
            "age",
            "asc,",
            "conductor_id",
            "asc"
        ],
        "question": "What are the names of conductors, ordered by age and then by Conductor ID?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "conductors",
            ",",
            "ordered",
            "by",
            "age",
            "and",
            "then",
            "by",
            "Conductor",
            "ID",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 826,
        "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "conductor",
            "WHERE",
            "Nationality",
            "!",
            "=",
            "'USA",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "conductor",
            "where",
            "nationality",
            "!",
            "=",
            "value"
        ],
        "question": "What are the names of conductors whose nationalities are not 'USA'?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "conductors",
            "whose",
            "nationalities",
            "are",
            "not",
            "``",
            "USA",
            "''",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 827,
        "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "conductor",
            "WHERE",
            "Nationality",
            "!",
            "=",
            "'USA",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "conductor",
            "where",
            "nationality",
            "!",
            "=",
            "value"
        ],
        "question": "Return the names of conductors that do not have the nationality 'USA'.",
        "question_toks": [
            "Return",
            "the",
            "names",
            "of",
            "conductors",
            "that",
            "do",
            "not",
            "have",
            "the",
            "nationality",
            "``",
            "USA",
            "''",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 828,
        "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC, Orchestra_ID ASC",
        "query_toks": [
            "SELECT",
            "Record_Company",
            "FROM",
            "orchestra",
            "ORDER",
            "BY",
            "Year_of_Founded",
            "DESC,",
            "Orchestra_ID",
            "ASC"
        ],
        "query_toks_no_value": [
            "select",
            "record_company",
            "from",
            "orchestra",
            "order",
            "by",
            "year_of_founded",
            "desc,",
            "orchestra_id",
            "asc"
        ],
        "question": "What are the record companies of orchestras, sorted first descending by the years in which they were founded, and then by their IDs?",
        "question_toks": [
            "What",
            "are",
            "the",
            "record",
            "companies",
            "of",
            "orchestras",
            ",",
            "sorted",
            "first",
            "descending",
            "by",
            "the",
            "years",
            "in",
            "which",
            "they",
            "were",
            "founded",
            ",",
            "and",
            "then",
            "by",
            "their",
            "IDs",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 829,
        "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC, Orchestra_ID ASC",
        "query_toks": [
            "SELECT",
            "Record_Company",
            "FROM",
            "orchestra",
            "ORDER",
            "BY",
            "Year_of_Founded",
            "DESC,",
            "Orchestra_ID",
            "ASC"
        ],
        "query_toks_no_value": [
            "select",
            "record_company",
            "from",
            "orchestra",
            "order",
            "by",
            "year_of_founded",
            "desc,",
            "orchestra_id",
            "asc"
        ],
        "question": "Return the record companies of orchestras, sorted first descending by the years in which they were founded, and then by their IDs.",
        "question_toks": [
            "Return",
            "the",
            "record",
            "companies",
            "of",
            "orchestras",
            ",",
            "sorted",
            "first",
            "descending",
            "by",
            "the",
            "years",
            "in",
            "which",
            "they",
            "were",
            "founded",
            ",",
            "and",
            "then",
            "by",
            "their",
            "IDs",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 830,
        "query": "SELECT avg(Attendance) FROM SHOW",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "Attendance",
            ")",
            "FROM",
            "SHOW"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "attendance",
            ")",
            "from",
            "show"
        ],
        "question": "What is the average attendance of shows?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "attendance",
            "of",
            "shows",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 831,
        "query": "SELECT avg(Attendance) FROM SHOW",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "Attendance",
            ")",
            "FROM",
            "SHOW"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "attendance",
            ")",
            "from",
            "show"
        ],
        "question": "Return the average attendance across all shows.",
        "question_toks": [
            "Return",
            "the",
            "average",
            "attendance",
            "across",
            "all",
            "shows",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 832,
        "query": "SELECT max(SHARE) , min(SHARE) FROM performance WHERE TYPE != 'Live final'",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "SHARE",
            ")",
            ",",
            "min",
            "(",
            "SHARE",
            ")",
            "FROM",
            "performance",
            "WHERE",
            "TYPE",
            "!",
            "=",
            "'Live",
            "final",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "share",
            ")",
            ",",
            "min",
            "(",
            "share",
            ")",
            "from",
            "performance",
            "where",
            "type",
            "!",
            "=",
            "value"
        ],
        "question": "What are the maximum and minimum share of performances whose type is not 'Live final'.",
        "question_toks": [
            "What",
            "are",
            "the",
            "maximum",
            "and",
            "minimum",
            "share",
            "of",
            "performances",
            "whose",
            "type",
            "is",
            "not",
            "``",
            "Live",
            "final",
            "''",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 833,
        "query": "SELECT max(SHARE) , min(SHARE) FROM performance WHERE TYPE != 'Live final'",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "SHARE",
            ")",
            ",",
            "min",
            "(",
            "SHARE",
            ")",
            "FROM",
            "performance",
            "WHERE",
            "TYPE",
            "!",
            "=",
            "'Live",
            "final",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "share",
            ")",
            ",",
            "min",
            "(",
            "share",
            ")",
            "from",
            "performance",
            "where",
            "type",
            "!",
            "=",
            "value"
        ],
        "question": "Return the maximum and minimum shares for performances that do not have the type 'Live final'.",
        "question_toks": [
            "Return",
            "the",
            "maximum",
            "and",
            "minimum",
            "shares",
            "for",
            "performances",
            "that",
            "do",
            "not",
            "have",
            "the",
            "type",
            "``",
            "Live",
            "final",
            "''",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 834,
        "query": "SELECT count(DISTINCT Nationality) FROM conductor",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "Nationality",
            ")",
            "FROM",
            "conductor"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "nationality",
            ")",
            "from",
            "conductor"
        ],
        "question": "How many different nationalities do conductors have?",
        "question_toks": [
            "How",
            "many",
            "different",
            "nationalities",
            "do",
            "conductors",
            "have",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 835,
        "query": "SELECT count(DISTINCT Nationality) FROM conductor",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "Nationality",
            ")",
            "FROM",
            "conductor"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "nationality",
            ")",
            "from",
            "conductor"
        ],
        "question": "Count the number of different nationalities of conductors.",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "different",
            "nationalities",
            "of",
            "conductors",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 836,
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC, Conductor_ID ASC",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "conductor",
            "ORDER",
            "BY",
            "Year_of_Work",
            "DESC,",
            "Conductor_ID",
            "ASC"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "conductor",
            "order",
            "by",
            "year_of_work",
            "desc,",
            "conductor_id",
            "asc"
        ],
        "question": "List names of conductors in descending order of years of work, then by conductor id in ascending order.",
        "question_toks": [
            "List",
            "names",
            "of",
            "conductors",
            "in",
            "descending",
            "order",
            "of",
            "years",
            "of",
            "work",
            ",",
            "then",
            "by",
            "conductor",
            "id",
            "in",
            "ascending",
            "order",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 837,
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC, Conductor_ID ASC",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "conductor",
            "ORDER",
            "BY",
            "Year_of_Work",
            "DESC,",
            "Conductor_ID",
            "ASC"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "conductor",
            "order",
            "by",
            "year_of_work",
            "desc,",
            "conductor_id",
            "asc"
        ],
        "question": "What are the names of conductors, sorted descending by the number of years they have worked, and in case of a tie, sort by conductor id?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "conductors",
            ",",
            "sorted",
            "descending",
            "by",
            "the",
            "number",
            "of",
            "years",
            "they",
            "have",
            "worked",
            ",",
            "and",
            "in",
            "case",
            "of",
            "a",
            "tie",
            ",",
            "sort",
            "by",
            "conductor",
            "id",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 838,
        "query": "SELECT Name FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor)",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "conductor",
            "WHERE",
            "Year_of_Work",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "Year_of_Work",
            ")",
            "FROM",
            "conductor",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "conductor",
            "where",
            "year_of_work",
            "=",
            "(",
            "select",
            "max",
            "(",
            "year_of_work",
            ")",
            "from",
            "conductor",
            ")"
        ],
        "question": "List the names of all conductors with the most years of work.",
        "question_toks": [
            "List",
            "the",
            "names",
            "of",
            "all",
            "conductors",
            "with",
            "the",
            "most",
            "years",
            "of",
            "work",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 839,
        "query": "SELECT Name FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor)",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "conductor",
            "WHERE",
            "Year_of_Work",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "Year_of_Work",
            ")",
            "FROM",
            "conductor",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "conductor",
            "where",
            "year_of_work",
            "=",
            "(",
            "select",
            "max",
            "(",
            "year_of_work",
            ")",
            "from",
            "conductor",
            ")"
        ],
        "question": "What is the name of the conductor who has worked the greatest number of years? If there is a tie, return all of them.",
        "question_toks": [
            "What",
            "is",
            "the",
            "name",
            "of",
            "the",
            "conductor",
            "who",
            "has",
            "worked",
            "the",
            "greatest",
            "number",
            "of",
            "years",
            "?",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "return",
            "all",
            "of",
            "them",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 840,
        "query": "SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "Name",
            ",",
            "T2",
            ".",
            "Orchestra",
            "FROM",
            "conductor",
            "AS",
            "T1",
            "JOIN",
            "orchestra",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Conductor_ID",
            "=",
            "T2",
            ".",
            "Conductor_ID"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "name",
            ",",
            "t2",
            ".",
            "orchestra",
            "from",
            "conductor",
            "as",
            "t1",
            "join",
            "orchestra",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "conductor_id",
            "=",
            "t2",
            ".",
            "conductor_id"
        ],
        "question": "Show the names of conductors and the orchestras they have conducted.",
        "question_toks": [
            "Show",
            "the",
            "names",
            "of",
            "conductors",
            "and",
            "the",
            "orchestras",
            "they",
            "have",
            "conducted",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 841,
        "query": "SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "Name",
            ",",
            "T2",
            ".",
            "Orchestra",
            "FROM",
            "conductor",
            "AS",
            "T1",
            "JOIN",
            "orchestra",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Conductor_ID",
            "=",
            "T2",
            ".",
            "Conductor_ID"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "name",
            ",",
            "t2",
            ".",
            "orchestra",
            "from",
            "conductor",
            "as",
            "t1",
            "join",
            "orchestra",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "conductor_id",
            "=",
            "t2",
            ".",
            "conductor_id"
        ],
        "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "conductors",
            "as",
            "well",
            "as",
            "the",
            "corresonding",
            "orchestras",
            "that",
            "they",
            "have",
            "conducted",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 842,
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "Name",
            "FROM",
            "conductor",
            "AS",
            "T1",
            "JOIN",
            "orchestra",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Conductor_ID",
            "=",
            "T2",
            ".",
            "Conductor_ID",
            "GROUP",
            "BY",
            "T2",
            ".",
            "Conductor_ID",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "conductor",
            "as",
            "t1",
            "join",
            "orchestra",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "conductor_id",
            "=",
            "t2",
            ".",
            "conductor_id",
            "group",
            "by",
            "t2",
            ".",
            "conductor_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Show the names of conductors that have conducted more than one orchestras.",
        "question_toks": [
            "Show",
            "the",
            "names",
            "of",
            "conductors",
            "that",
            "have",
            "conducted",
            "more",
            "than",
            "one",
            "orchestras",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 843,
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "Name",
            "FROM",
            "conductor",
            "AS",
            "T1",
            "JOIN",
            "orchestra",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Conductor_ID",
            "=",
            "T2",
            ".",
            "Conductor_ID",
            "GROUP",
            "BY",
            "T2",
            ".",
            "Conductor_ID",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "conductor",
            "as",
            "t1",
            "join",
            "orchestra",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "conductor_id",
            "=",
            "t2",
            ".",
            "conductor_id",
            "group",
            "by",
            "t2",
            ".",
            "conductor_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "What are the names of conductors who have conducted at more than one orchestra?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "conductors",
            "who",
            "have",
            "conducted",
            "at",
            "more",
            "than",
            "one",
            "orchestra",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 844,
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID HAVING COUNT(*) = (SELECT MAX(Counted) FROM (SELECT COUNT(*) as Counted FROM orchestra GROUP BY Conductor_ID) as MaxCount)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "Name",
            "FROM",
            "conductor",
            "AS",
            "T1",
            "JOIN",
            "orchestra",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Conductor_ID",
            "=",
            "T2",
            ".",
            "Conductor_ID",
            "GROUP",
            "BY",
            "T1",
            ".",
            "Conductor_ID",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "Counted",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "as",
            "Counted",
            "FROM",
            "orchestra",
            "GROUP",
            "BY",
            "Conductor_ID",
            ")",
            "as",
            "MaxCount",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "conductor",
            "as",
            "t1",
            "join",
            "orchestra",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "conductor_id",
            "=",
            "t2",
            ".",
            "conductor_id",
            "group",
            "by",
            "t1",
            ".",
            "conductor_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "counted",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "counted",
            "from",
            "orchestra",
            "group",
            "by",
            "conductor_id",
            ")",
            "as",
            "maxcount",
            ")"
        ],
        "question": "Show the names of all conductors who have conducted the highest equal number of orchestras.",
        "question_toks": [
            "Show",
            "the",
            "names",
            "of",
            "all",
            "conductors",
            "who",
            "have",
            "conducted",
            "the",
            "highest",
            "equal",
            "number",
            "of",
            "orchestras",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 845,
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID HAVING COUNT(*) = (SELECT MAX(CountOrch) FROM (SELECT COUNT(*) AS CountOrch FROM orchestra GROUP BY Conductor_ID) AS TempTable)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "Name",
            "FROM",
            "conductor",
            "AS",
            "T1",
            "JOIN",
            "orchestra",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Conductor_ID",
            "=",
            "T2",
            ".",
            "Conductor_ID",
            "GROUP",
            "BY",
            "T1",
            ".",
            "Conductor_ID",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "CountOrch",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "CountOrch",
            "FROM",
            "orchestra",
            "GROUP",
            "BY",
            "Conductor_ID",
            ")",
            "AS",
            "TempTable",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "conductor",
            "as",
            "t1",
            "join",
            "orchestra",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "conductor_id",
            "=",
            "t2",
            ".",
            "conductor_id",
            "group",
            "by",
            "t1",
            ".",
            "conductor_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "countorch",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "countorch",
            "from",
            "orchestra",
            "group",
            "by",
            "conductor_id",
            ")",
            "as",
            "temptable",
            ")"
        ],
        "question": "What are the names of all conductors who have conducted the highest equal number of orchestras?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "all",
            "conductors",
            "who",
            "have",
            "conducted",
            "the",
            "highest",
            "equal",
            "number",
            "of",
            "orchestras",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 846,
        "query": "SELECT T1.Name FROM conductor AS T1 WHERE T1.conductor_id IN (SELECT T2.conductor_id FROM orchestra AS T2 WHERE T2.year_of_founded > 2008)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "Name",
            "FROM",
            "conductor",
            "AS",
            "T1",
            "WHERE",
            "T1",
            ".",
            "conductor_id",
            "IN",
            "(",
            "SELECT",
            "T2",
            ".",
            "conductor_id",
            "FROM",
            "orchestra",
            "AS",
            "T2",
            "WHERE",
            "T2",
            ".",
            "year_of_founded",
            ">",
            "2008",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "conductor",
            "as",
            "t1",
            "where",
            "t1",
            ".",
            "conductor_id",
            "in",
            "(",
            "select",
            "t2",
            ".",
            "conductor_id",
            "from",
            "orchestra",
            "as",
            "t2",
            "where",
            "t2",
            ".",
            "year_of_founded",
            ">",
            "value",
            ")"
        ],
        "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "question_toks": [
            "Please",
            "show",
            "the",
            "name",
            "of",
            "the",
            "conductor",
            "that",
            "has",
            "conducted",
            "orchestras",
            "founded",
            "after",
            "2008",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 847,
        "query": "SELECT T1.Name FROM conductor AS T1 WHERE T1.conductor_id IN (SELECT T2.conductor_id FROM orchestra AS T2 WHERE T2.year_of_founded > 2008)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "Name",
            "FROM",
            "conductor",
            "AS",
            "T1",
            "WHERE",
            "T1",
            ".",
            "conductor_id",
            "IN",
            "(",
            "SELECT",
            "T2",
            ".",
            "conductor_id",
            "FROM",
            "orchestra",
            "AS",
            "T2",
            "WHERE",
            "T2",
            ".",
            "year_of_founded",
            ">",
            "2008",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "conductor",
            "as",
            "t1",
            "where",
            "t1",
            ".",
            "conductor_id",
            "in",
            "(",
            "select",
            "t2",
            ".",
            "conductor_id",
            "from",
            "orchestra",
            "as",
            "t2",
            "where",
            "t2",
            ".",
            "year_of_founded",
            ">",
            "value",
            ")"
        ],
        "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "conductors",
            "who",
            "have",
            "conducted",
            "orchestras",
            "founded",
            "after",
            "the",
            "year",
            "2008",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 848,
        "query": "SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
        "query_toks": [
            "SELECT",
            "Record_Company",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "orchestra",
            "GROUP",
            "BY",
            "Record_Company"
        ],
        "query_toks_no_value": [
            "select",
            "record_company",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "orchestra",
            "group",
            "by",
            "record_company"
        ],
        "question": "Please show the different record companies and the corresponding number of orchestras.",
        "question_toks": [
            "Please",
            "show",
            "the",
            "different",
            "record",
            "companies",
            "and",
            "the",
            "corresponding",
            "number",
            "of",
            "orchestras",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 849,
        "query": "SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
        "query_toks": [
            "SELECT",
            "Record_Company",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "orchestra",
            "GROUP",
            "BY",
            "Record_Company"
        ],
        "query_toks_no_value": [
            "select",
            "record_company",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "orchestra",
            "group",
            "by",
            "record_company"
        ],
        "question": "How many orchestras does each record company manage?",
        "question_toks": [
            "How",
            "many",
            "orchestras",
            "does",
            "each",
            "record",
            "company",
            "manage",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 850,
        "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*), Major_Record_Format ASC",
        "query_toks": [
            "SELECT",
            "Major_Record_Format",
            "FROM",
            "orchestra",
            "GROUP",
            "BY",
            "Major_Record_Format",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            ",",
            "Major_Record_Format",
            "ASC"
        ],
        "query_toks_no_value": [
            "select",
            "major_record_format",
            "from",
            "orchestra",
            "group",
            "by",
            "major_record_format",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            ",",
            "major_record_format",
            "asc"
        ],
        "question": "Please show the record formats of orchestras in ascending order of count, and in ascending order of record format when counts are the same.",
        "question_toks": [
            "Please",
            "show",
            "the",
            "record",
            "formats",
            "of",
            "orchestras",
            "in",
            "ascending",
            "order",
            "of",
            "count",
            ",",
            "and",
            "in",
            "ascending",
            "order",
            "of",
            "record",
            "format",
            "when",
            "counts",
            "are",
            "the",
            "same",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 851,
        "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*), Major_Record_Format, Orchestra_ID",
        "query_toks": [
            "SELECT",
            "Major_Record_Format",
            "FROM",
            "orchestra",
            "GROUP",
            "BY",
            "Major_Record_Format",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            ",",
            "Major_Record_Format,",
            "Orchestra_ID"
        ],
        "query_toks_no_value": [
            "select",
            "major_record_format",
            "from",
            "orchestra",
            "group",
            "by",
            "major_record_format",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            ",",
            "major_record_format,",
            "orchestra_id"
        ],
        "question": "What are the major record formats of orchestras, sorted by their frequency, then by the name of the record format alphabetically, and then by orchestra id?",
        "question_toks": [
            "What",
            "are",
            "the",
            "major",
            "record",
            "formats",
            "of",
            "orchestras",
            ",",
            "sorted",
            "by",
            "their",
            "frequency",
            ",",
            "then",
            "by",
            "the",
            "name",
            "of",
            "the",
            "record",
            "format",
            "alphabetically",
            ",",
            "and",
            "then",
            "by",
            "orchestra",
            "id",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 852,
        "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company HAVING COUNT(*) = (SELECT MAX(orch_count) FROM (SELECT COUNT(*) AS orch_count FROM orchestra GROUP BY Record_Company) AS counts)",
        "query_toks": [
            "SELECT",
            "Record_Company",
            "FROM",
            "orchestra",
            "GROUP",
            "BY",
            "Record_Company",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "orch_count",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "orch_count",
            "FROM",
            "orchestra",
            "GROUP",
            "BY",
            "Record_Company",
            ")",
            "AS",
            "counts",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "record_company",
            "from",
            "orchestra",
            "group",
            "by",
            "record_company",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "orch_count",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "orch_count",
            "from",
            "orchestra",
            "group",
            "by",
            "record_company",
            ")",
            "as",
            "counts",
            ")"
        ],
        "question": "List the record companies shared by the most number of orchestras, including all those that tie for the highest number.",
        "question_toks": [
            "List",
            "the",
            "record",
            "companies",
            "shared",
            "by",
            "the",
            "most",
            "number",
            "of",
            "orchestras",
            ",",
            "including",
            "all",
            "those",
            "that",
            "tie",
            "for",
            "the",
            "highest",
            "number",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 853,
        "query": "SELECT record_company FROM (SELECT record_company, COUNT(*) AS num_orchestras FROM orchestra GROUP BY record_company ORDER BY num_orchestras DESC) AS rc WHERE rc.num_orchestras = (SELECT MAX(num_orchestras) FROM (SELECT COUNT(*) AS num_orchestras FROM orchestra GROUP BY record_company) as stats)",
        "query_toks": [
            "SELECT",
            "record_company",
            "FROM",
            "(",
            "SELECT",
            "record_company,",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "num_orchestras",
            "FROM",
            "orchestra",
            "GROUP",
            "BY",
            "record_company",
            "ORDER",
            "BY",
            "num_orchestras",
            "DESC",
            ")",
            "AS",
            "rc",
            "WHERE",
            "rc.num_orchestras",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "num_orchestras",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "num_orchestras",
            "FROM",
            "orchestra",
            "GROUP",
            "BY",
            "record_company",
            ")",
            "as",
            "stats",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "record_company",
            "from",
            "(",
            "select",
            "record_company,",
            "count",
            "(",
            "*",
            ")",
            "as",
            "num_orchestras",
            "from",
            "orchestra",
            "group",
            "by",
            "record_company",
            "order",
            "by",
            "num_orchestras",
            "desc",
            ")",
            "as",
            "rc",
            "where",
            "rc.num_orchestras",
            "=",
            "(",
            "select",
            "max",
            "(",
            "num_orchestras",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "num_orchestras",
            "from",
            "orchestra",
            "group",
            "by",
            "record_company",
            ")",
            "as",
            "stats",
            ")"
        ],
        "question": "What is the record company used by the greatest number of orchestras?",
        "question_toks": [
            "What",
            "is",
            "the",
            "record",
            "company",
            "used",
            "by",
            "the",
            "greatest",
            "number",
            "of",
            "orchestras",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 854,
        "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "query_toks": [
            "SELECT",
            "Orchestra",
            "FROM",
            "orchestra",
            "WHERE",
            "Orchestra_ID",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "Orchestra_ID",
            "FROM",
            "performance",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "orchestra",
            "from",
            "orchestra",
            "where",
            "orchestra_id",
            "not",
            "in",
            "(",
            "select",
            "orchestra_id",
            "from",
            "performance",
            ")"
        ],
        "question": "List the names of orchestras that have no performance.",
        "question_toks": [
            "List",
            "the",
            "names",
            "of",
            "orchestras",
            "that",
            "have",
            "no",
            "performance",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 855,
        "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "query_toks": [
            "SELECT",
            "Orchestra",
            "FROM",
            "orchestra",
            "WHERE",
            "Orchestra_ID",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "Orchestra_ID",
            "FROM",
            "performance",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "orchestra",
            "from",
            "orchestra",
            "where",
            "orchestra_id",
            "not",
            "in",
            "(",
            "select",
            "orchestra_id",
            "from",
            "performance",
            ")"
        ],
        "question": "What are the orchestras that do not have any performances?",
        "question_toks": [
            "What",
            "are",
            "the",
            "orchestras",
            "that",
            "do",
            "not",
            "have",
            "any",
            "performances",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 856,
        "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
        "query_toks": [
            "SELECT",
            "Record_Company",
            "FROM",
            "orchestra",
            "WHERE",
            "Year_of_Founded",
            "<",
            "2003",
            "INTERSECT",
            "SELECT",
            "Record_Company",
            "FROM",
            "orchestra",
            "WHERE",
            "Year_of_Founded",
            ">",
            "2003"
        ],
        "query_toks_no_value": [
            "select",
            "record_company",
            "from",
            "orchestra",
            "where",
            "year_of_founded",
            "<",
            "value",
            "intersect",
            "select",
            "record_company",
            "from",
            "orchestra",
            "where",
            "year_of_founded",
            ">",
            "value"
        ],
        "question": "Show the record companies common to orchestras founded before 2003 and those founded after 2003.",
        "question_toks": [
            "Show",
            "the",
            "record",
            "companies",
            "common",
            "to",
            "orchestras",
            "founded",
            "before",
            "2003",
            "and",
            "those",
            "founded",
            "after",
            "2003",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 857,
        "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
        "query_toks": [
            "SELECT",
            "Record_Company",
            "FROM",
            "orchestra",
            "WHERE",
            "Year_of_Founded",
            "<",
            "2003",
            "INTERSECT",
            "SELECT",
            "Record_Company",
            "FROM",
            "orchestra",
            "WHERE",
            "Year_of_Founded",
            ">",
            "2003"
        ],
        "query_toks_no_value": [
            "select",
            "record_company",
            "from",
            "orchestra",
            "where",
            "year_of_founded",
            "<",
            "value",
            "intersect",
            "select",
            "record_company",
            "from",
            "orchestra",
            "where",
            "year_of_founded",
            ">",
            "value"
        ],
        "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
        "question_toks": [
            "What",
            "are",
            "the",
            "record",
            "companies",
            "that",
            "are",
            "used",
            "by",
            "both",
            "orchestras",
            "founded",
            "before",
            "2003",
            "and",
            "those",
            "founded",
            "after",
            "2003",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 858,
        "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  'CD' OR Major_Record_Format  =  'DVD'",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "orchestra",
            "WHERE",
            "Major_Record_Format",
            "=",
            "'CD",
            "'",
            "OR",
            "Major_Record_Format",
            "=",
            "'DVD",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "orchestra",
            "where",
            "major_record_format",
            "=",
            "value",
            "or",
            "major_record_format",
            "=",
            "value"
        ],
        "question": "Find the number of orchestras whose record format is 'CD' or 'DVD'.",
        "question_toks": [
            "Find",
            "the",
            "number",
            "of",
            "orchestras",
            "whose",
            "record",
            "format",
            "is",
            "``",
            "CD",
            "''",
            "or",
            "``",
            "DVD",
            "''",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 859,
        "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "orchestra",
            "WHERE",
            "Major_Record_Format",
            "=",
            "'CD",
            "'",
            "OR",
            "Major_Record_Format",
            "=",
            "'DVD",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "orchestra",
            "where",
            "major_record_format",
            "=",
            "value",
            "or",
            "major_record_format",
            "=",
            "value"
        ],
        "question": "Count the number of orchestras that have CD or DVD as their record format.",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "orchestras",
            "that",
            "have",
            "CD",
            "or",
            "DVD",
            "as",
            "their",
            "record",
            "format",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 860,
        "query": "SELECT DISTINCT o.year_of_founded FROM orchestra o WHERE o.orchestra_id IN (SELECT p.orchestra_id FROM performance p GROUP BY p.orchestra_id HAVING COUNT(p.performance_id) > 1)",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "o.year_of_founded",
            "FROM",
            "orchestra",
            "o",
            "WHERE",
            "o.orchestra_id",
            "IN",
            "(",
            "SELECT",
            "p.orchestra_id",
            "FROM",
            "performance",
            "p",
            "GROUP",
            "BY",
            "p.orchestra_id",
            "HAVING",
            "COUNT",
            "(",
            "p.performance_id",
            ")",
            ">",
            "1",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "o.year_of_founded",
            "from",
            "orchestra",
            "o",
            "where",
            "o.orchestra_id",
            "in",
            "(",
            "select",
            "p.orchestra_id",
            "from",
            "performance",
            "p",
            "group",
            "by",
            "p.orchestra_id",
            "having",
            "count",
            "(",
            "p.performance_id",
            ")",
            ">",
            "value",
            ")"
        ],
        "question": "Show the years in which orchestras that have given more than one performance are founded.",
        "question_toks": [
            "Show",
            "the",
            "years",
            "in",
            "which",
            "orchestras",
            "that",
            "have",
            "given",
            "more",
            "than",
            "one",
            "performance",
            "are",
            "founded",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "orchestra",
        "id": 861,
        "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*) > 1",
        "query_toks": [
            "SELECT",
            "Year_of_Founded",
            "FROM",
            "orchestra",
            "AS",
            "T1",
            "JOIN",
            "performance",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Orchestra_ID",
            "=",
            "T2",
            ".",
            "Orchestra_ID",
            "GROUP",
            "BY",
            "T2",
            ".",
            "Orchestra_ID",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "year_of_founded",
            "from",
            "orchestra",
            "as",
            "t1",
            "join",
            "performance",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "orchestra_id",
            "=",
            "t2",
            ".",
            "orchestra_id",
            "group",
            "by",
            "t2",
            ".",
            "orchestra_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "What are years of founding for orchestras that have had more than a single performance?",
        "question_toks": [
            "What",
            "are",
            "years",
            "of",
            "founding",
            "for",
            "orchestras",
            "that",
            "have",
            "had",
            "more",
            "than",
            "a",
            "single",
            "performance",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 862,
        "query": "SELECT count(*) FROM Highschooler",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Highschooler"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "highschooler"
        ],
        "question": "How many high schoolers are there?",
        "question_toks": [
            "How",
            "many",
            "high",
            "schoolers",
            "are",
            "there",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 863,
        "query": "SELECT count(*) FROM Highschooler",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Highschooler"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "highschooler"
        ],
        "question": "Count the number of high schoolers.",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "high",
            "schoolers",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 864,
        "query": "SELECT name , grade FROM Highschooler",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "grade",
            "FROM",
            "Highschooler"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "grade",
            "from",
            "highschooler"
        ],
        "question": "Show the names and grades of each high schooler.",
        "question_toks": [
            "Show",
            "the",
            "names",
            "and",
            "grades",
            "of",
            "each",
            "high",
            "schooler",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 865,
        "query": "SELECT name , grade FROM Highschooler",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "grade",
            "FROM",
            "Highschooler"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "grade",
            "from",
            "highschooler"
        ],
        "question": "What are the names and grades for each high schooler?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "and",
            "grades",
            "for",
            "each",
            "high",
            "schooler",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 866,
        "query": "SELECT DISTINCT grade FROM Highschooler",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "grade",
            "FROM",
            "Highschooler"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "grade",
            "from",
            "highschooler"
        ],
        "question": "Show each unique grade of the high schoolers.",
        "question_toks": [
            "Show",
            "each",
            "unique",
            "grade",
            "of",
            "the",
            "high",
            "schoolers",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 867,
        "query": "SELECT grade FROM Highschooler",
        "query_toks": [
            "SELECT",
            "grade",
            "FROM",
            "Highschooler"
        ],
        "query_toks_no_value": [
            "select",
            "grade",
            "from",
            "highschooler"
        ],
        "question": "What is the grade of each high schooler?",
        "question_toks": [
            "What",
            "is",
            "the",
            "grade",
            "of",
            "each",
            "high",
            "schooler",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 868,
        "query": "SELECT grade FROM Highschooler WHERE name = 'Kyle'",
        "query_toks": [
            "SELECT",
            "grade",
            "FROM",
            "Highschooler",
            "WHERE",
            "name",
            "=",
            "'Kyle",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "grade",
            "from",
            "highschooler",
            "where",
            "name",
            "=",
            "value"
        ],
        "question": "What grades are the high schoolers named Kyle in?",
        "question_toks": [
            "What",
            "grades",
            "are",
            "the",
            "high",
            "schoolers",
            "named",
            "Kyle",
            "in",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 869,
        "query": "SELECT grade FROM Highschooler WHERE name = 'Kyle'",
        "query_toks": [
            "SELECT",
            "grade",
            "FROM",
            "Highschooler",
            "WHERE",
            "name",
            "=",
            "'Kyle",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "grade",
            "from",
            "highschooler",
            "where",
            "name",
            "=",
            "value"
        ],
        "question": "Return the grades that high schoolers named Kyle are in.",
        "question_toks": [
            "Return",
            "the",
            "grades",
            "that",
            "high",
            "schoolers",
            "named",
            "Kyle",
            "are",
            "in",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 870,
        "query": "SELECT name FROM Highschooler WHERE grade = 10",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "Highschooler",
            "WHERE",
            "grade",
            "=",
            "10"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "highschooler",
            "where",
            "grade",
            "=",
            "value"
        ],
        "question": "Show the names of all high schoolers in grade 10.",
        "question_toks": [
            "Show",
            "the",
            "names",
            "of",
            "all",
            "high",
            "schoolers",
            "in",
            "grade",
            "10",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 871,
        "query": "SELECT name FROM Highschooler WHERE grade = 10",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "Highschooler",
            "WHERE",
            "grade",
            "=",
            "10"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "highschooler",
            "where",
            "grade",
            "=",
            "value"
        ],
        "question": "What are the names of all high schoolers in grade 10?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "all",
            "high",
            "schoolers",
            "in",
            "grade",
            "10",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 872,
        "query": "SELECT ID FROM Highschooler WHERE name = 'Kyle'",
        "query_toks": [
            "SELECT",
            "ID",
            "FROM",
            "Highschooler",
            "WHERE",
            "name",
            "=",
            "'Kyle",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "id",
            "from",
            "highschooler",
            "where",
            "name",
            "=",
            "value"
        ],
        "question": "Show all IDs of high schoolers named Kyle.",
        "question_toks": [
            "Show",
            "all",
            "IDs",
            "of",
            "high",
            "schoolers",
            "named",
            "Kyle",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 873,
        "query": "SELECT ID FROM Highschooler WHERE name = 'Kyle'",
        "query_toks": [
            "SELECT",
            "ID",
            "FROM",
            "Highschooler",
            "WHERE",
            "name",
            "=",
            "'Kyle",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "id",
            "from",
            "highschooler",
            "where",
            "name",
            "=",
            "value"
        ],
        "question": "What are the IDs of all high schoolers named Kyle?",
        "question_toks": [
            "What",
            "are",
            "the",
            "IDs",
            "of",
            "all",
            "high",
            "schoolers",
            "named",
            "Kyle",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 874,
        "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Highschooler",
            "WHERE",
            "grade",
            "=",
            "9",
            "OR",
            "grade",
            "=",
            "10"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "highschooler",
            "where",
            "grade",
            "=",
            "value",
            "or",
            "grade",
            "=",
            "value"
        ],
        "question": "How many high schoolers are there in grade 9 or 10?",
        "question_toks": [
            "How",
            "many",
            "high",
            "schoolers",
            "are",
            "there",
            "in",
            "grade",
            "9",
            "or",
            "10",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 875,
        "query": "SELECT count(*) FROM Highschooler WHERE grade = 9 OR grade = 10",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Highschooler",
            "WHERE",
            "grade",
            "=",
            "9",
            "OR",
            "grade",
            "=",
            "10"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "highschooler",
            "where",
            "grade",
            "=",
            "value",
            "or",
            "grade",
            "=",
            "value"
        ],
        "question": "Count the number of high schoolers in grades 9 or 10.",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "high",
            "schoolers",
            "in",
            "grades",
            "9",
            "or",
            "10",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 876,
        "query": "SELECT grade , count(*) FROM Highschooler GROUP BY grade",
        "query_toks": [
            "SELECT",
            "grade",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Highschooler",
            "GROUP",
            "BY",
            "grade"
        ],
        "query_toks_no_value": [
            "select",
            "grade",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "highschooler",
            "group",
            "by",
            "grade"
        ],
        "question": "Show the number of high schoolers for each grade.",
        "question_toks": [
            "Show",
            "the",
            "number",
            "of",
            "high",
            "schoolers",
            "for",
            "each",
            "grade",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 877,
        "query": "SELECT grade , count(*) FROM Highschooler GROUP BY grade",
        "query_toks": [
            "SELECT",
            "grade",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Highschooler",
            "GROUP",
            "BY",
            "grade"
        ],
        "query_toks_no_value": [
            "select",
            "grade",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "highschooler",
            "group",
            "by",
            "grade"
        ],
        "question": "How many high schoolers are in each grade?",
        "question_toks": [
            "How",
            "many",
            "high",
            "schoolers",
            "are",
            "in",
            "each",
            "grade",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 878,
        "query": "WITH GradeCounts AS (SELECT grade, COUNT(*) AS total FROM Highschooler GROUP BY grade) SELECT grade FROM GradeCounts WHERE total = (SELECT MAX(total) FROM GradeCounts)",
        "query_toks": [
            "WITH",
            "GradeCounts",
            "AS",
            "(",
            "SELECT",
            "grade,",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "total",
            "FROM",
            "Highschooler",
            "GROUP",
            "BY",
            "grade",
            ")",
            "SELECT",
            "grade",
            "FROM",
            "GradeCounts",
            "WHERE",
            "total",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "total",
            ")",
            "FROM",
            "GradeCounts",
            ")"
        ],
        "query_toks_no_value": [
            "with",
            "gradecounts",
            "as",
            "(",
            "select",
            "grade,",
            "count",
            "(",
            "*",
            ")",
            "as",
            "total",
            "from",
            "highschooler",
            "group",
            "by",
            "grade",
            ")",
            "select",
            "grade",
            "from",
            "gradecounts",
            "where",
            "total",
            "=",
            "(",
            "select",
            "max",
            "(",
            "total",
            ")",
            "from",
            "gradecounts",
            ")"
        ],
        "question": "Which grade has the most high schoolers? If there is a tie, show all such grades.",
        "question_toks": [
            "Which",
            "grade",
            "has",
            "the",
            "most",
            "high",
            "schoolers",
            "?",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "show",
            "all",
            "such",
            "grades",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 879,
        "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Highschooler GROUP BY grade) AS counts)",
        "query_toks": [
            "SELECT",
            "grade",
            "FROM",
            "Highschooler",
            "GROUP",
            "BY",
            "grade",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "count",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "count",
            "FROM",
            "Highschooler",
            "GROUP",
            "BY",
            "grade",
            ")",
            "AS",
            "counts",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "grade",
            "from",
            "highschooler",
            "group",
            "by",
            "grade",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "count",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "count",
            "from",
            "highschooler",
            "group",
            "by",
            "grade",
            ")",
            "as",
            "counts",
            ")"
        ],
        "question": "Return the grade(s) that have the greatest number of high schoolers.",
        "question_toks": [
            "Return",
            "the",
            "grade",
            "(",
            "s",
            ")",
            "that",
            "have",
            "the",
            "greatest",
            "number",
            "of",
            "high",
            "schoolers",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 880,
        "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4",
        "query_toks": [
            "SELECT",
            "grade",
            "FROM",
            "Highschooler",
            "GROUP",
            "BY",
            "grade",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "4"
        ],
        "query_toks_no_value": [
            "select",
            "grade",
            "from",
            "highschooler",
            "group",
            "by",
            "grade",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value"
        ],
        "question": "Show me all grades that have at least 4 students.",
        "question_toks": [
            "Show",
            "me",
            "all",
            "grades",
            "that",
            "have",
            "at",
            "least",
            "4",
            "students",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 881,
        "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4",
        "query_toks": [
            "SELECT",
            "grade",
            "FROM",
            "Highschooler",
            "GROUP",
            "BY",
            "grade",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "4"
        ],
        "query_toks_no_value": [
            "select",
            "grade",
            "from",
            "highschooler",
            "group",
            "by",
            "grade",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value"
        ],
        "question": "Which grades have 4 or more high schoolers?",
        "question_toks": [
            "Which",
            "grades",
            "have",
            "4",
            "or",
            "more",
            "high",
            "schoolers",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 882,
        "query": "SELECT ide, COUNT(DISTINCT fre.friend_id) AS total_friends FROM (SELECT id AS ide FROM highschooler) LEFT JOIN (SELECT student_id, friend_id FROM friend UNION ALL SELECT friend_id, student_id FROM friend) fre ON ide = fre.student_id GROUP BY ide",
        "query_toks": [
            "SELECT",
            "ide,",
            "COUNT",
            "(",
            "DISTINCT",
            "fre.friend_id",
            ")",
            "AS",
            "total_friends",
            "FROM",
            "(",
            "SELECT",
            "id",
            "AS",
            "ide",
            "FROM",
            "highschooler",
            ")",
            "LEFT",
            "JOIN",
            "(",
            "SELECT",
            "student_id,",
            "friend_id",
            "FROM",
            "friend",
            "UNION",
            "ALL",
            "SELECT",
            "friend_id,",
            "student_id",
            "FROM",
            "friend",
            ")",
            "fre",
            "ON",
            "ide",
            "=",
            "fre.student_id",
            "GROUP",
            "BY",
            "ide"
        ],
        "query_toks_no_value": [
            "select",
            "ide,",
            "count",
            "(",
            "distinct",
            "fre.friend_id",
            ")",
            "as",
            "total_friends",
            "from",
            "(",
            "select",
            "id",
            "as",
            "ide",
            "from",
            "highschooler",
            ")",
            "left",
            "join",
            "(",
            "select",
            "student_id,",
            "friend_id",
            "from",
            "friend",
            "union",
            "all",
            "select",
            "friend_id,",
            "student_id",
            "from",
            "friend",
            ")",
            "fre",
            "on",
            "ide",
            "=",
            "fre.student_id",
            "group",
            "by",
            "ide"
        ],
        "question": "Show the student IDs along with the total number of friends they have participated in, specifying both friends initiated and received for each.",
        "question_toks": [
            "Show",
            "the",
            "student",
            "IDs",
            "along",
            "with",
            "the",
            "total",
            "number",
            "of",
            "friends",
            "they",
            "have",
            "participated",
            "in",
            ",",
            "specifying",
            "both",
            "friends",
            "initiated",
            "and",
            "received",
            "for",
            "each",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 883,
        "query": "SELECT id, (SELECT COUNT(*) FROM friend WHERE friend_id = h.id) + (SELECT COUNT(*) FROM friend WHERE student_id = h.id) AS num_friends FROM highschooler h",
        "query_toks": [
            "SELECT",
            "id,",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "friend",
            "WHERE",
            "friend_id",
            "=",
            "h.id",
            ")",
            "+",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "friend",
            "WHERE",
            "student_id",
            "=",
            "h.id",
            ")",
            "AS",
            "num_friends",
            "FROM",
            "highschooler",
            "h"
        ],
        "query_toks_no_value": [
            "select",
            "id,",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "friend",
            "where",
            "friend_id",
            "=",
            "h.id",
            ")",
            "+",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "friend",
            "where",
            "student_id",
            "=",
            "h.id",
            ")",
            "as",
            "num_friends",
            "from",
            "highschooler",
            "h"
        ],
        "question": "How many friends does each student have, considering all the friendships they have initiated or received?",
        "question_toks": [
            "How",
            "many",
            "friends",
            "does",
            "each",
            "student",
            "have",
            ",",
            "considering",
            "all",
            "the",
            "friendships",
            "they",
            "have",
            "initiated",
            "or",
            "received",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 884,
        "query": "SELECT name, (SELECT COUNT(*) FROM friend WHERE highschooler.id = friend.student_id) AS friend_count FROM highschooler",
        "query_toks": [
            "SELECT",
            "name,",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "friend",
            "WHERE",
            "highschooler.id",
            "=",
            "friend.student_id",
            ")",
            "AS",
            "friend_count",
            "FROM",
            "highschooler"
        ],
        "query_toks_no_value": [
            "select",
            "name,",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "friend",
            "where",
            "highschooler.id",
            "=",
            "friend.student_id",
            ")",
            "as",
            "friend_count",
            "from",
            "highschooler"
        ],
        "question": "Show the names of high school students and the number of friends they have initiated friendships with.",
        "question_toks": [
            "Show",
            "the",
            "names",
            "of",
            "high",
            "school",
            "students",
            "and",
            "the",
            "number",
            "of",
            "friends",
            "they",
            "have",
            "initiated",
            "friendships",
            "with",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 885,
        "query": "SELECT h2.name as HighschoolerName, (SELECT COUNT(*) FROM friend WHERE student_id = h2.id) as FriendshipCount FROM highschooler h2",
        "query_toks": [
            "SELECT",
            "h2.name",
            "as",
            "HighschoolerName,",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "friend",
            "WHERE",
            "student_id",
            "=",
            "h2.id",
            ")",
            "as",
            "FriendshipCount",
            "FROM",
            "highschooler",
            "h2"
        ],
        "query_toks_no_value": [
            "select",
            "h2.name",
            "as",
            "highschoolername,",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "friend",
            "where",
            "student_id",
            "=",
            "h2.id",
            ")",
            "as",
            "friendshipcount",
            "from",
            "highschooler",
            "h2"
        ],
        "question": "What are the names of the high schoolers and the number of friends they have initiated friendships with?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "the",
            "high",
            "schoolers",
            "and",
            "the",
            "number",
            "of",
            "friends",
            "they",
            "have",
            "initiated",
            "friendships",
            "with",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 886,
        "query": "SELECT T2.name FROM (SELECT student_id AS id FROM Friend UNION ALL SELECT friend_id AS id FROM Friend) AS T1 JOIN Highschooler AS T2 ON T1.id = T2.ID GROUP BY T1.id HAVING COUNT(*) = (SELECT COUNT(*) AS c FROM (SELECT student_id AS id FROM Friend UNION ALL SELECT friend_id AS id FROM Friend) AS T3 GROUP BY T3.id ORDER BY c DESC LIMIT 1)",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "name",
            "FROM",
            "(",
            "SELECT",
            "student_id",
            "AS",
            "id",
            "FROM",
            "Friend",
            "UNION",
            "ALL",
            "SELECT",
            "friend_id",
            "AS",
            "id",
            "FROM",
            "Friend",
            ")",
            "AS",
            "T1",
            "JOIN",
            "Highschooler",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "id",
            "=",
            "T2",
            ".",
            "ID",
            "GROUP",
            "BY",
            "T1",
            ".",
            "id",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "c",
            "FROM",
            "(",
            "SELECT",
            "student_id",
            "AS",
            "id",
            "FROM",
            "Friend",
            "UNION",
            "ALL",
            "SELECT",
            "friend_id",
            "AS",
            "id",
            "FROM",
            "Friend",
            ")",
            "AS",
            "T3",
            "GROUP",
            "BY",
            "T3",
            ".",
            "id",
            "ORDER",
            "BY",
            "c",
            "DESC",
            "LIMIT",
            "1",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "(",
            "select",
            "student_id",
            "as",
            "id",
            "from",
            "friend",
            "union",
            "all",
            "select",
            "friend_id",
            "as",
            "id",
            "from",
            "friend",
            ")",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "c",
            "from",
            "(",
            "select",
            "student_id",
            "as",
            "id",
            "from",
            "friend",
            "union",
            "all",
            "select",
            "friend_id",
            "as",
            "id",
            "from",
            "friend",
            ")",
            "as",
            "t3",
            "group",
            "by",
            "t3",
            ".",
            "id",
            "order",
            "by",
            "c",
            "desc",
            "limit",
            "value",
            ")"
        ],
        "question": "What is the name of the high schooler who has the greatest number of friends, considering both initiated and received friendships?",
        "question_toks": [
            "What",
            "is",
            "the",
            "name",
            "of",
            "the",
            "high",
            "schooler",
            "who",
            "has",
            "the",
            "greatest",
            "number",
            "of",
            "friends",
            ",",
            "considering",
            "both",
            "initiated",
            "and",
            "received",
            "friendships",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 887,
        "query": "SELECT T2.name FROM (SELECT student_id AS id FROM Friend UNION ALL SELECT friend_id AS id FROM Friend) AS T1 JOIN Highschooler AS T2 ON T1.id = T2.ID GROUP BY T1.id HAVING COUNT(*) = (SELECT COUNT(*) AS c FROM (SELECT student_id AS id FROM Friend UNION ALL SELECT friend_id AS id FROM Friend) AS T3 GROUP BY T3.id ORDER BY c DESC LIMIT 1)",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "name",
            "FROM",
            "(",
            "SELECT",
            "student_id",
            "AS",
            "id",
            "FROM",
            "Friend",
            "UNION",
            "ALL",
            "SELECT",
            "friend_id",
            "AS",
            "id",
            "FROM",
            "Friend",
            ")",
            "AS",
            "T1",
            "JOIN",
            "Highschooler",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "id",
            "=",
            "T2",
            ".",
            "ID",
            "GROUP",
            "BY",
            "T1",
            ".",
            "id",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "c",
            "FROM",
            "(",
            "SELECT",
            "student_id",
            "AS",
            "id",
            "FROM",
            "Friend",
            "UNION",
            "ALL",
            "SELECT",
            "friend_id",
            "AS",
            "id",
            "FROM",
            "Friend",
            ")",
            "AS",
            "T3",
            "GROUP",
            "BY",
            "T3",
            ".",
            "id",
            "ORDER",
            "BY",
            "c",
            "DESC",
            "LIMIT",
            "1",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "(",
            "select",
            "student_id",
            "as",
            "id",
            "from",
            "friend",
            "union",
            "all",
            "select",
            "friend_id",
            "as",
            "id",
            "from",
            "friend",
            ")",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "c",
            "from",
            "(",
            "select",
            "student_id",
            "as",
            "id",
            "from",
            "friend",
            "union",
            "all",
            "select",
            "friend_id",
            "as",
            "id",
            "from",
            "friend",
            ")",
            "as",
            "t3",
            "group",
            "by",
            "t3",
            ".",
            "id",
            "order",
            "by",
            "c",
            "desc",
            "limit",
            "value",
            ")"
        ],
        "question": "Return the names of all high school students with the most friends.",
        "question_toks": [
            "Return",
            "the",
            "names",
            "of",
            "all",
            "high",
            "school",
            "students",
            "with",
            "the",
            "most",
            "friends",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 888,
        "query": "SELECT H.name FROM highschooler H WHERE (SELECT COUNT(*) FROM friend F WHERE F.student_id = H.id OR F.friend_id = H.id) >= 3",
        "query_toks": [
            "SELECT",
            "H.name",
            "FROM",
            "highschooler",
            "H",
            "WHERE",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "friend",
            "F",
            "WHERE",
            "F.student_id",
            "=",
            "H.id",
            "OR",
            "F.friend_id",
            "=",
            "H.id",
            ")",
            ">",
            "=",
            "3"
        ],
        "query_toks_no_value": [
            "select",
            "h.name",
            "from",
            "highschooler",
            "h",
            "where",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "friend",
            "f",
            "where",
            "f.student_id",
            "=",
            "h.id",
            "or",
            "f.friend_id",
            "=",
            "h.id",
            ")",
            ">",
            "=",
            "value"
        ],
        "question": "Show the names of high schoolers who have at least 3 friends, specifying both the friendships initiated or received by the student.",
        "question_toks": [
            "Show",
            "the",
            "names",
            "of",
            "high",
            "schoolers",
            "who",
            "have",
            "at",
            "least",
            "3",
            "friends",
            ",",
            "specifying",
            "both",
            "the",
            "friendships",
            "initiated",
            "or",
            "received",
            "by",
            "the",
            "student",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 889,
        "query": "SELECT h.name FROM highschooler h WHERE (SELECT COUNT(*) FROM friend WHERE student_id = h.id OR friend_id = h.id) >= 3",
        "query_toks": [
            "SELECT",
            "h.name",
            "FROM",
            "highschooler",
            "h",
            "WHERE",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "friend",
            "WHERE",
            "student_id",
            "=",
            "h.id",
            "OR",
            "friend_id",
            "=",
            "h.id",
            ")",
            ">",
            "=",
            "3"
        ],
        "query_toks_no_value": [
            "select",
            "h.name",
            "from",
            "highschooler",
            "h",
            "where",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "friend",
            "where",
            "student_id",
            "=",
            "h.id",
            "or",
            "friend_id",
            "=",
            "h.id",
            ")",
            ">",
            "=",
            "value"
        ],
        "question": "What are the names of high schoolers who have initiated or received 3 or more friendships?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "high",
            "schoolers",
            "who",
            "have",
            "initiated",
            "or",
            "received",
            "3",
            "or",
            "more",
            "friendships",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 890,
        "query": "SELECT T3.ID, T4.name FROM (SELECT T2.ID, T1.friend_id AS friend_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle' UNION SELECT T2.ID, T1.student_id AS friend_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.friend_id = T2.id WHERE T2.name = 'Kyle') AS T3 JOIN Highschooler AS T4 ON T3.friend_id = T4.ID",
        "query_toks": [
            "SELECT",
            "T3",
            ".",
            "ID,",
            "T4",
            ".",
            "name",
            "FROM",
            "(",
            "SELECT",
            "T2",
            ".",
            "ID,",
            "T1",
            ".",
            "friend_id",
            "AS",
            "friend_id",
            "FROM",
            "Friend",
            "AS",
            "T1",
            "JOIN",
            "Highschooler",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "student_id",
            "=",
            "T2",
            ".",
            "id",
            "WHERE",
            "T2",
            ".",
            "name",
            "=",
            "'Kyle",
            "'",
            "UNION",
            "SELECT",
            "T2",
            ".",
            "ID,",
            "T1",
            ".",
            "student_id",
            "AS",
            "friend_id",
            "FROM",
            "Friend",
            "AS",
            "T1",
            "JOIN",
            "Highschooler",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "friend_id",
            "=",
            "T2",
            ".",
            "id",
            "WHERE",
            "T2",
            ".",
            "name",
            "=",
            "'Kyle",
            "'",
            ")",
            "AS",
            "T3",
            "JOIN",
            "Highschooler",
            "AS",
            "T4",
            "ON",
            "T3",
            ".",
            "friend_id",
            "=",
            "T4",
            ".",
            "ID"
        ],
        "query_toks_no_value": [
            "select",
            "t3",
            ".",
            "id,",
            "t4",
            ".",
            "name",
            "from",
            "(",
            "select",
            "t2",
            ".",
            "id,",
            "t1",
            ".",
            "friend_id",
            "as",
            "friend_id",
            "from",
            "friend",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "value",
            "union",
            "select",
            "t2",
            ".",
            "id,",
            "t1",
            ".",
            "student_id",
            "as",
            "friend_id",
            "from",
            "friend",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "friend_id",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "value",
            ")",
            "as",
            "t3",
            "join",
            "highschooler",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "friend_id",
            "=",
            "t4",
            ".",
            "id"
        ],
        "question": "Show the names of all friends of each high schooler named Kyle. List each student id and the friends names.",
        "question_toks": [
            "Show",
            "the",
            "names",
            "of",
            "all",
            "friends",
            "of",
            "each",
            "high",
            "schooler",
            "named",
            "Kyle",
            ".",
            "List",
            "each",
            "student",
            "id",
            "and",
            "the",
            "friends",
            "names",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 891,
        "query": "SELECT T3.ID, T4.name FROM (SELECT T2.ID, T1.friend_id AS friend_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle' UNION SELECT T2.ID, T1.student_id AS friend_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.friend_id = T2.id WHERE T2.name = 'Kyle') AS T3 JOIN Highschooler AS T4 ON T3.friend_id = T4.ID",
        "query_toks": [
            "SELECT",
            "T3",
            ".",
            "ID,",
            "T4",
            ".",
            "name",
            "FROM",
            "(",
            "SELECT",
            "T2",
            ".",
            "ID,",
            "T1",
            ".",
            "friend_id",
            "AS",
            "friend_id",
            "FROM",
            "Friend",
            "AS",
            "T1",
            "JOIN",
            "Highschooler",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "student_id",
            "=",
            "T2",
            ".",
            "id",
            "WHERE",
            "T2",
            ".",
            "name",
            "=",
            "'Kyle",
            "'",
            "UNION",
            "SELECT",
            "T2",
            ".",
            "ID,",
            "T1",
            ".",
            "student_id",
            "AS",
            "friend_id",
            "FROM",
            "Friend",
            "AS",
            "T1",
            "JOIN",
            "Highschooler",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "friend_id",
            "=",
            "T2",
            ".",
            "id",
            "WHERE",
            "T2",
            ".",
            "name",
            "=",
            "'Kyle",
            "'",
            ")",
            "AS",
            "T3",
            "JOIN",
            "Highschooler",
            "AS",
            "T4",
            "ON",
            "T3",
            ".",
            "friend_id",
            "=",
            "T4",
            ".",
            "ID"
        ],
        "query_toks_no_value": [
            "select",
            "t3",
            ".",
            "id,",
            "t4",
            ".",
            "name",
            "from",
            "(",
            "select",
            "t2",
            ".",
            "id,",
            "t1",
            ".",
            "friend_id",
            "as",
            "friend_id",
            "from",
            "friend",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "value",
            "union",
            "select",
            "t2",
            ".",
            "id,",
            "t1",
            ".",
            "student_id",
            "as",
            "friend_id",
            "from",
            "friend",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "friend_id",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "value",
            ")",
            "as",
            "t3",
            "join",
            "highschooler",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "friend_id",
            "=",
            "t4",
            ".",
            "id"
        ],
        "question": "Return the names of friends of each high school students named Kyle. List each student id and the friends names.",
        "question_toks": [
            "Return",
            "the",
            "names",
            "of",
            "friends",
            "of",
            "each",
            "high",
            "school",
            "students",
            "named",
            "Kyle",
            ".",
            "List",
            "each",
            "student",
            "id",
            "and",
            "the",
            "friends",
            "names",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 892,
        "query": "SELECT H.id, COUNT(F.friend_id) AS num_friends FROM highschooler H LEFT JOIN friend F ON H.id = F.student_id WHERE H.name = 'Kyle' GROUP BY H.id",
        "query_toks": [
            "SELECT",
            "H.id,",
            "COUNT",
            "(",
            "F.friend_id",
            ")",
            "AS",
            "num_friends",
            "FROM",
            "highschooler",
            "H",
            "LEFT",
            "JOIN",
            "friend",
            "F",
            "ON",
            "H.id",
            "=",
            "F.student_id",
            "WHERE",
            "H.name",
            "=",
            "'Kyle",
            "'",
            "GROUP",
            "BY",
            "H.id"
        ],
        "query_toks_no_value": [
            "select",
            "h.id,",
            "count",
            "(",
            "f.friend_id",
            ")",
            "as",
            "num_friends",
            "from",
            "highschooler",
            "h",
            "left",
            "join",
            "friend",
            "f",
            "on",
            "h.id",
            "=",
            "f.student_id",
            "where",
            "h.name",
            "=",
            "value",
            "group",
            "by",
            "h.id"
        ],
        "question": "How many friends does each high school student named Kyle have? List the student id and the number of friends.",
        "question_toks": [
            "How",
            "many",
            "friends",
            "does",
            "each",
            "high",
            "school",
            "student",
            "named",
            "Kyle",
            "have",
            "?",
            "List",
            "the",
            "student",
            "id",
            "and",
            "the",
            "number",
            "of",
            "friends",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 893,
        "query": "SELECT T3.ID, COUNT(T3.friend_id) FROM (SELECT T2.ID, T1.friend_id AS friend_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle' UNION SELECT T2.ID, T1.student_id AS friend_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.friend_id = T2.id WHERE T2.name = 'Kyle') AS T3 GROUP BY T3.ID;",
        "query_toks": [
            "SELECT",
            "T3",
            ".",
            "ID,",
            "COUNT",
            "(",
            "T3",
            ".",
            "friend_id",
            ")",
            "FROM",
            "(",
            "SELECT",
            "T2",
            ".",
            "ID,",
            "T1",
            ".",
            "friend_id",
            "AS",
            "friend_id",
            "FROM",
            "Friend",
            "AS",
            "T1",
            "JOIN",
            "Highschooler",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "student_id",
            "=",
            "T2",
            ".",
            "id",
            "WHERE",
            "T2",
            ".",
            "name",
            "=",
            "'Kyle",
            "'",
            "UNION",
            "SELECT",
            "T2",
            ".",
            "ID,",
            "T1",
            ".",
            "student_id",
            "AS",
            "friend_id",
            "FROM",
            "Friend",
            "AS",
            "T1",
            "JOIN",
            "Highschooler",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "friend_id",
            "=",
            "T2",
            ".",
            "id",
            "WHERE",
            "T2",
            ".",
            "name",
            "=",
            "'Kyle",
            "'",
            ")",
            "AS",
            "T3",
            "GROUP",
            "BY",
            "T3",
            ".",
            "ID"
        ],
        "query_toks_no_value": [
            "select",
            "t3",
            ".",
            "id,",
            "count",
            "(",
            "t3",
            ".",
            "friend_id",
            ")",
            "from",
            "(",
            "select",
            "t2",
            ".",
            "id,",
            "t1",
            ".",
            "friend_id",
            "as",
            "friend_id",
            "from",
            "friend",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "value",
            "union",
            "select",
            "t2",
            ".",
            "id,",
            "t1",
            ".",
            "student_id",
            "as",
            "friend_id",
            "from",
            "friend",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "friend_id",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "value",
            ")",
            "as",
            "t3",
            "group",
            "by",
            "t3",
            ".",
            "id"
        ],
        "question": "Count the total number of friends that each high schooler named Kyle has. List the student id and the number of friends.",
        "question_toks": [
            "Count",
            "the",
            "total",
            "number",
            "of",
            "friends",
            "that",
            "each",
            "high",
            "schooler",
            "named",
            "Kyle",
            "has",
            ".",
            "List",
            "the",
            "student",
            "id",
            "and",
            "the",
            "number",
            "of",
            "friends",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 894,
        "query": "SELECT id FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)",
        "query_toks": [
            "SELECT",
            "id",
            "FROM",
            "highschooler",
            "WHERE",
            "id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "student_id",
            "FROM",
            "friend",
            "UNION",
            "SELECT",
            "friend_id",
            "FROM",
            "friend",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "id",
            "from",
            "highschooler",
            "where",
            "id",
            "not",
            "in",
            "(",
            "select",
            "student_id",
            "from",
            "friend",
            "union",
            "select",
            "friend_id",
            "from",
            "friend",
            ")"
        ],
        "question": "Show ids of all students who do not have any friends.",
        "question_toks": [
            "Show",
            "ids",
            "of",
            "all",
            "students",
            "who",
            "do",
            "not",
            "have",
            "any",
            "friends",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 895,
        "query": "SELECT id FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend) AND id NOT IN (SELECT friend_id FROM friend)",
        "query_toks": [
            "SELECT",
            "id",
            "FROM",
            "highschooler",
            "WHERE",
            "id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "student_id",
            "FROM",
            "friend",
            ")",
            "AND",
            "id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "friend_id",
            "FROM",
            "friend",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "id",
            "from",
            "highschooler",
            "where",
            "id",
            "not",
            "in",
            "(",
            "select",
            "student_id",
            "from",
            "friend",
            ")",
            "and",
            "id",
            "not",
            "in",
            "(",
            "select",
            "friend_id",
            "from",
            "friend",
            ")"
        ],
        "question": "What are the ids of high school students who do not have friends?",
        "question_toks": [
            "What",
            "are",
            "the",
            "ids",
            "of",
            "high",
            "school",
            "students",
            "who",
            "do",
            "not",
            "have",
            "friends",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 896,
        "query": "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "Highschooler",
            "WHERE",
            "ID",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "student_id",
            "FROM",
            "Friend",
            "UNION",
            "SELECT",
            "friend_id",
            "FROM",
            "Friend",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "highschooler",
            "where",
            "id",
            "not",
            "in",
            "(",
            "select",
            "student_id",
            "from",
            "friend",
            "union",
            "select",
            "friend_id",
            "from",
            "friend",
            ")"
        ],
        "question": "Show the names of high school students who do not have any friends. Having mo friends means no friendships initiated or received.",
        "question_toks": [
            "Show",
            "the",
            "names",
            "of",
            "high",
            "school",
            "students",
            "who",
            "do",
            "not",
            "have",
            "any",
            "friends",
            ".",
            "Having",
            "mo",
            "friends",
            "means",
            "no",
            "friendships",
            "initiated",
            "or",
            "received",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 897,
        "query": "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend) AND id NOT IN (SELECT friend_id FROM friend)",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "highschooler",
            "WHERE",
            "id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "student_id",
            "FROM",
            "friend",
            ")",
            "AND",
            "id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "friend_id",
            "FROM",
            "friend",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "highschooler",
            "where",
            "id",
            "not",
            "in",
            "(",
            "select",
            "student_id",
            "from",
            "friend",
            ")",
            "and",
            "id",
            "not",
            "in",
            "(",
            "select",
            "friend_id",
            "from",
            "friend",
            ")"
        ],
        "question": "What are the names of students who have not initiated or received any friendships?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "students",
            "who",
            "have",
            "not",
            "initiated",
            "or",
            "received",
            "any",
            "friendships",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 898,
        "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "query_toks": [
            "SELECT",
            "student_id",
            "FROM",
            "Friend",
            "INTERSECT",
            "SELECT",
            "liked_id",
            "FROM",
            "Likes"
        ],
        "query_toks_no_value": [
            "select",
            "student_id",
            "from",
            "friend",
            "intersect",
            "select",
            "liked_id",
            "from",
            "likes"
        ],
        "question": "Show the ids of high schoolers who have friends they have initiated friendships with and are also liked by someone else.",
        "question_toks": [
            "Show",
            "the",
            "ids",
            "of",
            "high",
            "schoolers",
            "who",
            "have",
            "friends",
            "they",
            "have",
            "initiated",
            "friendships",
            "with",
            "and",
            "are",
            "also",
            "liked",
            "by",
            "someone",
            "else",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 899,
        "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "query_toks": [
            "SELECT",
            "student_id",
            "FROM",
            "Friend",
            "INTERSECT",
            "SELECT",
            "liked_id",
            "FROM",
            "Likes"
        ],
        "query_toks_no_value": [
            "select",
            "student_id",
            "from",
            "friend",
            "intersect",
            "select",
            "liked_id",
            "from",
            "likes"
        ],
        "question": "What are the ids of students who have initiated friendships and are liked by others?",
        "question_toks": [
            "What",
            "are",
            "the",
            "ids",
            "of",
            "students",
            "who",
            "have",
            "initiated",
            "friendships",
            "and",
            "are",
            "liked",
            "by",
            "others",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 900,
        "query": "SELECT T1.name FROM highschooler AS T1 WHERE T1.id IN (SELECT DISTINCT T2.student_id FROM friend AS T2) and T1.id IN (SELECT DISTINCT T3.liked_id FROM likes AS T3)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "name",
            "FROM",
            "highschooler",
            "AS",
            "T1",
            "WHERE",
            "T1",
            ".",
            "id",
            "IN",
            "(",
            "SELECT",
            "DISTINCT",
            "T2",
            ".",
            "student_id",
            "FROM",
            "friend",
            "AS",
            "T2",
            ")",
            "and",
            "T1",
            ".",
            "id",
            "IN",
            "(",
            "SELECT",
            "DISTINCT",
            "T3",
            ".",
            "liked_id",
            "FROM",
            "likes",
            "AS",
            "T3",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "highschooler",
            "as",
            "t1",
            "where",
            "t1",
            ".",
            "id",
            "in",
            "(",
            "select",
            "distinct",
            "t2",
            ".",
            "student_id",
            "from",
            "friend",
            "as",
            "t2",
            ")",
            "and",
            "t1",
            ".",
            "id",
            "in",
            "(",
            "select",
            "distinct",
            "t3",
            ".",
            "liked_id",
            "from",
            "likes",
            "as",
            "t3",
            ")"
        ],
        "question": "Show names of all students who have initiated some friendships and also have been liked by someone else.",
        "question_toks": [
            "Show",
            "names",
            "of",
            "all",
            "students",
            "who",
            "have",
            "initiated",
            "some",
            "friendships",
            "and",
            "also",
            "have",
            "been",
            "liked",
            "by",
            "someone",
            "else",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 901,
        "query": "SELECT T3.name FROM Highschooler as T3 WHERE T3.ID IN (SELECT T2.ID FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id UNION SELECT T2.ID FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.friend_id = T2.id INTERSECT SELECT T2.ID FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id)",
        "query_toks": [
            "SELECT",
            "T3",
            ".",
            "name",
            "FROM",
            "Highschooler",
            "as",
            "T3",
            "WHERE",
            "T3",
            ".",
            "ID",
            "IN",
            "(",
            "SELECT",
            "T2",
            ".",
            "ID",
            "FROM",
            "Friend",
            "AS",
            "T1",
            "JOIN",
            "Highschooler",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "student_id",
            "=",
            "T2",
            ".",
            "id",
            "UNION",
            "SELECT",
            "T2",
            ".",
            "ID",
            "FROM",
            "Friend",
            "AS",
            "T1",
            "JOIN",
            "Highschooler",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "friend_id",
            "=",
            "T2",
            ".",
            "id",
            "INTERSECT",
            "SELECT",
            "T2",
            ".",
            "ID",
            "FROM",
            "Likes",
            "AS",
            "T1",
            "JOIN",
            "Highschooler",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "liked_id",
            "=",
            "T2",
            ".",
            "id",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t3",
            ".",
            "name",
            "from",
            "highschooler",
            "as",
            "t3",
            "where",
            "t3",
            ".",
            "id",
            "in",
            "(",
            "select",
            "t2",
            ".",
            "id",
            "from",
            "friend",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            "union",
            "select",
            "t2",
            ".",
            "id",
            "from",
            "friend",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "friend_id",
            "=",
            "t2",
            ".",
            "id",
            "intersect",
            "select",
            "t2",
            ".",
            "id",
            "from",
            "likes",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "liked_id",
            "=",
            "t2",
            ".",
            "id",
            ")"
        ],
        "question": "What are the names of high schoolers who both have friends and are liked?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "high",
            "schoolers",
            "who",
            "both",
            "have",
            "friends",
            "and",
            "are",
            "liked",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 902,
        "query": "SELECT id, COUNT(DISTINCT L1.liked_id) + COUNT(DISTINCT L2.student_id) AS total_likes FROM highschooler h LEFT JOIN likes L1 ON h.id = L1.student_id LEFT JOIN likes L2 ON h.id = L2.liked_id GROUP BY id",
        "query_toks": [
            "SELECT",
            "id,",
            "COUNT",
            "(",
            "DISTINCT",
            "L1.liked_id",
            ")",
            "+",
            "COUNT",
            "(",
            "DISTINCT",
            "L2.student_id",
            ")",
            "AS",
            "total_likes",
            "FROM",
            "highschooler",
            "h",
            "LEFT",
            "JOIN",
            "likes",
            "L1",
            "ON",
            "h.id",
            "=",
            "L1.student_id",
            "LEFT",
            "JOIN",
            "likes",
            "L2",
            "ON",
            "h.id",
            "=",
            "L2.liked_id",
            "GROUP",
            "BY",
            "id"
        ],
        "query_toks_no_value": [
            "select",
            "id,",
            "count",
            "(",
            "distinct",
            "l1.liked_id",
            ")",
            "+",
            "count",
            "(",
            "distinct",
            "l2.student_id",
            ")",
            "as",
            "total_likes",
            "from",
            "highschooler",
            "h",
            "left",
            "join",
            "likes",
            "l1",
            "on",
            "h.id",
            "=",
            "l1.student_id",
            "left",
            "join",
            "likes",
            "l2",
            "on",
            "h.id",
            "=",
            "l2.liked_id",
            "group",
            "by",
            "id"
        ],
        "question": "Count the total number of likes for each student id, including both likes given and received.",
        "question_toks": [
            "Count",
            "the",
            "total",
            "number",
            "of",
            "likes",
            "for",
            "each",
            "student",
            "id",
            ",",
            "including",
            "both",
            "likes",
            "given",
            "and",
            "received",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 903,
        "query": "SELECT T1.ID, (SELECT COUNT(*) FROM Likes as T2 WHERE T2.student_id = T1.ID) as given, (SELECT COUNT(*) FROM Likes AS T3 WHERE T3.liked_id = T1.ID) as received FROM Highschooler AS T1",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "ID,",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "Likes",
            "as",
            "T2",
            "WHERE",
            "T2",
            ".",
            "student_id",
            "=",
            "T1",
            ".",
            "ID",
            ")",
            "as",
            "given,",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "Likes",
            "AS",
            "T3",
            "WHERE",
            "T3",
            ".",
            "liked_id",
            "=",
            "T1",
            ".",
            "ID",
            ")",
            "as",
            "received",
            "FROM",
            "Highschooler",
            "AS",
            "T1"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "id,",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "likes",
            "as",
            "t2",
            "where",
            "t2",
            ".",
            "student_id",
            "=",
            "t1",
            ".",
            "id",
            ")",
            "as",
            "given,",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "likes",
            "as",
            "t3",
            "where",
            "t3",
            ".",
            "liked_id",
            "=",
            "t1",
            ".",
            "id",
            ")",
            "as",
            "received",
            "from",
            "highschooler",
            "as",
            "t1"
        ],
        "question": "Count the total number of likes given and received by each student id.",
        "question_toks": [
            "Count",
            "the",
            "total",
            "number",
            "of",
            "likes",
            "given",
            "and",
            "received",
            "by",
            "each",
            "student",
            "id",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 904,
        "query": "SELECT T2.name, COALESCE(COUNT(DISTINCT T1.liked_id), 0) AS likes_given, COALESCE(COUNT(DISTINCT T3.student_id), 0) AS likes_received FROM Highschooler AS T2 LEFT JOIN Likes AS T1 ON T1.student_id = T2.ID LEFT JOIN Likes AS T3 ON T3.liked_id = T2.ID GROUP BY T2.ID, T2.name",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "name,",
            "COALESCE",
            "(",
            "COUNT",
            "(",
            "DISTINCT",
            "T1",
            ".",
            "liked_id",
            ")",
            ",",
            "0",
            ")",
            "AS",
            "likes_given,",
            "COALESCE",
            "(",
            "COUNT",
            "(",
            "DISTINCT",
            "T3",
            ".",
            "student_id",
            ")",
            ",",
            "0",
            ")",
            "AS",
            "likes_received",
            "FROM",
            "Highschooler",
            "AS",
            "T2",
            "LEFT",
            "JOIN",
            "Likes",
            "AS",
            "T1",
            "ON",
            "T1",
            ".",
            "student_id",
            "=",
            "T2",
            ".",
            "ID",
            "LEFT",
            "JOIN",
            "Likes",
            "AS",
            "T3",
            "ON",
            "T3",
            ".",
            "liked_id",
            "=",
            "T2",
            ".",
            "ID",
            "GROUP",
            "BY",
            "T2",
            ".",
            "ID,",
            "T2",
            ".",
            "name"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "name,",
            "coalesce",
            "(",
            "count",
            "(",
            "distinct",
            "t1",
            ".",
            "liked_id",
            ")",
            ",",
            "value",
            ")",
            "as",
            "likes_given,",
            "coalesce",
            "(",
            "count",
            "(",
            "distinct",
            "t3",
            ".",
            "student_id",
            ")",
            ",",
            "value",
            ")",
            "as",
            "likes_received",
            "from",
            "highschooler",
            "as",
            "t2",
            "left",
            "join",
            "likes",
            "as",
            "t1",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            "left",
            "join",
            "likes",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "liked_id",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t2",
            ".",
            "id,",
            "t2",
            ".",
            "name"
        ],
        "question": "Show the names of high schoolers along with the total number of likes they have participated in, specifying both likes given and received for each.",
        "question_toks": [
            "Show",
            "the",
            "names",
            "of",
            "high",
            "schoolers",
            "along",
            "with",
            "the",
            "total",
            "number",
            "of",
            "likes",
            "they",
            "have",
            "participated",
            "in",
            ",",
            "specifying",
            "both",
            "likes",
            "given",
            "and",
            "received",
            "for",
            "each",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 905,
        "query": "SELECT T2.name, COUNT(DISTINCT T1.student_id) AS likes_given, COUNT(DISTINCT T3.liked_id) AS likes_received FROM Highschooler AS T2 LEFT JOIN Likes AS T1 ON T1.student_id = T2.ID LEFT JOIN Likes AS T3 ON T3.liked_id = T2.ID GROUP BY T2.ID",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "name,",
            "COUNT",
            "(",
            "DISTINCT",
            "T1",
            ".",
            "student_id",
            ")",
            "AS",
            "likes_given,",
            "COUNT",
            "(",
            "DISTINCT",
            "T3",
            ".",
            "liked_id",
            ")",
            "AS",
            "likes_received",
            "FROM",
            "Highschooler",
            "AS",
            "T2",
            "LEFT",
            "JOIN",
            "Likes",
            "AS",
            "T1",
            "ON",
            "T1",
            ".",
            "student_id",
            "=",
            "T2",
            ".",
            "ID",
            "LEFT",
            "JOIN",
            "Likes",
            "AS",
            "T3",
            "ON",
            "T3",
            ".",
            "liked_id",
            "=",
            "T2",
            ".",
            "ID",
            "GROUP",
            "BY",
            "T2",
            ".",
            "ID"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "name,",
            "count",
            "(",
            "distinct",
            "t1",
            ".",
            "student_id",
            ")",
            "as",
            "likes_given,",
            "count",
            "(",
            "distinct",
            "t3",
            ".",
            "liked_id",
            ")",
            "as",
            "likes_received",
            "from",
            "highschooler",
            "as",
            "t2",
            "left",
            "join",
            "likes",
            "as",
            "t1",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            "left",
            "join",
            "likes",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "liked_id",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t2",
            ".",
            "id"
        ],
        "question": "Show the names of high schoolers along with the total number of likes they have participated in, specifying both likes given and received for each.",
        "question_toks": [
            "Show",
            "the",
            "names",
            "of",
            "high",
            "schoolers",
            "along",
            "with",
            "the",
            "total",
            "number",
            "of",
            "likes",
            "they",
            "have",
            "participated",
            "in",
            ",",
            "specifying",
            "both",
            "likes",
            "given",
            "and",
            "received",
            "for",
            "each",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 906,
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id GROUP BY T1.liked_id HAVING count(*) = (SELECT max(count) FROM (SELECT count(*) as count FROM Likes GROUP BY liked_id) AS counts)",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "name",
            "FROM",
            "Likes",
            "AS",
            "T1",
            "JOIN",
            "Highschooler",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "liked_id",
            "=",
            "T2",
            ".",
            "id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "liked_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "count",
            ")",
            "FROM",
            "(",
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "as",
            "count",
            "FROM",
            "Likes",
            "GROUP",
            "BY",
            "liked_id",
            ")",
            "AS",
            "counts",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "likes",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "liked_id",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t1",
            ".",
            "liked_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "count",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "count",
            "from",
            "likes",
            "group",
            "by",
            "liked_id",
            ")",
            "as",
            "counts",
            ")"
        ],
        "question": "What is the name of the high schooler who has received the greatest number of likes? If there is a tie, return all.",
        "question_toks": [
            "What",
            "is",
            "the",
            "name",
            "of",
            "the",
            "high",
            "schooler",
            "who",
            "has",
            "received",
            "the",
            "greatest",
            "number",
            "of",
            "likes",
            "?",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "return",
            "all",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 907,
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id GROUP BY T1.liked_id HAVING count(*) = (SELECT MAX(ncount) from (SELECT COUNT(*) as ncount FROM Likes AS T3 JOIN Highschooler AS T4 ON T3.liked_id = T4.id GROUP BY T3.liked_id) temp)",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "name",
            "FROM",
            "Likes",
            "AS",
            "T1",
            "JOIN",
            "Highschooler",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "liked_id",
            "=",
            "T2",
            ".",
            "id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "liked_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "ncount",
            ")",
            "from",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "as",
            "ncount",
            "FROM",
            "Likes",
            "AS",
            "T3",
            "JOIN",
            "Highschooler",
            "AS",
            "T4",
            "ON",
            "T3",
            ".",
            "liked_id",
            "=",
            "T4",
            ".",
            "id",
            "GROUP",
            "BY",
            "T3",
            ".",
            "liked_id",
            ")",
            "temp",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "likes",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "liked_id",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t1",
            ".",
            "liked_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "ncount",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "ncount",
            "from",
            "likes",
            "as",
            "t3",
            "join",
            "highschooler",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "liked_id",
            "=",
            "t4",
            ".",
            "id",
            "group",
            "by",
            "t3",
            ".",
            "liked_id",
            ")",
            "temp",
            ")"
        ],
        "question": "Give the name of the student who received the most likes. If there is a tie, return all.",
        "question_toks": [
            "Give",
            "the",
            "name",
            "of",
            "the",
            "student",
            "who",
            "received",
            "the",
            "most",
            "likes",
            ".",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "return",
            "all",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 908,
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id GROUP BY T1.liked_id HAVING count(*) >= 2",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "name",
            "FROM",
            "Likes",
            "AS",
            "T1",
            "JOIN",
            "Highschooler",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "liked_id",
            "=",
            "T2",
            ".",
            "id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "liked_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "likes",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "liked_id",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t1",
            ".",
            "liked_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value"
        ],
        "question": "Show the names of students who have received at least 2 likes.",
        "question_toks": [
            "Show",
            "the",
            "names",
            "of",
            "students",
            "who",
            "have",
            "received",
            "at",
            "least",
            "2",
            "likes",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 909,
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id GROUP BY T1.liked_id HAVING count(*) >= 2",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "name",
            "FROM",
            "Likes",
            "AS",
            "T1",
            "JOIN",
            "Highschooler",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "liked_id",
            "=",
            "T2",
            ".",
            "id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "liked_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "likes",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "liked_id",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t1",
            ".",
            "liked_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value"
        ],
        "question": "What are the names of students who have received 2 or more likes?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "students",
            "who",
            "have",
            "received",
            "2",
            "or",
            "more",
            "likes",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 910,
        "query": "SELECT T2.name FROM Highschooler AS T2 JOIN Friend AS T1 ON T1.student_id = T2.id OR T1.friend_id = T2.id WHERE T2.grade > 5 GROUP BY T2.id HAVING count(*) >= 2",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "name",
            "FROM",
            "Highschooler",
            "AS",
            "T2",
            "JOIN",
            "Friend",
            "AS",
            "T1",
            "ON",
            "T1",
            ".",
            "student_id",
            "=",
            "T2",
            ".",
            "id",
            "OR",
            "T1",
            ".",
            "friend_id",
            "=",
            "T2",
            ".",
            "id",
            "WHERE",
            "T2",
            ".",
            "grade",
            ">",
            "5",
            "GROUP",
            "BY",
            "T2",
            ".",
            "id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "highschooler",
            "as",
            "t2",
            "join",
            "friend",
            "as",
            "t1",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            "or",
            "t1",
            ".",
            "friend_id",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "grade",
            ">",
            "value",
            "group",
            "by",
            "t2",
            ".",
            "id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value"
        ],
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends they have initiated friendships with or have received friendships from.",
        "question_toks": [
            "Show",
            "the",
            "names",
            "of",
            "students",
            "who",
            "have",
            "a",
            "grade",
            "higher",
            "than",
            "5",
            "and",
            "have",
            "at",
            "least",
            "2",
            "friends",
            "they",
            "have",
            "initiated",
            "friendships",
            "with",
            "or",
            "have",
            "received",
            "friendships",
            "from",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 911,
        "query": "SELECT T2.name FROM Highschooler AS T2 JOIN Friend AS T1 ON T1.student_id = T2.id OR T1.friend_id = T2.id WHERE T2.grade > 5 GROUP BY T2.id HAVING count(*) >= 2",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "name",
            "FROM",
            "Highschooler",
            "AS",
            "T2",
            "JOIN",
            "Friend",
            "AS",
            "T1",
            "ON",
            "T1",
            ".",
            "student_id",
            "=",
            "T2",
            ".",
            "id",
            "OR",
            "T1",
            ".",
            "friend_id",
            "=",
            "T2",
            ".",
            "id",
            "WHERE",
            "T2",
            ".",
            "grade",
            ">",
            "5",
            "GROUP",
            "BY",
            "T2",
            ".",
            "id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "highschooler",
            "as",
            "t2",
            "join",
            "friend",
            "as",
            "t1",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            "or",
            "t1",
            ".",
            "friend_id",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "grade",
            ">",
            "value",
            "group",
            "by",
            "t2",
            ".",
            "id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value"
        ],
        "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friendships as either initiators or recipients?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "high",
            "schoolers",
            "who",
            "have",
            "a",
            "grade",
            "of",
            "over",
            "5",
            "and",
            "have",
            "2",
            "or",
            "more",
            "friendships",
            "as",
            "either",
            "initiators",
            "or",
            "recipients",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 912,
        "query": "SELECT h.id AS student_id, (SELECT COUNT(*) FROM likes WHERE liked_id = h.id) AS likes_count FROM highschooler h WHERE h.name = 'Kyle'",
        "query_toks": [
            "SELECT",
            "h.id",
            "AS",
            "student_id,",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "likes",
            "WHERE",
            "liked_id",
            "=",
            "h.id",
            ")",
            "AS",
            "likes_count",
            "FROM",
            "highschooler",
            "h",
            "WHERE",
            "h.name",
            "=",
            "'Kyle",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "h.id",
            "as",
            "student_id,",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "likes",
            "where",
            "liked_id",
            "=",
            "h.id",
            ")",
            "as",
            "likes_count",
            "from",
            "highschooler",
            "h",
            "where",
            "h.name",
            "=",
            "value"
        ],
        "question": "How many likes has each high schooler named Kyle received? List the student id and the number of likes.",
        "question_toks": [
            "How",
            "many",
            "likes",
            "has",
            "each",
            "high",
            "schooler",
            "named",
            "Kyle",
            "received",
            "?",
            "List",
            "the",
            "student",
            "id",
            "and",
            "the",
            "number",
            "of",
            "likes",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 913,
        "query": "SELECT T2.ID, count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.ID WHERE T2.name = 'Kyle' GROUP BY T2.ID",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "ID,",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Likes",
            "AS",
            "T1",
            "JOIN",
            "Highschooler",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "liked_id",
            "=",
            "T2",
            ".",
            "ID",
            "WHERE",
            "T2",
            ".",
            "name",
            "=",
            "'Kyle",
            "'",
            "GROUP",
            "BY",
            "T2",
            ".",
            "ID"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "id,",
            "count",
            "(",
            "*",
            ")",
            "from",
            "likes",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "liked_id",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "value",
            "group",
            "by",
            "t2",
            ".",
            "id"
        ],
        "question": "Return the total number of likes received by each high schooler named Kyle. List the student id and the number of likes.",
        "question_toks": [
            "Return",
            "the",
            "total",
            "number",
            "of",
            "likes",
            "received",
            "by",
            "each",
            "high",
            "schooler",
            "named",
            "Kyle",
            ".",
            "List",
            "the",
            "student",
            "id",
            "and",
            "the",
            "number",
            "of",
            "likes",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 914,
        "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "grade",
            ")",
            "FROM",
            "Highschooler",
            "WHERE",
            "id",
            "IN",
            "(",
            "SELECT",
            "student_id",
            "FROM",
            "Friend",
            "UNION",
            "SELECT",
            "friend_id",
            "FROM",
            "Friend",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "grade",
            ")",
            "from",
            "highschooler",
            "where",
            "id",
            "in",
            "(",
            "select",
            "student_id",
            "from",
            "friend",
            "union",
            "select",
            "friend_id",
            "from",
            "friend",
            ")"
        ],
        "question": "Find the average grade of all students who have either initiated or received friendships.",
        "question_toks": [
            "Find",
            "the",
            "average",
            "grade",
            "of",
            "all",
            "students",
            "who",
            "have",
            "either",
            "initiated",
            "or",
            "received",
            "friendships",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 915,
        "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "grade",
            ")",
            "FROM",
            "Highschooler",
            "WHERE",
            "id",
            "IN",
            "(",
            "SELECT",
            "student_id",
            "FROM",
            "Friend",
            "UNION",
            "SELECT",
            "friend_id",
            "FROM",
            "Friend",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "grade",
            ")",
            "from",
            "highschooler",
            "where",
            "id",
            "in",
            "(",
            "select",
            "student_id",
            "from",
            "friend",
            "union",
            "select",
            "friend_id",
            "from",
            "friend",
            ")"
        ],
        "question": "What is the average grade of all students who have initiated or received friendships?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "grade",
            "of",
            "all",
            "students",
            "who",
            "have",
            "initiated",
            "or",
            "received",
            "friendships",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 916,
        "query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 UNION SELECT T2.friend_id FROM Friend AS T2)",
        "query_toks": [
            "SELECT",
            "min",
            "(",
            "grade",
            ")",
            "FROM",
            "Highschooler",
            "WHERE",
            "id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "T1",
            ".",
            "student_id",
            "FROM",
            "Friend",
            "AS",
            "T1",
            "UNION",
            "SELECT",
            "T2",
            ".",
            "friend_id",
            "FROM",
            "Friend",
            "AS",
            "T2",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "min",
            "(",
            "grade",
            ")",
            "from",
            "highschooler",
            "where",
            "id",
            "not",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "student_id",
            "from",
            "friend",
            "as",
            "t1",
            "union",
            "select",
            "t2",
            ".",
            "friend_id",
            "from",
            "friend",
            "as",
            "t2",
            ")"
        ],
        "question": "Find the minimum grade of students who have no friends.",
        "question_toks": [
            "Find",
            "the",
            "minimum",
            "grade",
            "of",
            "students",
            "who",
            "have",
            "no",
            "friends",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "network_1",
        "id": 917,
        "query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)",
        "query_toks": [
            "SELECT",
            "min",
            "(",
            "grade",
            ")",
            "FROM",
            "Highschooler",
            "WHERE",
            "id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "student_id",
            "FROM",
            "Friend",
            "UNION",
            "SELECT",
            "friend_id",
            "FROM",
            "Friend",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "min",
            "(",
            "grade",
            ")",
            "from",
            "highschooler",
            "where",
            "id",
            "not",
            "in",
            "(",
            "select",
            "student_id",
            "from",
            "friend",
            "union",
            "select",
            "friend_id",
            "from",
            "friend",
            ")"
        ],
        "question": "What is the lowest grade of students who do not have any initiated or received friendships?",
        "question_toks": [
            "What",
            "is",
            "the",
            "lowest",
            "grade",
            "of",
            "students",
            "who",
            "do",
            "not",
            "have",
            "any",
            "initiated",
            "or",
            "received",
            "friendships",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 918,
        "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "query_toks": [
            "SELECT",
            "state",
            "FROM",
            "Owners",
            "INTERSECT",
            "SELECT",
            "state",
            "FROM",
            "Professionals"
        ],
        "query_toks_no_value": [
            "select",
            "state",
            "from",
            "owners",
            "intersect",
            "select",
            "state",
            "from",
            "professionals"
        ],
        "question": "Which states have both owners and professionals living there?",
        "question_toks": [
            "Which",
            "states",
            "have",
            "both",
            "owners",
            "and",
            "professionals",
            "living",
            "there",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 919,
        "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "query_toks": [
            "SELECT",
            "state",
            "FROM",
            "Owners",
            "INTERSECT",
            "SELECT",
            "state",
            "FROM",
            "Professionals"
        ],
        "query_toks_no_value": [
            "select",
            "state",
            "from",
            "owners",
            "intersect",
            "select",
            "state",
            "from",
            "professionals"
        ],
        "question": "Find the states where both owners and professionals live.",
        "question_toks": [
            "Find",
            "the",
            "states",
            "where",
            "both",
            "owners",
            "and",
            "professionals",
            "live",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 920,
        "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "Dogs",
            "WHERE",
            "dog_id",
            "IN",
            "(",
            "SELECT",
            "dog_id",
            "FROM",
            "Treatments",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "age",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")"
        ],
        "question": "What is the average age of the dogs who have gone through any treatments?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "age",
            "of",
            "the",
            "dogs",
            "who",
            "have",
            "gone",
            "through",
            "any",
            "treatments",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 921,
        "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "Dogs",
            "WHERE",
            "dog_id",
            "IN",
            "(",
            "SELECT",
            "dog_id",
            "FROM",
            "Treatments",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "age",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")"
        ],
        "question": "Find the average age of the dogs who went through treatments.",
        "question_toks": [
            "Find",
            "the",
            "average",
            "age",
            "of",
            "the",
            "dogs",
            "who",
            "went",
            "through",
            "treatments",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 922,
        "query": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) > 2",
        "query_toks": [
            "SELECT",
            "professional_id",
            ",",
            "last_name",
            ",",
            "cell_number",
            "FROM",
            "Professionals",
            "WHERE",
            "state",
            "=",
            "'Indiana",
            "'",
            "UNION",
            "SELECT",
            "T1",
            ".",
            "professional_id",
            ",",
            "T1",
            ".",
            "last_name",
            ",",
            "T1",
            ".",
            "cell_number",
            "FROM",
            "Professionals",
            "AS",
            "T1",
            "JOIN",
            "Treatments",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "professional_id",
            "=",
            "T2",
            ".",
            "professional_id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "professional_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "2"
        ],
        "query_toks_no_value": [
            "select",
            "professional_id",
            ",",
            "last_name",
            ",",
            "cell_number",
            "from",
            "professionals",
            "where",
            "state",
            "=",
            "value",
            "union",
            "select",
            "t1",
            ".",
            "professional_id",
            ",",
            "t1",
            ".",
            "last_name",
            ",",
            "t1",
            ".",
            "cell_number",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "group",
            "by",
            "t1",
            ".",
            "professional_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "question_toks": [
            "Which",
            "professionals",
            "live",
            "in",
            "the",
            "state",
            "of",
            "Indiana",
            "or",
            "have",
            "done",
            "treatment",
            "on",
            "more",
            "than",
            "2",
            "treatments",
            "?",
            "List",
            "his",
            "or",
            "her",
            "id",
            ",",
            "last",
            "name",
            "and",
            "cell",
            "phone",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 923,
        "query": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) > 2",
        "query_toks": [
            "SELECT",
            "professional_id",
            ",",
            "last_name",
            ",",
            "cell_number",
            "FROM",
            "Professionals",
            "WHERE",
            "state",
            "=",
            "'Indiana",
            "'",
            "UNION",
            "SELECT",
            "T1",
            ".",
            "professional_id",
            ",",
            "T1",
            ".",
            "last_name",
            ",",
            "T1",
            ".",
            "cell_number",
            "FROM",
            "Professionals",
            "AS",
            "T1",
            "JOIN",
            "Treatments",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "professional_id",
            "=",
            "T2",
            ".",
            "professional_id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "professional_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "2"
        ],
        "query_toks_no_value": [
            "select",
            "professional_id",
            ",",
            "last_name",
            ",",
            "cell_number",
            "from",
            "professionals",
            "where",
            "state",
            "=",
            "value",
            "union",
            "select",
            "t1",
            ".",
            "professional_id",
            ",",
            "t1",
            ".",
            "last_name",
            ",",
            "t1",
            ".",
            "cell_number",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "group",
            "by",
            "t1",
            ".",
            "professional_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "question_toks": [
            "Find",
            "the",
            "id",
            ",",
            "last",
            "name",
            "and",
            "cell",
            "phone",
            "of",
            "the",
            "professionals",
            "who",
            "live",
            "in",
            "the",
            "state",
            "of",
            "Indiana",
            "or",
            "have",
            "performed",
            "more",
            "than",
            "two",
            "treatments",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 924,
        "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 )",
        "query_toks": [
            "select",
            "name",
            "from",
            "dogs",
            "where",
            "dog_id",
            "not",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            "group",
            "by",
            "dog_id",
            "having",
            "sum",
            "(",
            "cost_of_treatment",
            ")",
            ">",
            "1000",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "dogs",
            "where",
            "dog_id",
            "not",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            "group",
            "by",
            "dog_id",
            "having",
            "sum",
            "(",
            "cost_of_treatment",
            ")",
            ">",
            "value",
            ")"
        ],
        "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "question_toks": [
            "Which",
            "dogs",
            "have",
            "not",
            "cost",
            "their",
            "owner",
            "more",
            "than",
            "1000",
            "for",
            "treatment",
            "?",
            "List",
            "the",
            "dog",
            "names",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 925,
        "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 )",
        "query_toks": [
            "select",
            "name",
            "from",
            "dogs",
            "where",
            "dog_id",
            "not",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            "group",
            "by",
            "dog_id",
            "having",
            "sum",
            "(",
            "cost_of_treatment",
            ")",
            ">",
            "1000",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "dogs",
            "where",
            "dog_id",
            "not",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            "group",
            "by",
            "dog_id",
            "having",
            "sum",
            "(",
            "cost_of_treatment",
            ")",
            ">",
            "value",
            ")"
        ],
        "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "the",
            "dogs",
            "for",
            "which",
            "the",
            "owner",
            "has",
            "not",
            "spend",
            "more",
            "than",
            "1000",
            "for",
            "treatment",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 926,
        "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "query_toks": [
            "SELECT",
            "first_name",
            "FROM",
            "Professionals",
            "UNION",
            "SELECT",
            "first_name",
            "FROM",
            "Owners",
            "EXCEPT",
            "SELECT",
            "name",
            "FROM",
            "Dogs"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            "from",
            "professionals",
            "union",
            "select",
            "first_name",
            "from",
            "owners",
            "except",
            "select",
            "name",
            "from",
            "dogs"
        ],
        "question": "Which first names are used for professionals or owners but are not used as dog names?",
        "question_toks": [
            "Which",
            "first",
            "names",
            "are",
            "used",
            "for",
            "professionals",
            "or",
            "owners",
            "but",
            "are",
            "not",
            "used",
            "as",
            "dog",
            "names",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 927,
        "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "query_toks": [
            "SELECT",
            "first_name",
            "FROM",
            "Professionals",
            "UNION",
            "SELECT",
            "first_name",
            "FROM",
            "Owners",
            "EXCEPT",
            "SELECT",
            "name",
            "FROM",
            "Dogs"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            "from",
            "professionals",
            "union",
            "select",
            "first_name",
            "from",
            "owners",
            "except",
            "select",
            "name",
            "from",
            "dogs"
        ],
        "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
        "question_toks": [
            "Find",
            "the",
            "first",
            "names",
            "that",
            "are",
            "used",
            "for",
            "professionals",
            "or",
            "owners",
            "but",
            "are",
            "not",
            "used",
            "as",
            "dog",
            "names",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 928,
        "query": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
        "query_toks": [
            "SELECT",
            "professional_id",
            ",",
            "role_code",
            ",",
            "email_address",
            "FROM",
            "Professionals",
            "EXCEPT",
            "SELECT",
            "T1",
            ".",
            "professional_id",
            ",",
            "T1",
            ".",
            "role_code",
            ",",
            "T1",
            ".",
            "email_address",
            "FROM",
            "Professionals",
            "AS",
            "T1",
            "JOIN",
            "Treatments",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "professional_id",
            "=",
            "T2",
            ".",
            "professional_id"
        ],
        "query_toks_no_value": [
            "select",
            "professional_id",
            ",",
            "role_code",
            ",",
            "email_address",
            "from",
            "professionals",
            "except",
            "select",
            "t1",
            ".",
            "professional_id",
            ",",
            "t1",
            ".",
            "role_code",
            ",",
            "t1",
            ".",
            "email_address",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id"
        ],
        "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "question_toks": [
            "Which",
            "professional",
            "did",
            "not",
            "operate",
            "any",
            "treatment",
            "on",
            "dogs",
            "?",
            "List",
            "the",
            "professional",
            "'s",
            "id",
            ",",
            "role",
            "and",
            "email",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 929,
        "query": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
        "query_toks": [
            "SELECT",
            "professional_id",
            ",",
            "role_code",
            ",",
            "email_address",
            "FROM",
            "Professionals",
            "EXCEPT",
            "SELECT",
            "T1",
            ".",
            "professional_id",
            ",",
            "T1",
            ".",
            "role_code",
            ",",
            "T1",
            ".",
            "email_address",
            "FROM",
            "Professionals",
            "AS",
            "T1",
            "JOIN",
            "Treatments",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "professional_id",
            "=",
            "T2",
            ".",
            "professional_id"
        ],
        "query_toks_no_value": [
            "select",
            "professional_id",
            ",",
            "role_code",
            ",",
            "email_address",
            "from",
            "professionals",
            "except",
            "select",
            "t1",
            ".",
            "professional_id",
            ",",
            "t1",
            ".",
            "role_code",
            ",",
            "t1",
            ".",
            "email_address",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id"
        ],
        "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "question_toks": [
            "Give",
            "me",
            "the",
            "id",
            ",",
            "role",
            "and",
            "email",
            "of",
            "the",
            "professionals",
            "who",
            "did",
            "not",
            "perform",
            "any",
            "treatment",
            "on",
            "dogs",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 930,
        "query": "SELECT T1.owner_id, T2.first_name, T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id, T2.first_name, T2.last_name HAVING COUNT(*) = (SELECT MAX(dog_count) FROM (SELECT owner_id, COUNT(*) AS dog_count FROM Dogs GROUP BY owner_id) sub)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "owner_id,",
            "T2",
            ".",
            "first_name,",
            "T2",
            ".",
            "last_name",
            "FROM",
            "Dogs",
            "AS",
            "T1",
            "JOIN",
            "Owners",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "owner_id",
            "=",
            "T2",
            ".",
            "owner_id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "owner_id,",
            "T2",
            ".",
            "first_name,",
            "T2",
            ".",
            "last_name",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "dog_count",
            ")",
            "FROM",
            "(",
            "SELECT",
            "owner_id,",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "dog_count",
            "FROM",
            "Dogs",
            "GROUP",
            "BY",
            "owner_id",
            ")",
            "sub",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "owner_id,",
            "t2",
            ".",
            "first_name,",
            "t2",
            ".",
            "last_name",
            "from",
            "dogs",
            "as",
            "t1",
            "join",
            "owners",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "group",
            "by",
            "t1",
            ".",
            "owner_id,",
            "t2",
            ".",
            "first_name,",
            "t2",
            ".",
            "last_name",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "dog_count",
            ")",
            "from",
            "(",
            "select",
            "owner_id,",
            "count",
            "(",
            "*",
            ")",
            "as",
            "dog_count",
            "from",
            "dogs",
            "group",
            "by",
            "owner_id",
            ")",
            "sub",
            ")"
        ],
        "question": "Which owner owns the most dogs? If there is a tie, list all owners with the maximum number of dogs. List the owner id, first name, and last name.",
        "question_toks": [
            "Which",
            "owner",
            "owns",
            "the",
            "most",
            "dogs",
            "?",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "list",
            "all",
            "owners",
            "with",
            "the",
            "maximum",
            "number",
            "of",
            "dogs",
            ".",
            "List",
            "the",
            "owner",
            "id",
            ",",
            "first",
            "name",
            ",",
            "and",
            "last",
            "name",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 931,
        "query": "SELECT T1.owner_id, T2.first_name, T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id HAVING count(*) = (SELECT MAX(dog_count) FROM (SELECT owner_id, count(*) AS dog_count FROM Dogs GROUP BY owner_id) AS subquery)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "owner_id,",
            "T2",
            ".",
            "first_name,",
            "T2",
            ".",
            "last_name",
            "FROM",
            "Dogs",
            "AS",
            "T1",
            "JOIN",
            "Owners",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "owner_id",
            "=",
            "T2",
            ".",
            "owner_id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "owner_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "dog_count",
            ")",
            "FROM",
            "(",
            "SELECT",
            "owner_id,",
            "count",
            "(",
            "*",
            ")",
            "AS",
            "dog_count",
            "FROM",
            "Dogs",
            "GROUP",
            "BY",
            "owner_id",
            ")",
            "AS",
            "subquery",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "owner_id,",
            "t2",
            ".",
            "first_name,",
            "t2",
            ".",
            "last_name",
            "from",
            "dogs",
            "as",
            "t1",
            "join",
            "owners",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "group",
            "by",
            "t1",
            ".",
            "owner_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "dog_count",
            ")",
            "from",
            "(",
            "select",
            "owner_id,",
            "count",
            "(",
            "*",
            ")",
            "as",
            "dog_count",
            "from",
            "dogs",
            "group",
            "by",
            "owner_id",
            ")",
            "as",
            "subquery",
            ")"
        ],
        "question": "Return the owner id, first name and last name of the owner who has the most dogs. If there is a tie, list all owners with the maximum number of dogs.",
        "question_toks": [
            "Return",
            "the",
            "owner",
            "id",
            ",",
            "first",
            "name",
            "and",
            "last",
            "name",
            "of",
            "the",
            "owner",
            "who",
            "has",
            "the",
            "most",
            "dogs",
            ".",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "list",
            "all",
            "owners",
            "with",
            "the",
            "maximum",
            "number",
            "of",
            "dogs",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 932,
        "query": "SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "professional_id",
            ",",
            "T1",
            ".",
            "role_code",
            ",",
            "T1",
            ".",
            "first_name",
            "FROM",
            "Professionals",
            "AS",
            "T1",
            "JOIN",
            "Treatments",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "professional_id",
            "=",
            "T2",
            ".",
            "professional_id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "professional_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "professional_id",
            ",",
            "t1",
            ".",
            "role_code",
            ",",
            "t1",
            ".",
            "first_name",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "group",
            "by",
            "t1",
            ".",
            "professional_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value"
        ],
        "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "question_toks": [
            "Which",
            "professionals",
            "have",
            "done",
            "at",
            "least",
            "two",
            "treatments",
            "?",
            "List",
            "the",
            "professional",
            "'s",
            "id",
            ",",
            "role",
            ",",
            "and",
            "first",
            "name",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 933,
        "query": "SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "professional_id",
            ",",
            "T1",
            ".",
            "role_code",
            ",",
            "T1",
            ".",
            "first_name",
            "FROM",
            "Professionals",
            "AS",
            "T1",
            "JOIN",
            "Treatments",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "professional_id",
            "=",
            "T2",
            ".",
            "professional_id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "professional_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "professional_id",
            ",",
            "t1",
            ".",
            "role_code",
            ",",
            "t1",
            ".",
            "first_name",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "group",
            "by",
            "t1",
            ".",
            "professional_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "value"
        ],
        "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "question_toks": [
            "What",
            "are",
            "the",
            "id",
            ",",
            "role",
            ",",
            "and",
            "first",
            "name",
            "of",
            "the",
            "professionals",
            "who",
            "have",
            "performed",
            "two",
            "or",
            "more",
            "treatments",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 934,
        "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_code HAVING COUNT(*) = (SELECT MAX(counts) FROM (SELECT COUNT(*) AS counts FROM Dogs GROUP BY breed_code) AS subquery)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "breed_name",
            "FROM",
            "Breeds",
            "AS",
            "T1",
            "JOIN",
            "Dogs",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "breed_code",
            "=",
            "T2",
            ".",
            "breed_code",
            "GROUP",
            "BY",
            "T1",
            ".",
            "breed_code",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "counts",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "counts",
            "FROM",
            "Dogs",
            "GROUP",
            "BY",
            "breed_code",
            ")",
            "AS",
            "subquery",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "breed_name",
            "from",
            "breeds",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "breed_code",
            "=",
            "t2",
            ".",
            "breed_code",
            "group",
            "by",
            "t1",
            ".",
            "breed_code",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "counts",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "counts",
            "from",
            "dogs",
            "group",
            "by",
            "breed_code",
            ")",
            "as",
            "subquery",
            ")"
        ],
        "question": "What is the name of the breed with the most dogs? If there is a tie, list all tied breeds.",
        "question_toks": [
            "What",
            "is",
            "the",
            "name",
            "of",
            "the",
            "breed",
            "with",
            "the",
            "most",
            "dogs",
            "?",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "list",
            "all",
            "tied",
            "breeds",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 935,
        "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_code HAVING COUNT(*) = (SELECT MAX(dog_count) FROM (SELECT COUNT(*) AS dog_count FROM Dogs GROUP BY breed_code) AS subquery)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "breed_name",
            "FROM",
            "Breeds",
            "AS",
            "T1",
            "JOIN",
            "Dogs",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "breed_code",
            "=",
            "T2",
            ".",
            "breed_code",
            "GROUP",
            "BY",
            "T1",
            ".",
            "breed_code",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "dog_count",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "dog_count",
            "FROM",
            "Dogs",
            "GROUP",
            "BY",
            "breed_code",
            ")",
            "AS",
            "subquery",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "breed_name",
            "from",
            "breeds",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "breed_code",
            "=",
            "t2",
            ".",
            "breed_code",
            "group",
            "by",
            "t1",
            ".",
            "breed_code",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "dog_count",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "dog_count",
            "from",
            "dogs",
            "group",
            "by",
            "breed_code",
            ")",
            "as",
            "subquery",
            ")"
        ],
        "question": "Which breed do the most dogs have? If there is a tie, list all tied breeds. Give me the breed name.",
        "question_toks": [
            "Which",
            "breed",
            "do",
            "the",
            "most",
            "dogs",
            "have",
            "?",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "list",
            "all",
            "tied",
            "breeds",
            ".",
            "Give",
            "me",
            "the",
            "breed",
            "name",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 936,
        "query": "SELECT T1.owner_id, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id, T1.last_name HAVING COUNT(*) = (SELECT MAX(treatment_count) FROM (SELECT COUNT(*) AS treatment_count FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY owner_id) AS max_count)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "owner_id,",
            "T1",
            ".",
            "last_name",
            "FROM",
            "Owners",
            "AS",
            "T1",
            "JOIN",
            "Dogs",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "owner_id",
            "=",
            "T2",
            ".",
            "owner_id",
            "JOIN",
            "Treatments",
            "AS",
            "T3",
            "ON",
            "T2",
            ".",
            "dog_id",
            "=",
            "T3",
            ".",
            "dog_id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "owner_id,",
            "T1",
            ".",
            "last_name",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "treatment_count",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "treatment_count",
            "FROM",
            "Dogs",
            "JOIN",
            "Treatments",
            "ON",
            "Dogs.dog_id",
            "=",
            "Treatments",
            ".",
            "dog_id",
            "GROUP",
            "BY",
            "owner_id",
            ")",
            "AS",
            "max_count",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "owner_id,",
            "t1",
            ".",
            "last_name",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "join",
            "treatments",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "dog_id",
            "=",
            "t3",
            ".",
            "dog_id",
            "group",
            "by",
            "t1",
            ".",
            "owner_id,",
            "t1",
            ".",
            "last_name",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "treatment_count",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "treatment_count",
            "from",
            "dogs",
            "join",
            "treatments",
            "on",
            "dogs.dog_id",
            "=",
            "treatments",
            ".",
            "dog_id",
            "group",
            "by",
            "owner_id",
            ")",
            "as",
            "max_count",
            ")"
        ],
        "question": "Which owner has the highest number of treatments for his or her dogs? List the owner ID and last name. If there is a tie, list all owners with the highest number of treatments.",
        "question_toks": [
            "Which",
            "owner",
            "has",
            "the",
            "highest",
            "number",
            "of",
            "treatments",
            "for",
            "his",
            "or",
            "her",
            "dogs",
            "?",
            "List",
            "the",
            "owner",
            "ID",
            "and",
            "last",
            "name",
            ".",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "list",
            "all",
            "owners",
            "with",
            "the",
            "highest",
            "number",
            "of",
            "treatments",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 937,
        "query": "SELECT T1.owner_id, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id, T1.last_name HAVING SUM(T3.cost_of_treatment) = (SELECT MAX(cost) FROM (SELECT SUM(T5.cost_of_treatment) as cost FROM Dogs AS T4 JOIN Treatments AS T5 ON T4.dog_id = T5.dog_id GROUP BY T4.owner_id))",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "owner_id,",
            "T1",
            ".",
            "last_name",
            "FROM",
            "Owners",
            "AS",
            "T1",
            "JOIN",
            "Dogs",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "owner_id",
            "=",
            "T2",
            ".",
            "owner_id",
            "JOIN",
            "Treatments",
            "AS",
            "T3",
            "ON",
            "T2",
            ".",
            "dog_id",
            "=",
            "T3",
            ".",
            "dog_id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "owner_id,",
            "T1",
            ".",
            "last_name",
            "HAVING",
            "SUM",
            "(",
            "T3",
            ".",
            "cost_of_treatment",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "cost",
            ")",
            "FROM",
            "(",
            "SELECT",
            "SUM",
            "(",
            "T5",
            ".",
            "cost_of_treatment",
            ")",
            "as",
            "cost",
            "FROM",
            "Dogs",
            "AS",
            "T4",
            "JOIN",
            "Treatments",
            "AS",
            "T5",
            "ON",
            "T4",
            ".",
            "dog_id",
            "=",
            "T5",
            ".",
            "dog_id",
            "GROUP",
            "BY",
            "T4",
            ".",
            "owner_id",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "owner_id,",
            "t1",
            ".",
            "last_name",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "join",
            "treatments",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "dog_id",
            "=",
            "t3",
            ".",
            "dog_id",
            "group",
            "by",
            "t1",
            ".",
            "owner_id,",
            "t1",
            ".",
            "last_name",
            "having",
            "sum",
            "(",
            "t3",
            ".",
            "cost_of_treatment",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "cost",
            ")",
            "from",
            "(",
            "select",
            "sum",
            "(",
            "t5",
            ".",
            "cost_of_treatment",
            ")",
            "as",
            "cost",
            "from",
            "dogs",
            "as",
            "t4",
            "join",
            "treatments",
            "as",
            "t5",
            "on",
            "t4",
            ".",
            "dog_id",
            "=",
            "t5",
            ".",
            "dog_id",
            "group",
            "by",
            "t4",
            ".",
            "owner_id",
            ")",
            ")"
        ],
        "question": "Tell me the owner id and last name of the owner who spent the most on treatments for his or her dogs. If there is a tie, list all the owners who spent the most.",
        "question_toks": [
            "Tell",
            "me",
            "the",
            "owner",
            "id",
            "and",
            "last",
            "name",
            "of",
            "the",
            "owner",
            "who",
            "spent",
            "the",
            "most",
            "on",
            "treatments",
            "for",
            "his",
            "or",
            "her",
            "dogs",
            ".",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "list",
            "all",
            "the",
            "owners",
            "who",
            "spent",
            "the",
            "most",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 938,
        "query": "WITH TotalCosts AS (SELECT treatment_type_code, SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY treatment_type_code) SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN TotalCosts AS T2 ON T1.treatment_type_code = T2.treatment_type_code WHERE T2.total_cost = (SELECT MIN(total_cost) FROM TotalCosts)",
        "query_toks": [
            "WITH",
            "TotalCosts",
            "AS",
            "(",
            "SELECT",
            "treatment_type_code,",
            "SUM",
            "(",
            "cost_of_treatment",
            ")",
            "AS",
            "total_cost",
            "FROM",
            "Treatments",
            "GROUP",
            "BY",
            "treatment_type_code",
            ")",
            "SELECT",
            "T1",
            ".",
            "treatment_type_description",
            "FROM",
            "Treatment_Types",
            "AS",
            "T1",
            "JOIN",
            "TotalCosts",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "treatment_type_code",
            "=",
            "T2",
            ".",
            "treatment_type_code",
            "WHERE",
            "T2",
            ".",
            "total_cost",
            "=",
            "(",
            "SELECT",
            "MIN",
            "(",
            "total_cost",
            ")",
            "FROM",
            "TotalCosts",
            ")"
        ],
        "query_toks_no_value": [
            "with",
            "totalcosts",
            "as",
            "(",
            "select",
            "treatment_type_code,",
            "sum",
            "(",
            "cost_of_treatment",
            ")",
            "as",
            "total_cost",
            "from",
            "treatments",
            "group",
            "by",
            "treatment_type_code",
            ")",
            "select",
            "t1",
            ".",
            "treatment_type_description",
            "from",
            "treatment_types",
            "as",
            "t1",
            "join",
            "totalcosts",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "treatment_type_code",
            "=",
            "t2",
            ".",
            "treatment_type_code",
            "where",
            "t2",
            ".",
            "total_cost",
            "=",
            "(",
            "select",
            "min",
            "(",
            "total_cost",
            ")",
            "from",
            "totalcosts",
            ")"
        ],
        "question": "What is the description of all treatment types that cost the least money in total?",
        "question_toks": [
            "What",
            "is",
            "the",
            "description",
            "of",
            "all",
            "treatment",
            "types",
            "that",
            "cost",
            "the",
            "least",
            "money",
            "in",
            "total",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 939,
        "query": "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code HAVING SUM(T2.cost_of_treatment) = (SELECT MIN(total_cost) FROM (SELECT SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY treatment_type_code) AS SubQuery)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "treatment_type_description",
            "FROM",
            "Treatment_Types",
            "AS",
            "T1",
            "JOIN",
            "Treatments",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "treatment_type_code",
            "=",
            "T2",
            ".",
            "treatment_type_code",
            "GROUP",
            "BY",
            "T1",
            ".",
            "treatment_type_code",
            "HAVING",
            "SUM",
            "(",
            "T2",
            ".",
            "cost_of_treatment",
            ")",
            "=",
            "(",
            "SELECT",
            "MIN",
            "(",
            "total_cost",
            ")",
            "FROM",
            "(",
            "SELECT",
            "SUM",
            "(",
            "cost_of_treatment",
            ")",
            "AS",
            "total_cost",
            "FROM",
            "Treatments",
            "GROUP",
            "BY",
            "treatment_type_code",
            ")",
            "AS",
            "SubQuery",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "treatment_type_description",
            "from",
            "treatment_types",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "treatment_type_code",
            "=",
            "t2",
            ".",
            "treatment_type_code",
            "group",
            "by",
            "t1",
            ".",
            "treatment_type_code",
            "having",
            "sum",
            "(",
            "t2",
            ".",
            "cost_of_treatment",
            ")",
            "=",
            "(",
            "select",
            "min",
            "(",
            "total_cost",
            ")",
            "from",
            "(",
            "select",
            "sum",
            "(",
            "cost_of_treatment",
            ")",
            "as",
            "total_cost",
            "from",
            "treatments",
            "group",
            "by",
            "treatment_type_code",
            ")",
            "as",
            "subquery",
            ")"
        ],
        "question": "Give me the description of the treatment types whose total cost is the lowest.",
        "question_toks": [
            "Give",
            "me",
            "the",
            "description",
            "of",
            "the",
            "treatment",
            "types",
            "whose",
            "total",
            "cost",
            "is",
            "the",
            "lowest",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 940,
        "query": "SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id HAVING SUM(T3.cost_of_treatment) = (SELECT MAX(cost) FROM (SELECT SUM(T5.cost_of_treatment) as cost FROM Dogs AS T4 JOIN Treatments AS T5 ON T4.dog_id = T5.dog_id GROUP BY T4.owner_id))",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "owner_id,",
            "T1",
            ".",
            "zip_code",
            "FROM",
            "Owners",
            "AS",
            "T1",
            "JOIN",
            "Dogs",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "owner_id",
            "=",
            "T2",
            ".",
            "owner_id",
            "JOIN",
            "Treatments",
            "AS",
            "T3",
            "ON",
            "T2",
            ".",
            "dog_id",
            "=",
            "T3",
            ".",
            "dog_id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "owner_id",
            "HAVING",
            "SUM",
            "(",
            "T3",
            ".",
            "cost_of_treatment",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "cost",
            ")",
            "FROM",
            "(",
            "SELECT",
            "SUM",
            "(",
            "T5",
            ".",
            "cost_of_treatment",
            ")",
            "as",
            "cost",
            "FROM",
            "Dogs",
            "AS",
            "T4",
            "JOIN",
            "Treatments",
            "AS",
            "T5",
            "ON",
            "T4",
            ".",
            "dog_id",
            "=",
            "T5",
            ".",
            "dog_id",
            "GROUP",
            "BY",
            "T4",
            ".",
            "owner_id",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "owner_id,",
            "t1",
            ".",
            "zip_code",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "join",
            "treatments",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "dog_id",
            "=",
            "t3",
            ".",
            "dog_id",
            "group",
            "by",
            "t1",
            ".",
            "owner_id",
            "having",
            "sum",
            "(",
            "t3",
            ".",
            "cost_of_treatment",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "cost",
            ")",
            "from",
            "(",
            "select",
            "sum",
            "(",
            "t5",
            ".",
            "cost_of_treatment",
            ")",
            "as",
            "cost",
            "from",
            "dogs",
            "as",
            "t4",
            "join",
            "treatments",
            "as",
            "t5",
            "on",
            "t4",
            ".",
            "dog_id",
            "=",
            "t5",
            ".",
            "dog_id",
            "group",
            "by",
            "t4",
            ".",
            "owner_id",
            ")",
            ")"
        ],
        "question": "Which owners have paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "question_toks": [
            "Which",
            "owners",
            "have",
            "paid",
            "the",
            "largest",
            "amount",
            "of",
            "money",
            "in",
            "total",
            "for",
            "their",
            "dogs",
            "?",
            "Show",
            "the",
            "owner",
            "id",
            "and",
            "zip",
            "code",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 941,
        "query": "SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id HAVING SUM(T3.cost_of_treatment) = (SELECT MAX(total_cost) FROM (SELECT SUM(T3.cost_of_treatment) AS total_cost FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id) AS Sub)",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "owner_id,",
            "T1",
            ".",
            "zip_code",
            "FROM",
            "Owners",
            "AS",
            "T1",
            "JOIN",
            "Dogs",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "owner_id",
            "=",
            "T2",
            ".",
            "owner_id",
            "JOIN",
            "Treatments",
            "AS",
            "T3",
            "ON",
            "T2",
            ".",
            "dog_id",
            "=",
            "T3",
            ".",
            "dog_id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "owner_id",
            "HAVING",
            "SUM",
            "(",
            "T3",
            ".",
            "cost_of_treatment",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "total_cost",
            ")",
            "FROM",
            "(",
            "SELECT",
            "SUM",
            "(",
            "T3",
            ".",
            "cost_of_treatment",
            ")",
            "AS",
            "total_cost",
            "FROM",
            "Owners",
            "AS",
            "T1",
            "JOIN",
            "Dogs",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "owner_id",
            "=",
            "T2",
            ".",
            "owner_id",
            "JOIN",
            "Treatments",
            "AS",
            "T3",
            "ON",
            "T2",
            ".",
            "dog_id",
            "=",
            "T3",
            ".",
            "dog_id",
            "GROUP",
            "BY",
            "T1",
            ".",
            "owner_id",
            ")",
            "AS",
            "Sub",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "owner_id,",
            "t1",
            ".",
            "zip_code",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "join",
            "treatments",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "dog_id",
            "=",
            "t3",
            ".",
            "dog_id",
            "group",
            "by",
            "t1",
            ".",
            "owner_id",
            "having",
            "sum",
            "(",
            "t3",
            ".",
            "cost_of_treatment",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "total_cost",
            ")",
            "from",
            "(",
            "select",
            "sum",
            "(",
            "t3",
            ".",
            "cost_of_treatment",
            ")",
            "as",
            "total_cost",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "join",
            "treatments",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "dog_id",
            "=",
            "t3",
            ".",
            "dog_id",
            "group",
            "by",
            "t1",
            ".",
            "owner_id",
            ")",
            "as",
            "sub",
            ")"
        ],
        "question": "Find the owner id and zip code of all owners who spent the most money in total for their dogs.",
        "question_toks": [
            "Find",
            "the",
            "owner",
            "id",
            "and",
            "zip",
            "code",
            "of",
            "all",
            "owners",
            "who",
            "spent",
            "the",
            "most",
            "money",
            "in",
            "total",
            "for",
            "their",
            "dogs",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 942,
        "query": "SELECT p.professional_id, p.cell_number FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2",
        "query_toks": [
            "SELECT",
            "p.professional_id,",
            "p.cell_number",
            "FROM",
            "professionals",
            "p",
            "JOIN",
            "treatments",
            "t",
            "ON",
            "p.professional_id",
            "=",
            "t",
            ".",
            "professional_id",
            "GROUP",
            "BY",
            "p.professional_id,",
            "p.cell_number",
            "HAVING",
            "COUNT",
            "(",
            "DISTINCT",
            "t",
            ".",
            "treatment_type_code",
            ")",
            ">",
            "=",
            "2"
        ],
        "query_toks_no_value": [
            "select",
            "p.professional_id,",
            "p.cell_number",
            "from",
            "professionals",
            "p",
            "join",
            "treatments",
            "t",
            "on",
            "p.professional_id",
            "=",
            "t",
            ".",
            "professional_id",
            "group",
            "by",
            "p.professional_id,",
            "p.cell_number",
            "having",
            "count",
            "(",
            "distinct",
            "t",
            ".",
            "treatment_type_code",
            ")",
            ">",
            "=",
            "value"
        ],
        "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "question_toks": [
            "Which",
            "professionals",
            "have",
            "done",
            "at",
            "least",
            "two",
            "types",
            "of",
            "treatments",
            "?",
            "List",
            "the",
            "professional",
            "id",
            "and",
            "cell",
            "phone",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 943,
        "query": "SELECT P.professional_id, P.cell_number FROM professionals P JOIN treatments T ON P.professional_id = T.professional_id GROUP BY P.professional_id, P.cell_number HAVING COUNT(DISTINCT T.treatment_type_code) >= 2",
        "query_toks": [
            "SELECT",
            "P.professional_id,",
            "P.cell_number",
            "FROM",
            "professionals",
            "P",
            "JOIN",
            "treatments",
            "T",
            "ON",
            "P.professional_id",
            "=",
            "T",
            ".",
            "professional_id",
            "GROUP",
            "BY",
            "P.professional_id,",
            "P.cell_number",
            "HAVING",
            "COUNT",
            "(",
            "DISTINCT",
            "T",
            ".",
            "treatment_type_code",
            ")",
            ">",
            "=",
            "2"
        ],
        "query_toks_no_value": [
            "select",
            "p.professional_id,",
            "p.cell_number",
            "from",
            "professionals",
            "p",
            "join",
            "treatments",
            "t",
            "on",
            "p.professional_id",
            "=",
            "t",
            ".",
            "professional_id",
            "group",
            "by",
            "p.professional_id,",
            "p.cell_number",
            "having",
            "count",
            "(",
            "distinct",
            "t",
            ".",
            "treatment_type_code",
            ")",
            ">",
            "=",
            "value"
        ],
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "question_toks": [
            "Find",
            "the",
            "id",
            "and",
            "cell",
            "phone",
            "of",
            "the",
            "professionals",
            "who",
            "operate",
            "two",
            "or",
            "more",
            "types",
            "of",
            "treatments",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 944,
        "query": "SELECT T1.first_name, T1.last_name FROM Professionals AS T1 WHERE T1.professional_id IN (SELECT T2.professional_id FROM treatments AS T2 WHERE T2.cost_of_treatment < (SELECT AVG(T3.cost_of_treatment) FROM treatments AS T3))",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "first_name,",
            "T1",
            ".",
            "last_name",
            "FROM",
            "Professionals",
            "AS",
            "T1",
            "WHERE",
            "T1",
            ".",
            "professional_id",
            "IN",
            "(",
            "SELECT",
            "T2",
            ".",
            "professional_id",
            "FROM",
            "treatments",
            "AS",
            "T2",
            "WHERE",
            "T2",
            ".",
            "cost_of_treatment",
            "<",
            "(",
            "SELECT",
            "AVG",
            "(",
            "T3",
            ".",
            "cost_of_treatment",
            ")",
            "FROM",
            "treatments",
            "AS",
            "T3",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "first_name,",
            "t1",
            ".",
            "last_name",
            "from",
            "professionals",
            "as",
            "t1",
            "where",
            "t1",
            ".",
            "professional_id",
            "in",
            "(",
            "select",
            "t2",
            ".",
            "professional_id",
            "from",
            "treatments",
            "as",
            "t2",
            "where",
            "t2",
            ".",
            "cost_of_treatment",
            "<",
            "(",
            "select",
            "avg",
            "(",
            "t3",
            ".",
            "cost_of_treatment",
            ")",
            "from",
            "treatments",
            "as",
            "t3",
            ")",
            ")"
        ],
        "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "question_toks": [
            "What",
            "are",
            "the",
            "first",
            "name",
            "and",
            "last",
            "name",
            "of",
            "the",
            "professionals",
            "who",
            "have",
            "done",
            "treatment",
            "with",
            "cost",
            "below",
            "average",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 945,
        "query": "SELECT first_name, last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments WHERE cost_of_treatment < (SELECT avg(cost_of_treatment) FROM Treatments))",
        "query_toks": [
            "SELECT",
            "first_name,",
            "last_name",
            "FROM",
            "Professionals",
            "WHERE",
            "professional_id",
            "IN",
            "(",
            "SELECT",
            "professional_id",
            "FROM",
            "Treatments",
            "WHERE",
            "cost_of_treatment",
            "<",
            "(",
            "SELECT",
            "avg",
            "(",
            "cost_of_treatment",
            ")",
            "FROM",
            "Treatments",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "first_name,",
            "last_name",
            "from",
            "professionals",
            "where",
            "professional_id",
            "in",
            "(",
            "select",
            "professional_id",
            "from",
            "treatments",
            "where",
            "cost_of_treatment",
            "<",
            "(",
            "select",
            "avg",
            "(",
            "cost_of_treatment",
            ")",
            "from",
            "treatments",
            ")",
            ")"
        ],
        "question": "Which professionals have operated a treatment that costs less than the average cost of all treatments? Give me their first names and last names.",
        "question_toks": [
            "Which",
            "professionals",
            "have",
            "operated",
            "a",
            "treatment",
            "that",
            "costs",
            "less",
            "than",
            "the",
            "average",
            "cost",
            "of",
            "all",
            "treatments",
            "?",
            "Give",
            "me",
            "their",
            "first",
            "names",
            "and",
            "last",
            "names",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 946,
        "query": "SELECT T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "date_of_treatment",
            ",",
            "T2",
            ".",
            "first_name",
            "FROM",
            "Treatments",
            "AS",
            "T1",
            "JOIN",
            "Professionals",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "professional_id",
            "=",
            "T2",
            ".",
            "professional_id"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "date_of_treatment",
            ",",
            "t2",
            ".",
            "first_name",
            "from",
            "treatments",
            "as",
            "t1",
            "join",
            "professionals",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id"
        ],
        "question": "List the date of each treatment, together with the first name of the professional who operated it.",
        "question_toks": [
            "List",
            "the",
            "date",
            "of",
            "each",
            "treatment",
            ",",
            "together",
            "with",
            "the",
            "first",
            "name",
            "of",
            "the",
            "professional",
            "who",
            "operated",
            "it",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 947,
        "query": "SELECT T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "date_of_treatment",
            ",",
            "T2",
            ".",
            "first_name",
            "FROM",
            "Treatments",
            "AS",
            "T1",
            "JOIN",
            "Professionals",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "professional_id",
            "=",
            "T2",
            ".",
            "professional_id"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "date_of_treatment",
            ",",
            "t2",
            ".",
            "first_name",
            "from",
            "treatments",
            "as",
            "t1",
            "join",
            "professionals",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id"
        ],
        "question": "What are the date and the operating professional's first name of each treatment?",
        "question_toks": [
            "What",
            "are",
            "the",
            "date",
            "and",
            "the",
            "operating",
            "professional",
            "'s",
            "first",
            "name",
            "of",
            "each",
            "treatment",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 948,
        "query": "SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "cost_of_treatment",
            ",",
            "T2",
            ".",
            "treatment_type_description",
            "FROM",
            "Treatments",
            "AS",
            "T1",
            "JOIN",
            "treatment_types",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "treatment_type_code",
            "=",
            "T2",
            ".",
            "treatment_type_code"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "cost_of_treatment",
            ",",
            "t2",
            ".",
            "treatment_type_description",
            "from",
            "treatments",
            "as",
            "t1",
            "join",
            "treatment_types",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "treatment_type_code",
            "=",
            "t2",
            ".",
            "treatment_type_code"
        ],
        "question": "List the cost of each treatment and the corresponding treatment type description.",
        "question_toks": [
            "List",
            "the",
            "cost",
            "of",
            "each",
            "treatment",
            "and",
            "the",
            "corresponding",
            "treatment",
            "type",
            "description",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 949,
        "query": "SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "cost_of_treatment",
            ",",
            "T2",
            ".",
            "treatment_type_description",
            "FROM",
            "Treatments",
            "AS",
            "T1",
            "JOIN",
            "treatment_types",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "treatment_type_code",
            "=",
            "T2",
            ".",
            "treatment_type_code"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "cost_of_treatment",
            ",",
            "t2",
            ".",
            "treatment_type_description",
            "from",
            "treatments",
            "as",
            "t1",
            "join",
            "treatment_types",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "treatment_type_code",
            "=",
            "t2",
            ".",
            "treatment_type_code"
        ],
        "question": "What are the cost and treatment type description of each treatment?",
        "question_toks": [
            "What",
            "are",
            "the",
            "cost",
            "and",
            "treatment",
            "type",
            "description",
            "of",
            "each",
            "treatment",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 950,
        "query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "first_name",
            ",",
            "T1",
            ".",
            "last_name",
            ",",
            "T2",
            ".",
            "size_code",
            "FROM",
            "Owners",
            "AS",
            "T1",
            "JOIN",
            "Dogs",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "owner_id",
            "=",
            "T2",
            ".",
            "owner_id"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "last_name",
            ",",
            "t2",
            ".",
            "size_code",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id"
        ],
        "question": "List each owner's first name, last name, and the size of his or her dog. If an owner has multiple dogs of different sizes, list all sizes.",
        "question_toks": [
            "List",
            "each",
            "owner",
            "'",
            "s",
            "first",
            "name",
            ",",
            "last",
            "name",
            ",",
            "and",
            "the",
            "size",
            "of",
            "his",
            "or",
            "her",
            "dog",
            ".",
            "If",
            "an",
            "owner",
            "has",
            "multiple",
            "dogs",
            "of",
            "different",
            "sizes",
            ",",
            "list",
            "all",
            "sizes",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 951,
        "query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "first_name",
            ",",
            "T1",
            ".",
            "last_name",
            ",",
            "T2",
            ".",
            "size_code",
            "FROM",
            "Owners",
            "AS",
            "T1",
            "JOIN",
            "Dogs",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "owner_id",
            "=",
            "T2",
            ".",
            "owner_id"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "last_name",
            ",",
            "t2",
            ".",
            "size_code",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id"
        ],
        "question": "What are each owner's first name, last name, and the size of their dog? If an owner has multiple dogs, include all sizes.",
        "question_toks": [
            "What",
            "are",
            "each",
            "owner",
            "'",
            "s",
            "first",
            "name",
            ",",
            "last",
            "name",
            ",",
            "and",
            "the",
            "size",
            "of",
            "their",
            "dog",
            "?",
            "If",
            "an",
            "owner",
            "has",
            "multiple",
            "dogs",
            ",",
            "include",
            "all",
            "sizes",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 952,
        "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "first_name",
            ",",
            "T2",
            ".",
            "name",
            "FROM",
            "Owners",
            "AS",
            "T1",
            "JOIN",
            "Dogs",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "owner_id",
            "=",
            "T2",
            ".",
            "owner_id"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "first_name",
            ",",
            "t2",
            ".",
            "name",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id"
        ],
        "question": "List pairs of the owner's first name and the dogs's name.",
        "question_toks": [
            "List",
            "pairs",
            "of",
            "the",
            "owner",
            "'s",
            "first",
            "name",
            "and",
            "the",
            "dogs",
            "'s",
            "name",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 953,
        "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "first_name",
            ",",
            "T2",
            ".",
            "name",
            "FROM",
            "Owners",
            "AS",
            "T1",
            "JOIN",
            "Dogs",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "owner_id",
            "=",
            "T2",
            ".",
            "owner_id"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "first_name",
            ",",
            "t2",
            ".",
            "name",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id"
        ],
        "question": "What are each owner's first name and their dogs's name?",
        "question_toks": [
            "What",
            "are",
            "each",
            "owner",
            "'s",
            "first",
            "name",
            "and",
            "their",
            "dogs",
            "'s",
            "name",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 954,
        "query": "SELECT T1.name, T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code HAVING COUNT(*) = (SELECT COUNT(*) FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1))",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "name,",
            "T2",
            ".",
            "date_of_treatment",
            "FROM",
            "Dogs",
            "AS",
            "T1",
            "JOIN",
            "Treatments",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "dog_id",
            "=",
            "T2",
            ".",
            "dog_id",
            "WHERE",
            "T1",
            ".",
            "breed_code",
            "IN",
            "(",
            "SELECT",
            "breed_code",
            "FROM",
            "Dogs",
            "GROUP",
            "BY",
            "breed_code",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "Dogs",
            "GROUP",
            "BY",
            "breed_code",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "ASC",
            "LIMIT",
            "1",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "name,",
            "t2",
            ".",
            "date_of_treatment",
            "from",
            "dogs",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "dog_id",
            "=",
            "t2",
            ".",
            "dog_id",
            "where",
            "t1",
            ".",
            "breed_code",
            "in",
            "(",
            "select",
            "breed_code",
            "from",
            "dogs",
            "group",
            "by",
            "breed_code",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "dogs",
            "group",
            "by",
            "breed_code",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit",
            "value",
            ")",
            ")"
        ],
        "question": "List the names of the dogs of the rarest breed and the treatment dates of them. If there is a tie on rarest breeds, include all dogs of the rarest breeds .",
        "question_toks": [
            "List",
            "the",
            "names",
            "of",
            "the",
            "dogs",
            "of",
            "the",
            "rarest",
            "breed",
            "and",
            "the",
            "treatment",
            "dates",
            "of",
            "them",
            ".",
            "If",
            "there",
            "is",
            "a",
            "tie",
            "on",
            "rarest",
            "breeds",
            ",",
            "include",
            "all",
            "dogs",
            "of",
            "the",
            "rarest",
            "breeds",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 955,
        "query": "SELECT T1.name, T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code HAVING count(*) = (SELECT MIN(c) FROM (SELECT count(*) AS c FROM Dogs GROUP BY breed_code) AS counts))",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "name,",
            "T2",
            ".",
            "date_of_treatment",
            "FROM",
            "Dogs",
            "AS",
            "T1",
            "JOIN",
            "Treatments",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "dog_id",
            "=",
            "T2",
            ".",
            "dog_id",
            "WHERE",
            "T1",
            ".",
            "breed_code",
            "IN",
            "(",
            "SELECT",
            "breed_code",
            "FROM",
            "Dogs",
            "GROUP",
            "BY",
            "breed_code",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MIN",
            "(",
            "c",
            ")",
            "FROM",
            "(",
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "AS",
            "c",
            "FROM",
            "Dogs",
            "GROUP",
            "BY",
            "breed_code",
            ")",
            "AS",
            "counts",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "name,",
            "t2",
            ".",
            "date_of_treatment",
            "from",
            "dogs",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "dog_id",
            "=",
            "t2",
            ".",
            "dog_id",
            "where",
            "t1",
            ".",
            "breed_code",
            "in",
            "(",
            "select",
            "breed_code",
            "from",
            "dogs",
            "group",
            "by",
            "breed_code",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "min",
            "(",
            "c",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "c",
            "from",
            "dogs",
            "group",
            "by",
            "breed_code",
            ")",
            "as",
            "counts",
            ")",
            ")"
        ],
        "question": "Which dogs are of the rarest breed? Show their names and treatment dates. If there is a tie on rarest breeds, show all such dogs of the rarest breeds.",
        "question_toks": [
            "Which",
            "dogs",
            "are",
            "of",
            "the",
            "rarest",
            "breed",
            "?",
            "Show",
            "their",
            "names",
            "and",
            "treatment",
            "dates",
            ".",
            "If",
            "there",
            "is",
            "a",
            "tie",
            "on",
            "rarest",
            "breeds",
            ",",
            "show",
            "all",
            "such",
            "dogs",
            "of",
            "the",
            "rarest",
            "breeds",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 956,
        "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "first_name",
            ",",
            "T2",
            ".",
            "name",
            "FROM",
            "Owners",
            "AS",
            "T1",
            "JOIN",
            "Dogs",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "owner_id",
            "=",
            "T2",
            ".",
            "owner_id",
            "WHERE",
            "T1",
            ".",
            "state",
            "=",
            "'Virginia",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "first_name",
            ",",
            "t2",
            ".",
            "name",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "where",
            "t1",
            ".",
            "state",
            "=",
            "value"
        ],
        "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "question_toks": [
            "Which",
            "dogs",
            "are",
            "owned",
            "by",
            "someone",
            "who",
            "lives",
            "in",
            "Virginia",
            "?",
            "List",
            "the",
            "owner",
            "'s",
            "first",
            "name",
            "and",
            "the",
            "dog",
            "'s",
            "name",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 957,
        "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "first_name",
            ",",
            "T2",
            ".",
            "name",
            "FROM",
            "Owners",
            "AS",
            "T1",
            "JOIN",
            "Dogs",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "owner_id",
            "=",
            "T2",
            ".",
            "owner_id",
            "WHERE",
            "T1",
            ".",
            "state",
            "=",
            "'Virginia",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "first_name",
            ",",
            "t2",
            ".",
            "name",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "where",
            "t1",
            ".",
            "state",
            "=",
            "value"
        ],
        "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "question_toks": [
            "Find",
            "the",
            "first",
            "names",
            "of",
            "owners",
            "living",
            "in",
            "Virginia",
            "and",
            "the",
            "names",
            "of",
            "dogs",
            "they",
            "own",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 958,
        "query": "SELECT date_arrived, date_departed FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)",
        "query_toks": [
            "SELECT",
            "date_arrived,",
            "date_departed",
            "FROM",
            "dogs",
            "WHERE",
            "dog_id",
            "IN",
            "(",
            "SELECT",
            "dog_id",
            "FROM",
            "treatments",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "date_arrived,",
            "date_departed",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")"
        ],
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "question_toks": [
            "What",
            "are",
            "the",
            "arriving",
            "date",
            "and",
            "the",
            "departing",
            "date",
            "of",
            "the",
            "dogs",
            "who",
            "have",
            "gone",
            "through",
            "a",
            "treatment",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 959,
        "query": "SELECT date_arrived, date_departed FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)",
        "query_toks": [
            "SELECT",
            "date_arrived,",
            "date_departed",
            "FROM",
            "dogs",
            "WHERE",
            "dog_id",
            "IN",
            "(",
            "SELECT",
            "dog_id",
            "FROM",
            "treatments",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "date_arrived,",
            "date_departed",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")"
        ],
        "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "question_toks": [
            "Find",
            "the",
            "arriving",
            "date",
            "and",
            "the",
            "departing",
            "date",
            "of",
            "the",
            "dogs",
            "that",
            "received",
            "a",
            "treatment",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 960,
        "query": "SELECT o.last_name FROM Owners AS o WHERE o.owner_id IN (SELECT d1.owner_id FROM dogs AS d1 WHERE d1.age = (SELECT MIN(d2.age) FROM dogs AS d2))",
        "query_toks": [
            "SELECT",
            "o.last_name",
            "FROM",
            "Owners",
            "AS",
            "o",
            "WHERE",
            "o.owner_id",
            "IN",
            "(",
            "SELECT",
            "d1.owner_id",
            "FROM",
            "dogs",
            "AS",
            "d1",
            "WHERE",
            "d1.age",
            "=",
            "(",
            "SELECT",
            "MIN",
            "(",
            "d2.age",
            ")",
            "FROM",
            "dogs",
            "AS",
            "d2",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "o.last_name",
            "from",
            "owners",
            "as",
            "o",
            "where",
            "o.owner_id",
            "in",
            "(",
            "select",
            "d1.owner_id",
            "from",
            "dogs",
            "as",
            "d1",
            "where",
            "d1.age",
            "=",
            "(",
            "select",
            "min",
            "(",
            "d2.age",
            ")",
            "from",
            "dogs",
            "as",
            "d2",
            ")",
            ")"
        ],
        "question": "List the last name(s) of the owner(s) owning the youngest dog(s).",
        "question_toks": [
            "List",
            "the",
            "last",
            "name",
            "(",
            "s",
            ")",
            "of",
            "the",
            "owner",
            "(",
            "s",
            ")",
            "owning",
            "the",
            "youngest",
            "dog",
            "(",
            "s",
            ")."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 961,
        "query": "SELECT o.last_name FROM Owners AS o WHERE o.owner_id IN (SELECT d1.owner_id FROM dogs AS d1 WHERE d1.age = (SELECT MIN(d2.age) FROM dogs AS d2))",
        "query_toks": [
            "SELECT",
            "o.last_name",
            "FROM",
            "Owners",
            "AS",
            "o",
            "WHERE",
            "o.owner_id",
            "IN",
            "(",
            "SELECT",
            "d1.owner_id",
            "FROM",
            "dogs",
            "AS",
            "d1",
            "WHERE",
            "d1.age",
            "=",
            "(",
            "SELECT",
            "MIN",
            "(",
            "d2.age",
            ")",
            "FROM",
            "dogs",
            "AS",
            "d2",
            ")",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "o.last_name",
            "from",
            "owners",
            "as",
            "o",
            "where",
            "o.owner_id",
            "in",
            "(",
            "select",
            "d1.owner_id",
            "from",
            "dogs",
            "as",
            "d1",
            "where",
            "d1.age",
            "=",
            "(",
            "select",
            "min",
            "(",
            "d2.age",
            ")",
            "from",
            "dogs",
            "as",
            "d2",
            ")",
            ")"
        ],
        "question": "Who owns the youngest dog? Give me his or her last name. If there is a tie, give me the last names of all owners with the youngest dog.",
        "question_toks": [
            "Who",
            "owns",
            "the",
            "youngest",
            "dog",
            "?",
            "Give",
            "me",
            "his",
            "or",
            "her",
            "last",
            "name",
            ".",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "give",
            "me",
            "the",
            "last",
            "names",
            "of",
            "all",
            "owners",
            "with",
            "the",
            "youngest",
            "dog",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 962,
        "query": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
        "query_toks": [
            "SELECT",
            "email_address",
            "FROM",
            "Professionals",
            "WHERE",
            "state",
            "=",
            "'Hawaii",
            "'",
            "OR",
            "state",
            "=",
            "'Wisconsin",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "email_address",
            "from",
            "professionals",
            "where",
            "state",
            "=",
            "value",
            "or",
            "state",
            "=",
            "value"
        ],
        "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "question_toks": [
            "List",
            "the",
            "emails",
            "of",
            "the",
            "professionals",
            "who",
            "live",
            "in",
            "the",
            "state",
            "of",
            "Hawaii",
            "or",
            "the",
            "state",
            "of",
            "Wisconsin",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 963,
        "query": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
        "query_toks": [
            "SELECT",
            "email_address",
            "FROM",
            "Professionals",
            "WHERE",
            "state",
            "=",
            "'Hawaii",
            "'",
            "OR",
            "state",
            "=",
            "'Wisconsin",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "email_address",
            "from",
            "professionals",
            "where",
            "state",
            "=",
            "value",
            "or",
            "state",
            "=",
            "value"
        ],
        "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "question_toks": [
            "What",
            "are",
            "the",
            "emails",
            "of",
            "the",
            "professionals",
            "living",
            "in",
            "either",
            "the",
            "state",
            "of",
            "Hawaii",
            "or",
            "the",
            "state",
            "of",
            "Wisconsin",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 964,
        "query": "SELECT date_arrived , date_departed FROM Dogs",
        "query_toks": [
            "SELECT",
            "date_arrived",
            ",",
            "date_departed",
            "FROM",
            "Dogs"
        ],
        "query_toks_no_value": [
            "select",
            "date_arrived",
            ",",
            "date_departed",
            "from",
            "dogs"
        ],
        "question": "What are the arriving date and the departing date of all the dogs?",
        "question_toks": [
            "What",
            "are",
            "the",
            "arriving",
            "date",
            "and",
            "the",
            "departing",
            "date",
            "of",
            "all",
            "the",
            "dogs",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 965,
        "query": "SELECT date_arrived , date_departed FROM Dogs",
        "query_toks": [
            "SELECT",
            "date_arrived",
            ",",
            "date_departed",
            "FROM",
            "Dogs"
        ],
        "query_toks_no_value": [
            "select",
            "date_arrived",
            ",",
            "date_departed",
            "from",
            "dogs"
        ],
        "question": "List the arrival date and the departure date for all the dogs.",
        "question_toks": [
            "List",
            "the",
            "arrival",
            "date",
            "and",
            "the",
            "departure",
            "date",
            "for",
            "all",
            "the",
            "dogs",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 966,
        "query": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "dog_id",
            ")",
            "FROM",
            "Treatments"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "dog_id",
            ")",
            "from",
            "treatments"
        ],
        "question": "How many dogs went through any treatments?",
        "question_toks": [
            "How",
            "many",
            "dogs",
            "went",
            "through",
            "any",
            "treatments",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 967,
        "query": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "dog_id",
            ")",
            "FROM",
            "Treatments"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "dog_id",
            ")",
            "from",
            "treatments"
        ],
        "question": "Count the number of dogs that went through a treatment.",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "dogs",
            "that",
            "went",
            "through",
            "a",
            "treatment",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 968,
        "query": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "professional_id",
            ")",
            "FROM",
            "Treatments"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "professional_id",
            ")",
            "from",
            "treatments"
        ],
        "question": "How many professionals have performed any treatment to dogs?",
        "question_toks": [
            "How",
            "many",
            "professionals",
            "have",
            "performed",
            "any",
            "treatment",
            "to",
            "dogs",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 969,
        "query": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "professional_id",
            ")",
            "FROM",
            "Treatments"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "professional_id",
            ")",
            "from",
            "treatments"
        ],
        "question": "Find the number of professionals who have ever treated dogs.",
        "question_toks": [
            "Find",
            "the",
            "number",
            "of",
            "professionals",
            "who",
            "have",
            "ever",
            "treated",
            "dogs",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 970,
        "query": "SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
        "query_toks": [
            "SELECT",
            "role_code",
            ",",
            "street",
            ",",
            "city",
            ",",
            "state",
            "FROM",
            "professionals",
            "WHERE",
            "city",
            "LIKE",
            "'%West%",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "role_code",
            ",",
            "street",
            ",",
            "city",
            ",",
            "state",
            "from",
            "professionals",
            "where",
            "city",
            "like",
            "value"
        ],
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "question_toks": [
            "Which",
            "professionals",
            "live",
            "in",
            "a",
            "city",
            "containing",
            "the",
            "substring",
            "'West",
            "'",
            "?",
            "List",
            "his",
            "or",
            "her",
            "role",
            ",",
            "street",
            ",",
            "city",
            "and",
            "state",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 971,
        "query": "SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
        "query_toks": [
            "SELECT",
            "role_code",
            ",",
            "street",
            ",",
            "city",
            ",",
            "state",
            "FROM",
            "professionals",
            "WHERE",
            "city",
            "LIKE",
            "'%West%",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "role_code",
            ",",
            "street",
            ",",
            "city",
            ",",
            "state",
            "from",
            "professionals",
            "where",
            "city",
            "like",
            "value"
        ],
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "question_toks": [
            "Find",
            "the",
            "role",
            ",",
            "street",
            ",",
            "city",
            "and",
            "state",
            "of",
            "the",
            "professionals",
            "living",
            "in",
            "a",
            "city",
            "that",
            "contains",
            "the",
            "substring",
            "'West",
            "'",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 972,
        "query": "SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            ",",
            "email_address",
            "FROM",
            "Owners",
            "WHERE",
            "state",
            "LIKE",
            "'%North%",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "last_name",
            ",",
            "email_address",
            "from",
            "owners",
            "where",
            "state",
            "like",
            "value"
        ],
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "question_toks": [
            "Which",
            "owners",
            "live",
            "in",
            "the",
            "state",
            "whose",
            "name",
            "contains",
            "the",
            "substring",
            "'North",
            "'",
            "?",
            "List",
            "his",
            "first",
            "name",
            ",",
            "last",
            "name",
            "and",
            "email",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 973,
        "query": "SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            ",",
            "email_address",
            "FROM",
            "Owners",
            "WHERE",
            "state",
            "LIKE",
            "'%North%",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "last_name",
            ",",
            "email_address",
            "from",
            "owners",
            "where",
            "state",
            "like",
            "value"
        ],
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "question_toks": [
            "Return",
            "the",
            "first",
            "name",
            ",",
            "last",
            "name",
            "and",
            "email",
            "of",
            "the",
            "owners",
            "living",
            "in",
            "a",
            "state",
            "whose",
            "name",
            "contains",
            "the",
            "substring",
            "'North",
            "'",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 974,
        "query": "SELECT count(*) FROM Dogs WHERE age < ( SELECT avg(age) FROM Dogs )",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Dogs",
            "WHERE",
            "age",
            "<",
            "(",
            "SELECT",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "Dogs",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "dogs",
            "where",
            "age",
            "<",
            "(",
            "select",
            "avg",
            "(",
            "age",
            ")",
            "from",
            "dogs",
            ")"
        ],
        "question": "How many dogs have an age below the average?",
        "question_toks": [
            "How",
            "many",
            "dogs",
            "have",
            "an",
            "age",
            "below",
            "the",
            "average",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 975,
        "query": "SELECT count(*) FROM Dogs WHERE age < ( SELECT avg(age) FROM Dogs )",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Dogs",
            "WHERE",
            "age",
            "<",
            "(",
            "SELECT",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "Dogs",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "dogs",
            "where",
            "age",
            "<",
            "(",
            "select",
            "avg",
            "(",
            "age",
            ")",
            "from",
            "dogs",
            ")"
        ],
        "question": "Count the number of dogs of an age below the average.",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "dogs",
            "of",
            "an",
            "age",
            "below",
            "the",
            "average",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 976,
        "query": "SELECT MAX(cost_of_treatment) FROM Treatments WHERE date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments)",
        "query_toks": [
            "SELECT",
            "MAX",
            "(",
            "cost_of_treatment",
            ")",
            "FROM",
            "Treatments",
            "WHERE",
            "date_of_treatment",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "date_of_treatment",
            ")",
            "FROM",
            "Treatments",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "cost_of_treatment",
            ")",
            "from",
            "treatments",
            "where",
            "date_of_treatment",
            "=",
            "(",
            "select",
            "max",
            "(",
            "date_of_treatment",
            ")",
            "from",
            "treatments",
            ")"
        ],
        "question": "How much does the treatment with the highest cost among the most recent treatments cost?",
        "question_toks": [
            "How",
            "much",
            "does",
            "the",
            "treatment",
            "with",
            "the",
            "highest",
            "cost",
            "among",
            "the",
            "most",
            "recent",
            "treatments",
            "cost",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 977,
        "query": "SELECT cost_of_treatment FROM Treatments WHERE date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments)",
        "query_toks": [
            "SELECT",
            "cost_of_treatment",
            "FROM",
            "Treatments",
            "WHERE",
            "date_of_treatment",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "date_of_treatment",
            ")",
            "FROM",
            "Treatments",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "cost_of_treatment",
            "from",
            "treatments",
            "where",
            "date_of_treatment",
            "=",
            "(",
            "select",
            "max",
            "(",
            "date_of_treatment",
            ")",
            "from",
            "treatments",
            ")"
        ],
        "question": "Show me the cost of all treatments performed on the most recent date.",
        "question_toks": [
            "Show",
            "me",
            "the",
            "cost",
            "of",
            "all",
            "treatments",
            "performed",
            "on",
            "the",
            "most",
            "recent",
            "date",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 978,
        "query": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Dogs",
            "WHERE",
            "dog_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "dog_id",
            "FROM",
            "Treatments",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "not",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")"
        ],
        "question": "How many dogs have not gone through any treatment?",
        "question_toks": [
            "How",
            "many",
            "dogs",
            "have",
            "not",
            "gone",
            "through",
            "any",
            "treatment",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 979,
        "query": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "not",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "not",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")"
        ],
        "question": "Tell me the number of dogs that have not received any treatment .",
        "question_toks": [
            "Tell",
            "me",
            "the",
            "number",
            "of",
            "dogs",
            "that",
            "have",
            "not",
            "received",
            "any",
            "treatment",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 980,
        "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Owners",
            "WHERE",
            "owner_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "owner_id",
            "FROM",
            "Dogs",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "owners",
            "where",
            "owner_id",
            "not",
            "in",
            "(",
            "select",
            "owner_id",
            "from",
            "dogs",
            ")"
        ],
        "question": "How many owners temporarily do not have any dogs?",
        "question_toks": [
            "How",
            "many",
            "owners",
            "temporarily",
            "do",
            "not",
            "have",
            "any",
            "dogs",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 981,
        "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Owners",
            "WHERE",
            "owner_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "owner_id",
            "FROM",
            "Dogs",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "owners",
            "where",
            "owner_id",
            "not",
            "in",
            "(",
            "select",
            "owner_id",
            "from",
            "dogs",
            ")"
        ],
        "question": "Find the number of owners who do not own any dogs at this moment.",
        "question_toks": [
            "Find",
            "the",
            "number",
            "of",
            "owners",
            "who",
            "do",
            "not",
            "own",
            "any",
            "dogs",
            "at",
            "this",
            "moment",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 982,
        "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Professionals",
            "WHERE",
            "professional_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "professional_id",
            "FROM",
            "Treatments",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "professionals",
            "where",
            "professional_id",
            "not",
            "in",
            "(",
            "select",
            "professional_id",
            "from",
            "treatments",
            ")"
        ],
        "question": "How many professionals did not operate any treatment on dogs?",
        "question_toks": [
            "How",
            "many",
            "professionals",
            "did",
            "not",
            "operate",
            "any",
            "treatment",
            "on",
            "dogs",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 983,
        "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Professionals",
            "WHERE",
            "professional_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "professional_id",
            "FROM",
            "Treatments",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "professionals",
            "where",
            "professional_id",
            "not",
            "in",
            "(",
            "select",
            "professional_id",
            "from",
            "treatments",
            ")"
        ],
        "question": "Find the number of professionals who have not treated any dogs.",
        "question_toks": [
            "Find",
            "the",
            "number",
            "of",
            "professionals",
            "who",
            "have",
            "not",
            "treated",
            "any",
            "dogs",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 984,
        "query": "SELECT name , age , weight FROM Dogs WHERE abandoned_yn = 1",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "age",
            ",",
            "weight",
            "FROM",
            "Dogs",
            "WHERE",
            "abandoned_yn",
            "=",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "age",
            ",",
            "weight",
            "from",
            "dogs",
            "where",
            "abandoned_yn",
            "=",
            "value"
        ],
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "question_toks": [
            "List",
            "the",
            "dog",
            "name",
            ",",
            "age",
            "and",
            "weight",
            "of",
            "the",
            "dogs",
            "who",
            "have",
            "been",
            "abandoned",
            "?",
            "1",
            "stands",
            "for",
            "yes",
            ",",
            "and",
            "0",
            "stands",
            "for",
            "no",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 985,
        "query": "SELECT name , age , weight FROM Dogs WHERE abandoned_yn = 1",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "age",
            ",",
            "weight",
            "FROM",
            "Dogs",
            "WHERE",
            "abandoned_yn",
            "=",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "age",
            ",",
            "weight",
            "from",
            "dogs",
            "where",
            "abandoned_yn",
            "=",
            "value"
        ],
        "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "question_toks": [
            "What",
            "are",
            "the",
            "dog",
            "name",
            ",",
            "age",
            "and",
            "weight",
            "of",
            "the",
            "dogs",
            "that",
            "were",
            "abandoned",
            "?",
            "Note",
            "that",
            "1",
            "stands",
            "for",
            "yes",
            ",",
            "and",
            "0",
            "stands",
            "for",
            "no",
            "in",
            "the",
            "tables",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 986,
        "query": "SELECT avg(age) FROM Dogs",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "Dogs"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "age",
            ")",
            "from",
            "dogs"
        ],
        "question": "What is the average age of all the dogs?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "age",
            "of",
            "all",
            "the",
            "dogs",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 987,
        "query": "SELECT avg(age) FROM Dogs",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "Dogs"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "age",
            ")",
            "from",
            "dogs"
        ],
        "question": "Compute the average age of all the dogs.",
        "question_toks": [
            "Compute",
            "the",
            "average",
            "age",
            "of",
            "all",
            "the",
            "dogs",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 988,
        "query": "SELECT max(age) FROM Dogs",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "age",
            ")",
            "FROM",
            "Dogs"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "age",
            ")",
            "from",
            "dogs"
        ],
        "question": "What is the age of the oldest dog?",
        "question_toks": [
            "What",
            "is",
            "the",
            "age",
            "of",
            "the",
            "oldest",
            "dog",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 989,
        "query": "SELECT max(age) FROM Dogs",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "age",
            ")",
            "FROM",
            "Dogs"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "age",
            ")",
            "from",
            "dogs"
        ],
        "question": "Tell me the age of the oldest dog.",
        "question_toks": [
            "Tell",
            "me",
            "the",
            "age",
            "of",
            "the",
            "oldest",
            "dog",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 990,
        "query": "SELECT charge_type , charge_amount FROM Charges",
        "query_toks": [
            "SELECT",
            "charge_type",
            ",",
            "charge_amount",
            "FROM",
            "Charges"
        ],
        "query_toks_no_value": [
            "select",
            "charge_type",
            ",",
            "charge_amount",
            "from",
            "charges"
        ],
        "question": "How much does each charge type costs? List both charge type and amount.",
        "question_toks": [
            "How",
            "much",
            "does",
            "each",
            "charge",
            "type",
            "costs",
            "?",
            "List",
            "both",
            "charge",
            "type",
            "and",
            "amount",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 991,
        "query": "SELECT charge_type , charge_amount FROM Charges",
        "query_toks": [
            "SELECT",
            "charge_type",
            ",",
            "charge_amount",
            "FROM",
            "Charges"
        ],
        "query_toks_no_value": [
            "select",
            "charge_type",
            ",",
            "charge_amount",
            "from",
            "charges"
        ],
        "question": "List each charge type and its amount.",
        "question_toks": [
            "List",
            "each",
            "charge",
            "type",
            "and",
            "its",
            "amount",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 992,
        "query": "SELECT max(charge_amount) FROM Charges",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "charge_amount",
            ")",
            "FROM",
            "Charges"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "charge_amount",
            ")",
            "from",
            "charges"
        ],
        "question": "How much does the most expensive charge type costs?",
        "question_toks": [
            "How",
            "much",
            "does",
            "the",
            "most",
            "expensive",
            "charge",
            "type",
            "costs",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 993,
        "query": "SELECT max(charge_amount) FROM Charges",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "charge_amount",
            ")",
            "FROM",
            "Charges"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "charge_amount",
            ")",
            "from",
            "charges"
        ],
        "question": "What is the charge amount of the most expensive charge type?",
        "question_toks": [
            "What",
            "is",
            "the",
            "charge",
            "amount",
            "of",
            "the",
            "most",
            "expensive",
            "charge",
            "type",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 994,
        "query": "SELECT email_address , cell_number , home_phone FROM professionals",
        "query_toks": [
            "SELECT",
            "email_address",
            ",",
            "cell_number",
            ",",
            "home_phone",
            "FROM",
            "professionals"
        ],
        "query_toks_no_value": [
            "select",
            "email_address",
            ",",
            "cell_number",
            ",",
            "home_phone",
            "from",
            "professionals"
        ],
        "question": "List the email, cell phone and home phone of all the professionals.",
        "question_toks": [
            "List",
            "the",
            "email",
            ",",
            "cell",
            "phone",
            "and",
            "home",
            "phone",
            "of",
            "all",
            "the",
            "professionals",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 995,
        "query": "SELECT email_address , cell_number , home_phone FROM professionals",
        "query_toks": [
            "SELECT",
            "email_address",
            ",",
            "cell_number",
            ",",
            "home_phone",
            "FROM",
            "professionals"
        ],
        "query_toks_no_value": [
            "select",
            "email_address",
            ",",
            "cell_number",
            ",",
            "home_phone",
            "from",
            "professionals"
        ],
        "question": "What are the email, cell phone and home phone of each professional?",
        "question_toks": [
            "What",
            "are",
            "the",
            "email",
            ",",
            "cell",
            "phone",
            "and",
            "home",
            "phone",
            "of",
            "each",
            "professional",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 996,
        "query": "SELECT DISTINCT breed_code , size_code FROM dogs",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "breed_code",
            ",",
            "size_code",
            "FROM",
            "dogs"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "breed_code",
            ",",
            "size_code",
            "from",
            "dogs"
        ],
        "question": "What are all the possible breed type and size type combinations?",
        "question_toks": [
            "What",
            "are",
            "all",
            "the",
            "possible",
            "breed",
            "type",
            "and",
            "size",
            "type",
            "combinations",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 997,
        "query": "SELECT DISTINCT breed_code , size_code FROM dogs",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "breed_code",
            ",",
            "size_code",
            "FROM",
            "dogs"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "breed_code",
            ",",
            "size_code",
            "from",
            "dogs"
        ],
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "question_toks": [
            "Find",
            "the",
            "distinct",
            "breed",
            "type",
            "and",
            "size",
            "type",
            "combinations",
            "for",
            "dogs",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 998,
        "query": "SELECT p.first_name, tt.treatment_type_description FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code",
        "query_toks": [
            "SELECT",
            "p.first_name,",
            "tt",
            ".",
            "treatment_type_description",
            "FROM",
            "professionals",
            "p",
            "JOIN",
            "treatments",
            "t",
            "ON",
            "p.professional_id",
            "=",
            "t",
            ".",
            "professional_id",
            "JOIN",
            "treatment_types",
            "tt",
            "ON",
            "t",
            ".",
            "treatment_type_code",
            "=",
            "tt",
            ".",
            "treatment_type_code"
        ],
        "query_toks_no_value": [
            "select",
            "p.first_name,",
            "tt",
            ".",
            "treatment_type_description",
            "from",
            "professionals",
            "p",
            "join",
            "treatments",
            "t",
            "on",
            "p.professional_id",
            "=",
            "t",
            ".",
            "professional_id",
            "join",
            "treatment_types",
            "tt",
            "on",
            "t",
            ".",
            "treatment_type_code",
            "=",
            "tt",
            ".",
            "treatment_type_code"
        ],
        "question": "List the first name of all the professionals along with the description of all treatments they have done.",
        "question_toks": [
            "List",
            "the",
            "first",
            "name",
            "of",
            "all",
            "the",
            "professionals",
            "along",
            "with",
            "the",
            "description",
            "of",
            "all",
            "treatments",
            "they",
            "have",
            "done",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "dog_kennels",
        "id": 999,
        "query": "SELECT p.first_name, tt.treatment_type_description FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code",
        "query_toks": [
            "SELECT",
            "p.first_name,",
            "tt",
            ".",
            "treatment_type_description",
            "FROM",
            "professionals",
            "p",
            "JOIN",
            "treatments",
            "t",
            "ON",
            "p.professional_id",
            "=",
            "t",
            ".",
            "professional_id",
            "JOIN",
            "treatment_types",
            "tt",
            "ON",
            "t",
            ".",
            "treatment_type_code",
            "=",
            "tt",
            ".",
            "treatment_type_code"
        ],
        "query_toks_no_value": [
            "select",
            "p.first_name,",
            "tt",
            ".",
            "treatment_type_description",
            "from",
            "professionals",
            "p",
            "join",
            "treatments",
            "t",
            "on",
            "p.professional_id",
            "=",
            "t",
            ".",
            "professional_id",
            "join",
            "treatment_types",
            "tt",
            "on",
            "t",
            ".",
            "treatment_type_code",
            "=",
            "tt",
            ".",
            "treatment_type_code"
        ],
        "question": "What are each professional's first name and description of the treatment they have performed?",
        "question_toks": [
            "What",
            "are",
            "each",
            "professional",
            "'s",
            "first",
            "name",
            "and",
            "description",
            "of",
            "the",
            "treatment",
            "they",
            "have",
            "performed",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "singer",
        "id": 1000,
        "query": "SELECT count(*) FROM singer",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer"
        ],
        "question": "How many singers are there?",
        "question_toks": [
            "How",
            "many",
            "singers",
            "are",
            "there",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "singer",
        "id": 1001,
        "query": "SELECT count(*) FROM singer",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer"
        ],
        "question": "What is the count of singers?",
        "question_toks": [
            "What",
            "is",
            "the",
            "count",
            "of",
            "singers",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "singer",
        "id": 1002,
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC, Name ASC",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "singer",
            "ORDER",
            "BY",
            "Net_Worth_Millions",
            "ASC,",
            "Name",
            "ASC"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "singer",
            "order",
            "by",
            "net_worth_millions",
            "asc,",
            "name",
            "asc"
        ],
        "question": "List the name of singers in ascending order of net worth, and in case of a tie, sort by name alphabetically.",
        "question_toks": [
            "List",
            "the",
            "name",
            "of",
            "singers",
            "in",
            "ascending",
            "order",
            "of",
            "net",
            "worth",
            ",",
            "and",
            "in",
            "case",
            "of",
            "a",
            "tie",
            ",",
            "sort",
            "by",
            "name",
            "alphabetically",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "singer",
        "id": 1003,
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC, Singer_ID ASC",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "singer",
            "ORDER",
            "BY",
            "Net_Worth_Millions",
            "ASC,",
            "Singer_ID",
            "ASC"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "singer",
            "order",
            "by",
            "net_worth_millions",
            "asc,",
            "singer_id",
            "asc"
        ],
        "question": "What are the names of singers ordered by ascending net worth and then ascending Singer ID if net worth values are the same?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "singers",
            "ordered",
            "by",
            "ascending",
            "net",
            "worth",
            "and",
            "then",
            "ascending",
            "Singer",
            "ID",
            "if",
            "net",
            "worth",
            "values",
            "are",
            "the",
            "same",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "singer",
        "id": 1004,
        "query": "SELECT Birth_Year , Citizenship FROM singer",
        "query_toks": [
            "SELECT",
            "Birth_Year",
            ",",
            "Citizenship",
            "FROM",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "birth_year",
            ",",
            "citizenship",
            "from",
            "singer"
        ],
        "question": "What are the birth year and citizenship of singers?",
        "question_toks": [
            "What",
            "are",
            "the",
            "birth",
            "year",
            "and",
            "citizenship",
            "of",
            "singers",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "singer",
        "id": 1005,
        "query": "SELECT Birth_Year , Citizenship FROM singer",
        "query_toks": [
            "SELECT",
            "Birth_Year",
            ",",
            "Citizenship",
            "FROM",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "birth_year",
            ",",
            "citizenship",
            "from",
            "singer"
        ],
        "question": "What are the birth years and citizenships of the singers?",
        "question_toks": [
            "What",
            "are",
            "the",
            "birth",
            "years",
            "and",
            "citizenships",
            "of",
            "the",
            "singers",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "singer",
        "id": 1006,
        "query": "SELECT Name FROM singer WHERE Citizenship != 'France'",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "singer",
            "WHERE",
            "Citizenship",
            "!",
            "=",
            "'France",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "singer",
            "where",
            "citizenship",
            "!",
            "=",
            "value"
        ],
        "question": "List the name of singers whose citizenship is not 'France'.",
        "question_toks": [
            "List",
            "the",
            "name",
            "of",
            "singers",
            "whose",
            "citizenship",
            "is",
            "not",
            "``",
            "France",
            "''",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "singer",
        "id": 1007,
        "query": "SELECT Name FROM singer WHERE Citizenship != 'France'",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "singer",
            "WHERE",
            "Citizenship",
            "!",
            "=",
            "'France",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "singer",
            "where",
            "citizenship",
            "!",
            "=",
            "value"
        ],
        "question": "What are the names of the singers who are not French citizens?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "the",
            "singers",
            "who",
            "are",
            "not",
            "French",
            "citizens",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "singer",
        "id": 1008,
        "query": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "singer",
            "WHERE",
            "Birth_Year",
            "=",
            "1948",
            "OR",
            "Birth_Year",
            "=",
            "1949"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "singer",
            "where",
            "birth_year",
            "=",
            "value",
            "or",
            "birth_year",
            "=",
            "value"
        ],
        "question": "Show the name of singers whose birth year is either 1948 or 1949?",
        "question_toks": [
            "Show",
            "the",
            "name",
            "of",
            "singers",
            "whose",
            "birth",
            "year",
            "is",
            "either",
            "1948",
            "or",
            "1949",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "singer",
        "id": 1009,
        "query": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "singer",
            "WHERE",
            "Birth_Year",
            "=",
            "1948",
            "OR",
            "Birth_Year",
            "=",
            "1949"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "singer",
            "where",
            "birth_year",
            "=",
            "value",
            "or",
            "birth_year",
            "=",
            "value"
        ],
        "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "the",
            "singers",
            "whose",
            "birth",
            "years",
            "are",
            "either",
            "1948",
            "or",
            "1949",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "singer",
        "id": 1010,
        "query": "SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer)",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "singer",
            "WHERE",
            "Net_Worth_Millions",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "Net_Worth_Millions",
            ")",
            "FROM",
            "singer",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "singer",
            "where",
            "net_worth_millions",
            "=",
            "(",
            "select",
            "max",
            "(",
            "net_worth_millions",
            ")",
            "from",
            "singer",
            ")"
        ],
        "question": "What are the names of all singers with the largest net worth?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "all",
            "singers",
            "with",
            "the",
            "largest",
            "net",
            "worth",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "singer",
        "id": 1011,
        "query": "SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer)",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "singer",
            "WHERE",
            "Net_Worth_Millions",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "Net_Worth_Millions",
            ")",
            "FROM",
            "singer",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "singer",
            "where",
            "net_worth_millions",
            "=",
            "(",
            "select",
            "max",
            "(",
            "net_worth_millions",
            ")",
            "from",
            "singer",
            ")"
        ],
        "question": "What is the name of the singer who is worth the most? If there is a tie, list all singers with the highest worth.",
        "question_toks": [
            "What",
            "is",
            "the",
            "name",
            "of",
            "the",
            "singer",
            "who",
            "is",
            "worth",
            "the",
            "most",
            "?",
            "If",
            "there",
            "is",
            "a",
            "tie",
            ",",
            "list",
            "all",
            "singers",
            "with",
            "the",
            "highest",
            "worth",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "singer",
        "id": 1012,
        "query": "SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
        "query_toks": [
            "SELECT",
            "Citizenship",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "singer",
            "GROUP",
            "BY",
            "Citizenship"
        ],
        "query_toks_no_value": [
            "select",
            "citizenship",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer",
            "group",
            "by",
            "citizenship"
        ],
        "question": "Show different citizenship of singers and the number of singers of each citizenship.",
        "question_toks": [
            "Show",
            "different",
            "citizenship",
            "of",
            "singers",
            "and",
            "the",
            "number",
            "of",
            "singers",
            "of",
            "each",
            "citizenship",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "singer",
        "id": 1013,
        "query": "SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
        "query_toks": [
            "SELECT",
            "Citizenship",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "singer",
            "GROUP",
            "BY",
            "Citizenship"
        ],
        "query_toks_no_value": [
            "select",
            "citizenship",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer",
            "group",
            "by",
            "citizenship"
        ],
        "question": "For each citizenship, how many singers are from that country?",
        "question_toks": [
            "For",
            "each",
            "citizenship",
            ",",
            "how",
            "many",
            "singers",
            "are",
            "from",
            "that",
            "country",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "singer",
        "id": 1014,
        "query": "SELECT Citizenship FROM singer GROUP BY Citizenship HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM singer GROUP BY Citizenship) AS counts)",
        "query_toks": [
            "SELECT",
            "Citizenship",
            "FROM",
            "singer",
            "GROUP",
            "BY",
            "Citizenship",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "=",
            "(",
            "SELECT",
            "MAX",
            "(",
            "cnt",
            ")",
            "FROM",
            "(",
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "cnt",
            "FROM",
            "singer",
            "GROUP",
            "BY",
            "Citizenship",
            ")",
            "AS",
            "counts",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "citizenship",
            "from",
            "singer",
            "group",
            "by",
            "citizenship",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "(",
            "select",
            "max",
            "(",
            "cnt",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "cnt",
            "from",
            "singer",
            "group",
            "by",
            "citizenship",
            ")",
            "as",
            "counts",
            ")"
        ],
        "question": "Please show all citizenships of singers that have the highest frequency.",
        "question_toks": [
            "Please",
            "show",
            "all",
            "citizenships",
            "of",
            "singers",
            "that",
            "have",
            "the",
            "highest",
            "frequency",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "singer",
        "id": 1015,
        "query": "SELECT citizenship, COUNT(*) AS occurrence FROM singer GROUP BY citizenship",
        "query_toks": [
            "SELECT",
            "citizenship,",
            "COUNT",
            "(",
            "*",
            ")",
            "AS",
            "occurrence",
            "FROM",
            "singer",
            "GROUP",
            "BY",
            "citizenship"
        ],
        "query_toks_no_value": [
            "select",
            "citizenship,",
            "count",
            "(",
            "*",
            ")",
            "as",
            "occurrence",
            "from",
            "singer",
            "group",
            "by",
            "citizenship"
        ],
        "question": "List all singer citizenships along with their occurrence counts.",
        "question_toks": [
            "List",
            "all",
            "singer",
            "citizenships",
            "along",
            "with",
            "their",
            "occurrence",
            "counts",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "singer",
        "id": 1016,
        "query": "SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "query_toks": [
            "SELECT",
            "Citizenship",
            ",",
            "max",
            "(",
            "Net_Worth_Millions",
            ")",
            "FROM",
            "singer",
            "GROUP",
            "BY",
            "Citizenship"
        ],
        "query_toks_no_value": [
            "select",
            "citizenship",
            ",",
            "max",
            "(",
            "net_worth_millions",
            ")",
            "from",
            "singer",
            "group",
            "by",
            "citizenship"
        ],
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "question_toks": [
            "Show",
            "different",
            "citizenships",
            "and",
            "the",
            "maximum",
            "net",
            "worth",
            "of",
            "singers",
            "of",
            "each",
            "citizenship",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "singer",
        "id": 1017,
        "query": "SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "query_toks": [
            "SELECT",
            "Citizenship",
            ",",
            "max",
            "(",
            "Net_Worth_Millions",
            ")",
            "FROM",
            "singer",
            "GROUP",
            "BY",
            "Citizenship"
        ],
        "query_toks_no_value": [
            "select",
            "citizenship",
            ",",
            "max",
            "(",
            "net_worth_millions",
            ")",
            "from",
            "singer",
            "group",
            "by",
            "citizenship"
        ],
        "question": "For each citizenship, what is the maximum net worth?",
        "question_toks": [
            "For",
            "each",
            "citizenship",
            ",",
            "what",
            "is",
            "the",
            "maximum",
            "net",
            "worth",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "singer",
        "id": 1018,
        "query": "SELECT T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "Title",
            ",",
            "T1",
            ".",
            "Name",
            "FROM",
            "singer",
            "AS",
            "T1",
            "JOIN",
            "song",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Singer_ID",
            "=",
            "T2",
            ".",
            "Singer_ID"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "title",
            ",",
            "t1",
            ".",
            "name",
            "from",
            "singer",
            "as",
            "t1",
            "join",
            "song",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "singer_id",
            "=",
            "t2",
            ".",
            "singer_id"
        ],
        "question": "Show titles of songs and names of singers.",
        "question_toks": [
            "Show",
            "titles",
            "of",
            "songs",
            "and",
            "names",
            "of",
            "singers",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "singer",
        "id": 1019,
        "query": "SELECT T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "Title",
            ",",
            "T1",
            ".",
            "Name",
            "FROM",
            "singer",
            "AS",
            "T1",
            "JOIN",
            "song",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Singer_ID",
            "=",
            "T2",
            ".",
            "Singer_ID"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "title",
            ",",
            "t1",
            ".",
            "name",
            "from",
            "singer",
            "as",
            "t1",
            "join",
            "song",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "singer_id",
            "=",
            "t2",
            ".",
            "singer_id"
        ],
        "question": "What are the song titles and singer names?",
        "question_toks": [
            "What",
            "are",
            "the",
            "song",
            "titles",
            "and",
            "singer",
            "names",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "singer",
        "id": 1020,
        "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1",
            ".",
            "Name",
            "FROM",
            "singer",
            "AS",
            "T1",
            "JOIN",
            "song",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Singer_ID",
            "=",
            "T2",
            ".",
            "Singer_ID",
            "WHERE",
            "T2",
            ".",
            "Sales",
            ">",
            "300000"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "t1",
            ".",
            "name",
            "from",
            "singer",
            "as",
            "t1",
            "join",
            "song",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "singer_id",
            "=",
            "t2",
            ".",
            "singer_id",
            "where",
            "t2",
            ".",
            "sales",
            ">",
            "value"
        ],
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "question_toks": [
            "Show",
            "distinct",
            "names",
            "of",
            "singers",
            "that",
            "have",
            "songs",
            "with",
            "sales",
            "more",
            "than",
            "300000",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "singer",
        "id": 1021,
        "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1",
            ".",
            "Name",
            "FROM",
            "singer",
            "AS",
            "T1",
            "JOIN",
            "song",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Singer_ID",
            "=",
            "T2",
            ".",
            "Singer_ID",
            "WHERE",
            "T2",
            ".",
            "Sales",
            ">",
            "300000"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "t1",
            ".",
            "name",
            "from",
            "singer",
            "as",
            "t1",
            "join",
            "song",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "singer_id",
            "=",
            "t2",
            ".",
            "singer_id",
            "where",
            "t2",
            ".",
            "sales",
            ">",
            "value"
        ],
        "question": "List the different names of the singers that have at least one song with sales more than 300000.",
        "question_toks": [
            "List",
            "the",
            "different",
            "names",
            "of",
            "the",
            "singers",
            "that",
            "have",
            "at",
            "least",
            "one",
            "song",
            "with",
            "sales",
            "more",
            "than",
            "300000",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "singer",
        "id": 1022,
        "query": "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(song_id) > 1)",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "singer",
            "WHERE",
            "singer_id",
            "IN",
            "(",
            "SELECT",
            "singer_id",
            "FROM",
            "song",
            "GROUP",
            "BY",
            "singer_id",
            "HAVING",
            "COUNT",
            "(",
            "song_id",
            ")",
            ">",
            "1",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "singer",
            "where",
            "singer_id",
            "in",
            "(",
            "select",
            "singer_id",
            "from",
            "song",
            "group",
            "by",
            "singer_id",
            "having",
            "count",
            "(",
            "song_id",
            ")",
            ">",
            "value",
            ")"
        ],
        "question": "Show the names of singers that have more than one song.",
        "question_toks": [
            "Show",
            "the",
            "names",
            "of",
            "singers",
            "that",
            "have",
            "more",
            "than",
            "one",
            "song",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "singer",
        "id": 1023,
        "query": "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(*) > 1)",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "singer",
            "WHERE",
            "singer_id",
            "IN",
            "(",
            "SELECT",
            "singer_id",
            "FROM",
            "song",
            "GROUP",
            "BY",
            "singer_id",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "1",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "singer",
            "where",
            "singer_id",
            "in",
            "(",
            "select",
            "singer_id",
            "from",
            "song",
            "group",
            "by",
            "singer_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value",
            ")"
        ],
        "question": "What are the names of the singers that have more than one songs?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "the",
            "singers",
            "that",
            "have",
            "more",
            "than",
            "one",
            "songs",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "singer",
        "id": 1024,
        "query": "SELECT T1.Name, sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID",
        "query_toks": [
            "SELECT",
            "T1",
            ".",
            "Name,",
            "sum",
            "(",
            "T2",
            ".",
            "Sales",
            ")",
            "FROM",
            "singer",
            "AS",
            "T1",
            "JOIN",
            "song",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "Singer_ID",
            "=",
            "T2",
            ".",
            "Singer_ID",
            "GROUP",
            "BY",
            "T1",
            ".",
            "Singer_ID"
        ],
        "query_toks_no_value": [
            "select",
            "t1",
            ".",
            "name,",
            "sum",
            "(",
            "t2",
            ".",
            "sales",
            ")",
            "from",
            "singer",
            "as",
            "t1",
            "join",
            "song",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "singer_id",
            "=",
            "t2",
            ".",
            "singer_id",
            "group",
            "by",
            "t1",
            ".",
            "singer_id"
        ],
        "question": "Show the names of singers and the total sales of their songs.",
        "question_toks": [
            "Show",
            "the",
            "names",
            "of",
            "singers",
            "and",
            "the",
            "total",
            "sales",
            "of",
            "their",
            "songs",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "singer",
        "id": 1025,
        "query": "SELECT singer.name, SUM(song.sales) FROM song JOIN singer ON singer.singer_id = song.singer_id GROUP BY singer.singer_id",
        "query_toks": [
            "SELECT",
            "singer.name,",
            "SUM",
            "(",
            "song.sales",
            ")",
            "FROM",
            "song",
            "JOIN",
            "singer",
            "ON",
            "singer.singer_id",
            "=",
            "song.singer_id",
            "GROUP",
            "BY",
            "singer.singer_id"
        ],
        "query_toks_no_value": [
            "select",
            "singer.name,",
            "sum",
            "(",
            "song.sales",
            ")",
            "from",
            "song",
            "join",
            "singer",
            "on",
            "singer.singer_id",
            "=",
            "song.singer_id",
            "group",
            "by",
            "singer.singer_id"
        ],
        "question": "For each singer, what is the total sales for their songs?",
        "question_toks": [
            "For",
            "each",
            "singer",
            ",",
            "what",
            "is",
            "the",
            "total",
            "sales",
            "for",
            "their",
            "songs",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "singer",
        "id": 1026,
        "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "singer",
            "WHERE",
            "Singer_ID",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "Singer_ID",
            "FROM",
            "song",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "singer",
            "where",
            "singer_id",
            "not",
            "in",
            "(",
            "select",
            "singer_id",
            "from",
            "song",
            ")"
        ],
        "question": "List the name of singers that do not have any song.",
        "question_toks": [
            "List",
            "the",
            "name",
            "of",
            "singers",
            "that",
            "do",
            "not",
            "have",
            "any",
            "song",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "singer",
        "id": 1027,
        "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "singer",
            "WHERE",
            "Singer_ID",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "Singer_ID",
            "FROM",
            "song",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "singer",
            "where",
            "singer_id",
            "not",
            "in",
            "(",
            "select",
            "singer_id",
            "from",
            "song",
            ")"
        ],
        "question": "What is the name of every singer that does not have any song?",
        "question_toks": [
            "What",
            "is",
            "the",
            "name",
            "of",
            "every",
            "singer",
            "that",
            "does",
            "not",
            "have",
            "any",
            "song",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "singer",
        "id": 1028,
        "query": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
        "query_toks": [
            "SELECT",
            "Citizenship",
            "FROM",
            "singer",
            "WHERE",
            "Birth_Year",
            "<",
            "1945",
            "INTERSECT",
            "SELECT",
            "Citizenship",
            "FROM",
            "singer",
            "WHERE",
            "Birth_Year",
            ">",
            "1955"
        ],
        "query_toks_no_value": [
            "select",
            "citizenship",
            "from",
            "singer",
            "where",
            "birth_year",
            "<",
            "value",
            "intersect",
            "select",
            "citizenship",
            "from",
            "singer",
            "where",
            "birth_year",
            ">",
            "value"
        ],
        "question": "Show the citizenships common to singers born before 1945 and those born after 1955",
        "question_toks": [
            "Show",
            "the",
            "citizenships",
            "common",
            "to",
            "singers",
            "born",
            "before",
            "1945",
            "and",
            "those",
            "born",
            "after",
            "1955"
        ],
        "sql": ""
    },
    {
        "db_id": "singer",
        "id": 1029,
        "query": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
        "query_toks": [
            "SELECT",
            "Citizenship",
            "FROM",
            "singer",
            "WHERE",
            "Birth_Year",
            "<",
            "1945",
            "INTERSECT",
            "SELECT",
            "Citizenship",
            "FROM",
            "singer",
            "WHERE",
            "Birth_Year",
            ">",
            "1955"
        ],
        "query_toks_no_value": [
            "select",
            "citizenship",
            "from",
            "singer",
            "where",
            "birth_year",
            "<",
            "value",
            "intersect",
            "select",
            "citizenship",
            "from",
            "singer",
            "where",
            "birth_year",
            ">",
            "value"
        ],
        "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
        "question_toks": [
            "What",
            "are",
            "the",
            "citizenships",
            "that",
            "are",
            "shared",
            "by",
            "singers",
            "with",
            "a",
            "birth",
            "year",
            "before",
            "1945",
            "and",
            "after",
            "1955",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "real_estate_properties",
        "id": 1030,
        "query": "SELECT count(*) FROM Other_Available_Features",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Other_Available_Features"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "other_available_features"
        ],
        "question": "How many available features are there in total?",
        "question_toks": [
            "How",
            "many",
            "available",
            "features",
            "are",
            "there",
            "in",
            "total",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "real_estate_properties",
        "id": 1031,
        "query": "SELECT feature_type_name FROM ref_feature_types WHERE feature_type_code IN (SELECT feature_type_code FROM other_available_features WHERE feature_name = 'AirCon')",
        "query_toks": [
            "SELECT",
            "feature_type_name",
            "FROM",
            "ref_feature_types",
            "WHERE",
            "feature_type_code",
            "IN",
            "(",
            "SELECT",
            "feature_type_code",
            "FROM",
            "other_available_features",
            "WHERE",
            "feature_name",
            "=",
            "'AirCon",
            "'",
            ")"
        ],
        "query_toks_no_value": [
            "select",
            "feature_type_name",
            "from",
            "ref_feature_types",
            "where",
            "feature_type_code",
            "in",
            "(",
            "select",
            "feature_type_code",
            "from",
            "other_available_features",
            "where",
            "feature_name",
            "=",
            "value",
            ")"
        ],
        "question": "What is the feature type name of feature AirCon?",
        "question_toks": [
            "What",
            "is",
            "the",
            "feature",
            "type",
            "name",
            "of",
            "feature",
            "AirCon",
            "?"
        ],
        "sql": ""
    },
    {
        "db_id": "real_estate_properties",
        "id": 1032,
        "query": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code",
        "query_toks": [
            "SELECT",
            "T2",
            ".",
            "property_type_description",
            "FROM",
            "Properties",
            "AS",
            "T1",
            "JOIN",
            "Ref_Property_Types",
            "AS",
            "T2",
            "ON",
            "T1",
            ".",
            "property_type_code",
            "=",
            "T2",
            ".",
            "property_type_code",
            "GROUP",
            "BY",
            "T1",
            ".",
            "property_type_code"
        ],
        "query_toks_no_value": [
            "select",
            "t2",
            ".",
            "property_type_description",
            "from",
            "properties",
            "as",
            "t1",
            "join",
            "ref_property_types",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "property_type_code",
            "=",
            "t2",
            ".",
            "property_type_code",
            "group",
            "by",
            "t1",
            ".",
            "property_type_code"
        ],
        "question": "Show the property type descriptions of properties belonging to that code.",
        "question_toks": [
            "Show",
            "the",
            "property",
            "type",
            "descriptions",
            "of",
            "properties",
            "belonging",
            "to",
            "that",
            "code",
            "."
        ],
        "sql": ""
    },
    {
        "db_id": "real_estate_properties",
        "id": 1033,
        "query": "SELECT property_name FROM Properties WHERE (property_type_code = 'House' or property_type_code = 'Apartment') AND room_count > 1;",
        "query_toks": [
            "SELECT",
            "property_name",
            "FROM",
            "Properties",
            "WHERE",
            "(",
            "property_type_code",
            "=",
            "'House",
            "'",
            "or",
            "property_type_code",
            "=",
            "'Apartment",
            "'",
            ")",
            "AND",
            "room_count",
            ">",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "property_name",
            "from",
            "properties",
            "where",
            "(",
            "property_type_code",
            "=",
            "value",
            "or",
            "property_type_code",
            "=",
            "value",
            ")",
            "and",
            "room_count",
            ">",
            "value"
        ],
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "properties",
            "that",
            "are",
            "either",
            "houses",
            "or",
            "apartments",
            "with",
            "more",
            "than",
            "1",
            "room",
            "?"
        ],
        "sql": ""
    }
]